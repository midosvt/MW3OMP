#define MAX_PLAYERS 10

#include <open.mp>
#include <Pawn.RakNet>

#define BUSTAIM_MAX_PL_PERCENTAGE           30.0

#define BUSTAIM_PROAIM_TELEPORT_PROBES      1

#define BUSTAIM_RANDOM_AIM_PROBES           3

#define BUSTAIM_MAX_CONTINOUS_SHOTS         10

#define BUSTAIM_MAX_PING                    450

#define BUSTAIM_SKIP_WEAPON_IDS             WEAPON_MINIGUN

#include <BustAim>
#include <weapon-config>
#include <crashdetect>
#include <filemanager>

#define CGEN_MEMORY 60000

#include <YSI_Data\y_bit>
// #include <YSI_Coding\y_hooks>
#include <YSI_Storage\y_ini>
#include <streamer>
#include <sscanf2>
#include <mSelection>
#include <zcmd>
#include <GZ_Shapes>
#include <a_mysql>
#include <maps>
#include <progress2>
#include <mapandreas>
#include <strlib>
#include <cwmaps>
#include <YSI_Data\y_iterate>
#include <anti-troll>
//#include <rwthread>

#define TRYG3D_ENABLE_PLAYER
#define TRYG3D_ENABLE_UNIVERSAL
#include <3DTryg>

#define GetDynamicObjectModel(%0) Streamer_GetIntData(STREAMER_TYPE_OBJECT, %0, E_STREAMER_MODEL_ID)

#define PATH "/MW3/killdata/"

#define PRESSED(%0) \
(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))


new RQOb[MAX_PLAYERS];

new actor;

new LastPickTime[MAX_PLAYERS], LastPickid[MAX_PLAYERS];
new Removeit[MAX_PLAYERS];
new AtStats[MAX_PLAYERS];

new IsABOT[MAX_PLAYERS];

new AttachmentBones[][24] = {
{"Spine"},
{"Head"},
{"Left upper arm"},
{"Right upper arm"},
{"Left hand"},
{"Right hand"},
{"Left thigh"},
{"Right thigh"},
{"Left foot"},
{"Right foot"},
{"Right calf"},
{"Left calf"},
{"Left forearm"},
{"Right forearm"},
{"Left clavicle"},
{"Right clavicle"},
{"Neck"},
{"Jaw"}
};

new
    dlevel[MAX_PLAYERS],
    desynctick[MAX_PLAYERS],
	SPTimer[MAX_PLAYERS],
    bool:inclantd[MAX_PLAYERS];

new timerhack;
new RefreshTimer;

new CBplayer[MAX_PLAYERS];


new playercheckin[MAX_PLAYERS];

new LastDamaged[MAX_PLAYERS];


///

////

//FPS system - credits to JernejL
new pDrunkLevelLast[MAX_PLAYERS],
pFPS[MAX_PLAYERS];

new AnormalDeath[MAX_PLAYERS];
////grenades
#define MAX_GRENADES 400 //Same player slot amount
#define PLAYER_DISTANCE  0.1 //Do not touch unless sure
#define LAUNCH_DISTANCE  20.0 //Do not touch unless sure

enum GrenadeClass
{
	bool:IsValidGrenade,
 	GrenadeID,
    Float:Trajectory,
    Float:StartPointX,
    Float:StartPointY,
    Float:StartPointZ,
    Float:FinalPointX,
    Float:FinalPointY,
    Float:FinalPointZ
}

new
	GrenadeInfo[MAX_GRENADES][GrenadeClass],
	bool:UsingLauncher[MAX_PLAYERS],
	LauncherAmmo[MAX_PLAYERS];


enum ctinf
{
	tbone,
	Float:tx,
	Float:ty,
	Float:tz,
	Float:rtx,
	Float:rty,
	Float:rtz,
	Float:tsx,
	Float:tsy,
	Float:tsz,
}


new
	Toy1Info[MAX_PLAYERS][ctinf],
	Toy2Info[MAX_PLAYERS][ctinf];

//for sniper helmet
#define RELEASED(%0) \
(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
//

///HELICOPTER ROPE
#define chopperid 497
#define chopperid2 487
#define ropelength 100

#define offsetz 40
#define dur 250



new r0pes[MAX_PLAYERS][ropelength], RopeCP[MAX_PLAYERS], ParkDamage[MAX_PLAYERS];

//////

//pubg event ////////


#define MAX_LOOT 900

enum LootData
{
	ObjID,
	ObjType,
	Text3D:ObjIDLabel,
    Float:SpawnX,
    Float:SpawnY,
    Float:SpawnZ
}
new bool:PUBGLaunched, bool:PUBGOpen, PUBGMap;
new Float:PUBGCircleFloat[3];
new Float:MeterPlier;
new Iterator:PUBGIterator<MAX_LOOT>, Iterator:PUBGEvent<MAX_PLAYERS>;
new PUBGLootObj[MAX_LOOT][LootData];
new PUBGCircle, PUBGLaunchTime;

#define 	LOOT_ARMOUR		373
#define 	LOOT_MEDKIT		11736
#define 	LOOT_SNIPER		358
#define 	LOOT_DEAGLE		348
#define 	LOOT_SHOTGUN	349
#define 	LOOT_MP5		353
#define 	LOOT_M4			356
#define 	LOOT_RIFLE		357
#define 	LOOT_GRENADE	342
#define 	LOOT_MOLOTOV	344
#define 	LOOT_SILENCED   347


new Text:PUBGKillTD;
new Text:PubgSafeZoneTD;
new Text:PUBGStaticTD;
new Text:PUBGAliveTD;
new PUBGKillExpiry;



/////////////////////

new marker[MAX_PLAYERS], marked[MAX_PLAYERS];
new pLastVeh[MAX_PLAYERS];

new bool:IsAMine[10000];

new tries[MAX_PLAYERS];
new ttries[MAX_PLAYERS];

//===========================
#define TEAM_EURASIA 1
#define TEAM_ARAB 2
#define TEAM_SOVIET 3
#define TEAM_USA 4
#define TEAM_AUS 5
#define TEAM_FRANCE 6
#define TEAM_CH 7
#define TEAM_ID 8
#define TEAM_NONE 9
#define TEAM_MERC 255
#define MAX_TEAMS 10

#define USA_SKIN
#define EURASIA_SKIN    73
#define ARAB_SKIN    	179
#define SOVIET_SKIN    	285
#define AUS_SKIN    	206
#define FR_SKIN   	 	108
#define CH_SKIN	    	112
#define ID_SKIN    		206


enum teamdata
{
	skinid,
	Color,
	br_TEAM
}

new TEAMDATA[10][teamdata] = {
	{
		294,54},
	{
		73,90},
	{
		179,105},
	{
		285,108},
	{
		287,54},
	{
		206,88},
	{
		206,88},
	{
		112,102},
	{
		206,103},
	{
		108,101}
};


///////Zeppelin system/////////
new BehemethObject[MAX_TEAMS-1], ZeppelinDriver[MAX_TEAMS-1], Missile[MAX_TEAMS-1], BehemethRotating[MAX_TEAMS-1], ZepDialog[MAX_PLAYERS];
new BehemethHp[MAX_TEAMS-1], BehemethDead[MAX_TEAMS-1], HitView[MAX_PLAYERS], InZeppelin[MAX_PLAYERS], LastZPShown[MAX_PLAYERS], ZPShown[MAX_PLAYERS];
new PlayerBar:ZP_CooldownBar[MAX_PLAYERS], PlayerBar:ZP_HPBar[MAX_PLAYERS], ZP_Heat[MAX_TEAMS-1], OnZP_HeatTimer[MAX_TEAMS-1], ZP_Usable[MAX_TEAMS-1], ZP_Available[MAX_TEAMS-1], ZPTimer[MAX_PLAYERS];
new Float:BehemSpawn[][] =
{
	{
		00.00,00.00},
	{
		1107.9678,1882.1527},
	{
		-785.8733,1556.5814},
	{
		-140.9017,1122.8368},
	{
		-246.6528,2682.4331},
	{
		289.8296,2519.8232},
	{
		-1455.8608,2634.9387},
	{
		-712.6968,926.8752},
	{
		1089.2104,2637.3311}
};

////interiors////

enum intdata
{
	nname[36],iddd,Float:xxxx,Float:yyyy, Float:zzzz
}

new INTERIOR[][intdata] = {


{"24/7 1", 17	,-25.884498, -185.868988,1003.546875},
{"24/7 2",	10,	6.091179, -29.271898,1003.549438},
{"24/7 3",	18,	-30.946699, -89.609596,1003.546875},
{"24/7 4",	16,	-25.132598, -139.066986,1003.546875},
{"24/7 5",	4,	-27.312299, -29.277599,1003.557250},
{"24/7 6",	6,	-26.691598, -55.714897,1003.546875},
{"Airport ticket desk",	14,	-1827.147338,7.207417,1061.143554},
{"Airport baggage reclaim",	14,	-1861.936889,54.908092,1061.143554},
{"Shamal"	,1	,1.808619,32.384357,1199.593750},
{"Andromada"	,9,	315.745086,984.969299,1958.919067},
{"Ammunation 1",	1,	286.148986, -40.644397,1001.515625},
{"Ammunation 2",	4,	286.800994, -82.547599,1001.515625},
{"Ammunation 3"	,6	,296.919982, -108.071998,1001.515625},
{"Ammunation 4",	7	,314.820983, -141.431991,999.601562},
{"Ammunation 5",	6,	316.524993, -167.706985,999.593750},
{"Ammunation booths"	,7,	302.292877, -143.139099,1004.062500},
{"Ammunation range",	7,	298.507934, -141.647048,1004.054748},
{"Blastin fools hallway",	3,	1038.531372,0.111030,1001.284484},
{"Budget inn motel room",	12,	444.646911,508.239044,1001.419494},
{"Jefferson motel",	15,	2215.454833, -1147.475585,1025.796875},
{"Off track betting shop",	3,	833.269775,10.588416,1004.179687},
{"Sex shop"	,3	,-103.559165, -24.225606,1000.718750},
{"Meat factory"	,1,	963.418762,2108.292480,1011.030273},
{"Zero's RC shop",	6,	-2240.468505,137.060440,1035.414062},
{"Dillimore gas station"	,0,	663.836242, -575.605407,16.343263},
{"Catigula's basement",	1,	2169.461181,1618.798339,999.976562},
{"FDC Janitors room"	,10	,1889.953369,1017.438293,31.882812},
{"Woozie's office",	1,	-2159.122802,641.517517,1052.381713},
{"Binco"	,15	,207.737991, -109.019996,1005.132812},
{"Didier sachs"	,14,	204.332992, -166.694992,1000.523437},
{"Prolaps",	3,	207.054992, -138.804992,1003.507812},
{"Suburban"	,1,	203.777999, -48.492397,1001.804687},
{"Victim",	5,	226.293991, -7.431529,1002.210937},
{"Zip",	18,	161.391006, -93.159156,1001.804687},
{"Club",	17,	493.390991, -22.722799,1000.679687},
{"Bar",	11,	501.980987, -69.150199,998.757812},
{"Lil 'probe inn",	18,	-227.027999,1401.229980,27.765625},
{"Jay's diner",	4,	457.304748, -88.428497,999.554687},
{"Gant bridge diner",	5,	454.973937, -110.104995,1000.077209},
{"Secret valley diner"	,6,	435.271331, -80.958938,999.554687},
{"World of coq",	1,	452.489990, -18.179698,1001.132812},
{"Welcome pump",	1,	681.557861, -455.680053, -25.609874},
{"Burger shot",	10,	375.962463, -65.816848,1001.507812},
{"Cluckin 'bell",	9,	369.579528, -4.487294,1001.858886},
{"Well stacked pizza",	5,	373.825653, -117.270904,1001.499511},
{"Rusty browns donuts",	17,	381.169189, -188.803024,1000.632812},
{"Denise room",	1,	244.411987,305.032989,999.144437},
{"Katie room",	2,	271.884979,306.631988,999.148437},
{"Helena room",	3,	291.282989,310.031982,999.148437},
{"Michelle room",	4,	302.180999,300.722991,999.148437},
{"Barbara room",	5,	322.197998,302.497985,999.144437},
{"Millie room",	6,	346.870025,309.259033,999.155700},
{"Sherman dam",	17,	-959.564392,1848.576782,9.000000},
{"Planning dept.",	3,	384.808624,173.804992,1008.382812},
{"Area 51",	0,	223.431976,1872.400268,13.734375},
{"LS gym",	5,	772.111999, -3.898649,1000.728820},
{"SF gym",	6,	774.213989, -48.924297,1000.585937},
{"LV gym",	7,	773.579956, -77.096694,1000.655029},
{"B Dup's house",	3,	1527.229980, -11.574499,1002.097106},
{"B Dup's crack pad", 2	,1523.509887, -47.821197,1002.130981},
{"Cj's house",	3,	2496.049804, -1695.238159, 014.742187},
{"Madd Doggs mansion",	5,	1267.663208, -781.323242,1091.906250},
{"Og Loc's house",	3,	513.882507, -11.269994,1001.565307},
{"Ryders house",	2,	2454.717041, -1700.871582,1013.515197},
{"Sweet's house", 1,	2527.654052, -1679.388305,1015.498596},
{"Crack factory",	2,	2543.462646, -1308.379882,1026.728393},
{"Big spread ranch",	3,	1212.019897, -28.663099,1000.953125},
{"Fanny batters",	6,	761.412963,1440.191650,1102.703125},
{"Strip club",	2,	1204.809936, -11.586799,1000.921875},
{"Strip club private room",	2,	1204.809936,13.897239,1000.921875},
{"Unnamed brothel",	3,	942.171997, -16.542755,1000.929687},
{"Tiger skin brothel",	3,	964.106994, -53.205497,1001.124572},
{"Pleasure domes",	3,	-2640.762939,1406.682006,906.460937},
{"Liberty city outside",	1,	-729.276000,503.086944,1371.971801},
{"Liberty city inside",	1,	-794.806396,497.738037,1376.195312},
{"Gang house",	5,	2350.339843, -1181.649902,1027.976562},
{"Colonel Furhberger's",	8,	2807.619873, -1171.899902,1025.570312},
{"Crack den",	5,	318.564971,1118.209960,1083.882812},
{"Warehouse 1",	1,	1412.639892, -1.787510,1000.924377},
{"Warehouse 2",	18,	1302.519897, -1.787510,1001.028259},
{"Sweets garage",	0,	2522.000000, -1673.383911,14.866223},
{"Lil 'probe inn toilet",	18,	-221.059051,1408.984008,27.773437},
{"Unused safe house",	12,	2324.419921, -1145.568359,1050.710083},
{"RC Battlefield",	10,	-975.975708,1060.983032,1345.671875},
{"Barber 1",	2,	411.625976, -21.433298,1001.804687},
{"Barber 2",	3,	418.652984, -82.639793,1001.804687},
{"Barber 3",	12,	412.021972, -52.649898,1001.898437},
{"Tatoo parlor 1",	16,	-204.439987, -26.453998,1002.273437},
{"Tatoo parlor 2",	17,	-204.439987, -8.469599,1002.273437},
{"Tatoo parlor 3",	3,	-204.439987, -43.652496,1002.273437},
{"LS police HQ",	6,	246.783996,63.900199,1003.640625},
{"SF police HQ",	10,	246.375991,109.245994,1003.218750},
{"LV police HQ",	3,	288.745971,169.350997,1007.171875},
{"Car school",	3,	-2029.798339, -106.675910,1035.171875},
{"8-Track",	7,	-1398.065307, -217.028900,1051.115844},
{"Bloodbowl",	15,	-1398.103515,937.631164,1036.479125},
{"Dirt track",	4,	-1444.645507, -664.526000,1053.572998},
{"Kickstart",	14,	-1465.268676,1557.868286,1052.531250},
{"Vice stadium",	1,	-1401.829956,107.051300,1032.273437},
{"SF Garage",	0,	-1790.378295,1436.949829,7.187500},
{"LS Garage",	0,	1643.839843, -1514.819580,13.566620},
{"SF Bomb shop",	0,	-1685.636474,1035.476196,45.210937},
{"Blueberry warehouse",	0,	76.632553, -301.156829,1.578125},
{"LV Warehouse 1",	0,	1059.895996,2081.685791,10.820312},
{"LV Warehouse 2 (hidden part)",	0,	1059.180175,2148.938720,10.820312},
{"Catigula's hidden room"	,1,	2131.507812,1600.818481,1008.359375},
{"Bank",	0	,2315.952880, -1.618174,26.742187},
{"Bank (behind desk)",	0,	2319.714843, -14.838361,26.749565},
{"LS Atruim",	18,	1710.433715, -1669.379272,20.225049},
{"Bike School",	3,	1494.325195,1304.942871,1093.289062}

};

///////////ANTI BASE RAPE/////////

enum basarp
{
	Float:MinXX,Float:MinYY,Float:MaxXX, Float:MaxYY,
	br_TEAM
}

new BASERAPE[9][basarp] = {
	{
		-9999.9999,-9999.9999,-9999.9999,-9999.9999,TEAM_USA},
	{
		994.1957, 1817.512, 1185.533, 2049.596,TEAM_EURASIA},
	{
		-875.8406, 1389.667, -607.2495, 1623.225,TEAM_ARAB},
	{
		-309.375,1024.21875,103.125,1211.71875,TEAM_SOVIET},
	{
		-353.515625,2574.21875,-113.28125,2796.875,TEAM_USA},
	{
		89.0625000000005,2418.75,466.40625,2617.96875,TEAM_AUS},
	{
		-1658.203125, 2519.53125, -1341.796875, 2759.765625,TEAM_FRANCE},
	{
		-769.520507, 808.620483, -633.520507, 1056.620483,TEAM_CH},
	{
		929.864990, 2536.129150, 1241.864990, 2720.129150,TEAM_ID}
};
////////////////////////////////

new chattick[MAX_PLAYERS];


//ci TDs

new PlayerBar:CRBar[MAX_PLAYERS], PlayerText:CR_PREVR[MAX_PLAYERS], PlayerText:CR_NEXTR[MAX_PLAYERS], PlayerText:CRName[MAX_PLAYERS];
new Text:CR_MG, Text:CR_LE[3], Text:CR_MGE[2], Text:CR_LEM[4], Text:CR_S, Text:CR_SM, Text:CR_GE[4];
new PlayerText:ClanName[MAX_PLAYERS];
new PlayerText:ClanLine1[MAX_PLAYERS];
new PlayerText:ClanLine2[MAX_PLAYERS];
new Text:ClanBar1;
new Text:ClanTitle1;
new Text:ClanTitle2;
new Text:ClanBar2;
new PlayerText:ClanOwners[MAX_PLAYERS];
new PlayerText:ClanCoOwners[MAX_PLAYERS];
new PlayerText:ClanLeaders[MAX_PLAYERS];
new PlayerText:ClanSlogan[MAX_PLAYERS];

//stats TDs
new Text:StatsBox;
new Text:StatsBoxLine;
new Text:StatsBoxL2;
new PlayerText:StatsPart1Titles[MAX_PLAYERS];
new PlayerText:StatsPart2Titles[MAX_PLAYERS];
new PlayerText:StatsPart1[MAX_PLAYERS];
new PlayerText:StatsPart2[MAX_PLAYERS];
new PlayerText:StatsName[MAX_PLAYERS];
new PlayerText:StatsWarning[MAX_PLAYERS];

new StatsPage[MAX_PLAYERS], StatsTarget[MAX_PLAYERS];

new Text:StatsArrowLeft;
new Text:StatsArrowRight;
new Text:StatsExitButton;
///

new Text:CapturedTD;

//sponsor GA
new SponsorGAOn;
new Iterator:Lottery<MAX_PLAYERS>;
new Text:sponsorgatd;

//Quests TDs
new Text:QuestTitle;
new Text:Quest[5];

//License revoked TD
new Text:Revoked_License[2];

//vipshop

new Text:VipShop[9];
new PlayerText:PVipShop[MAX_PLAYERS][8];

#define VS_BOX 				0
#define VS_TITLE			1
#define VS_EXIT				2
#define VS_BALANCETEXT		3
#define VS_BALANCEDOLLAR	4
#define VS_ADDFUNDS  		5
#define VS_SHOPTITLE  		6
#define VS_SHOPBOX			7
#define VS_SHOPHEADER		8

#define VS_BALANCE			0
#define VS_PROMOTEXT		1
#define VS_PROMOCODE		2
#define VS_SCORE          	7
#define VS_VIPLEVEL			3
#define VS_XP				4
#define VS_KILLS			5
#define VS_DEATHS			6

//


///COMMAND CENTER///
new CMDCP[MAX_TEAMS];
new ExitCP, UnderCP, UpCP, SUnderCP, SUpCP;
new CMDPickup;
new CMDPickuptick[MAX_PLAYERS];
new CMDBaseDeftick[MAX_TEAMS];
new pairwaittimer;
new aircraft;
new bool:airused;
new airvehdriver;
new testbomb;
new explodetimer;
new explodetolerance;
new bool:explodewait;
new Text:CMD0;
new Text:CMD1;
new Text:CMD2;
new Text:CMD3;
new Text:CMD4;
new Text:CMD5;
new Text:CMD6;
new Text:CMD7;
new Text:CMD8;
new Text:CMD9;
new aircount;
/////

new AlreadyKicked[MAX_PLAYERS];

//anti cbug//

new NotMoving[MAX_PLAYERS];
new CheckCrouch[MAX_PLAYERS];
new Ammo[MAX_PLAYERS];

//////////////////////

new LastSkin[MAX_PLAYERS],
LastTeam[MAX_PLAYERS],
LastTeamD[MAX_PLAYERS];


new FreeRemoval[MAX_PLAYERS];

new hidden[MAX_PLAYERS];
new ready[MAX_PLAYERS];

new bool:suiciderprotect[MAX_PLAYERS];
new C4Planted[MAX_PLAYERS];

//undo bans
new undo[MAX_PLAYERS][5][24];

//pms
new pms[MAX_PLAYERS][5][144];
new Iterator:BLOCKED[MAX_PLAYERS]<MAX_PLAYERS>;

// ANTI FAKE KILLS //
#define         FAKEKILL_DELAY            10000
#define         FAKEKILL_LIMIT            4

enum FAKEKILLINFO
{
	DeathCount,
	LastDeathTime,
}


static FakekillData[MAX_PLAYERS][FAKEKILLINFO];
/////////////////////

new MOTW; // Mother of the world


//// CLAN BASE STRIKE

new AirstrikeP;
new strikingplayer;
new StrikeWait;
new Float:strikex, Float:strikey;
new bool:StrikeCooled;

new VehicleBomber[MAX_VEHICLES];
new VehicleBombTimer[MAX_PLAYERS];

//sellers
new seller,seller2,seller3,seller4, seller5, seller6, seller7;

///

///kills textdraws
new Text:KillBOX1;
new Text:KillBOX2;
new PlayerText:HSTD[MAX_PLAYERS];
new KillTDTick[MAX_PLAYERS];
new bool:KillTDShow[MAX_PLAYERS];
/////////////

///////////HOSTAGES VEHICLES//////////

//textdrawstoggle
new bool:tournamentshown[MAX_PLAYERS];

//flashbang
new WhiteLevel[MAX_PLAYERS];
new PlayerText:FlashTD[MAX_PLAYERS];//flash textdraw

new issync[MAX_PLAYERS];

//suicide anim
new BitArray:Suicided<MAX_PLAYERS>;
//st
new bool:sttt[MAX_PLAYERS];
new bool:sccc[MAX_PLAYERS];

new Text:CTSpectatorT;
new Text:CTSpectatorI;
new Text:CTSpectatorB;
new Text:CTSpectatorTwitch;
new Text:CTSpectatorIg;
new Text:Warmup0,Text:Warmup1,Text:Warmup2;
new Text:WC[7],Text:CW[13],Text:onconnect[11], Text:TDEditor_PTD[22];
new Text:MVP_BoxTitle, Text:MVP_Box2, Text:MVP_Picture, Text:MVP_Description;

new Text:SpecPanel_TD[23];
new Text:AdminCMD_TD[4];
new AdminCMD_STR[4][128];
new PlayerText:SpecPanel_PTD[MAX_PLAYERS][3];
new PlayerText:TUT[MAX_PLAYERS][3];
new PlayerText:Guit[MAX_PLAYERS][3];
new Text:BoxDraw[5];
new BoxDrawStr[5][128];
new Text:BoxDraw0;
new Text:BoxDraw1;
new bombtimerz[MAX_PLAYERS];
new bomb[MAX_PLAYERS];
new toxicbomb[MAX_PLAYERS];
new bool:toxicdead[MAX_PLAYERS];
new toxicvar[MAX_PLAYERS];
new toxicbombtimerz[MAX_PLAYERS];
new toxicbombdeploytimer[MAX_PLAYERS];
new toxicsmoke[MAX_PLAYERS][17];
new Text:ServerWeb;
new pLastUpdate[MAX_PLAYERS];
new bool:InDrone[MAX_PLAYERS];
new Drones[MAX_PLAYERS];
new bool:UsedBAS[MAX_PLAYERS];

new Text:DM_Top[4];
new Text:DSDM_Top[4];
new Text:CBDM_Top[4];

#define SpamLimit (3000)


#define GMT_H 0
#define GMT_M 0


///space
new IsPlayerInSpace[MAX_PLAYERS];

///ACHIEVEMENTS///
new achtarget[MAX_PLAYERS];
new achtdpos[MAX_PLAYERS];
new achtitlee[MAX_PLAYERS][50];
new achtexte[MAX_PLAYERS][50];
new achtype[MAX_PLAYERS][14];

new PlayerText:logotd[MAX_PLAYERS];

enum KillsData
{
	fist,
	m9,
	sm9,
	ak47,
	m4,
	rpg,
	satchel,
	grenade,
	knife,
	chainsaw,
	molotov,
	deagle,
	shotgun,
	sawnoff,
	combat,
	smg,
	tec9,
	mp5,
	rifle,
	sniper
};
new PlayerKills[MAX_PLAYERS][KillsData];
new PlayerText:achbox[MAX_PLAYERS];
new PlayerText:achtitle[MAX_PLAYERS];
new PlayerText:achtext[MAX_PLAYERS];

#define CMEMBERSDIALOGR 			1346
#define DIALOGID3 					1337
#define WEAPONSHOP2 				1335
#define BACHIEVEMENT    			1569
#define SACHIEVEMENT    			1570
#define GACHIEVEMENT    			1571
#define APROGRESS      				1564
#define AWEAPON      				1565
#define BWEAPONSA      				1566
#define SWEAPONSA      				1567
#define GWEAPONSA      				1568
#define GWEAPONSAINFO   			1572
#define SWEAPONSAINFO   			1573
#define BWEAPONSAINFO   			1574
#define BMISSIONSA  				1575
#define SMISSIONSA     				1576
#define GMISSIONSA     				1577
#define GMISSIONSAINFO  			1578
#define SMISSIONSAINFO  			1579
#define BMISSIONSAINFO  			1580
#define BSTATSSA  					1581
#define SSTATSSA     				1582
#define GSTATSSA     				1583
#define GSTATSAINFO   				1584
#define SSTATSAINFO   				1585
#define BSTATSAINFO   				1586
#define CRANKSDIALOG    			1587
#define CMDCENTER_DIALOG            1588
#define PERK_DIALOG					1589
#define DIALOG_CPERKS				1590
#define STRIKE_DIALOG	  			1591
#define ADDM_DIALOG	  				1592
#define SUICIDER_UNLOCK_DIALOG	  	1593
#define SUICIDER_DIALOG	  			1594
#define SNIPER_UNLOCK_DIALOG	  	1595
#define SNIPER_DIALOG	  			1596
#define ASSAULT_UNLOCK_DIALOG	  	1597
#define ASSAULT_DIALOG	  			1598
#define DEMOLISHER_UNLOCK_DIALOG	1599
#define DEMOLISHER_DIALOG	  		1600
#define MEDIC_UNLOCK_DIALOG			1601
#define MEDIC_DIALOG	  			1602
#define PILOT_UNLOCK_DIALOG			1603
#define PILOT_DIALOG	  			1604
#define JET_UNLOCK_DIALOG			1605
#define JET_DIALOG	  				1606
#define ENGINEER_UNLOCK_DIALOG		1607
#define ENGINEER_DIALOG	  			1608
#define SP_UNLOCK_DIALOG			1609
#define SP_DIALOG	  				1610
#define SPY_UNLOCK_DIALOG			1611
#define SPY_DIALOG	  				1612
#define SCOUT_UNLOCK_DIALOG			1613
#define SCOUT_DIALOG	  			1614
#define BOMBER_UNLOCK_DIALOG		1615
#define BOMBER_DIALOG	  			1616
#define RIFLEMAN_UNLOCK_DIALOG		1617
#define RIFLEMAN_DIALOG	  			1618
#define RECON_UNLOCK_DIALOG			1619
#define RECON_DIALOG	  			1620
#define VIP_DIALOG	  				1621
#define TOGGLE_DIALOG	  			1622
#define PAUSED_DIALOG               1623
#define BANUNDO_DIALOG              1624
#define CMDBASEDEF_DIALOG           1625
#define DESYNCED_DIALOG           	1626
#define MAKECT_DIALOG           	1627
#define MAKECT2_DIALOG           	1628
#define MAKECT3_DIALOG           	1629
#define MAKECT4_DIALOG           	1630
#define MAKECT5_DIALOG           	1631
#define MAKECT6_DIALOG           	1632
#define MAKECT7_DIALOG           	1633
#define VIPSHOP_DIALOG              1634
#define DIALOG_ASETTINGS            1635
#define DIALOG_AKA                  1636
#define DIALOG_NAMEREQUESTS         1637
#define DIALOG_NAMEREQUESTSTWO      1638
#define DIALOG_CMEMBERSSTATS        1639
#define CLANSLIST_DIALOG            1640
#define LOCATOR_DIALOG            	1641
#define FINDZONE_DIALOG            	1642
#define DIALOG_FRIENDS            	1643
#define DIALOG_FRIEND            	1644
#define DIALOG_FRIENDSTATS          1645
#define DIALOG_TOYS          		1646
#define DIALOG_ATTACH_BONE_SELECTION    1647
#define DIALOG_TOYS2          		1648
#define FLASH_DIALOG          		1649
#define BASEJUMP_DIALOG             1650
#define INTERIORS_DIALOG            1651
#define ZEPPELIN_DIALOG            	1652
#define DIALOG_CLANLOG            	1653
#define NUKE2_DIALOG            	1654
#define CHELP1_DIALOG               1655
#define CHELP2_DIALOG               1656


#define Assault 					0
#define PILOT 						1
#define SNIPER						2
#define MEDIC 						3
#define ENGINEER 					4
#define JET 						5
#define SP 							6
#define SCOUT 						7
#define DONOR 						8
#define AG 							9
#define DEMOLISHER 					10
#define SUICIDER 					11
#define RIFLEMAN 					12
#define MERC 						13
#define BOMBER 						14
#define RECON 						15
#define SPOTTER 					16

#define A_SUICIDER 					0
#define A_ASSAULT 					1
#define A_SNIPER 					2
#define A_ENGINEER 					3
#define A_SP	 					4
#define A_JET 						5
#define A_DEMOLISHER 				6
#define A_MEDIC		 				7
#define A_PILOT		 				8
#define A_SPY		 				9
#define A_SCOUT		 				9
#define A_BOMBER		 			10
#define A_RIFLEMAN		 			11
#define A_RECON			 			12


#define AssaultXP       1750
#define PILOTXP         3000
#define SNIPERXP        3000
#define MEDICXP         3250
#define ENGINEERXP      4000
#define JETXP           5000
#define SPXP            5500
#define SCOUTXP         2500
#define SPYXP           5000
#define DEMOLISHERXP    3500
#define SUICIDERXP      2250
#define RIFLEMANXP      6500
#define BOMBERXP        12000
#define RECONXP         7000


new BitArray:ClassUpgrade[MAX_PLAYERS]<20>;
new ClassUpgradeDB[MAX_PLAYERS][21];

new Prest[MAX_PLAYERS][3];
new PrestDB[MAX_PLAYERS][4];

new BitArray:QuestDone[MAX_PLAYERS]<5>;
new QuestDoneDB[MAX_PLAYERS][6];

new BitArray:ToggleState[MAX_PLAYERS]<9>;
new ToggleStateDB[MAX_PLAYERS][10];

#define TOGGLE_TEXTDRAWS    0
#define TOGGLE_DND    		1
#define TOGGLE_ANTISK    	2
#define TOGGLE_CLANTAG    	3
#define TOGGLE_VIPMSG    	5
#define TOGGLE_CMDTDS    	6
#define TOGGLE_SPECTDS    	7
#define TOGGLE_ACNOT    	8

#define MAX_QUESTS 		5
new QuestContent[MAX_QUESTS];
new QuestProgress[MAX_PLAYERS][MAX_QUESTS];

			//zone related quests

#define CONTENT_ZCAPTURE    0   //zone capture quest
#define CONTENT_ZASSIST     1 	//zone assist quest
#define CONTENT_ZPREVENT	2 	//kill enemies capturing zones
#define CONTENT_ZSPREE		3 	//make  zone capture sprees

			//kills quests

#define CONTENT_HEADSHOT	0 	//make headshots
#define CONTENT_KASSIST		1 	//make kill assists
#define CONTENT_M4KILLS		2 	//make M4 kills
#define CONTENT_SPAZKILLS	3 	//make SPAZ kills
#define CONTENT_BASEKILL	4 	//kill enemies inside their bases
#define CONTENT_VKILL		5 	//kill enemies that are using vehicles
#define CONTENT_HVKILL		6 	//kill enemies that are using heavy vehicles

			//misc quests

#define CONTENT_BACKSTAB	0 	//backstab enemies to death
#define CONTENT_DETONATE	1 	//detonate enemies
#define CONTENT_HEAL		2 	//heal teammates
#define CONTENT_ASSAULT		3 	//kill enemies as an assault
#define CONTENT_TOXIC		4 	//kill enemies with toxic plane bombs
#define CONTENT_RBOMBS		5 	//kill enemies with rustler bombs
#define CONTENT_FBANG		6 	//flash enemies as scout (with flashbang)

			//vip quests

#define CONTENT_RACS		0 	//kill enemies with racs
#define CONTENT_AAML		1 	//kill enemies with aaml
#define CONTENT_DBOOST		2 	// /dboost teammates
#define CONTENT_KVIPS		3 	// kill other vips
#define CONTENT_KVEHICLES	4 	// destroy enemy vehicles

			//clan quests

#define CONTENT_A51PROTECT	0 	//protect area 51 for x times
#define CONTENT_ZCLANASSIST	1 	//capture assist with a clan member
#define CONTENT_CWWIN		2 	// win x clan wars
#define CONTENT_CWJOIN		3 	// participate in x clan wars
#define CONTENT_CHEAL		4 	//heal clan mates



#define TEST	0
#define CC		1
#define DF		2
#define AN		3
#define CH		4
#define MD		5
#define GS		6
#define FS		7
#define JS		8
#define SNAKE   9
#define BAY     10
#define BIG     11
#define ARMY    12
#define PETROL  13
#define OIL     14
#define QUARRY  15
#define GUEST   16
#define EAR     17
#define HOS     18
#define CMP     19
#define BRD     20
#define LVA     21
#define MT      22
#define PH      23
#define CARGO   24
#define SFPD    25
#define BST     26
#define CRAFT   27
#define SFDOCK  28
#define FSL     29
#define AO     	30
#define A52     31
#define OPP     	32
#define SPS     	33
#define MAX_ZONES   34

#define BASE    34
#define CLANBASE	35


new PlayerBar:ZBar[MAX_PLAYERS];

new tCP[MAX_ZONES];
new bool:UnderAttack[MAX_ZONES char ];
new CP[MAX_ZONES];
new Zone[MAX_ZONES];
new CountVar[MAX_ZONES];
new ZUpdateTimer[MAX_ZONES];
new bool:IsPlayerCapturing[MAX_PLAYERS][MAX_ZONES char ];
new bool:IsPlayerHelping[MAX_PLAYERS][MAX_ZONES char ];
new AttackingTeam[MAX_ZONES];
new PlayerText:WARN[MAX_PLAYERS][3];
new ZonesSpree[MAX_PLAYERS];
new ZonesASpree[MAX_PLAYERS];
new bool:IsPlayerUsingAnims[MAX_PLAYERS];
new SpawnP[MAX_PLAYERS];
new Text:C_AD[2];
new Text:Capture_PTD[MAX_ZONES]; // TD for capture bar


new Float:ZonesGangCoords[][] =
{
	{648.395, 1825.354, 813.130, 1998.494},
	{770.357910, 1575.174072, 834.357910, 1743.174072},
	{560.838073, 1125.128051, 744.838073, 1349.128051},
	{-371.754180, 757.412902, -267.754180, 885.412902},
	{-136.018829, -67.458274, -8.018821, 116.541725},
	{-1237.963, 1790.028, -1167.963, 1832.028},
	{-1507.938, 1831.366, -1427.672, 1879.632},
	{-1391.073, 2039.043, -1335.073, 2081.043},
	{-1961.164, 2309.425, -1877.164, 2407.425},
	{-62.5000000000005,2318.359375,23.4375,2390.625},
	{236.328125,2892.578125,292.96875,2943.359375},
	{-46.875,1697.265625,423.828125,2115.234375},
	{-617.1875,2531.25,-455.078125,2658.203125},
	{609.375,1652.34375,714.84375,1767.578125},
	{95.703125,1339.84375,287.109375,1484.375},
	{426.571, 735.814, 618.571, 1015.814},
	{-357.421875,1707.03125,-253.90625,1835.9375},
	{-437.5,1513.671875,-244.140625,1636.71875},
	{966.796875, 960.9375, 1177.734375, 1160.15625},
	{421.875, 2185.546875, 580.078125, 2314.453125},
	{-1253.90625, 2666.015625, -849.609375, 2771.484375},
	{1259.00, 1157.5, 1625.00, 1881.5},
	{-128.00, 1852.5, -91.00, 1898.5},
	{1031.00, 2900.5, 1075.00, 2926.5},
	{-2527.00, 1514.5, -2295.00, 1579.5},
	{-1654.00, 644.5, -1569.00, 687.5},
	{1299.00, 2102.5, 1399.00, 2202.5},
	{-1470.00, 457.5, -1241.00, 519.5},
	{-1754.00, 110.5, -1714.00, 235.5},
	{2114.00, -140.5, 2206.00, -26.5},
	{-513.384765, 544.048278, -377.384765, 664.048278},
	{-2649.850, 2190.971, -2159.175, 2486.162},
	{ -2273.811, 1837.958, -2133.774, 1964.284},
	{-886.854, 2266.387, -718.854, 2448.387}
};

new Float:ZonesCapturePos[][] =
{
	{714.1596,1945.0562,5.5391},
	{810.6647,1686.4254,5.2870},
	{596.1786,1219.5504,11.7188},
	{-62.2938,44.9431,3.1103},
	{-320.0384,833.6661,17.5454},
	{-1211.6091,1823.3260,41.7188},
	{-1454.0922,1865.7408,32.6328},
	{-1353.7487,2063.4683,52.7001},
	{-1934.6680,2402.7380,49.4922},
	{-16.1509,2329.5574,24.1406},
	{258.2060,2881.1865,13.4840},
	{254.1981,1802.2262,7.4141},
	{-513.2162,2549.4568,53.4141},
	{641.5707,1704.8296,6.9922},
	{256.2609,1359.7385,10.7075},
	{588.3246,875.7402,-42.4973},
	{-321.2981,1745.5908,42.8691},
	{-324.0383,1532.1846,75.3594},
	{1017.5776,1053.8959,11.00},
	{-886.9355,2698.0396,42.3865},
	{491.2700,2238.2927,34.2018},
	{1617.8091,1171.5394,14.2188},
	{-111.00,1861.50,17.80},
	{1048.60,2909.30,47.80},
	{-2475.10,1547.50,33.20},
	{-1616.10,685.80,7.20},
	{1360.80,2196.10,9.80},
	{-1348.00,494.30,18.20},
	{-1733.80,190.80,3.60},
	{2162.40,-103.10,2.80},
	{-440.94,612.47,16.72},
	{-2571.8511,2471.7515,6.4761},
	{-2196.3289,1920.9115,2.9637},
	{-789.9104,2407.2756,156.8770}
};
#define ClearChat(%0) for(new i=0; i<20; i++) SendClientMessage(%0, -1, "")
//======================================

//------Classes and class dialogs----

#define CLASS_DIALOG 1559
#define DMUSICD 1558
#define TOPCLANSDIALOG  1561
#define TOPCLANSRESULTS 1560

//-----------------------------------

#define TEAM_ZONE_EURASIA_COLOR 0x15FF0055 // Green
#define TEAM_ZONE_ARAB_COLOR 0xFFAF0255// Orange
#define TEAM_ZONE_SOVIET_COLOR 0xFF000055 //Red
#define TEAM_ZONE_USA_COLOR 0x0080FF55 //Bright Blue
#define TEAM_ZONE_AUS_COLOR 0x69006955 //purple color
#define TEAM_ZONE_CH_COLOR 0x03FCFC55 // cyan
#define TEAM_ZONE_ID_COLOR 0x00804088 // dgreen
#define TEAM_ZONE_FR_COLOR 0x923E3488 // brown

#define TEAM_EURASIA_COLOR 0x6AFF6AFF // Bright Green
#define TEAM_ARAB_COLOR 0xFF8000FF// Orange
#define TEAM_SOVIET_COLOR 0xF93939FF //Bright Red
#define TEAM_USA_COLOR 0x0080FFFF //Bright Blue
#define TEAM_AUS_COLOR 0x9B37FFFF //purple color
#define TEAM_CH_COLOR 0x03FCFCFF // cyan
#define TEAM_ID_COLOR 0x008040FF // dgreen
#define TEAM_FR_COLOR 0x923E34FF // brown

#define COLOR_GREEN      		0x80FF8096
#define COLOR_ROYAL        		0x00C1F6AA
#define COLOR_BROWN	       		0xA52A2AAA
#define COLOR_PURPLE       		0xC2A2DAAA
#define COLOR_ORANGE       		0xFF9900AA
#define lightblue          		0x33CCFFAA
#define Lg                      0x93FC03FF
#define Lr                      0xFF8080FF
#define Lb                      0x9B9BFFFF
#define cb                      0x07DABAFF

#define Dred 0xE64242FF // dark red

#define cred 				  	"{E10000}"
#define corange					"{FF7E19}"
#define cyellow 				"{FFFF00}"
#define cblue					"{0087FF}"
#define cwhite 					"{FFFFFF}"
#define cgreen 					"{00FF28}"
#define cgrey                   "{969696}"
#define	clightgreen				"{93FC03}"



//==============================================================================


#if !defined isnull
#define isnull(%1) \
((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))
#endif

new bool:AntiSK[MAX_PLAYERS];
new rconAttempts[MAX_PLAYERS];
new BD[MAX_PLAYERS];
new LastPm[MAX_PLAYERS];
new FirstSpawn[MAX_PLAYERS];
new Spectating[MAX_PLAYERS];
new
Float:LastHP[MAX_PLAYERS],
Float:LastAR[MAX_PLAYERS],
LasInterior[MAX_PLAYERS],
LastWorld[MAX_PLAYERS],
LastSpree[MAX_PLAYERS],
Float:LastPos[3][MAX_PLAYERS],
Float:LastAng[MAX_PLAYERS];
//==========RANDOM SPAWNS=========================//

new Float:CHDMS[][] =
{
	{
		2221.2498,-1149.0227,1025.7969},
	{
		2236.5303,-1170.8008,1029.7969},
	{
		2243.8428,-1192.1655,1029.7969},
	{
		2226.1921,-1184.8146,1029.7969},
	{
		2190.6167,-1186.6355,1029.7969},
	{
		2187.9390,-1188.7855,1033.7969}
};

new Float:DMS[][] =
{
	{
		-1492.0597,955.3914,1036.9495},
	{
		-1464.2633,1053.3698,1038.5277},
	{
		-1311.1688,1044.5231,1038.1208},
	{
		-1299.8271,952.9547,1036.5686},
	{
		-1447.0082,1000.2719,1024.2705},
	{
		-1351.5753,997.4525,1024.0586}
};

new Float:HSDMS[][] =
{
	{
		958.4838,2097.0078,1011.0224},
	{
		949.7888,2144.0720,1011.0201},
	{
		964.0320,2165.4856,1011.0234},
	{
		959.7410,2144.3481,1011.0199}
};

new Float:SDMS[][] =
{
	{
		218.1705,184.9916,1003.0313},
	{
		201.7646,166.4917,1003.0234},
	{
		243.6744,152.8713,1003.0234},
	{
		252.4241,186.0007,1008.1719},
	{
		299.9133,184.0139,1007.1719}
};

new Float:CBDMS[][] =
{
	{
		1306.4917,-65.2165,1002.4922},
	{
		1251.2914,-56.5329,1002.4986},
	{
		1272.9056,-18.8975,1001.0251},
	{
		1251.3837,5.0346,1001.0346},
	{
		1294.9594,6.5483,1001.0099},
	{
		1250.9060,5.8318,1008.2578}
};
new Float:MGDMS[] [] =
{
	{
		2551.0447,-1293.8237,1060.9844},
	{
		2581.5850,-1285.3003,1065.3594},
	{
		2554.4956,-1284.7264,1054.6470},
	{
		2555.5291,-1302.9034,1054.6406},
	{
		2540.7366,-1285.4308,1054.6406},
	{
		2526.5466,-1281.3428,1048.2891},
	{
		2537.9890,-1304.2178,1044.1250},
	{
		2574.3472,-1284.9907,1037.7734}
};

new Float:EurasiaSpawn[][] =
{
	{
		1052.1743,1913.3864,10.8203,328.1048},
	{
		1108.9393,1861.6335,10.8203,359.1013},
	{
		1054.0562,1879.6479,10.8203,268.8605}
};
new Float:ArabSpawn[][] =
{
	{
		-770.7832,1524.4302,27.1007,2.8409},
	{
		-824.7167,1536.8912,26.7870,290.7526},
	//{-793.9771,1586.0035,27.0828,181.7325},
	{
		-822.1140,1601.9276,27.1172,131.6614},
	{
		-867.1073,1558.4965,24.1610,284.0055},
	{
		-805.6688,1485.8700,20.9729,7.1024}
};
new Float:FranceSpawn[][] = {
	{
		-1389.9576,2630.9106,55.9844,81.1783},
	{
		-1479.3610,2651.1326,55.8359,268.7018},
	{
		-1491.1426,2680.9512,55.8359,178.9858}
};
new Float:RussiaSpawn[][] =
{
	{
		-130.9785,1129.7480,19.7422,354.5074},
	{
		-89.6131,1147.5472,19.7500,104.9481},
	{
		-98.3141,1181.9874,19.7500,170.5580},
	{
		-156.7959,1175.8877,19.7422,52.7462},
	{
		-219.6059,1126.0405,19.7422,271.1417},
	{
		-189.2355,1076.7665,19.5955,265.4599},
	{
		-172.5839,1040.4873,19.4859,58.4282},
	{
		-211.3056,1056.1880,19.7664,265.7289},
	{
		-119.3910,1081.6873,19.7717,8.3570},
	{
		-78.5424,1088.6832,19.7500,93.2293}
};
new Float:AusSpawn[][] =
{
	{
		405.4855,2457.2576,16.5000},
	{
		398.6086,2535.0171,16.5445},
	{
		392.5057,2536.8564,16.5430,172.0514}
};
new Float:USSpawn[][] =
{
	{
		-245.9235,2650.1875,62.7802,184.7063},
	{
		-221.7444,2717.2817,63.5206,247.3736},
	{
		-270.9534,2708.8101,62.6875,186.9724},
	{
		-273.6297,2685.4231,62.6875,91.6455},
	{
		-283.5231,2601.3906,62.8582,359.5480},
	{
		-222.1941,2670.1277,62.6016,358.9214},
	{
		-209.1601,2767.3115,62.4836,172.6549},
	{
		-221.3829,2730.3313,62.7020,179.7167},
	{
		-209.1601,2767.3115,62.4836,172.6549}
};
new Float:CHspawn[][] = {
	{
		-700.0863,979.5864,12.3564,179.3200},
	{
		-699.7179,929.0690,12.3188,74.6658},
	{
		-741.4819,957.6347,12.6621,266.7408}
};
new Float:IDspawn[][] = {
	{
		1027.7058,2596.7996,10.8203,334.6729},
	{
		1015.5471,2682.2048,10.8125,180.5990},
	{
		1066.2465,2571.1521,10.8203,353.1439},
	{
		1038.3450,2572.5461,10.8203,277.0032}
};

new legalmods[48][22] = {
	{
		400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
	{
		404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{
		491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
	{
		492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
	{
		500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{
		517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
	{
		518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
	{
		527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
	{
		534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
	{
		535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
	{
		536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
	{
		542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
	{
		547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
	{
		550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
	{
		551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
	{
		559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
	{
		560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
	{
		561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
	{
		562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
	{
		565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
	{
		567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
	{
		600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{
		603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

//================================================//

//-----------------------------------------------------------------------------------//
//--------
//#define USE_MENUS       	// Comment to remove all menus.  Uncomment to enable menus
#define SAVE_LOGS           // Comment if your server runs linux (logs wont be saved)
#define ENABLE_SPEC         // Comment if you are using a spectate system already
#define USE_STATS
#define ANTI_MINIGUN
//#define HIDE_ADMINS 		// Displays number of admins online instead of level and names
#define ENABLE_FAKE_CMDS   	// Comment to disable /fakechat, /fakedeath, /fakecmd commanads

//-----------------------------------------------------------------------------------//
//===================================Admins Colors=========================================//
#define Color_Server_Owner          0xF60000FF  //Level 6
#define Color_Global_Admin          0xF66E00FF  //Level 5
#define Color_Lead_Admin            0x0000F6FF  //Level 4
#define Color_Senior_Admin          0xF6F600FF  //Level 3
#define Color_Server_Admin          0xF600ABFF  //Level 2
#define Color_Trial_Admin           0x00F6F6FF  //Level 1
#define Color_Helper             0xB5A5F6FF  //Mode
#define Color_RCON_Administrator  	0xF60000FF  //Rcon Admin
//=============================================================================================//
#define MAX_WARNINGS 3      // /warn command

#define MAX_REPORTS 7
#define MAX_CHAT_LINES 7

#define MAX_ASAY 30

#define SPAM_MAX_MSGS 4
#define SPAM_TIMELIMIT 4 // SECONDS

#define MAX_FAIL_LOGINS 3
// Admin Area
new AdminArea[6] = {
	377, 	// X
	170, 	// Y
	1008, 	// Z
	90,     // Angle
	3,      // Interior
	0		// Virtual World
};

//Helper
new Bombb[MAX_PLAYERS], Float:Bombf[MAX_PLAYERS][3];
new Planted[MAX_PLAYERS];
//Anti_warn
new Anti_Warn[2][MAX_PLAYERS];
new Dkits[MAX_PLAYERS];
//Event system
new Text:Event_Menu[12];
new Text:TDM_Menu[22];
new Text:DM_Menu[22];
new Text:RC_Menu[22];
new event;
new TeamName[2][125];
new WEAPON:teamweap[2][3];
new teamskin[2];
new teamcolor[2];
new reward[2];
new dmskin[3];
new WEAPON:dmweap[4];
new dmcolor;
new rcmodel;
// new rcmap;
new rccolor[2];
new rcskin;
new carnos;
new rcplates[128];
new rcinvul;
new racer[MAX_PLAYERS];


new Float:dmx,Float:dmy,Float:dmz,dmint,dmworld;

new eventlock;
new inevent[MAX_PLAYERS];
#define TEAM_A 0
#define TEAM_B 1

new Float:teamx[2], Float:teamy[2], Float:teamz[2];

Float: GetPlayerCameraFacingAngle(playerid) // Pottus
{
    new Float: vX, Float: vY;
    if(GetPlayerCameraFrontVector(playerid, vX, vY, Float: playerid))
	{
        if((vX = -atan2(vX, vY)) < 0.0) return vX + 360.0;
        return vX;
    }
    return 0.0;
}

GetTeamPlayersAlive(teamid)
{
	new count;
	foreach(new i : Player) {
		if(inevent[i] == 1) if(GetPlayerTeam(i) == teamid) count++;
	}
	return count;
}
#define DIALOG_WEAPONST11 9990
#define DIALOG_WEAPONST12 9991
#define DIALOG_WEAPONST13 9992
#define DIALOG_WEAPONST21 9993
#define DIALOG_WEAPONST22 9994
#define DIALOG_WEAPONST23 9995

#define DIALOG_MAINONE 9996
#define DIALOG_MAINTWO 9997

#define DIALOG_T1NAME 9998
#define DIALOG_T2NAME 9999
#define DIALOG_T1SKIN 8810
#define DIALOG_T2SKIN 8811
#define DIALOG_T1COL 8812
#define DIALOG_T2COL 8813

#define DIALOG_REWARD 8814

#define DIALOG_DMSKIN1 8815
#define DIALOG_DMSKIN2 8816
#define DIALOG_DMSKIN3 8817
#define DIALOG_DMCOLOR 8818
#define DIALOG_DMWEAP1 8819
#define DIALOG_DMWEAP2 8820
#define DIALOG_DMWEAP3 8821
#define DIALOG_DMWEAP4 8822


#define DIALOG_RCMODELID 8823
#define DIALOG_RCMAP 8824
#define DIALOG_RCCOLOR1 8825
#define DIALOG_RCCOLOR2 8826
#define DIALOG_RCSKIN 8827
#define DIALOG_RCPLATES 8828

#define DIALOG_REWARD2 8829

//-=Main colours=-//
#define blue 0x2B95FFFF
#define red 0xEB055BFF
#define green 0x33FF33AA
#define yellow 0xFFFF00AA
#define grey 0xC0C0C0AA
#define blue1 0x2641FEAA
#define lightblue 0x33CCFFAA
#define orange 0xFF9900AA
#define black 0x2C2727AA
#define COLOR_PINK 0xFC2ED2FF
#define COLOR_BLUE 0x0000BBAA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_BLACK 0x000000AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_GREEN1 0x33AA33AA
#define COLOR_BROWN 0xA52A2AAA
#define WHITE 0xFFFFFFFF
#define COLOR_BLUE2  0x0015FFAA


// Caps
#define UpperToLower(%1) for ( new ToLowerChar; ToLowerChar < strlen( %1 ); ToLowerChar ++ ) if ( %1[ ToLowerChar ]> 64 && %1[ ToLowerChar ] < 91 ) %1[ ToLowerChar ] += 32

// Spec
#define ADMIN_SPEC_TYPE_NONE 0
#define ADMIN_SPEC_TYPE_PLAYER 1
#define ADMIN_SPEC_TYPE_VEHICLE 2
new PlayerText:pHYD[MAX_PLAYERS][2];
new Text:HYD[2];

#define P_DEAG 		1
#define P_SPAZ 		2
#define P_UZI 		3
#define P_TEC 		4
#define P_AK 		5
#define P_M4 		6
#define P_RIFLE 	7
#define P_SNIPER 	8
#define P_GRENADE 	9

#define ENG 1
#define SPANISH 2
#define RUSS 3
// Enums

new page0R[MAX_PLAYERS][1956];
new page1R[MAX_PLAYERS][1956];
new page2R[MAX_PLAYERS][1956];
new MemID[MAX_PLAYERS][120];


new FriendLine[MAX_PLAYERS][50][24];
new FriendID[MAX_PLAYERS][50];
new FriendDummy[50] = {-1, ...};
new FriendSelection[MAX_PLAYERS];

new Inviter[MAX_PLAYERS], Invited[MAX_PLAYERS];
new FriendTimer[MAX_PLAYERS];

//donor boost
new dBoostRequest[MAX_PLAYERS];

//donor music
new dmusickit[MAX_PLAYERS];
new BitArray:isdspec<MAX_PLAYERS>;
new Text:dmusicbox;
new Text:dmusicicon;
/////
//donor vehicle invisibility
new bool:CanInvis[MAX_VEHICLES], bool:IsInvis[MAX_VEHICLES];
new bool:CanAInvis[MAX_VEHICLES], bool:IsAInvis[MAX_VEHICLES];
/////
new cName[MAX_PLAYERS][20], cTag[MAX_PLAYERS][7], cRankName[MAX_PLAYERS][15], cLevel[MAX_PLAYERS], cToy1[MAX_PLAYERS], cToy2[MAX_PLAYERS], Ajusting[MAX_PLAYERS];

#define	MAX_PERKS		8
#define PK_SNIPER    	0
#define P_ARMOUR    	1
#define P_CAPTURE    	2
#define P_DEATH    		3
#define P_MONEY    		4
#define P_HELMET    	5
#define P_GAS    		6
#define P_BASE    		7

new cPerk[MAX_PLAYERS+1][MAX_PERKS];

new DStreak[MAX_PLAYERS];
new bool:pGPS[MAX_PLAYERS];
new bool:pCamouflage[MAX_PLAYERS];

enum PlayerData
{
	AID,
	CMembersPage,
	CMembers,
	Pass[129],
	lastip[16],
	p_GPCI[128],
	Registered,
	bool:LoggedIn,
	Level,
	Helper,
	Streamer,
	Headshots,
	Skin,
	bool:UseSkin,
	bool:Mask,
	bool:WEARMASK,
	bool:IsSpawned,
	InDuel,
	Duel_I,Duel_l,WEAPON:Duel_W,Duel_T,Duel_P,Duel_B,Duel_A,
	MedKit,
	ArmourP,
	dRank,
	dORank,
	Rank,
	Cash,
	Dead,
	SL,
	ZCaptures,
	ZHelps,
	MKSpree,
	MDSpree,
	MCSpree,
	MHCSpree,
	bool:Muted,
	bool:CMuted,
	MuteTime,
	CMuteTime,
	bool:HELMET,
	bool:WEAR,
	PMS,
	CWS,
	JailTime,
	Frozen,Float:AirX,Float:AirY,Float:AirZ,
	FreezeTime,
	Kills,
	Deaths,
	hours,
	mins,
	secs,
	ddm,
	dcbdm,
	dsdm,
	TotalTime,
	ConnectTime,
	MuteWarnings,
	Warnings,
	God,
	bool:TUTS,
	LANG,
	GodCar,
	DoorsLocked,
	SpamCount,
	SpamTime,
	stabb,
	pCar,
	SUI,
	MEDICHEAL,
	Nick[24],
	SpecID,
	SpecType,
	OnDuty,
	mmlt,
	bool:FirstCon,
	FailLogin,
	SpamReport,
	RENDER,
	InClan,
	CR,
	CRP,
	ClanLead,
	ClanOwn,
	ClanCoOwn,
	cSkin,
	cRank,
	XP,
	Float:VPB,
	cinvite,
	assist,
	Rage,
	bool:GPS,
	bool:Camouflage,
	bool:License,
	bool:namekey,
	CMDSPAM,
	MAXSPAM,
	VIPCMD,
	VIPCMD2,
	JP_CMD,
	FIX_CMD,
	SHEAL_CMD,
	HEAL_CMD,
	SVEST_CMD,
	SAMMO_CMD,
	SWEAPS_CMD,
	SARMOUR_CMD,
	SEARCHCMD,
	LOCATECMD,
	FBCMD,
	C4CMD,
	SAVESTATSCMD,
	CBCHECKCMD,
	TOPCLANSCMD,
	CBLCMD,
	CICMD,
	CMEMBERSCMD,
	dbikecmd,
	NEVCMD,
	TOXCMD,
	BOMBCMD,
	APCMD,
	MKCMD,
	SYNCCMD,
	DRONECMD,
	STEALTHCMD,
	SHIDECMD,
	MMLTARGET,
	MMLOBJECT,
	bool:CWINV,
	bool:cleave,
	CurrentPage,
	TotalPages,
	CCurrentPage,
	CTotalPages,
	aka_targetid,
	AkaType,
	bool:is_undercover,
	undercover_score,
	undercover_realname[MAX_PLAYER_NAME],
	bool:nameapp,
	n_newname[MAX_PLAYER_NAME]
};

enum levelp
{
	alevel,
	acomand[15],
	cmdhelp[100]
}
enum sesslog
{
	s_kills,
	s_headshot,
	s_capture,
	s_assist,
	s_m4k,
	s_spazk
}
new AAMLKills[MAX_PLAYERS], DBoosts[MAX_PLAYERS], RACSKills[MAX_PLAYERS], VIPSKilled[MAX_PLAYERS], VehiclesDestroyed[MAX_PLAYERS];
new AreaProtects[MAX_PLAYERS], CWJoins[MAX_PLAYERS], CHeals[MAX_PLAYERS], CWWins[MAX_PLAYERS], ZCLANAssist[MAX_PLAYERS];
new RustlerBombeds[MAX_PLAYERS], Intoxications[MAX_PLAYERS], Backstabs[MAX_PLAYERS],DetonateKills[MAX_PLAYERS], AssaultKills[MAX_PLAYERS], Heals[MAX_PLAYERS], Flashes[MAX_PLAYERS], ZoneAssists[MAX_PLAYERS], CapturePrevents[MAX_PLAYERS], BaseKills[MAX_PLAYERS], DriverPassengerKill[MAX_PLAYERS], HeavyEnemyKill[MAX_PLAYERS];

new ConnectKills[MAX_PLAYERS];
new ConnectDeaths[MAX_PLAYERS];

new ADDM[MAX_PLAYERS][50];
new NAMEREQ[MAX_PLAYERS][50];
new cwtimer;

#define HPP		0
#define ARMOURR  1

new Text:TournamentTD;
new TournamentTick;
new Text:TournamentTD2;
new CurrentTOUR;
new CurrentTOURCount[MAX_PLAYERS];
new CurrentTOURValue;
new CurrentWinner;
#define TOUR_KILLS   0
#define TOUR_HEAD   1
#define TOUR_CAP   	2
#define TOUR_DEAG   3
#define MAX_TOUR    4

new PlayerBar:CW_STAT_BAR_2[MAX_PLAYERS][2][10];
new PlayerBar:CW_STAT_BAR[MAX_PLAYERS][2][10];
new Text:CW_ROUNDS;

#define colorSPECTATE       0xffffffff//Write a color here :)

new SpectatedPlayer[MAX_PLAYERS];
new SpectatedPlayer2[MAX_PLAYERS];
new bool:IsPlayerSpectating[MAX_PLAYERS];
new bool:IsSpectator[MAX_PLAYERS];

#define QUARTER 0
#define SEMI 	1
#define FINALS 	2

enum ct_en
{
	bool:CT_ON,
	bool:CT_PLAYING,
	CT_PHASE,
	CT_INITIAL_TEAMS,
	CT_MAX,
	CT_PHASE_MAX_MATCHES,
	CT_PHASE_CURRENT_MATCH,
	CT_QUARTER_TEAM1[4],
	CT_QUARTER_TEAM2[4],
	CT_SEMI_TEAM1[2],
	CT_SEMI_TEAM2[2],
	CT_FINALS_TEAM1,
	CT_FINALS_TEAM2,
	CT_WINNER
}
new bool:ct_available;
new CLAN_TOURNAMENT[ct_en];
new Iterator:CT_TEAMS<8>;
new CTMaker_Slot;
new CT_TEAM[8];
new CT_TEAM_TAG[8][7];
new CT_SEMI_TAG[4][7];
new CT_FINALS_TAG[2][7];
new bool:SeeingCT[MAX_PLAYERS];

new Text:CT_BOX;
new Text:CT_PRIZE;
new Text:CT_WINNER_TD;
new Text:CT_INFO_TD;
new Text:CT_QUARTER[4];
new Text:CT_SEMI[2];
new Text:CT_FINALS;
new Text:CT_INFO_TD_2;


new CWTimer1, CWTimer2, CWTimer3, CWTimer4, CWTimer5;

enum cw_en
{
	bool:CW_ON,
	bool:CW_IS_CT,
	CW_STARTER,
	CW_ACCEPTER,
	CW_C2,
	CW_C1,
	CW_WAIT,
	CW_ROUNDSS,
	CW_ROUND,
	CW_ROUND1,
	CW_ROUND2,
	bool:CW_STARTED,
	CW_MAX,
	CW_MAP,
	bool:CW_WARMUP,
	CW_WARMUP_START,
	CW_WARMUP_SECONDS
}
new CLAN_WAR[cw_en];

new Text:CW_MEMBER[10];
new Text:CW_MEMBER_2[10];
new Text:CW_DISCONNECT[10];
new Text:CW_DISCONNECT_2[10];

new IterList;
new ClanID[MAX_PLAYERS];
new ClanIDDefault[MAX_PLAYERS] = {-1,...};

new WAR_SLOT_T1[10];
new WAR_SLOT_T2[10];
new WAR_SLOT_DEFAULT[10] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
new WAR_SLOT_T1_AID[10] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
new WAR_SLOT_T2_AID[10] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};

new CW_DAMAGE[MAX_PLAYERS];
new CW_KILLS[MAX_PLAYERS];
new CW_R_DAMAGE[MAX_PLAYERS];
new CW_R_KILLS[MAX_PLAYERS];

new Iterator:JOINED1<MAX_PLAYERS>;
new Iterator:JOINED2<MAX_PLAYERS>;
new Iterator:ALIVE1<MAX_PLAYERS>;
new Iterator:ALIVE2<MAX_PLAYERS>;
new AreaClan;
new AreaClan2;
new SSLOG[MAX_PLAYERS][sesslog];
new PlayerInfo[MAX_PLAYERS][PlayerData];

new ClanVeh[20], Text3D:ClanVeh3DText;

new AdminCMD[][levelp] = {
	{
		1,"afix","This command will fix your vehicle"},{1,"vspawn","Spawn a vehicle"},{1,"spec/specoff","start spectating a player"},{1,"adminarea","Visit admin area"},{1,"paused","AFK players"},{1,"desynced","Desynced players"},
	{
		1,"morning","change your time to morning"},{1,"adminduty","go on admin duty"},{1,"weaps","used for checking players weapons"},{1,"apm","send a pm as admin"},{1,"frozen"},{1,"jailed","check frozen players"},
	{
		1,"unjail",""},{1,"jail",""},{1,"kick",""},{1,"slap","slap a player"},{1,"warn",""},{1,"unwarn",""},{1,"tc","tuned car"},{1,"jetpack",""},{1,"asay","talk as admin"}, {1,"onamehistory","view an offline player's name history"}, {1,"namehistory","view a player's name history"},
	{
		1,"god",""},{1,"godcar",""},{1,"nitro",""},{1,"tune","Tune your vehicle"},{1,"requestban",""},{1,"ip","used for checking player ip"},{1,"setmytime",""},{1,"ostats","to view an offline player's statistics"},
	{
		1,"afk","kick a player for being afk"},{1,"aslap","very high slap"},{1,"dontuseskin",""},{1,"Reply","used to reply /helpme msgs"},{1,"cursor","enables cursor in spec mode"}, {1,"asettings","changes your admin settings"},
	// LEVEL 2
	{
		2,"respawncars","respawn unused cars"},{2,"async","sync a player"},{2,"saveskin",""},{2,"useskin",""},{2,"clearchat",""},{2,"screen","send player a screen text"},{2,"muted","check muted players"},{2,"unmute",""},
	{
		2,"explode","explode a player"},{2,"get","teleport a player to your position"},{2,"goto","go to player"},{2,"flip","flip your vehicle"},{2,"plane","spawn a plane"},{2,"boat","spawn a boat"},{2,"heli","spawn a heli"},
	{
		2,"bike","spawn a bike"},{2,"acar","spawn a car"},{2,"ban"," ban a player"},{2,"searchban","search for banned player"},{2,"unbanip",""},{2,"unban","unban a player"},{2,"undo","undo one of your 5 previous bans"},{2,"disarm","remove player weapons"},{2,"spawn",""},
	{
		2,"burn","burn a player"},{2,"unlockcar",""},{2,"lockcar",""}, {2,"forcerules","show a player rules list"},{2,"tban",""},{2,"move","move a player to another player"},
	// LEVEL 3

	{
		3,"giveweapon","give player weapon"},{3,"sethp","set player health"},{3,"setarmour","set player armour"},{3,"setskin",""},{3,"setweather",""},
	{
		3,"disablechat",""},{3,"abuse","kill a player for abusing a bug"},{3,"unfreeze",""},{3,"freeze",""},{3,"destroycar",""},
	{
		3,"carcolour",""},{3,"carhealth",""},{3,"car","Spawn a car"},{3,"offban","offline ban"},{3,"ipcheck","check ips in range"},{3,"aeject","eject a player"},{3,"force","force player to change class"},
	{
		3,"givecar","give car to player"},{3,"setinterior",""},{3,"setworld","set player virtual world"},{3,"settime",""},{3,"healall",""},{3,"armourall",""},{3,"giveallmask",""},{3,"giveallhelmet",""},
	{
		3,"giveallmedkit",""},{3,"giveallap","give all armour pack"},{3,"setallweather",""},{3,"setalltime",""},{3,"setallworld",""},{3,"stopbombs","will clear all toxic bombs"},{3,"offjail","will offline jail a player"},
	// LEVEL 4
	{
		4,"announce","announce text to players"},{4,"announce2","announce with text type"},{4,"die","create explosions areound you"},{4,"giveallscore",""},{4,"givescore","give score to a player"},{4,"enable/disable","server features"},
	{
		4,"rban","range ban"},{4,"crash","crash a player"},{4,"/setstreamer",""},{4,"/unsetstreamer",""},{4,"/setmap","promote a player to mapper"},{4,"spawnall",""},{4,"muteall",""},{4,"unmuteall",""},{4,"getall",""},{4,"saveallstats",""},{4,"freezeall",""},
	{
		4,"unfreezeall",""},{4,"Clearbox",""},{4,"slapall",""},{4,"explodeall",""},{4,"disarmall",""},{4,"ejectall",""},{4,"GiveAllcash",""},{4,"giveallweapon",""}, {4,"/rlicense","to revoke/give back one's license"}, {4,"/orlicense","revoke/give back a player license offline"}, {4,"/undercover","go undercover"}, {4,"/undercovered","check undercover admins"}, {2,"/namerequests","check name change requests"},
	// LEVEL 5
	{
		5,"setcash","set player cash"},{5,"givepackage","Gives players VIP packages"},{5,"setmod","set moderator"},{5,"firemod","fire a moderator"},{5,"setkills",""},{5,"setdeaths",""},{5,"settemplevel","set temp level admin"},{5,"setlevel",""},{5,"setofflevel","set offline user adm lvl"},
	{
		5,"fakechat",""},{5,"fakedeath",""},{5,"setpass","change someone password"},{5,"ahide","hide from /admins"},{5,"cutscore","cut someone's score by percentage"},{5,"ocutscore","cut an offline player's score by percentage"},{5,"replies","shows replies sent by admins"},{5,"apms","shows admin pms sent to players"},{5,"ahide","hides from /admins list and commands won't show"},{5,"aradio","plays a song from given url"},{8,"makect","make clan tournament"},{8,"cancelct","cancel clan tournament"}
};

enum report_info
{
	bool:R_active,
	R_sender,
	R_senderN[24],
	R_reason[256],
	bool:R_check,
	R_checker[24],
	R_targetN[24],
	R_target
}

new ReportTick[MAX_PLAYERS];
new REPORTS[10][report_info];

enum asay_info
{
	a_admin[MAX_PLAYER_NAME],
	a_receiver[MAX_PLAYER_NAME],
	a_message[148]
}
new ASAY_Info[MAX_ASAY][asay_info];

enum reply_info
{
	r_admin[MAX_PLAYER_NAME],
	r_receiver[MAX_PLAYER_NAME],
	r_message[148]
}
new REPLY_Info[MAX_ASAY][reply_info];


new BombPlanted[MAX_PLAYERS];
new Dynamit[MAX_PLAYERS];
new BombTime[MAX_PLAYERS];

#define NON 		0
#define EDM 		1
#define CBDM 		2
#define SDM 		3
#define MDM 		4
#define HSDM		5
#define CHDM		6
#define MAX_ARENAS 	7

new Iterator:ARENA[MAX_ARENAS]<MAX_PLAYERS>;

new LastServerDay; // what day is today, useful for daily mysql/server events

enum ServerData
{
	ReadPMs,
	ReadCmds,
	AntiSpam,
	ServerTime,
	AntiSwear,
	NoCaps,
	bool:RENDER,
	Password[128],
	GiveWeap,
	GiveMoney,
	ConnectMessages,
	MaxMuteWarnings,
	DisableChat,
	MOTD[300],
	ADT,
	bool:MML,
	bool:Spreetext,
	bool:Sawn,
	bool:Clanz,
	bool:FloodIP,
	bool:Base,
	bool:AntiCh
};
new ServerInfo[ServerData];

new Float:Pos[MAX_PLAYERS][4];

//Timers



new WEAPON:sWeap[MAX_PLAYERS][MAX_WEAPON_SLOTS];
new sAmmo[MAX_PLAYERS][MAX_WEAPON_SLOTS];
// Report


new VehicleNames[212][] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Pereniel","Sentinel","Dumper","Firetruck","Trashmaster","Stretch","Manana","Infernus",
	"Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi","Washington","Bobcat","Mr Whoopee","BF Injection",
	"Hunter","Premier","Enforcer","Securicar","Banshee","Predator","Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie",
	"Stallion","Rumpo","RC Bandit","Romero","Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder",
	"Reefer","Tropic","Flatbed","Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler","ZR3 50","Walton","Regina",
	"Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper","Rancher","FBI Rancher","Virgo","Greenwood",
	"Jetmax","Hotring","Sandking","Blista Compact","Police Maverick","Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B",
	"Bloodring Banger","Rancher","Super GT","Elegant","Journey","Bike","Mountain Bike","Beagle","Cropdust","Stunt","Tanker","RoadTrain",
	"Nebula","Majestic","Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent","Bullet","Clover",
	"Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility","Nevada","Yosemite","Windsor","Monster A",
	"Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger","Flash","Tahoma","Savanna","Bandito","Freight","Trailer",
	"Kart","Mower","Duneride","Sweeper","Broadway","Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer A","Emperor",
	"Wayfarer","Euros","Hotdog","Club","Trailer B","Trailer C","Andromada","Dodo","RC Cam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A","Luggage Trailer B",
	"Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};
//==============================================================================
#define GREEN      0x80FF8096
#define RED       0xFF6347AA
#define BLUE      0x0015FFAA
#define clanxx    0xFCD741FF
#define clanx     "{5EFFA6}"


#define COL_WHITE "{FFFFFF}"
#define COL_RED "{F81414}"
#define COL_GREEN "{00FF22}"
#define COL_LIGHTBLUE "{00CED1}"

#define IP_LIMIT 3
#define Time_Limit 3500
#define SAME_IP_CONNECT 2
new Same_IP,Join_Stamp,ban_s[16],exceed;

new Text3D:RankLabel[MAX_PLAYERS];
new VIPLabel[MAX_PLAYERS][16];
new gTeam[MAX_PLAYERS];
new gClass[MAX_PLAYERS];
new GZ_ZONE1; //USA
new GZ_ZONE2; //EURASIA
new GZ_ZONE3; //AUSTRALIAN ARMADA
new GZ_ZONE4; //Soviet Union
new GZ_ZONE5; //Arabia
new GZ_ZONE6; //Brazil
new GZ_ZONE7; //asia
new GZ_ZONE8; // france
new RP; //Arabian Pickup
new EP;
new AP;
new A2P,FRP,CBPick;
new MP;
new Text3D:Brief[9], Text3D:Nuke3D, Text3D:Nuke23D, Text3D:Flash3D;
new CHP;
new IDP;
new SP1,SP2,SP3,SP4,SP5,SP6;
new Streak[MAX_PLAYERS];


new RandomMessages[][] = {
	"[!] >> Unlock more classes, by killing your enemies and capturing zones!",
	"[!] >> Upgrade your favorite classes and rank up easier! /xphelp.",
	"[!] >> Track a player achievements progress using /aprogress(/apr) [id]",
	"[!] >> Please register on our forum ASAP! And get info on what's trending and other information. Forum: www.mw3-samp.org/forum",
	"[?] >> Wish to check the latest implemented updates by the Developers? then type /updates.",
	"[?] >> Want to make new friends? Use /addfriend [ID] and /friends to check your friends list.",
	"[?] >> If you are in need of help ? Type /helpme and get answered by the Public Relation Staff.",
	"[?] >> Are you new in server ? Type /help - /cmds.",
	"[!] >> If you wish to see the current available staff, then type /admins or /moderators.",
	"[!] >> /Myrank to check your current rank's information.",
	"[?] >> Wish to play with another type of class ? Type /sc.",
	"[?] >> Feel like you need a team change ? Feel free to change by using /st to change the team.",
	"[!] >> Helping the server by donating gets you the following perks: Score, cash, forum & In-Game VIP status. ",
	"[?] >> Love playing our server ? Don't want it to collapse ? You can help us by donating to the server.",
	"[!] >> Capture zones, kill enemies and unlock more classes",
	"[!] >> Use /myrank to check your current rank's information. You can also find all the avaible ranks by using /ranks.",
	"[!] >> If someone doesn't follow the rules, don't panic and don't announce it in the chat! Use /report [id] [reason]",
	"[!] >> Our AAML feature is antique, find out more about it by using /aamlhelp!",
	"[!] >> Call an Airstrike by simply using /airstrike or /airstrikehelp for information regarding it.",
	"[!] >> Nuke enemy bases, earn extra score! /nukehelp to find out how.",
	"[!] >> Nuke capturable zones, earn extra score! /nuke2help to find out how.",
	"[!] >> Capture Area 52 to get the number of enemies in each base using Locator combined with Area 51 nuke.",
	"[!] >> Change your time by using /night or /day.",
	"[+] >> Choose medic class to help your dying mates, save them!",
	"[+] >> Use /ss to spawn at a place that is captured by your team.",
	"[?] >> Join our DM stadiums! /minigundm, /cbdm , /hsdm, /chdm and /sdm and dm in briefcase.",
	"[+] >> The server is founded by Chris & Seif, find out more using /credits.",
	"[+] >> We are constantly updating our script. use /updates for more information.",
	"[!] >> Tag a player on chat by simply using @[id]."
};
//==============================================================================

#define EFFECT_RANDOM           20
#define EFFECT_FIX_DEFAULT      10
#define EFFECT_FIX_Z            0.008
#define EFFECT_MULTIPLIER               0.05
#define EFFECT_HELI_VEL                 0.1
#define EFFECT_EXPLOSIONTYPE    1
#define EFFECT_EXPLOSIONOFFSET  -1.2
#define EFFECT_EXPLOSIONRADIUS  2.5
//Model IDs for Vehicles
#define PLANES 460,476,511,512,513,519,520,553,577,592,593
#define HELIS 417,425,447,469,488,497,548,563

// Database credentials
#define DB_HOST		"cookie.ducky.rocks"
#define DB_USER 	"u58_FQ07YyTt81"
#define DB_PASSWORD "+G.6AwbMiraX7teBP034u.P@"
#define DATABASE 	"s58_mw3"


new
rCheck[MAX_PLAYERS];
new MySQL:mysql;
new AirPick,AirCPick,AirON,Air2Pick,Air2ON, FlashON, AirSecs, Air2Secs, FlashSecs, LocatorPick, ParaPick, FlashPick;
#include <whirlpool>

new Text:Announce;
#define VERSION "7.7.4"
#define WEBSITE "www.mw3-samp.org"
#define CAREPACKRESPAWN 120000


//armypackage
#define MAX_CRATES  60
new bool:armypackused[MAX_PLAYERS];
new ArmyCrate[MAX_CRATES];
new Text3D:armylabel[MAX_CRATES];
new bool:crateexists[MAX_CRATES];
new CrateDespawnTimer[MAX_CRATES];

enum cPack
{
	bool:PlaneMoveStage,
	Float:CarePackageRotation,
	CarePackagePlane,
	CarePackageParachute,
	Float:CarePackageLand[3],
	CarePackageInterior,
	CarePackageWorld
}
#define MAX_MINES 200
new pCarePackage[MAX_CRATES][cPack];
new Iterator:PlacedMines<MAX_MINES>;
new AvailableMines[MAX_PLAYERS];
enum Mine_s
{
	bool:m_used,
	m_player,
	m_object,
	m_object2,
	Text3D:m_label,
	Float:m_x,Float:m_y,Float:m_z
}
new Mine[MAX_MINES][Mine_s];
enum mmi
{
	V_MISSILE,
	V_AMMO,
	V_TARGET,
	V_O_SAM,
	Text3D:V_TEXT,
	V_SPEED
}
new WMML[MAX_VEHICLES][mmi];

enum mmf
{
	R_BOMB,
	Text3D:R_TEXT
}
new RUSTL[MAX_VEHICLES][mmf];

enum mmt
{
	C_BOMB,
	Text3D:C_TEXT
}
new CROPDUSTER[MAX_VEHICLES][mmt];

new OnToy[MAX_PLAYERS];

new skinlist = mS_INVALID_LISTID;
new toylist = mS_INVALID_LISTID;
new vehiclelist = mS_INVALID_LISTID;
rankreq(playerid)
{
	WARN[playerid][0] = CreatePlayerTextDraw(playerid, 166.000015, 177.306655, "box");
	PlayerTextDrawLetterSize(playerid, WARN[playerid][0], 0.000000, 9.760004);
	PlayerTextDrawTextSize(playerid, WARN[playerid][0], 471.600036, 0.000000);
	PlayerTextDrawAlignment(playerid, WARN[playerid][0], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, WARN[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, WARN[playerid][0], 1);
	PlayerTextDrawBoxColour(playerid, WARN[playerid][0], 130);
	PlayerTextDrawSetShadow(playerid, WARN[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, WARN[playerid][0], 0);
	PlayerTextDrawBackgroundColour(playerid, WARN[playerid][0], 255);
	PlayerTextDrawFont(playerid, WARN[playerid][0], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, WARN[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, WARN[playerid][0], 0);

	WARN[playerid][1] = CreatePlayerTextDraw(playerid, 267.599914, 180.080413, "WARNING_!!");
	PlayerTextDrawLetterSize(playerid, WARN[playerid][1], 0.519200, 2.242132);
	PlayerTextDrawAlignment(playerid, WARN[playerid][1], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, WARN[playerid][1], -16776961);
	PlayerTextDrawSetShadow(playerid, WARN[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, WARN[playerid][1], 1);
	PlayerTextDrawBackgroundColour(playerid, WARN[playerid][1], 255);
	PlayerTextDrawFont(playerid, WARN[playerid][1], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, WARN[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, WARN[playerid][1], 0);

	WARN[playerid][2] = CreatePlayerTextDraw(playerid, 169.699905, 216.667205, "Admin:_mike.~n~reason:_testing.~n~warnings:_1/3");
	PlayerTextDrawLetterSize(playerid, WARN[playerid][2], 0.447199, 1.779199);
	PlayerTextDrawAlignment(playerid, WARN[playerid][2], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, WARN[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, WARN[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, WARN[playerid][2], 1);
	PlayerTextDrawBackgroundColour(playerid, WARN[playerid][2], 255);
	PlayerTextDrawFont(playerid, WARN[playerid][2], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, WARN[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, WARN[playerid][2], 0);

	pHYD[playerid][0] = CreatePlayerTextDraw(playerid, 240.199615, 207.173416, "_________vehicle:_rhino~n~________class:_engineer~n~_score_to_unlock_class:_1000");
	PlayerTextDrawLetterSize(playerid, pHYD[playerid][0], 0.281599, 1.277300);
	PlayerTextDrawAlignment(playerid, pHYD[playerid][0], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, pHYD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, pHYD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, pHYD[playerid][0], 1);
	PlayerTextDrawBackgroundColour(playerid, pHYD[playerid][0], 255);
	PlayerTextDrawFont(playerid, pHYD[playerid][0], TEXT_DRAW_FONT_3);
	PlayerTextDrawSetProportional(playerid, pHYD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, pHYD[playerid][0], 0);

	pHYD[playerid][1] = CreatePlayerTextDraw(playerid, 358.600158, 190.839904, " ");
	PlayerTextDrawLetterSize(playerid, pHYD[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, pHYD[playerid][1], 125.200027, 135.546615);
	PlayerTextDrawAlignment(playerid, pHYD[playerid][1], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, pHYD[playerid][1], -31749);
	PlayerTextDrawSetShadow(playerid, pHYD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, pHYD[playerid][1], 0);
	PlayerTextDrawBackgroundColour(playerid, pHYD[playerid][1], 0);
	PlayerTextDrawFont(playerid, pHYD[playerid][1], TEXT_DRAW_FONT_MODEL_PREVIEW);
	PlayerTextDrawSetProportional(playerid, pHYD[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, pHYD[playerid][1], 0);
	PlayerTextDrawSetPreviewModel(playerid, pHYD[playerid][1], 432);
	PlayerTextDrawSetPreviewRot(playerid, pHYD[playerid][1], -15.000000, 3.000000, -50.000000, 1.000000);
	PlayerTextDrawSetPreviewVehicleColours(playerid, pHYD[playerid][1], 1, 1);

}

IsPlayerSynced(playerid)
{
    return (desynctick[playerid] < gettime()) ? true : false;
}

// public OnIncomingPacket(playerid, packetid, BitStream:bs)
// {
//     new string[100];
// 	new hour,minute,second; gettime(hour,minute,second);
// 	format(string, _, "[%d:%d:%d] packet %d", hour, minute, second, packetid);
//     ThreadW("scriptfiles/packets.ini", string);
    
// 	return 1;
// }
// public OnIncomingRPC(playerid, rpcid, BitStream:bs)
// {
//     new string[100];
// 	new hour,minute,second; gettime(hour,minute,second);
// 	format(string, 100, "[%d:%d:%d] RPC %d / BS: %d", hour,minute,second, rpcid);
//     ThreadW("scriptfiles/rpcs.ini", string);
    
// 	return 1;
// }
/*
public OnIncomingRPC(playerid, rpcid, BitStream:bs)
{
	if(rpcid < 0 || rpcid > 254) return 0;
    return 1;
}

public OnPlayerCarTroll(playerid,vehicleid, trolledid, trolltype)
{
	if(PlayerInfo[playerid][Dead]) return 1;
	new string[128];
	format(string, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) is probably vehicle trolling.", PlayerInfo[playerid][Nick], playerid);
	AntiCheatNotification(-1, string);
//	if(IsPlayerConnected(trolledid))
//	{
//		SendClientMessage(trolledid, COLOR_YELLOW, "You have been subjet to troll hacks, you got compensated 5 score.");
//		SetPlayerScore(trolledid, GetPlayerScore(trolledid) + 5);
	//}
	//COD_BAN(playerid,"Anticheat","Vehicle Troll");
	return 1;
}*/

forward OnClanToyChange(playerid, target, type);
public OnClanToyChange(playerid, target, type)
{
	if(cache_warning_count()) return SendClientMessage(playerid, RED, "Oups, something went wrong. Please notify an admin of this error: ERR00000126");
	SendClientMessage(playerid, COLOR_PURPLE, "[Clan Info]: Toy was successfully changed");
	new str[80];
	// format(str, _, "CLAN TOY: %s has changed a clan toy", PlayerInfo[playerid][Nick]);
	new x = PlayerInfo[playerid][InClan];
	format(str, _, "%s changed a clan toy.", PlayerInfo[playerid][Nick]);
	RecordClanCMD(str, x);
  	new bone, Float:offx, Float: offy, Float: offz, Float: rrx, Float: rry, Float: rrz, Float: sx, Float: sy, Float: sz;
	if(type == 4)
	{
		bone = Toy1Info[playerid][tbone];
		offx = Toy1Info[playerid][tx]; offy = Toy1Info[playerid][ty]; offz = Toy1Info[playerid][tz]; rrx = Toy1Info[playerid][rtx];
		rry = Toy1Info[playerid][rty]; rrz = Toy1Info[playerid][rtz]; sx = Toy1Info[playerid][tsx]; sy = Toy1Info[playerid][tsy]; sz = Toy1Info[playerid][tsz];
	}
	else
	{
		bone = Toy2Info[playerid][tbone];
		offx = Toy2Info[playerid][tx]; offy = Toy2Info[playerid][ty]; offz = Toy2Info[playerid][tz]; rrx = Toy2Info[playerid][rtx];
		rry = Toy2Info[playerid][rty]; rrz = Toy2Info[playerid][rtz]; sx = Toy2Info[playerid][tsx]; sy = Toy2Info[playerid][tsy]; sz = Toy2Info[playerid][tsz];
	}
	foreach(new i : Player)
	{
		if(PlayerInfo[i][InClan] == x)
		{
			if(type == 4)
			{
			    if(IsPlayerAttachedObjectSlotUsed(i,4)) RemovePlayerAttachedObject(i,4);
			    Toy1Info[i][tbone] = bone;
				Toy1Info[i][tx] = offx;
				Toy1Info[i][ty] = offy;
				Toy1Info[i][tz] = offz;
				Toy1Info[i][rtx] = rrx;
				Toy1Info[i][rty] = rry;
				Toy1Info[i][rtz] = rrz;
				Toy1Info[i][tsx] = sx;
				Toy1Info[i][tsy] = sy;
				Toy1Info[i][tsz] = sz;
				cToy1[i] = target;
			}
			else
			{
			    if(IsPlayerAttachedObjectSlotUsed(i,5)) RemovePlayerAttachedObject(i,5);
			    Toy2Info[i][tbone] = bone;
				Toy2Info[i][tx] = offx;
				Toy2Info[i][ty] = offy;
				Toy2Info[i][tz] = offz;
				Toy2Info[i][rtx] = rrx;
				Toy2Info[i][rty] = rry;
				Toy2Info[i][rtz] = rrz;
				Toy2Info[i][tsx] = sx;
				Toy2Info[i][tsy] = sy;
				Toy2Info[i][tsz] = sz;
				cToy2[i] = target;
			}
			SetPlayerAttachedObject(i,type,target,bone,offx,offy,offz,rrx, 	rry,rrz,sx,sy,sz);
		}
	}
	ClanMSG(PlayerInfo[playerid][InClan], str);
	return 1;
}
forward OnClanToyUpdate(playerid, type, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
public OnClanToyUpdate(playerid, type, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	new query[280], cc = PlayerInfo[playerid][InClan];
	if(cache_num_rows() > 0)
	{
		 mysql_format(mysql, query, sizeof(query), "UPDATE `clantoys` SET `tbone`='%d',`tx`='%f',`ty`='%f',`tz`='%f',`rtx`='%f',`rty`='%f',`rtz`='%f',`tsx`='%f',`tsy`='%f',`tsz`='%f' WHERE `cid`='%d' AND `index`='%d' LIMIT 1", boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, cc, type);
	}
	else
	{
		if(type == 4) mysql_format(mysql, query, sizeof(query), "INSERT INTO `clantoys` (`cid`,`index`,`tbone`,`tx`,`ty`,`tz`,`rtx`,`rty`,`rtz`,`tsx`,`tsy`,`tsz`) VALUES('%d',4,'%d','%0.5f','%0.5f','%0.5f','%0.5f','%0.5f','%0.5f','%0.5f','%0.5f','%0.5f')", cc, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
		else mysql_format(mysql, query, sizeof(query), "INSERT INTO `clantoys` (`cid`,`index`,`tbone`,`tx`,`ty`,`tz`,`rtx`,`rty`,`rtz`,`tsx`,`tsy`,`tsz`) VALUES('%d',5,'%d','%0.5f','%0.5f','%0.5f','%0.5f','%0.5f','%0.5f','%0.5f','%0.5f','%0.5f')", cc, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	}
	mysql_tquery(mysql, query, "","");
	return 1;
}

public OnPlayerEditAttachedObject( playerid, EDIT_RESPONSE:response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
    if(response == EDIT_RESPONSE_FINAL)
	{
		new query[128], tt, cc = PlayerInfo[playerid][InClan];
		tt = OnToy[playerid];
	    if(tt == 4)
		{
			if(Ajusting[playerid] == 0)
			{
    			mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `ctoy1` = '%d', `chpoints` =`chpoints`-500 WHERE `cid`='%d' LIMIT 1", modelid, cc);
				mysql_tquery(mysql, query, "OnClanToyChange", "idd", playerid, modelid, 4);
			}
			cToy1[playerid] = modelid;
			Toy1Info[playerid][tbone] = boneid;
			Toy1Info[playerid][tx] = fOffsetX;
			Toy1Info[playerid][ty] = fOffsetY;
			Toy1Info[playerid][tz] = fOffsetZ;
			Toy1Info[playerid][rtx] = fRotX;
			Toy1Info[playerid][rty] = fRotY;
			Toy1Info[playerid][rtz] = fRotZ;
			Toy1Info[playerid][tsx] = fScaleX;
			Toy1Info[playerid][tsy] = fScaleY;
			Toy1Info[playerid][tsz] = fScaleZ;
		}
		else
		{
			if(Ajusting[playerid] == 0)
			{
				mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `ctoy2` = '%d', `chpoints` =`chpoints`-500 WHERE `cid`='%d' LIMIT 1", modelid, cc);
				mysql_tquery(mysql, query, "OnClanToyChange", "idd", playerid, modelid, 5);
			}
			cToy2[playerid] = modelid;
			Toy2Info[playerid][tbone] = boneid;
			Toy2Info[playerid][tx] = fOffsetX;
			Toy2Info[playerid][ty] = fOffsetY;
			Toy2Info[playerid][tz] = fOffsetZ;
			Toy2Info[playerid][rtx] = fRotX;
			Toy2Info[playerid][rty] = fRotY;
			Toy2Info[playerid][rtz] = fRotZ;
			Toy2Info[playerid][tsx] = fScaleX;
			Toy2Info[playerid][tsy] = fScaleY;
			Toy2Info[playerid][tsz] = fScaleZ;
		}
		mysql_format(mysql, query, sizeof(query), "SELECT `cid` FROM `clantoys` WHERE `cid`='%d' AND `index`='%d'", cc, tt);
		mysql_tquery(mysql, query, "OnClanToyUpdate", "dddfffffffff", playerid, tt,boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(OnToy[playerid] == 4)
		{
			RemovePlayerAttachedObject(playerid, 4);
		}
		else
		{
			RemovePlayerAttachedObject(playerid, 5);
		}
		ERR(playerid, "You have canceled the toy placement.");
		OnToy[playerid] = 0;
	}
    return 1;
}

public OnPlayerTroll(playerid)
{
	if(IsPlayerAFK(playerid)) return 1;
	if(!IsPlayerSynced(playerid)) return 1;
	new str[150];
	format(str, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) might be troll hacking.", PlayerInfo[playerid][Nick], playerid);
	return AntiCheatNotification(-1, str);
}

public OnPlayerSuspectedForAimbot(playerid, hitid, WEAPON:weaponid, warnings)
{
	new weapon_name[32], str[150];
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	GetWeaponName(weaponid, weapon_name, sizeof(weapon_name));

	if(warnings & WARNING_OUT_OF_RANGE_SHOT)
	{
		format(str, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) fired shots from a distance greater than the %s's fire range (normal range: %f).", nam, playerid, weapon_name, BustAim::GetNormalWeaponRange(weaponid));
		AntiCheatNotification(-1, str);
	}
	if(warnings & WARNING_PROAIM_TELEPORT)
	{
		format(str, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) might be using proaim.cs (teleport detected).", nam, playerid);
		AntiCheatNotification(-1, str);
	}
	if(warnings & WARNING_RANDOM_AIM)
	{
		format(str, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) is suspected to be using aimbot (hit with Random Aim with %s).", nam, playerid, weapon_name);
		AntiCheatNotification(-1, str);
	}
	if(warnings & WARNING_CONTINOUS_SHOTS)
	{
		format(str, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) has fired 10 shots continously with %s(%d).", nam, playerid, weapon_name, weaponid);
		AntiCheatNotification(-1, str);
	}
	return 0;
}


AntiCheatNotification(color, const string[])
{
	foreach(new i : Player)
	{
		if (PlayerInfo[i][Level] > 0  && Bit_Get(ToggleState[i], TOGGLE_ACNOT) || PlayerInfo[i][Helper] == 1 && Bit_Get(ToggleState[i], TOGGLE_ACNOT)) SendClientMessage(i, color, string);
	}
	return 1;
}

public OnGameModeInit()
{
    //EnableVehicleFriendlyFire();
    //timerhack = SetTimer("AntyVehHack", 3000, 1);
    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 700);
    CreateDynamic3DTextLabel("/jailtime", 0xFFFF00AA, 197.9903,178.9006,1003.0234, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 3,-1, 10.0 );
    getdate(.day = LastServerDay);
	ShowNameTags(true);
	PUBGKillExpiry = 0;
	for(new i=1; i < MAX_TEAMS-1; i++)
	{
	    BehemethObject[i] = CreateObject(9958, BehemSpawn[i][0], BehemSpawn[i][1], 150.00, 0.0000, 0.0000, 0.0000, 1000.00);
		BehemethHp[i] = 2500;
		ZeppelinDriver[i] = -1;
		ZP_Available[i] = 1;
		Missile[i] = -1;
	}
	for(new i=0; i < MAX_CRATES; i++)
	{
		pCarePackage[i][CarePackagePlane] = pCarePackage[i][CarePackageParachute] = -1;
	}
	for(new i=0; i < MAX_VEHICLES; i++)
	{
		WMML[i][V_O_SAM] = -1;
	}
	CLAN_TOURNAMENT[CT_QUARTER_TEAM1][0] = CLAN_TOURNAMENT[CT_QUARTER_TEAM1][1] = CLAN_TOURNAMENT[CT_QUARTER_TEAM1][2] = CLAN_TOURNAMENT[CT_QUARTER_TEAM1][3] =
	CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] =
	CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] =
	CLAN_TOURNAMENT[CT_QUARTER_TEAM2][0] = CLAN_TOURNAMENT[CT_QUARTER_TEAM2][1] = CLAN_TOURNAMENT[CT_QUARTER_TEAM2][2] = CLAN_TOURNAMENT[CT_QUARTER_TEAM2][3] =
	CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_TOURNAMENT[CT_WINNER] = -1;
	TEAMDATA[TEAM_USA][Color] = 0x0080FFFF;
	TEAMDATA[TEAM_EURASIA][Color] = 0x6AFF6AFF;
	TEAMDATA[TEAM_AUS][Color] = 0x9B37FFFF;
	TEAMDATA[TEAM_SOVIET][Color] = 0xF93939FF;
	TEAMDATA[TEAM_ARAB][Color] = 0xFF8000FF;
	TEAMDATA[TEAM_ID][Color] = 0x008040FF;
	TEAMDATA[TEAM_FRANCE][Color] = 0x923E34FF;
	TEAMDATA[TEAM_CH][Color] = 0x03FCFCFF;
	Iter_Init(ARENA);
	Iter_Init(BLOCKED);
	CLAN_TOURNAMENT[CT_ON] = false; CLAN_TOURNAMENT[CT_PLAYING] = false;
	ct_available = false;
	Same_IP = exceed = 0;
	AreaClan = AreaClan2 = -2;
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
	CurrentTOURValue = 0;
	strikingplayer = -1;
	for(new rs=0; rs < 10; rs++) REPORTS[rs][R_target] = -1;
	for(new i=0; i < 10; i++) WAR_SLOT_T1[i] = WAR_SLOT_T2[i] = WAR_SLOT_T1_AID[i] = WAR_SLOT_T2_AID[i] = -1;
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	ClanVeh[0] = CreateVehicle(425, -1330.0564, 1283.6185, 3.9415, -9.0000, -1, -1, 100);
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[0], 0.0, 0.0, 2.0);
	ClanVeh[1] = CreateVehicle(425, -1348.1589, 1286.0292, 3.8378, -9.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[1], 0.0, 0.0, 2.0);
	ClanVeh[2] = CreateVehicle(476, -1319.2814, 1260.2479, 3.8527, -12.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[2], 0.0, 0.0, 2.0);
	ClanVeh[3] = CreateVehicle(487, -1303.2264, 1388.7280, 3.3819, 260.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[3], 0.0, 0.0, 2.0);
	ClanVeh[4] = CreateVehicle(487, -1285.9967, 1384.9546, 3.3819, 260.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[4], 0.0, 0.0, 2.0);
	ClanVeh[5] = CreateVehicle(487, -1290.4375, 1367.9685, 3.3819, 260.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[5], 0.0, 0.0, 2.0);
	ClanVeh[6] = CreateVehicle(512, -1301.1067, 1362.8580, 3.1464, 170.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[6], 0.0, 0.0, 2.0);
	ClanVeh[7] = CreateVehicle(520, -1334.9097, 1310.3505, 3.7609, 260.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[7], 0.0, 0.0, 2.0);
	ClanVeh[8] = CreateVehicle(520, -1342.9985, 1362.3579, 5.3473, 260.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[8], 0.0, 0.0, 2.0);
	ClanVeh[9] = CreateVehicle(460, -1395.2114, 1342.1985, 1.9820, 84.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[9], 0.0, 0.0, 2.0);
	ClanVeh[10] = CreateVehicle(452, -1394.0411, 1333.3324, -0.0668, 83.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[10], 0.0, 0.0, 2.0);
	ClanVeh[11] = CreateVehicle(452, -1375.2820, 1291.5496, -0.0668, 170.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[11], 0.0, 0.0, 2.0);
	ClanVeh[12] = CreateVehicle(452, -1328.7292, 1248.1316, -0.0668, 170.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[12], 0.0, 0.0, 2.0);
	ClanVeh[13] = CreateVehicle(452, -1314.7526, 1245.5035, -0.0668, 170.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[13], 0.0, 0.0, 2.0);
	ClanVeh[14] = CreateVehicle(452, -1321.5509, 1246.3292, -0.0668, 170.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[14], 0.0, 0.0, 2.0);
	ClanVeh[15] = CreateVehicle(452, -1316.9805, 1393.0958, -0.0668, -10.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[15], 0.0, 0.0, 2.0);
	ClanVeh[16] = CreateVehicle(452, -1323.8425, 1397.2037, -0.0668, -10.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[16], 0.0, 0.0, 2.0);
	ClanVeh[17] = CreateVehicle(452, -1298.2701, 1302.9207, -0.0668, -10.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[17], 0.0, 0.0, 2.0);
	ClanVeh[18] = CreateVehicle(452, -1303.1383, 1275.8326, -0.0668, -10.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[18], 0.0, 0.0, 2.0);
	ClanVeh[19] = CreateVehicle(452, -1330.8635, 1400.0321, -0.0668, -10.0000, -1, -1, 100);
	ClanVeh3DText = Create3DTextLabel( "Clan Vehicle", COLOR_PINK, 0.0, 0.0, 0.0, 50.0, 0, true );
	Attach3DTextLabelToVehicle(ClanVeh3DText , ClanVeh[19], 0.0, 0.0, 2.0);

	AirstrikeP = CreatePickup(1313 , 2, -1370.2069,1329.4095,6.2774, -1);
	Create3DTextLabel("Clan Base Support Missles", 0x00FF00FF, -1370.2069,1329.4095,7.5, 40.0, 0);


	MOTW = -1;
	toylist = LoadModelSelectionMenu("toys.txt");
	vehiclelist = LoadModelSelectionMenu("vehiclelist.txt");
	skinlist = LoadModelSelectionMenu("skin.txt");
	new MySQLOpt:options = mysql_init_options();
	mysql_set_option(options, AUTO_RECONNECT, true);
	mysql_set_option(options, POOL_SIZE, 4);
	mysql_log(ERROR | WARNING);
	
	mysql = mysql_connect(DB_HOST, DB_USER, DB_PASSWORD, DATABASE, options);


	seller = CreateActor(32, -244.9153,2603.4380,62.8924,92.5724);
	seller2 = CreateActor(32, 433.9886,2516.0281,16.7936,180.8854);
	seller3 = CreateActor(32, -1518.4572,2638.3040,56.8797,0.4485);
	seller4 = CreateActor(32, -826.3947,1570.4534,27.1222,276.0684);
	seller5 = CreateActor(32, 1134.7487,1916.0989,10.9496,87.5421);
	seller6 = CreateActor(32, -702.0073,943.7122,12.5164,0.0916);
	seller7 = CreateActor(32, 1053.0529,2563.6814,10.9491,357.8206);
	actor = CreateActor(70, -1811.9915,3210.7576,821.9,358.1613);
	SetActorVirtualWorld(actor, 255);
	if(mysql_errno(mysql) != 0) { print("Could not connect to database!"); SendRconCommand("name MYSQL| ERROR"); }
	else printf("MYSQL:: Connected Successfully To Database (%s)", DATABASE);
    SendRconCommand("language Call of Duty [ORIGINAL] EN/BR/ES");
	//

	///CW MVPS TDS
	MVP_BoxTitle = TextDrawCreate(316.000000, 140.000000, "DS win the round~n~~n~~n~");
	TextDrawAlignment(MVP_BoxTitle, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(MVP_BoxTitle, 15410);
	TextDrawFont(MVP_BoxTitle, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(MVP_BoxTitle, 0.389999, 1.499999);
	TextDrawColour(MVP_BoxTitle, -1);
	TextDrawSetOutline(MVP_BoxTitle, 1);
	TextDrawSetProportional(MVP_BoxTitle, 1);
	TextDrawUseBox(MVP_BoxTitle, 1);
	TextDrawBoxColour(MVP_BoxTitle, 15410);
	TextDrawTextSize(MVP_BoxTitle, 442.000000, 228.000000);

	MVP_Box2 = TextDrawCreate(202.000000, 158.000000, "_");
	TextDrawBackgroundColour(MVP_Box2, 255);
	TextDrawFont(MVP_Box2, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(MVP_Box2, 0.500000, 2.500000);
	TextDrawColour(MVP_Box2, -1);
	TextDrawSetOutline(MVP_Box2, 0);
	TextDrawSetProportional(MVP_Box2, 1);
	TextDrawSetShadow(MVP_Box2, 1);
	TextDrawUseBox(MVP_Box2, 1);
	TextDrawBoxColour(MVP_Box2, 2690);
	TextDrawTextSize(MVP_Box2, 430.000000, 0.000000);

	MVP_Picture = TextDrawCreate(201.000000, 158.000000, "mvp logo");
	TextDrawBackgroundColour(MVP_Picture, 0);
	TextDrawFont(MVP_Picture, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(MVP_Picture, 0.500000, 1.000000);
	TextDrawColour(MVP_Picture, -1);
	TextDrawSetOutline(MVP_Picture, 0);
	TextDrawSetProportional(MVP_Picture, 1);
	TextDrawSetShadow(MVP_Picture, 1);
	TextDrawUseBox(MVP_Picture, 1);
	TextDrawBoxColour(MVP_Picture, 0);
	TextDrawTextSize(MVP_Picture, 28.000000, 25.000000);
	TextDrawSetPreviewModel(MVP_Picture, 2050);
	TextDrawSetPreviewRot(MVP_Picture, 0.000000, 0.000000, 0.000000, 1.000000);

	MVP_Description = TextDrawCreate(228.000000, 166.000000, "~y~] ~w~MVP: Seif_Escobar for most eliminations.");
	TextDrawBackgroundColour(MVP_Description, 255);
	TextDrawFont(MVP_Description, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(MVP_Description, 0.180000, 1.000000);
	TextDrawColour(MVP_Description, -1);
	TextDrawSetOutline(MVP_Description, 0);
	TextDrawSetProportional(MVP_Description, 1);
	TextDrawSetShadow(MVP_Description, 1);

	//
    CR_MG = TextDrawCreate(276.000000, 248.000000, "MG");
	TextDrawBackgroundColour(CR_MG, 0);
	TextDrawFont(CR_MG, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_MG, 1.009999, 4.900000);
	TextDrawColour(CR_MG, 255);
	TextDrawSetOutline(CR_MG, 0);
	TextDrawSetProportional(CR_MG, 1);
	TextDrawSetShadow(CR_MG, 1);
	TextDrawTextSize(CR_MG, 66.000000, 83.000000);
	TextDrawSetPreviewModel(CR_MG, 355);
	TextDrawSetPreviewRot(CR_MG, 0.000000, 0.000000, 180.000000, 2.000000);

	CR_LE[0] = TextDrawCreate(271.000000, 252.000000, "LE");
	TextDrawBackgroundColour(CR_LE[0], 0);
	TextDrawFont(CR_LE[0], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_LE[0], 1.000000, 3.799999);
	TextDrawColour(CR_LE[0], 255);
	TextDrawSetOutline(CR_LE[0], 0);
	TextDrawSetProportional(CR_LE[0], 1);
	TextDrawSetShadow(CR_LE[0], 1);
	TextDrawTextSize(CR_LE[0], 58.000000, 60.000000);
	TextDrawSetPreviewModel(CR_LE[0], 19078);
	TextDrawSetPreviewRot(CR_LE[0], -90.000000, 140.000000, 0.000000, 1.000000);

	CR_LE[1] = TextDrawCreate(267.000000, 246.000000, "LE");
	TextDrawBackgroundColour(CR_LE[1], 0);
	TextDrawFont(CR_LE[1], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_LE[1], 0.500000, 1.000000);
	TextDrawColour(CR_LE[1], 255);
	TextDrawSetOutline(CR_LE[1], 0);
	TextDrawSetProportional(CR_LE[1], 1);
	TextDrawSetShadow(CR_LE[1], 1);
	TextDrawTextSize(CR_LE[1], 100.000000, 100.000000);
	TextDrawSetPreviewModel(CR_LE[1], 19079);
	TextDrawSetPreviewRot(CR_LE[1], 0.000000, 90.000000, 120.000000, 1.899999);

	CR_LE[2] = TextDrawCreate(366.000000, 252.000000, "LE");
	TextDrawBackgroundColour(CR_LE[2], 0);
	TextDrawFont(CR_LE[2], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_LE[2], 1.000000, 3.799998);
	TextDrawColour(CR_LE[2], 255);
	TextDrawSetOutline(CR_LE[2], 0);
	TextDrawSetProportional(CR_LE[2], 1);
	TextDrawSetShadow(CR_LE[2], 1);
	TextDrawTextSize(CR_LE[2], -62.000000, 60.000000);
	TextDrawSetPreviewModel(CR_LE[2], 19078);
	TextDrawSetPreviewRot(CR_LE[2], -90.000000, 140.000000, 0.000000, 1.000000);

	CR_MGE[0] = TextDrawCreate(271.000000, 244.000000, "MGE");
	TextDrawBackgroundColour(CR_MGE[0], 0);
	TextDrawFont(CR_MGE[0], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_MGE[0], 1.009999, 4.900000);
	TextDrawColour(CR_MGE[0], 255);
	TextDrawSetOutline(CR_MGE[0], 0);
	TextDrawSetProportional(CR_MGE[0], 1);
	TextDrawSetShadow(CR_MGE[0], 1);
	TextDrawTextSize(CR_MGE[0], 77.000000, 94.000000);
	TextDrawSetPreviewModel(CR_MGE[0], 355);
	TextDrawSetPreviewRot(CR_MGE[0], 0.000000, 29.000000, 180.000000, 3.000000);

	CR_MGE[1] = TextDrawCreate(362.000000, 244.000000, "MGE");
	TextDrawBackgroundColour(CR_MGE[1], 0);
	TextDrawFont(CR_MGE[1], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_MGE[1], 1.009999, 4.900000);
	TextDrawColour(CR_MGE[1], 255);
	TextDrawSetOutline(CR_MGE[1], 0);
	TextDrawSetProportional(CR_MGE[1], 1);
	TextDrawSetShadow(CR_MGE[1], 1);
	TextDrawTextSize(CR_MGE[1], -75.000000, 94.000000);
	TextDrawSetPreviewModel(CR_MGE[1], 355);
	TextDrawSetPreviewRot(CR_MGE[1], 0.000000, 29.000000, 180.000000, 3.000000);

	CR_LEM[0] = TextDrawCreate(366.000000, 252.000000, "LEM");
	TextDrawBackgroundColour(CR_LEM[0], 0);
	TextDrawFont(CR_LEM[0], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_LEM[0], 1.000000, 3.799998);
	TextDrawColour(CR_LEM[0], 255);
	TextDrawSetOutline(CR_LEM[0], 0);
	TextDrawSetProportional(CR_LEM[0], 1);
	TextDrawSetShadow(CR_LEM[0], 1);
	TextDrawTextSize(CR_LEM[0], -62.000000, 60.000000);
	TextDrawSetPreviewModel(CR_LEM[0], 19078);
	TextDrawSetPreviewRot(CR_LEM[0], -90.000000, 140.000000, 0.000000, 1.000000);

	CR_LEM[1] = TextDrawCreate(267.000000, 246.000000, "LEM");
	TextDrawBackgroundColour(CR_LEM[1], 0);
	TextDrawFont(CR_LEM[1], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_LEM[1], 0.500000, 1.000000);
	TextDrawColour(CR_LEM[1], 255);
	TextDrawSetOutline(CR_LEM[1], 0);
	TextDrawSetProportional(CR_LEM[1], 1);
	TextDrawSetShadow(CR_LEM[1], 1);
	TextDrawTextSize(CR_LEM[1], 100.000000, 100.000000);
	TextDrawSetPreviewModel(CR_LEM[1], 19079);
	TextDrawSetPreviewRot(CR_LEM[1], 0.000000, 90.000000, 120.000000, 1.899999);

	CR_LEM[2] = TextDrawCreate(271.000000, 252.000000, "LEM");
	TextDrawBackgroundColour(CR_LEM[2], 0);
	TextDrawFont(CR_LEM[2], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_LEM[2], 1.000000, 3.799998);
	TextDrawColour(CR_LEM[2], 255);
	TextDrawSetOutline(CR_LEM[2], 0);
	TextDrawSetProportional(CR_LEM[2], 1);
	TextDrawSetShadow(CR_LEM[2], 1);
	TextDrawTextSize(CR_LEM[2], 58.000000, 60.000000);
	TextDrawSetPreviewModel(CR_LEM[2], 19078);
	TextDrawSetPreviewRot(CR_LEM[2], -90.000000, 140.000000, 0.000000, 1.000000);

	CR_LEM[3] = TextDrawCreate(298.000000, 266.000000, "]_____]");
	TextDrawBackgroundColour(CR_LEM[3], 255);
	TextDrawFont(CR_LEM[3], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CR_LEM[3], 0.300000, 1.100000);
	TextDrawColour(CR_LEM[3], -626712321);
	TextDrawSetOutline(CR_LEM[3], 0);
	TextDrawSetProportional(CR_LEM[3], 1);
	TextDrawSetShadow(CR_LEM[3], 0);

	CR_S = TextDrawCreate(393.000000, 245.000000, "Silver");
	TextDrawBackgroundColour(CR_S, 0);
	TextDrawFont(CR_S, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_S, 0.500000, 1.000000);
	TextDrawColour(CR_S, -1);
	TextDrawSetOutline(CR_S, 1);
	TextDrawSetProportional(CR_S, 1);
	TextDrawTextSize(CR_S, -149.000000, 86.000000);
	TextDrawSetPreviewModel(CR_S, 19781);
	TextDrawSetPreviewRot(CR_S, 90.000000, 0.000000, -90.000000, 2.000000);

	CR_SM = TextDrawCreate(393.000000, 245.000000, "Silver Master");
	TextDrawBackgroundColour(CR_SM, 0);
	TextDrawFont(CR_SM, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_SM, 0.500000, 1.000000);
	TextDrawColour(CR_SM, -1);
	TextDrawSetOutline(CR_SM, 1);
	TextDrawSetProportional(CR_SM, 1);
	TextDrawTextSize(CR_SM, -149.000000, 86.000000);
	TextDrawSetPreviewModel(CR_SM, 19785);
	TextDrawSetPreviewRot(CR_SM, 90.000000, 0.000000, -90.000000, 2.000000);

	CR_GE[0]= TextDrawCreate(287.000000, 253.000000, "GE");
	TextDrawBackgroundColour(CR_GE[0], 0);
	TextDrawFont(CR_GE[0], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_GE[0], 0.500000, 1.000000);
	TextDrawColour(CR_GE[0], 255);
	TextDrawSetOutline(CR_GE[0], 0);
	TextDrawSetProportional(CR_GE[0], 1);
	TextDrawSetShadow(CR_GE[0], 1);
	TextDrawTextSize(CR_GE[0], 61.000000, 70.000000);
	TextDrawSetPreviewModel(CR_GE[0], 2699);
	TextDrawSetPreviewRot(CR_GE[0], 90.000000, 0.000000, 0.000000, 1.000000);

	CR_GE[1] = TextDrawCreate(283.000000, 251.000000, "GE");
	TextDrawBackgroundColour(CR_GE[1], 0);
	TextDrawFont(CR_GE[1], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_GE[1], 0.500000, 1.000000);
	TextDrawColour(CR_GE[1], 255);
	TextDrawSetOutline(CR_GE[1], 0);
	TextDrawSetProportional(CR_GE[1], 1);
	TextDrawSetShadow(CR_GE[1], 1);
	TextDrawTextSize(CR_GE[1], 61.000000, 70.000000);
	TextDrawSetPreviewModel(CR_GE[1], 355);
	TextDrawSetPreviewRot(CR_GE[1], 0.000000, -20.000000, 0.000000, 3.000000);

	CR_GE[3] = TextDrawCreate(291.000000, 251.000000, "GE");
	TextDrawBackgroundColour(CR_GE[3], 0);
	TextDrawFont(CR_GE[3], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CR_GE[3], 0.500000, 1.000000);
	TextDrawColour(CR_GE[3], 255);
	TextDrawSetOutline(CR_GE[3], 0);
	TextDrawSetProportional(CR_GE[3], 1);
	TextDrawSetShadow(CR_GE[3], 1);
	TextDrawTextSize(CR_GE[3], 61.000000, 70.000000);
	TextDrawSetPreviewModel(CR_GE[3], 355);
	TextDrawSetPreviewRot(CR_GE[3], 0.000000, 20.000000, 180.000000, 3.000000);

	CR_GE[2] = TextDrawCreate(294.000000, 279.000000, "]______________]");
	TextDrawBackgroundColour(CR_GE[2], 255);
	TextDrawFont(CR_GE[2], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CR_GE[2], 0.200000, 0.899999);
	TextDrawColour(CR_GE[2], -626712321);
	TextDrawSetOutline(CR_GE[2], 0);
	TextDrawSetProportional(CR_GE[2], 1);
	TextDrawSetShadow(CR_GE[2], 0);


	HYD[0] = TextDrawCreate(214.624984, 185.683349, "box");
	TextDrawLetterSize(HYD[0], 0.000000, 7.246011);
	TextDrawTextSize(HYD[0], 427.425170, 0.000000);
	TextDrawAlignment(HYD[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(HYD[0], -1);
	TextDrawUseBox(HYD[0], 1);
	TextDrawBoxColour(HYD[0], 100);
	TextDrawSetShadow(HYD[0], 0);
	TextDrawSetOutline(HYD[0], 0);
	TextDrawBackgroundColour(HYD[0], 255);
	TextDrawFont(HYD[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(HYD[0], 1);
	TextDrawSetShadow(HYD[0], 0);

	HYD[1] = TextDrawCreate(259.999908, 187.759979, "rank_requIreD");
	TextDrawLetterSize(HYD[1], 0.483200, 1.622400);
	TextDrawAlignment(HYD[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(HYD[1], -419406081);
	TextDrawSetShadow(HYD[1], 0);
	TextDrawSetOutline(HYD[1], 1);
	TextDrawBackgroundColour(HYD[1], 255);
	TextDrawFont(HYD[1], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(HYD[1], 1);
	TextDrawSetShadow(HYD[1], 0);

	//
	ClanBar1 = TextDrawCreate(156.000000, 133.000000, "I");
	TextDrawBackgroundColour(ClanBar1, 255);
	TextDrawFont(ClanBar1, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(ClanBar1, 25.379980, 0.050000);
	TextDrawColour(ClanBar1, -16776961);
	TextDrawSetOutline(ClanBar1, 0);
	TextDrawSetProportional(ClanBar1, 1);
	TextDrawSetShadow(ClanBar1, 1);

	ClanTitle1 = TextDrawCreate(177.000000, 201.000000, "Honor Points:~n~Total Kills:~n~Total Deaths:~n~Skin:~n~Team:");
	TextDrawBackgroundColour(ClanTitle1, 250);
	TextDrawFont(ClanTitle1, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(ClanTitle1, 0.170000, 1.000000);
	TextDrawColour(ClanTitle1, -1);
	TextDrawSetOutline(ClanTitle1, 1);
	TextDrawSetProportional(ClanTitle1, 1);


	ClanTitle2= TextDrawCreate(321.000000, 201.000000, "Clan Level:~n~Total Members:~n~Online Members:~n~Clan War Win:~n~Clan War Lose:");
	TextDrawBackgroundColour(ClanTitle2, 250);
	TextDrawFont(ClanTitle2, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(ClanTitle2, 0.170000, 1.000000);
	TextDrawColour(ClanTitle2, -1);
	TextDrawSetOutline(ClanTitle2, 1);
	TextDrawSetProportional(ClanTitle2, 1);

	ClanBar2 = TextDrawCreate(317.000000, 268.000000, "l");
	TextDrawBackgroundColour(ClanBar2, 255);
	TextDrawFont(ClanBar2, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(ClanBar2, 0.069999, -8.599999);
	TextDrawColour(ClanBar2, -16776961);
	TextDrawSetOutline(ClanBar2, 1);
	TextDrawSetProportional(ClanBar2, 1);

	StatsBox = TextDrawCreate(317.000000, 121.000000, "stats~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~");
	TextDrawAlignment(StatsBox, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(StatsBox, 255);
	TextDrawFont(StatsBox, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(StatsBox, 0.170000, 1.100000);
	TextDrawColour(StatsBox, 536936447);
	TextDrawSetOutline(StatsBox, 0);
	TextDrawSetProportional(StatsBox, 1);
	TextDrawSetShadow(StatsBox, 1);
	TextDrawUseBox(StatsBox, 1);
	TextDrawBoxColour(StatsBox, 185);
	TextDrawTextSize(StatsBox, -1.000000, 285.000000);

	StatsBoxLine = TextDrawCreate(172.000000, 133.000000, "I");
	TextDrawBackgroundColour(StatsBoxLine, 255);
	TextDrawFont(StatsBoxLine, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(StatsBoxLine, 25.379980, 0.050000);
	TextDrawColour(StatsBoxLine, 536936447);
	TextDrawSetOutline(StatsBoxLine, 0);
	TextDrawSetProportional(StatsBoxLine, 1);
	TextDrawSetShadow(StatsBoxLine, 1);

	StatsBoxL2 = TextDrawCreate(316.000000, 277.000000, "l");
	TextDrawBackgroundColour(StatsBoxL2, 255);
	TextDrawFont(StatsBoxL2, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(StatsBoxL2, 0.050000, -13.399998);
	TextDrawColour(StatsBoxL2, 554827775);
	TextDrawSetOutline(StatsBoxL2, 0);
	TextDrawSetProportional(StatsBoxL2, 1);
	TextDrawSetShadow(StatsBoxL2, 1);


	StatsArrowLeft = TextDrawCreate(296.000000, 158.000000, "LD_BEAT:left");
	TextDrawBackgroundColour( StatsArrowLeft, 255);
	TextDrawFont( StatsArrowLeft, TEXT_DRAW_FONT_SPRITE_DRAW);
	TextDrawLetterSize( StatsArrowLeft, 0.300000, -1.000000);
	TextDrawColour( StatsArrowLeft, 65535);
	TextDrawSetOutline( StatsArrowLeft, 0);
	TextDrawSetProportional( StatsArrowLeft, 1);
	TextDrawSetShadow( StatsArrowLeft, 1);
	TextDrawUseBox( StatsArrowLeft, 1);
	TextDrawBoxColour( StatsArrowLeft, 255);
	TextDrawTextSize( StatsArrowLeft, 14.000000, 14.000000);
	TextDrawSetSelectable( StatsArrowLeft,1);

	StatsArrowRight = TextDrawCreate( 323.000000, 158.000000, "LD_BEAT:right");
	TextDrawBackgroundColour(StatsArrowRight, 255);
	TextDrawFont(StatsArrowRight, TEXT_DRAW_FONT_SPRITE_DRAW);
	TextDrawLetterSize(StatsArrowRight, 0.300000, -1.000000);
	TextDrawColour(StatsArrowRight, 65535);
	TextDrawSetOutline(StatsArrowRight, 0);
	TextDrawSetProportional(StatsArrowRight, 1);
	TextDrawSetShadow(StatsArrowRight, 1);
	TextDrawUseBox(StatsArrowRight, 1);
	TextDrawBoxColour(StatsArrowRight, 255);
	TextDrawTextSize(StatsArrowRight, 14.000000, 14.000000);
	TextDrawSetSelectable(StatsArrowRight, 1);

	StatsExitButton = TextDrawCreate(448.000000, 120.000000, "LD_CHAT:thumbdn");
	TextDrawBackgroundColour(StatsExitButton, 255);
	TextDrawFont(StatsExitButton, TEXT_DRAW_FONT_SPRITE_DRAW);
	TextDrawLetterSize(StatsExitButton, 0.400000, -1.000000);
	TextDrawColour(StatsExitButton, 1684339350);
	TextDrawSetOutline(StatsExitButton, 0);
	TextDrawSetProportional(StatsExitButton, 1);
	TextDrawSetShadow(StatsExitButton, 1);
	TextDrawUseBox(StatsExitButton, 1);
	TextDrawBoxColour(StatsExitButton, 255);
	TextDrawTextSize(StatsExitButton, 10.000000, 15.000000);
	TextDrawSetSelectable(StatsExitButton, 1);


	CapturedTD = TextDrawCreate(314.000000, 175.000000, "~g~~h~Captured~n~+5000$ & +5 Score");
	TextDrawAlignment(CapturedTD, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CapturedTD, 100);
	TextDrawFont(CapturedTD, TEXT_DRAW_FONT_3);
	TextDrawLetterSize(CapturedTD, 0.590000, 2.300001);
	TextDrawColour(CapturedTD, 7929855);
	TextDrawSetOutline(CapturedTD, 1);
	TextDrawSetProportional(CapturedTD, 1);

	PUBGKillTD = TextDrawCreate(317.000000, 294.000000, "~r~~h~Christofski ~w~ was killed by ~b~~h~Seif_Tounes[GE]");
	TextDrawAlignment(PUBGKillTD, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(PUBGKillTD, 255);
	TextDrawFont(PUBGKillTD, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(PUBGKillTD, 0.230000, 1.100000);
	TextDrawColour(PUBGKillTD, -1);
	TextDrawSetOutline(PUBGKillTD, 0);
	TextDrawSetProportional(PUBGKillTD, 1);
	TextDrawSetShadow(PUBGKillTD, 1);
	TextDrawSetSelectable(PUBGKillTD, 0);

	PubgSafeZoneTD = TextDrawCreate(315.000000, 320.000000, "Restricting play area in 1 minute");
	TextDrawAlignment(PubgSafeZoneTD, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(PubgSafeZoneTD, 20);
	TextDrawFont(PubgSafeZoneTD, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(PubgSafeZoneTD, 0.230000, 1.100000);
	TextDrawColour(PubgSafeZoneTD, -34572289);
	TextDrawSetOutline(PubgSafeZoneTD, 1);
	TextDrawSetProportional(PubgSafeZoneTD, 1);

	PUBGStaticTD = TextDrawCreate(616.000000, 7.000000, "ALIVE");
	TextDrawAlignment(PUBGStaticTD, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(PUBGStaticTD, 255);
	TextDrawFont(PUBGStaticTD, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(PUBGStaticTD, 0.359999, 2.000000);
	TextDrawColour(PUBGStaticTD, 168430200);
	TextDrawSetOutline(PUBGStaticTD, 0);
	TextDrawSetProportional(PUBGStaticTD, 1);
	TextDrawSetShadow(PUBGStaticTD, 0);
	TextDrawUseBox(PUBGStaticTD, 1);
	TextDrawBoxColour(PUBGStaticTD, -206);
	TextDrawTextSize(PUBGStaticTD, 550.000000, 46.000000);

	PUBGAliveTD = TextDrawCreate(579.299987, 7.000000, "1");
	TextDrawAlignment(PUBGAliveTD, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(PUBGAliveTD, 255);
	TextDrawFont(PUBGAliveTD, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(PUBGAliveTD, 0.359999, 2.000000);
	TextDrawColour(PUBGAliveTD, -1);
	TextDrawSetOutline(PUBGAliveTD, 0);
	TextDrawSetProportional(PUBGAliveTD, 1);
	TextDrawSetShadow(PUBGAliveTD, 1);
	TextDrawUseBox(PUBGAliveTD, 1);
	TextDrawBoxColour(PUBGAliveTD, 84215366);
	TextDrawTextSize(PUBGAliveTD, 550.000000, 22.000000);

	QuestTitle = TextDrawCreate(587.000000, 295.000000, "Daily Quests");
	TextDrawBackgroundColour(QuestTitle, 255);
	TextDrawFont(QuestTitle, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(QuestTitle, 0.209999, 1.000000);
	TextDrawColour(QuestTitle, -1);
	TextDrawSetOutline(QuestTitle, 0);
	TextDrawSetProportional(QuestTitle, 1);
	TextDrawSetShadow(QuestTitle, 1);
	TextDrawUseBox(QuestTitle, 1);
	TextDrawBoxColour(QuestTitle, 838860880);
	TextDrawTextSize(QuestTitle, 660.000000, 68.000000);
	TextDrawSetSelectable(QuestTitle, 0);


	Quest[0] = TextDrawCreate(509.000000, 307.000000, "Make 50 deagle kills");
	TextDrawBackgroundColour(Quest[0], 255);
	TextDrawFont(Quest[0], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(Quest[0], 0.180000, 0.899999);
	TextDrawColour(Quest[0], -1);
	TextDrawSetOutline(Quest[0], 0);
	TextDrawSetProportional(Quest[0], 1);
	TextDrawSetShadow(Quest[0], 1);
	TextDrawUseBox(Quest[0], 1);
	TextDrawBoxColour(Quest[0], 80);
	TextDrawTextSize(Quest[0], 640.000000, 49.000000);
	TextDrawSetSelectable(Quest[0], 0);

	Quest[1] = TextDrawCreate(509.000000, 319.000000, "Capture 40 Zones");
	TextDrawBackgroundColour(Quest[1], 255);
	TextDrawFont(Quest[1], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(Quest[1], 0.180000, 0.899999);
	TextDrawColour(Quest[1], -1);
	TextDrawSetOutline(Quest[1], 0);
	TextDrawSetProportional(Quest[1], 1);
	TextDrawSetShadow(Quest[1], 1);
	TextDrawUseBox(Quest[1], 1);
	TextDrawBoxColour(Quest[1], 80);
	TextDrawTextSize(Quest[1], 640.000000, 49.000000);
	TextDrawSetSelectable(Quest[1], 0);

	Quest[2] = TextDrawCreate(509.000000, 331.000000, "Make 15 kill assists");
	TextDrawBackgroundColour(Quest[2], 255);
	TextDrawFont(Quest[2], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(Quest[2], 0.180000, 0.899999);
	TextDrawColour(Quest[2], -1);
	TextDrawSetOutline(Quest[2], 0);
	TextDrawSetProportional(Quest[2], 1);
	TextDrawSetShadow(Quest[2], 1);
	TextDrawUseBox(Quest[2], 1);
	TextDrawBoxColour(Quest[2], 80);
	TextDrawTextSize(Quest[2], 640.000000, 49.000000);
	TextDrawSetSelectable(Quest[2], 0);

	Quest[3] = TextDrawCreate(509.000000, 343.000000, "VIP Quest: Capture 20 Zones");
	TextDrawBackgroundColour(Quest[3], 255);
	TextDrawFont(Quest[3], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(Quest[3], 0.180000, 0.899999);
	TextDrawColour(Quest[3], -1);
	TextDrawSetOutline(Quest[3], 0);
	TextDrawSetProportional(Quest[3], 1);
	TextDrawSetShadow(Quest[3], 1);
	TextDrawUseBox(Quest[3], 1);
	TextDrawBoxColour(Quest[3], 3315250);
	TextDrawTextSize(Quest[3], 640.000000, 49.000000);
	TextDrawSetSelectable(Quest[3], 0);

	Quest[4] = TextDrawCreate(509.000000, 355.000000, "Clan Quest: Heal 10 Clan Members");
	TextDrawBackgroundColour(Quest[4], 255);
	TextDrawFont(Quest[4], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(Quest[4], 0.180000, 0.899999);
	TextDrawColour(Quest[4], -1);
	TextDrawSetOutline(Quest[4], 0);
	TextDrawSetProportional(Quest[4], 1);
	TextDrawSetShadow(Quest[4], 1);
	TextDrawUseBox(Quest[4], 1);
	TextDrawBoxColour(Quest[4], 3276850);
	TextDrawTextSize(Quest[4], 640.000000, 49.000000);
	TextDrawSetSelectable(Quest[4], 0);


	//Admin CMDs Textdraws

	for (new line; line < sizeof(AdminCMD_STR); line ++)
	{
		strcopy(AdminCMD_STR[line], " ");
	}

	AdminCMD_TD[0] = TextDrawCreate(153.849670, 363.100158, " ");
	TextDrawLetterSize(AdminCMD_TD[0], 0.191872, 0.765833);
	TextDrawAlignment(AdminCMD_TD[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(AdminCMD_TD[0], -2147450625);
	TextDrawSetShadow(AdminCMD_TD[0], 0);
	TextDrawSetOutline(AdminCMD_TD[0], 1);
	TextDrawBackgroundColour(AdminCMD_TD[0], 255);
	TextDrawFont(AdminCMD_TD[0], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(AdminCMD_TD[0], 1);
	TextDrawSetShadow(AdminCMD_TD[0], 0);

	AdminCMD_TD[1] = TextDrawCreate(153.849670, 370.100585, " ");
	TextDrawLetterSize(AdminCMD_TD[1], 0.191872, 0.765833);
	TextDrawAlignment(AdminCMD_TD[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(AdminCMD_TD[1], -2147450625);
	TextDrawSetShadow(AdminCMD_TD[1], 0);
	TextDrawSetOutline(AdminCMD_TD[1], 1);
	TextDrawBackgroundColour(AdminCMD_TD[1], 255);
	TextDrawFont(AdminCMD_TD[1], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(AdminCMD_TD[1], 1);
	TextDrawSetShadow(AdminCMD_TD[1], 0);

	AdminCMD_TD[2] = TextDrawCreate(153.849670, 377.301025, " ");
	TextDrawLetterSize(AdminCMD_TD[2], 0.191872, 0.765833);
	TextDrawAlignment(AdminCMD_TD[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(AdminCMD_TD[2], -2147450625);
	TextDrawSetShadow(AdminCMD_TD[2], 0);
	TextDrawSetOutline(AdminCMD_TD[2], 1);
	TextDrawBackgroundColour(AdminCMD_TD[2], 255);
	TextDrawFont(AdminCMD_TD[2], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(AdminCMD_TD[2], 1);
	TextDrawSetShadow(AdminCMD_TD[2], 0);

	AdminCMD_TD[3] = TextDrawCreate(153.849670, 384.401458, " ");
	TextDrawLetterSize(AdminCMD_TD[3], 0.191872, 0.765833);
	TextDrawAlignment(AdminCMD_TD[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(AdminCMD_TD[3], -2147450625);
	TextDrawSetShadow(AdminCMD_TD[3], 0);
	TextDrawSetOutline(AdminCMD_TD[3], 1);
	TextDrawBackgroundColour(AdminCMD_TD[3], 255);
	TextDrawFont(AdminCMD_TD[3], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(AdminCMD_TD[3], 1);
	TextDrawSetShadow(AdminCMD_TD[3], 0);


	//New Spec Panel
	SpecPanel_TD[0] = TextDrawCreate(-2.249994, 234.882690, "box");
	TextDrawLetterSize(SpecPanel_TD[0], 0.000000, 12.168492);
	TextDrawTextSize(SpecPanel_TD[0], 646.001770, 0.000000);
	TextDrawAlignment(SpecPanel_TD[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[0], -1);
	TextDrawUseBox(SpecPanel_TD[0], 1);
	TextDrawBoxColour(SpecPanel_TD[0], 150);
	TextDrawSetShadow(SpecPanel_TD[0], 0);
	TextDrawSetOutline(SpecPanel_TD[0], 0);
	TextDrawBackgroundColour(SpecPanel_TD[0], 150);
	TextDrawFont(SpecPanel_TD[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[0], 1);
	TextDrawSetShadow(SpecPanel_TD[0], 0);

	SpecPanel_TD[1] = TextDrawCreate(26.150035, 236.666671, "Ip_Lookup");
	TextDrawLetterSize(SpecPanel_TD[1], 0.400000, 1.600000);
	TextDrawAlignment(SpecPanel_TD[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[1], 65535);
	TextDrawSetShadow(SpecPanel_TD[1], 0);
	TextDrawSetOutline(SpecPanel_TD[1], 1);
	TextDrawBackgroundColour(SpecPanel_TD[1], 255);
	TextDrawFont(SpecPanel_TD[1], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(SpecPanel_TD[1], 1);
	TextDrawSetShadow(SpecPanel_TD[1], 0);

	SpecPanel_TD[2] = TextDrawCreate(34.174102, 321.649963, "box");
	TextDrawLetterSize(SpecPanel_TD[2], 0.000000, 1.562500);
	TextDrawTextSize(SpecPanel_TD[2], 102.799926, 0.000000);
	TextDrawAlignment(SpecPanel_TD[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[2], -1);
	TextDrawUseBox(SpecPanel_TD[2], 1);
	TextDrawBoxColour(SpecPanel_TD[2], 255);
	TextDrawSetShadow(SpecPanel_TD[2], 0);
	TextDrawSetOutline(SpecPanel_TD[2], 0);
	TextDrawBackgroundColour(SpecPanel_TD[2], 255);
	TextDrawFont(SpecPanel_TD[2], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[2], 1);
	TextDrawSetShadow(SpecPanel_TD[2], 0);

	SpecPanel_TD[3] = TextDrawCreate(35.174091, 322.850036, "box");
	TextDrawLetterSize(SpecPanel_TD[3], 0.000000, 1.250998);
	TextDrawTextSize(SpecPanel_TD[3], 101.179969, 0.000000);
	TextDrawAlignment(SpecPanel_TD[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[3], -1);
	TextDrawUseBox(SpecPanel_TD[3], 1);
	TextDrawBoxColour(SpecPanel_TD[3], 65535);
	TextDrawSetShadow(SpecPanel_TD[3], 0);
	TextDrawSetOutline(SpecPanel_TD[3], 0);
	TextDrawBackgroundColour(SpecPanel_TD[3], 255);
	TextDrawFont(SpecPanel_TD[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[3], 1);
	TextDrawSetShadow(SpecPanel_TD[3], 0);

	SpecPanel_TD[4] = TextDrawCreate(41.625030, 320.083343, "check");
	TextDrawLetterSize(SpecPanel_TD[4], 0.400000, 1.600000);
	TextDrawTextSize(SpecPanel_TD[4], 101.179969, 11.000000);
	TextDrawAlignment(SpecPanel_TD[4], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[4], -1);
	TextDrawSetShadow(SpecPanel_TD[4], 0);
	TextDrawSetOutline(SpecPanel_TD[4], 1);
	TextDrawBackgroundColour(SpecPanel_TD[4], 255);
	TextDrawFont(SpecPanel_TD[4], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(SpecPanel_TD[4], 1);
	TextDrawSetShadow(SpecPanel_TD[4], 0);
	TextDrawSetSelectable(SpecPanel_TD[4], true);

	SpecPanel_TD[5] = TextDrawCreate(197.750289, 236.666671, "GAME_STATS");
	TextDrawLetterSize(SpecPanel_TD[5], 0.400000, 1.600000);
	TextDrawAlignment(SpecPanel_TD[5], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[5], 65535);
	TextDrawSetShadow(SpecPanel_TD[5], 0);
	TextDrawSetOutline(SpecPanel_TD[5], 1);
	TextDrawBackgroundColour(SpecPanel_TD[5], 255);
	TextDrawFont(SpecPanel_TD[5], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(SpecPanel_TD[5], 1);
	TextDrawSetShadow(SpecPanel_TD[5], 0);

	SpecPanel_TD[6] = TextDrawCreate(360.750305, 236.666671, "WEAPON_DATA");
	TextDrawLetterSize(SpecPanel_TD[6], 0.400000, 1.600000);
	TextDrawAlignment(SpecPanel_TD[6], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[6], 65535);
	TextDrawSetShadow(SpecPanel_TD[6], 0);
	TextDrawSetOutline(SpecPanel_TD[6], 1);
	TextDrawBackgroundColour(SpecPanel_TD[6], 255);
	TextDrawFont(SpecPanel_TD[6], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(SpecPanel_TD[6], 1);
	TextDrawSetShadow(SpecPanel_TD[6], 0);

	SpecPanel_TD[7] = TextDrawCreate(539.050659, 236.666671, "ACTIONS");
	TextDrawLetterSize(SpecPanel_TD[7], 0.400000, 1.600000);
	TextDrawAlignment(SpecPanel_TD[7], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[7], 65535);
	TextDrawSetShadow(SpecPanel_TD[7], 0);
	TextDrawSetOutline(SpecPanel_TD[7], 1);
	TextDrawBackgroundColour(SpecPanel_TD[7], 255);
	TextDrawFont(SpecPanel_TD[7], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(SpecPanel_TD[7], 1);
	TextDrawSetShadow(SpecPanel_TD[7], 0);

	SpecPanel_TD[8] = TextDrawCreate(519.624145, 259.816711, "box");
	TextDrawLetterSize(SpecPanel_TD[8], 0.000000, 1.520498);
	TextDrawTextSize(SpecPanel_TD[8], 629.764160, 0.000000);
	TextDrawAlignment(SpecPanel_TD[8], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[8], -1);
	TextDrawUseBox(SpecPanel_TD[8], 1);
	TextDrawBoxColour(SpecPanel_TD[8], 255);
	TextDrawSetShadow(SpecPanel_TD[8], 0);
	TextDrawSetOutline(SpecPanel_TD[8], 0);
	TextDrawBackgroundColour(SpecPanel_TD[8], 255);
	TextDrawFont(SpecPanel_TD[8], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[8], 1);
	TextDrawSetShadow(SpecPanel_TD[8], 0);

	SpecPanel_TD[9] = TextDrawCreate(519.624145, 281.816772, "box");
	TextDrawLetterSize(SpecPanel_TD[9], 0.000000, 1.562500);
	TextDrawTextSize(SpecPanel_TD[9], 629.764160, 0.000000);
	TextDrawAlignment(SpecPanel_TD[9], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[9], -1);
	TextDrawUseBox(SpecPanel_TD[9], 1);
	TextDrawBoxColour(SpecPanel_TD[9], 255);
	TextDrawSetShadow(SpecPanel_TD[9], 0);
	TextDrawSetOutline(SpecPanel_TD[9], 0);
	TextDrawBackgroundColour(SpecPanel_TD[9], 255);
	TextDrawFont(SpecPanel_TD[9], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[9], 1);
	TextDrawSetShadow(SpecPanel_TD[9], 0);

	SpecPanel_TD[10] = TextDrawCreate(519.624145, 304.916900, "box");
	TextDrawLetterSize(SpecPanel_TD[10], 0.000000, 1.562500);
	TextDrawTextSize(SpecPanel_TD[10], 629.764160, 0.000000);
	TextDrawAlignment(SpecPanel_TD[10], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[10], -1);
	TextDrawUseBox(SpecPanel_TD[10], 1);
	TextDrawBoxColour(SpecPanel_TD[10], 255);
	TextDrawSetShadow(SpecPanel_TD[10], 0);
	TextDrawSetOutline(SpecPanel_TD[10], 0);
	TextDrawBackgroundColour(SpecPanel_TD[10], 255);
	TextDrawFont(SpecPanel_TD[10], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[10], 1);
	TextDrawSetShadow(SpecPanel_TD[10], 0);

	SpecPanel_TD[11] = TextDrawCreate(519.624145, 326.917022, "box");
	TextDrawLetterSize(SpecPanel_TD[11], 0.000000, 1.562500);
	TextDrawTextSize(SpecPanel_TD[11], 629.764160, 0.000000);
	TextDrawAlignment(SpecPanel_TD[11], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[11], -1);
	TextDrawUseBox(SpecPanel_TD[11], 1);
	TextDrawBoxColour(SpecPanel_TD[11], 255);
	TextDrawSetShadow(SpecPanel_TD[11], 0);
	TextDrawSetOutline(SpecPanel_TD[11], 0);
	TextDrawBackgroundColour(SpecPanel_TD[11], 255);
	TextDrawFont(SpecPanel_TD[11], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[11], 1);
	TextDrawSetShadow(SpecPanel_TD[11], 0);

	SpecPanel_TD[12] = TextDrawCreate(520.849121, 260.916656, "box");
	TextDrawLetterSize(SpecPanel_TD[12], 0.000000, 1.267498);
	TextDrawTextSize(SpecPanel_TD[12], 627.609802, 0.000000);
	TextDrawAlignment(SpecPanel_TD[12], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[12], -1);
	TextDrawUseBox(SpecPanel_TD[12], 1);
	TextDrawBoxColour(SpecPanel_TD[12], 65535);
	TextDrawSetShadow(SpecPanel_TD[12], 0);
	TextDrawSetOutline(SpecPanel_TD[12], 0);
	TextDrawBackgroundColour(SpecPanel_TD[12], 255);
	TextDrawFont(SpecPanel_TD[12], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[12], 1);
	TextDrawSetShadow(SpecPanel_TD[12], 0);

	SpecPanel_TD[13] = TextDrawCreate(520.849121, 283.416656, "box");
	TextDrawLetterSize(SpecPanel_TD[13], 0.000000, 1.224498);
	TextDrawTextSize(SpecPanel_TD[13], 627.609802, 0.000000);
	TextDrawAlignment(SpecPanel_TD[13], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[13], -1);
	TextDrawUseBox(SpecPanel_TD[13], 1);
	TextDrawBoxColour(SpecPanel_TD[13], 65535);
	TextDrawSetShadow(SpecPanel_TD[13], 0);
	TextDrawSetOutline(SpecPanel_TD[13], 0);
	TextDrawBackgroundColour(SpecPanel_TD[13], 255);
	TextDrawFont(SpecPanel_TD[13], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[13], 1);
	TextDrawSetShadow(SpecPanel_TD[13], 0);

	SpecPanel_TD[14] = TextDrawCreate(520.849121, 305.916656, "box");
	TextDrawLetterSize(SpecPanel_TD[14], 0.000000, 1.224498);
	TextDrawTextSize(SpecPanel_TD[14], 627.609802, 0.000000);
	TextDrawAlignment(SpecPanel_TD[14], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[14], -1);
	TextDrawUseBox(SpecPanel_TD[14], 1);
	TextDrawBoxColour(SpecPanel_TD[14], 65535);
	TextDrawSetShadow(SpecPanel_TD[14], 0);
	TextDrawSetOutline(SpecPanel_TD[14], 0);
	TextDrawBackgroundColour(SpecPanel_TD[14], 255);
	TextDrawFont(SpecPanel_TD[14], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[14], 1);
	TextDrawSetShadow(SpecPanel_TD[14], 0);

	SpecPanel_TD[15] = TextDrawCreate(520.849121, 328.416656, "box");
	TextDrawLetterSize(SpecPanel_TD[15], 0.000000, 1.224498);
	TextDrawTextSize(SpecPanel_TD[15], 627.609802, 0.000000);
	TextDrawAlignment(SpecPanel_TD[15], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[15], -1);
	TextDrawUseBox(SpecPanel_TD[15], 1);
	TextDrawBoxColour(SpecPanel_TD[15], 65535);
	TextDrawSetShadow(SpecPanel_TD[15], 0);
	TextDrawSetOutline(SpecPanel_TD[15], 0);
	TextDrawBackgroundColour(SpecPanel_TD[15], 255);
	TextDrawFont(SpecPanel_TD[15], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[15], 1);
	TextDrawSetShadow(SpecPanel_TD[15], 0);

	SpecPanel_TD[16] = TextDrawCreate(526.625000, 261.749969, "ban_-_illegal_mods");
	TextDrawLetterSize(SpecPanel_TD[16], 0.224996, 1.080832);
	TextDrawTextSize(SpecPanel_TD[16], 627.609802, 12.000000);
	TextDrawAlignment(SpecPanel_TD[16], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[16], -1);
	TextDrawSetShadow(SpecPanel_TD[16], 0);
	TextDrawSetOutline(SpecPanel_TD[16], 1);
	TextDrawBackgroundColour(SpecPanel_TD[16], 255);
	TextDrawFont(SpecPanel_TD[16], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(SpecPanel_TD[16], 1);
	TextDrawSetShadow(SpecPanel_TD[16], 0);
	TextDrawSetSelectable(SpecPanel_TD[16], true);

    SpecPanel_TD[17] = TextDrawCreate(541.125000, 283.749969, "kick_-_bugged");
	TextDrawLetterSize(SpecPanel_TD[17], 0.224996, 1.080832);
	TextDrawTextSize(SpecPanel_TD[17], 627.609802, 11.000000);
	TextDrawAlignment(SpecPanel_TD[17], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[17], -1);
	TextDrawSetShadow(SpecPanel_TD[17], 0);
	TextDrawSetOutline(SpecPanel_TD[17], 1);
	TextDrawBackgroundColour(SpecPanel_TD[17], 255);
	TextDrawFont(SpecPanel_TD[17], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(SpecPanel_TD[17], 1);
	TextDrawSetShadow(SpecPanel_TD[17], 0);
	TextDrawSetSelectable(SpecPanel_TD[17], true);

	SpecPanel_TD[18] = TextDrawCreate(561.922607, 306.249969, "slap");
	TextDrawLetterSize(SpecPanel_TD[18], 0.224996, 1.080832);
	TextDrawTextSize(SpecPanel_TD[18], 627.609802, 11.000000);
	TextDrawAlignment(SpecPanel_TD[18], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[18], -1);
	TextDrawSetShadow(SpecPanel_TD[18], 0);
	TextDrawSetOutline(SpecPanel_TD[18], 1);
	TextDrawBackgroundColour(SpecPanel_TD[18], 255);
	TextDrawFont(SpecPanel_TD[18], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(SpecPanel_TD[18], 1);
	TextDrawSetShadow(SpecPanel_TD[18], 0);
	TextDrawSetSelectable(SpecPanel_TD[18], true);

    SpecPanel_TD[19] = TextDrawCreate(557.125000, 328.749969, "SPAWN");
	TextDrawLetterSize(SpecPanel_TD[19], 0.224996, 1.080832);
	TextDrawTextSize(SpecPanel_TD[19], 627.609802, 11.000000);
	TextDrawAlignment(SpecPanel_TD[19], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[19], -1);
	TextDrawSetShadow(SpecPanel_TD[19], 0);
	TextDrawSetOutline(SpecPanel_TD[19], 1);
	TextDrawBackgroundColour(SpecPanel_TD[19], 255);
	TextDrawFont(SpecPanel_TD[19], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(SpecPanel_TD[19], 1);
	TextDrawSetShadow(SpecPanel_TD[19], 0);
	TextDrawSetSelectable(SpecPanel_TD[19], true);

	SpecPanel_TD[20] = TextDrawCreate(166.599609, 191.698852, "l");
	TextDrawLetterSize(SpecPanel_TD[20], 0.400999, 20.149955);
	TextDrawAlignment(SpecPanel_TD[20], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[20], 255);
	TextDrawSetShadow(SpecPanel_TD[20], 0);
	TextDrawSetOutline(SpecPanel_TD[20], 0);
	TextDrawBackgroundColour(SpecPanel_TD[20], 255);
	TextDrawFont(SpecPanel_TD[20], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[20], 1);
	TextDrawSetShadow(SpecPanel_TD[20], 0);

	SpecPanel_TD[21] = TextDrawCreate(339.500671, 191.698852, "l");
	TextDrawLetterSize(SpecPanel_TD[21], 0.400999, 20.149955);
	TextDrawAlignment(SpecPanel_TD[21], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[21], 255);
	TextDrawSetShadow(SpecPanel_TD[21], 0);
	TextDrawSetOutline(SpecPanel_TD[21], 0);
	TextDrawBackgroundColour(SpecPanel_TD[21], 255);
	TextDrawFont(SpecPanel_TD[21], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[21], 1);
	TextDrawSetShadow(SpecPanel_TD[21], 0);

	SpecPanel_TD[22] = TextDrawCreate(504.203491, 191.698852, "l");
	TextDrawLetterSize(SpecPanel_TD[22], 0.400999, 20.149955);
	TextDrawAlignment(SpecPanel_TD[22], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(SpecPanel_TD[22], 255);
	TextDrawSetShadow(SpecPanel_TD[22], 0);
	TextDrawSetOutline(SpecPanel_TD[22], 0);
	TextDrawBackgroundColour(SpecPanel_TD[22], 255);
	TextDrawFont(SpecPanel_TD[22], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(SpecPanel_TD[22], 1);
	TextDrawSetShadow(SpecPanel_TD[22], 0);

	//VIP SHOP
	VipShop[0] = TextDrawCreate(202.000000, 133.000000, "_");
	TextDrawBackgroundColour(VipShop[0], 255);
	TextDrawFont(VipShop[0], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(VipShop[0], 0.500000, 20.100000);
	TextDrawColour(VipShop[0], -1);
	TextDrawSetOutline(VipShop[0], 0);
	TextDrawSetProportional(VipShop[0], 1);
	TextDrawSetShadow(VipShop[0], 1);
	TextDrawUseBox(VipShop[0], 1);
	TextDrawBoxColour(VipShop[0], 50);
	TextDrawTextSize(VipShop[0], 439.000000, 0.000000);
	TextDrawSetSelectable(VipShop[0], 0);

	VipShop[1] = TextDrawCreate(204.000000, 133.000000, "Call Of Duty: Modern Warfare VIP Shop");
	TextDrawBackgroundColour(VipShop[1], 255);
	TextDrawFont(VipShop[1], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(VipShop[1], 0.189999, 0.899999);
	TextDrawColour(VipShop[1], -16711681);
	TextDrawSetOutline(VipShop[1], 0);
	TextDrawSetProportional(VipShop[1], 1);
	TextDrawSetShadow(VipShop[1], 0);
	TextDrawSetSelectable(VipShop[1], 0);

	VipShop[2] = TextDrawCreate(430.000000, 133.000000, "LD_CHAT:thumbdn");
	TextDrawAlignment(VipShop[2], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(VipShop[2], 255);
	TextDrawFont(VipShop[2], TEXT_DRAW_FONT_SPRITE_DRAW);
	TextDrawLetterSize(VipShop[2], 1.000000, 1.599998);
	TextDrawColour(VipShop[2], -1);
	TextDrawSetOutline(VipShop[2], 0);
	TextDrawTextSize(VipShop[2], 10.000000, 10.000000);
	TextDrawSetProportional(VipShop[2], 1);
	TextDrawSetShadow(VipShop[2], 0);
	TextDrawUseBox(VipShop[2], 1);
	TextDrawBoxColour(VipShop[2], 16711935);
	TextDrawTextSize(VipShop[2], 9.000000, 10.000000);
	TextDrawSetSelectable(VipShop[2], 1);

	VipShop[3] = TextDrawCreate(206.000000, 164.000000, "Available Balance:");
	TextDrawBackgroundColour(VipShop[3], 255);
	TextDrawFont(VipShop[3], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(VipShop[3], 0.150000, 0.899999);
	TextDrawColour(VipShop[3], -1);
	TextDrawSetOutline(VipShop[3], 0);
	TextDrawSetProportional(VipShop[3], 1);
	TextDrawSetShadow(VipShop[3], 0);
	TextDrawSetSelectable(VipShop[3], 0);

	VipShop[4] = TextDrawCreate(270.000000, 163.000000, "dollar sign");
	TextDrawBackgroundColour(VipShop[4], 0);
	TextDrawFont(VipShop[4], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(VipShop[4], -0.109999, -0.100000);
	TextDrawColour(VipShop[4], -1);
	TextDrawSetOutline(VipShop[4], 1);
	TextDrawSetProportional(VipShop[4], 1);
	TextDrawUseBox(VipShop[4], 1);
	TextDrawBoxColour(VipShop[4], 0);
	TextDrawTextSize(VipShop[4], 11.000000, 11.000000);
	TextDrawSetPreviewModel(VipShop[4], 1274);
	TextDrawSetPreviewRot(VipShop[4], 0.000000, 180.000000, 180.000000, 1.000000);
	TextDrawSetSelectable(VipShop[4], 0);


	VipShop[5] = TextDrawCreate(398.000000, 164.000000, "Add ~g~~h~funds");
	TextDrawBackgroundColour(VipShop[5], 255);
	TextDrawFont(VipShop[5], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(VipShop[5], 0.150000, 0.899999);
	TextDrawColour(VipShop[5], -1);
	TextDrawSetOutline(VipShop[5], 0);
	TextDrawSetProportional(VipShop[5], 1);
	TextDrawTextSize(VipShop[5], 450.000000, 10.000000);
	TextDrawSetShadow(VipShop[5], 0);
	TextDrawSetSelectable(VipShop[5], 1);

	VipShop[6] = TextDrawCreate(309.000000, 189.000000, "~r~~h~SHOP");
	TextDrawBackgroundColour(VipShop[6], 255);
	TextDrawFont(VipShop[6], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(VipShop[6], 0.159999, 0.999998);
	TextDrawColour(VipShop[6], -1);
	TextDrawSetOutline(VipShop[6], 0);
	TextDrawSetProportional(VipShop[6], 1);
	TextDrawSetShadow(VipShop[6], 0);
	TextDrawSetSelectable(VipShop[6], 0);

	VipShop[7] = TextDrawCreate(222.000000, 206.000000, "_");
	TextDrawBackgroundColour(VipShop[7], 255);
	TextDrawFont(VipShop[7], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(VipShop[7], 0.889999, 11.100000);
	TextDrawColour(VipShop[7], -1);
	TextDrawSetOutline(VipShop[7], 0);
	TextDrawSetProportional(VipShop[7], 1);
	TextDrawSetShadow(VipShop[7], 1);
	TextDrawUseBox(VipShop[7], 1);
	TextDrawBoxColour(VipShop[7], -97373646);
	TextDrawTextSize(VipShop[7], 415.000000, 0.000000);
	TextDrawSetSelectable(VipShop[7], 0);

	VipShop[8] = TextDrawCreate(262.000000, 208.000000, "Item                   <>                   Price");
	TextDrawBackgroundColour(VipShop[8], 255);
	TextDrawFont(VipShop[8], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(VipShop[8], 0.159999, 0.899999);
	TextDrawColour(VipShop[8], -1);
	TextDrawSetOutline(VipShop[8], 0);
	TextDrawSetProportional(VipShop[8], 1);
	TextDrawSetShadow(VipShop[8], 0);
	TextDrawSetSelectable(VipShop[8], 0);

	//clan tournament textdraws
	CTSpectatorT = TextDrawCreate(230.000000, 36.000000, "Twitch");
	TextDrawBackgroundColour(CTSpectatorT, -1);
	TextDrawFont(CTSpectatorT, TEXT_DRAW_FONT_3);
	TextDrawLetterSize(CTSpectatorT, 0.339999, 1.499999);
	TextDrawColour(CTSpectatorT, 1681892863);
	TextDrawSetOutline(CTSpectatorT, 1);
	TextDrawSetProportional(CTSpectatorT, 1);
	TextDrawSetSelectable(CTSpectatorT, 0);

	CTSpectatorI = TextDrawCreate(335.000000, 34.000000, "In-Game");
	TextDrawBackgroundColour(CTSpectatorI, 255);
	TextDrawFont(CTSpectatorI, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CTSpectatorI, 0.310000, 1.799999);
	TextDrawColour(CTSpectatorI, -1);
	TextDrawSetOutline(CTSpectatorI, 0);
	TextDrawSetProportional(CTSpectatorI, 1);
	TextDrawSetShadow(CTSpectatorI, 1);
	TextDrawSetSelectable(CTSpectatorI, 0);

	CTSpectatorB = TextDrawCreate(322.000000, -6.000000, "~n~Spectators ~n~~n~_");
	TextDrawAlignment(CTSpectatorB, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CTSpectatorB, 255);
	TextDrawFont(CTSpectatorB, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CTSpectatorB, 0.290000, 1.699999);
	TextDrawColour(CTSpectatorB, -1);
	TextDrawSetOutline(CTSpectatorB, 0);
	TextDrawSetProportional(CTSpectatorB, 1);
	TextDrawSetShadow(CTSpectatorB, 1);
	TextDrawUseBox(CTSpectatorB, 1);
	TextDrawBoxColour(CTSpectatorB, 20);
	TextDrawTextSize(CTSpectatorB, 430.000000, 209.000000);
	TextDrawSetSelectable(CTSpectatorB, 0);

	CTSpectatorTwitch = TextDrawCreate(283.000000, 34.000000, "0");
	TextDrawBackgroundColour(CTSpectatorTwitch, 16711935);
	TextDrawFont(CTSpectatorTwitch, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CTSpectatorTwitch, 0.310000, 1.799999);
	TextDrawColour(CTSpectatorTwitch, -16776961);
	TextDrawSetOutline(CTSpectatorTwitch, 0);
	TextDrawSetProportional(CTSpectatorTwitch, 1);
	TextDrawSetShadow(CTSpectatorTwitch, 0);
	TextDrawSetSelectable(CTSpectatorTwitch, 0);

	CTSpectatorIg = TextDrawCreate(393.000000, 34.000000, "0");
	TextDrawBackgroundColour(CTSpectatorIg, 16711935);
	TextDrawFont(CTSpectatorIg, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CTSpectatorIg, 0.310000, 1.799999);
	TextDrawColour(CTSpectatorIg, -16776961);
	TextDrawSetOutline(CTSpectatorIg, 0);
	TextDrawSetProportional(CTSpectatorIg, 1);
	TextDrawSetShadow(CTSpectatorIg, 0);
	TextDrawSetSelectable(CTSpectatorIg, 0);

	CT_BOX = TextDrawCreate(222.000000, 131.000000, "_");
	TextDrawBackgroundColour(CT_BOX, 255);
	TextDrawFont(CT_BOX, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_BOX, 0.500000, 14.200004);
	TextDrawColour(CT_BOX, -1);
	TextDrawSetOutline(CT_BOX, 0);
	TextDrawSetProportional(CT_BOX, 1);
	TextDrawSetShadow(CT_BOX, 1);
	TextDrawUseBox(CT_BOX, 1);
	TextDrawBoxColour(CT_BOX, 30);
	TextDrawTextSize(CT_BOX, 417.000000, 12.000000);
	TextDrawSetSelectable(CT_BOX, 0);

	CT_PRIZE = TextDrawCreate(254.000000, 136.000000, "New Textdraw");
	TextDrawBackgroundColour(CT_PRIZE, 0);
	TextDrawFont(CT_PRIZE, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CT_PRIZE, 0.500000, 1.000000);
	TextDrawColour(CT_PRIZE, 839523920);
	TextDrawSetOutline(CT_PRIZE, 1);
	TextDrawSetProportional(CT_PRIZE, 1);
	TextDrawUseBox(CT_PRIZE, 1);
	TextDrawBoxColour(CT_PRIZE, 255);
	TextDrawTextSize(CT_PRIZE, 82.000000, 50.000000);
	TextDrawSetPreviewModel(CT_PRIZE, 1667);
	TextDrawSetPreviewRot(CT_PRIZE, -16.000000, 0.000000, -55.000000, 1.000000);
	TextDrawSetSelectable(CT_PRIZE, 0);

	CT_WINNER_TD = TextDrawCreate(331.000000, 158.000000, "Winner: ?");
	TextDrawAlignment(CT_WINNER_TD, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CT_WINNER_TD, 255);
	TextDrawFont(CT_WINNER_TD, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_WINNER_TD, 0.189999, 0.799998);
	TextDrawColour(CT_WINNER_TD, 16711935);
	TextDrawSetOutline(CT_WINNER_TD, 1);
	TextDrawSetProportional(CT_WINNER_TD, 1);
	TextDrawSetSelectable(CT_WINNER_TD, 0);

	CT_INFO_TD = TextDrawCreate(223.000000, 193.000000, "Finals~n~~n~1/2~n~~n~1/4");
	TextDrawBackgroundColour(CT_INFO_TD, 255);
	TextDrawFont(CT_INFO_TD, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_INFO_TD, 0.189999, 0.799998);
	TextDrawColour(CT_INFO_TD, -65281);
	TextDrawSetOutline(CT_INFO_TD, 1);
	TextDrawSetProportional(CT_INFO_TD, 1);
	TextDrawSetSelectable(CT_INFO_TD, 0);

	CT_QUARTER[0] = TextDrawCreate(258.000000, 223.000000, "? - ?");
	TextDrawAlignment(CT_QUARTER[0], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CT_QUARTER[0], 255);
	TextDrawFont(CT_QUARTER[0], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_QUARTER[0], 0.149998, 0.699998);
	TextDrawColour(CT_QUARTER[0], 65535);
	TextDrawSetOutline(CT_QUARTER[0], 1);
	TextDrawSetProportional(CT_QUARTER[0], 1);
	TextDrawSetSelectable(CT_QUARTER[0], 0);

	CT_QUARTER[1] = TextDrawCreate(302.000000, 223.000000, "? - ?");
	TextDrawAlignment(CT_QUARTER[1], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CT_QUARTER[1], 255);
	TextDrawFont(CT_QUARTER[1], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_QUARTER[1], 0.149998, 0.699998);
	TextDrawColour(CT_QUARTER[1], 65535);
	TextDrawSetOutline(CT_QUARTER[1], 1);
	TextDrawSetProportional(CT_QUARTER[1], 1);
	TextDrawSetSelectable(CT_QUARTER[1], 0);

	CT_QUARTER[2] = TextDrawCreate(346.000000, 223.000000, "? - ?");
	TextDrawAlignment(CT_QUARTER[2], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CT_QUARTER[2], 255);
	TextDrawFont(CT_QUARTER[2], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_QUARTER[2], 0.149998, 0.699998);
	TextDrawColour(CT_QUARTER[2], 65535);
	TextDrawSetOutline(CT_QUARTER[2], 1);
	TextDrawSetProportional(CT_QUARTER[2], 1);
	TextDrawSetSelectable(CT_QUARTER[2], 0);

	CT_QUARTER[3] = TextDrawCreate(389.000000, 223.000000, "? - ?");
	TextDrawAlignment(CT_QUARTER[3], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CT_QUARTER[3], 255);
	TextDrawFont(CT_QUARTER[3], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_QUARTER[3], 0.149998, 0.699998);
	TextDrawColour(CT_QUARTER[3], 65535);
	TextDrawSetOutline(CT_QUARTER[3], 1);
	TextDrawSetProportional(CT_QUARTER[3], 1);
	TextDrawSetSelectable(CT_QUARTER[3], 0);

	CT_SEMI[0] = TextDrawCreate(281.000000, 208.000000, "? - ?");
	TextDrawAlignment(CT_SEMI[0], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CT_SEMI[0], 255);
	TextDrawFont(CT_SEMI[0], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_SEMI[0], 0.149998, 0.699998);
	TextDrawColour(CT_SEMI[0], 65535);
	TextDrawSetOutline(CT_SEMI[0], 1);
	TextDrawSetProportional(CT_SEMI[0], 1);
	TextDrawSetSelectable(CT_SEMI[0], 0);

	CT_SEMI[1] = TextDrawCreate(369.000000, 208.000000, "? - ?");
	TextDrawAlignment(CT_SEMI[1], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CT_SEMI[1], 255);
	TextDrawFont(CT_SEMI[1], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_SEMI[1], 0.149998, 0.699998);
	TextDrawColour(CT_SEMI[1], 65535);
	TextDrawSetOutline(CT_SEMI[1], 1);
	TextDrawSetProportional(CT_SEMI[1], 1);
	TextDrawSetSelectable(CT_SEMI[1], 0);

	CT_FINALS = TextDrawCreate(326.000000, 194.000000, "? - ?");
	TextDrawAlignment(CT_FINALS, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CT_FINALS, 255);
	TextDrawFont(CT_FINALS, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_FINALS, 0.149998, 0.699998);
	TextDrawColour(CT_FINALS, 65535);
	TextDrawSetOutline(CT_FINALS, 1);
	TextDrawSetProportional(CT_FINALS, 1);
	TextDrawSetSelectable(CT_FINALS, 0);

	CT_INFO_TD_2 = TextDrawCreate(231.000000, 253.000000, "Check forums for matches schedules. Press any key to close.");
	TextDrawBackgroundColour(CT_INFO_TD_2, -16711681);
	TextDrawFont(CT_INFO_TD_2, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CT_INFO_TD_2, 0.180000, 0.800000);
	TextDrawColour(CT_INFO_TD_2, 255);
	TextDrawSetOutline(CT_INFO_TD_2, 0);
	TextDrawSetProportional(CT_INFO_TD_2, 1);
	TextDrawSetShadow(CT_INFO_TD_2, 0);
	TextDrawSetSelectable(CT_INFO_TD_2, 0);


	//sponsor ga TD
	sponsorgatd = TextDrawCreate(86.000000, 428.000000, "On-Going Sponsor ~b~~h~1-DAY Level 1 VIP~w~ Giveaway~n~Use ~g~~h~/vipticket ~w~for a chance to ~r~~h~win!");
	TextDrawAlignment(sponsorgatd, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(sponsorgatd, 255);
	TextDrawFont(sponsorgatd, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(sponsorgatd, 0.180000, 1.000000);
	TextDrawColour(sponsorgatd, -1);
	TextDrawSetOutline(sponsorgatd, 1);
	TextDrawSetProportional(sponsorgatd, 1);
	TextDrawSetSelectable(sponsorgatd, 0);

	TournamentTD = TextDrawCreate(317.000000, 428.000000, "Hourly-Tournament:Capture-The-Most-Zones~n~Current-Winner:-[MAFIA]CRUSHERZ_D-with-54-captures");
	TextDrawAlignment(TournamentTD, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(TournamentTD, 255);
	TextDrawFont(TournamentTD, TEXT_DRAW_FONT_2);
	TextDrawColour(TournamentTD, -1);
	TextDrawLetterSize(TournamentTD, 0.170000, 0.999999);
	TextDrawSetOutline(TournamentTD, 0);
	TextDrawSetProportional(TournamentTD, 1);
	TextDrawSetShadow(TournamentTD, 1);
	TextDrawUseBox(TournamentTD, 0);
	new ii = random(MAX_TOUR);
	new str[89];
	switch(ii)
	{
		case TOUR_DEAG: str = "Hourly_Tournament:~b~Top_Deagle_Kills~n~~b~Current_Winner:_~w~None";
		case TOUR_HEAD: str = "Hourly_Tournament:~b~Top_Headshots~n~~b~Current_Winner:_~w~None";
		case TOUR_CAP: str = "Hourly_Tournament:~b~Top_Zone_Captures~n~~b~Current_Winner:_~w~None";
		case TOUR_KILLS: str = "Hourly_Tournament:~b~Top_Kills~n~~b~Current_Winner:_~w~None";
	}
	TournamentTick = GetTickCount() + 3600000;
	CurrentTOUR = ii;
	TextDrawSetString(TournamentTD, str);
	TournamentTD2 = TextDrawCreate(233.000000, 429.000000, "_~n~_");

	TextDrawBackgroundColour(TournamentTD2, 255);
	TextDrawFont(TournamentTD2, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(TournamentTD2, 0.500000, 1.000000);
	TextDrawColour(TournamentTD2, -1);
	TextDrawSetOutline(TournamentTD2, 0);
	TextDrawSetProportional(TournamentTD2, 1);
	TextDrawSetShadow(TournamentTD2, 1);
	TextDrawUseBox(TournamentTD2, 1);
	TextDrawBoxColour(TournamentTD2, 50);
	TextDrawTextSize(TournamentTD2, 402.000000, 0.000000);
	TextDrawSetSelectable(TournamentTD2, 0);

	CW_ROUNDS = TextDrawCreate(1.000000, 429.000000, "    Round: ~p~1~w~/~g~3~n~~b~~h~TAF~w~: 3    ~r~~h~GOW~w~: 5");
	TextDrawBackgroundColour(CW_ROUNDS, 255);
	TextDrawFont(CW_ROUNDS, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CW_ROUNDS, 0.210000, 1.000000);
	TextDrawColour(CW_ROUNDS, -1);
	TextDrawSetOutline(CW_ROUNDS, 1);
	TextDrawSetProportional(CW_ROUNDS, 1);
	TextDrawUseBox(CW_ROUNDS, 1);
	TextDrawBoxColour(CW_ROUNDS, 50);
	TextDrawTextSize(CW_ROUNDS, 71.000000, -114.000000);
	TextDrawSetSelectable(CW_ROUNDS, 0);
	
	CW_DISCONNECT_2[0] = TextDrawCreate(45.000000, 197.000000, "2");
	TextDrawBackgroundColour(CW_DISCONNECT_2[0], 0);
	TextDrawFont(CW_DISCONNECT_2[0], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT_2[0], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT_2[0], 65535);
	TextDrawSetOutline(CW_DISCONNECT_2[0], 0);
	TextDrawSetProportional(CW_DISCONNECT_2[0], 1);
	TextDrawSetShadow(CW_DISCONNECT_2[0], 1);
	TextDrawUseBox(CW_DISCONNECT_2[0], 1);
	TextDrawBoxColour(CW_DISCONNECT_2[0], 0);
	TextDrawTextSize(CW_DISCONNECT_2[0], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT_2[0], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT_2[0], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT_2[0], 0);

	CW_DISCONNECT_2[1] = TextDrawCreate(45.000000, 215.000000, "2");
	TextDrawBackgroundColour(CW_DISCONNECT_2[1], 0);
	TextDrawFont(CW_DISCONNECT_2[1], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT_2[1], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT_2[1], 65535);
	TextDrawSetOutline(CW_DISCONNECT_2[1], 0);
	TextDrawSetProportional(CW_DISCONNECT_2[1], 1);
	TextDrawSetShadow(CW_DISCONNECT_2[1], 1);
	TextDrawUseBox(CW_DISCONNECT_2[1], 1);
	TextDrawBoxColour(CW_DISCONNECT_2[1], 0);
	TextDrawTextSize(CW_DISCONNECT_2[1], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT_2[1], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT_2[1], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT_2[1], 0);

	CW_DISCONNECT_2[2] = TextDrawCreate(45.000000, 232.000000, "2");
	TextDrawBackgroundColour(CW_DISCONNECT_2[2], 0);
	TextDrawFont(CW_DISCONNECT_2[2], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT_2[2], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT_2[2], 65535);
	TextDrawSetOutline(CW_DISCONNECT_2[2], 0);
	TextDrawSetProportional(CW_DISCONNECT_2[2], 1);
	TextDrawSetShadow(CW_DISCONNECT_2[2], 1);
	TextDrawUseBox(CW_DISCONNECT_2[2], 1);
	TextDrawBoxColour(CW_DISCONNECT_2[2], 0);
	TextDrawTextSize(CW_DISCONNECT_2[2], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT_2[2], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT_2[2], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT_2[2], 0);

	CW_DISCONNECT_2[3] = TextDrawCreate(45.000000, 248.000000, "2");
	TextDrawBackgroundColour(CW_DISCONNECT_2[3], 0);
	TextDrawFont(CW_DISCONNECT_2[3], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT_2[3], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT_2[3], 65535);
	TextDrawSetOutline(CW_DISCONNECT_2[3], 0);
	TextDrawSetProportional(CW_DISCONNECT_2[3], 1);
	TextDrawSetShadow(CW_DISCONNECT_2[3], 1);
	TextDrawUseBox(CW_DISCONNECT_2[3], 1);
	TextDrawBoxColour(CW_DISCONNECT_2[3], 0);
	TextDrawTextSize(CW_DISCONNECT_2[3], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT_2[3], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT_2[3], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT_2[3], 0);

	CW_DISCONNECT_2[4] = TextDrawCreate(45.000000, 265.000000, "2");
	TextDrawBackgroundColour(CW_DISCONNECT_2[4], 0);
	TextDrawFont(CW_DISCONNECT_2[4], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT_2[4], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT_2[4], 65535);
	TextDrawSetOutline(CW_DISCONNECT_2[4], 0);
	TextDrawSetProportional(CW_DISCONNECT_2[4], 1);
	TextDrawSetShadow(CW_DISCONNECT_2[4], 1);
	TextDrawUseBox(CW_DISCONNECT_2[4], 1);
	TextDrawBoxColour(CW_DISCONNECT_2[4], 0);
	TextDrawTextSize(CW_DISCONNECT_2[4], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT_2[4], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT_2[4], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT_2[4], 0);

	CW_DISCONNECT_2[5] = TextDrawCreate(45.000000, 282.000000, "2");
	TextDrawBackgroundColour(CW_DISCONNECT_2[5], 0);
	TextDrawFont(CW_DISCONNECT_2[5], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT_2[5], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT_2[5], 65535);
	TextDrawSetOutline(CW_DISCONNECT_2[5], 0);
	TextDrawSetProportional(CW_DISCONNECT_2[5], 1);
	TextDrawSetShadow(CW_DISCONNECT_2[5], 1);
	TextDrawUseBox(CW_DISCONNECT_2[5], 1);
	TextDrawBoxColour(CW_DISCONNECT_2[5], 0);
	TextDrawTextSize(CW_DISCONNECT_2[5], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT_2[5], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT_2[5], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT_2[5], 0);

	CW_DISCONNECT_2[6] = TextDrawCreate(45.000000, 299.000000, "2");
	TextDrawBackgroundColour(CW_DISCONNECT_2[6], 0);
	TextDrawFont(CW_DISCONNECT_2[6], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT_2[6], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT_2[6], 65535);
	TextDrawSetOutline(CW_DISCONNECT_2[6], 0);
	TextDrawSetProportional(CW_DISCONNECT_2[6], 1);
	TextDrawSetShadow(CW_DISCONNECT_2[6], 1);
	TextDrawUseBox(CW_DISCONNECT_2[6], 1);
	TextDrawBoxColour(CW_DISCONNECT_2[6], 0);
	TextDrawTextSize(CW_DISCONNECT_2[6], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT_2[6], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT_2[6], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT_2[6], 0);

	CW_DISCONNECT_2[7] = TextDrawCreate(45.000000, 316.000000, "2");
	TextDrawBackgroundColour(CW_DISCONNECT_2[7], 0);
	TextDrawFont(CW_DISCONNECT_2[7], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT_2[7], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT_2[7], 65535);
	TextDrawSetOutline(CW_DISCONNECT_2[7], 0);
	TextDrawSetProportional(CW_DISCONNECT_2[7], 1);
	TextDrawSetShadow(CW_DISCONNECT_2[7], 1);
	TextDrawUseBox(CW_DISCONNECT_2[7], 1);
	TextDrawBoxColour(CW_DISCONNECT_2[7], 0);
	TextDrawTextSize(CW_DISCONNECT_2[7], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT_2[7], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT_2[7], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT_2[7], 0);

	CW_DISCONNECT_2[8] = TextDrawCreate(45.000000, 334.000000, "2");
	TextDrawBackgroundColour(CW_DISCONNECT_2[8], 0);
	TextDrawFont(CW_DISCONNECT_2[8], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT_2[8], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT_2[8], 65535);
	TextDrawSetOutline(CW_DISCONNECT_2[8], 0);
	TextDrawSetProportional(CW_DISCONNECT_2[8], 1);
	TextDrawSetShadow(CW_DISCONNECT_2[8], 1);
	TextDrawUseBox(CW_DISCONNECT_2[8], 1);
	TextDrawBoxColour(CW_DISCONNECT_2[8], 0);
	TextDrawTextSize(CW_DISCONNECT_2[8], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT_2[8], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT_2[8], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT_2[8], 0);

	CW_DISCONNECT_2[9] = TextDrawCreate(45.000000, 350.000000, "2");
	TextDrawBackgroundColour(CW_DISCONNECT_2[9], 0);
	TextDrawFont(CW_DISCONNECT_2[9], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT_2[9], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT_2[9], 65535);
	TextDrawSetOutline(CW_DISCONNECT_2[9], 0);
	TextDrawSetProportional(CW_DISCONNECT_2[9], 1);
	TextDrawSetShadow(CW_DISCONNECT_2[9], 1);
	TextDrawUseBox(CW_DISCONNECT_2[9], 1);
	TextDrawBoxColour(CW_DISCONNECT_2[9], 0);
	TextDrawTextSize(CW_DISCONNECT_2[9], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT_2[9], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT_2[9], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT_2[9], 0);

	CW_DISCONNECT[0] = TextDrawCreate(565.000000, 197.000000, "1");
	TextDrawBackgroundColour(CW_DISCONNECT[0], 0);
	TextDrawFont(CW_DISCONNECT[0], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT[0], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT[0], 65535);
	TextDrawSetOutline(CW_DISCONNECT[0], 0);
	TextDrawSetProportional(CW_DISCONNECT[0], 1);
	TextDrawSetShadow(CW_DISCONNECT[0], 1);
	TextDrawUseBox(CW_DISCONNECT[0], 1);
	TextDrawBoxColour(CW_DISCONNECT[0], 0);
	TextDrawTextSize(CW_DISCONNECT[0], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT[0], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT[0], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT[0], 0);

	CW_DISCONNECT[1] = TextDrawCreate(565.000000, 214.000000, "1");
	TextDrawBackgroundColour(CW_DISCONNECT[1], 0);
	TextDrawFont(CW_DISCONNECT[1], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT[1], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT[1], 65535);
	TextDrawSetOutline(CW_DISCONNECT[1], 0);
	TextDrawSetProportional(CW_DISCONNECT[1], 1);
	TextDrawSetShadow(CW_DISCONNECT[1], 1);
	TextDrawUseBox(CW_DISCONNECT[1], 1);
	TextDrawBoxColour(CW_DISCONNECT[1], 0);
	TextDrawTextSize(CW_DISCONNECT[1], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT[1], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT[1], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT[1], 0);

	CW_DISCONNECT[2] = TextDrawCreate(565.000000, 231.000000, "1");
	TextDrawBackgroundColour(CW_DISCONNECT[2], 0);
	TextDrawFont(CW_DISCONNECT[2], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT[2], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT[2], 65535);
	TextDrawSetOutline(CW_DISCONNECT[2], 0);
	TextDrawSetProportional(CW_DISCONNECT[2], 1);
	TextDrawSetShadow(CW_DISCONNECT[2], 1);
	TextDrawUseBox(CW_DISCONNECT[2], 1);
	TextDrawBoxColour(CW_DISCONNECT[2], 0);
	TextDrawTextSize(CW_DISCONNECT[2], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT[2], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT[2], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT[2], 0);

	CW_DISCONNECT[3] = TextDrawCreate(565.000000, 248.000000, "1");
	TextDrawBackgroundColour(CW_DISCONNECT[3], 0);
	TextDrawFont(CW_DISCONNECT[3], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT[3], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT[3], 65535);
	TextDrawSetOutline(CW_DISCONNECT[3], 0);
	TextDrawSetProportional(CW_DISCONNECT[3], 1);
	TextDrawSetShadow(CW_DISCONNECT[3], 1);
	TextDrawUseBox(CW_DISCONNECT[3], 1);
	TextDrawBoxColour(CW_DISCONNECT[3], 0);
	TextDrawTextSize(CW_DISCONNECT[3], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT[3], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT[3], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT[3], 0);

	CW_DISCONNECT[4] = TextDrawCreate(565.000000, 265.000000, "1");
	TextDrawBackgroundColour(CW_DISCONNECT[4], 0);
	TextDrawFont(CW_DISCONNECT[4], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT[4], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT[4], 65535);
	TextDrawSetOutline(CW_DISCONNECT[4], 0);
	TextDrawSetProportional(CW_DISCONNECT[4], 1);
	TextDrawSetShadow(CW_DISCONNECT[4], 1);
	TextDrawUseBox(CW_DISCONNECT[4], 1);
	TextDrawBoxColour(CW_DISCONNECT[4], 0);
	TextDrawTextSize(CW_DISCONNECT[4], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT[4], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT[4], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT[4], 0);

	CW_DISCONNECT[5] = TextDrawCreate(565.000000, 282.000000, "1");
	TextDrawBackgroundColour(CW_DISCONNECT[5], 0);
	TextDrawFont(CW_DISCONNECT[5], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT[5], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT[5], 65535);
	TextDrawSetOutline(CW_DISCONNECT[5], 0);
	TextDrawSetProportional(CW_DISCONNECT[5], 1);
	TextDrawSetShadow(CW_DISCONNECT[5], 1);
	TextDrawUseBox(CW_DISCONNECT[5], 1);
	TextDrawBoxColour(CW_DISCONNECT[5], 0);
	TextDrawTextSize(CW_DISCONNECT[5], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT[5], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT[5], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT[5], 0);

	CW_DISCONNECT[6] = TextDrawCreate(565.000000, 299.000000, "1");
	TextDrawBackgroundColour(CW_DISCONNECT[6], 0);
	TextDrawFont(CW_DISCONNECT[6], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT[6], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT[6], 65535);
	TextDrawSetOutline(CW_DISCONNECT[6], 0);
	TextDrawSetProportional(CW_DISCONNECT[6], 1);
	TextDrawSetShadow(CW_DISCONNECT[6], 1);
	TextDrawUseBox(CW_DISCONNECT[6], 1);
	TextDrawBoxColour(CW_DISCONNECT[6], 0);
	TextDrawTextSize(CW_DISCONNECT[6], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT[6], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT[6], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT[6], 0);

	CW_DISCONNECT[7] = TextDrawCreate(565.000000, 317.000000, "1");
	TextDrawBackgroundColour(CW_DISCONNECT[7], 0);
	TextDrawFont(CW_DISCONNECT[7], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT[7], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT[7], 65535);
	TextDrawSetOutline(CW_DISCONNECT[7], 0);
	TextDrawSetProportional(CW_DISCONNECT[7], 1);
	TextDrawSetShadow(CW_DISCONNECT[7], 1);
	TextDrawUseBox(CW_DISCONNECT[7], 1);
	TextDrawBoxColour(CW_DISCONNECT[7], 0);
	TextDrawTextSize(CW_DISCONNECT[7], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT[7], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT[7], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT[7], 0);

	CW_DISCONNECT[8] = TextDrawCreate(565.000000, 334.000000, "1");
	TextDrawBackgroundColour(CW_DISCONNECT[8], 0);
	TextDrawFont(CW_DISCONNECT[8], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT[8], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT[8], 65535);
	TextDrawSetOutline(CW_DISCONNECT[8], 0);
	TextDrawSetProportional(CW_DISCONNECT[8], 1);
	TextDrawSetShadow(CW_DISCONNECT[8], 1);
	TextDrawUseBox(CW_DISCONNECT[8], 1);
	TextDrawBoxColour(CW_DISCONNECT[8], 0);
	TextDrawTextSize(CW_DISCONNECT[8], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT[8], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT[8], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT[8], 0);

	CW_DISCONNECT[9] = TextDrawCreate(565.000000, 351.000000, "1");
	TextDrawBackgroundColour(CW_DISCONNECT[9], 0);
	TextDrawFont(CW_DISCONNECT[9], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(CW_DISCONNECT[9], 0.500000, 1.000000);
	TextDrawColour(CW_DISCONNECT[9], 65535);
	TextDrawSetOutline(CW_DISCONNECT[9], 0);
	TextDrawSetProportional(CW_DISCONNECT[9], 1);
	TextDrawSetShadow(CW_DISCONNECT[9], 1);
	TextDrawUseBox(CW_DISCONNECT[9], 1);
	TextDrawBoxColour(CW_DISCONNECT[9], 0);
	TextDrawTextSize(CW_DISCONNECT[9], 30.000000, 29.000000);
	TextDrawSetPreviewModel(CW_DISCONNECT[9], 11711);
	TextDrawSetPreviewRot(CW_DISCONNECT[9], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(CW_DISCONNECT[9], 0);

	CW_MEMBER[0] = TextDrawCreate(579.000000, 200.000000, "Seif_Tounes~n~_");
	TextDrawAlignment(CW_MEMBER[0], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER[0], 255);
	TextDrawFont(CW_MEMBER[0], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER[0], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER[0], -1);
	TextDrawSetOutline(CW_MEMBER[0], 0);
	TextDrawSetProportional(CW_MEMBER[0], 1);
	TextDrawSetShadow(CW_MEMBER[0], 1);
	TextDrawUseBox(CW_MEMBER[0], 1);
	TextDrawBoxColour(CW_MEMBER[0], 133);
	TextDrawTextSize(CW_MEMBER[0], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER[0], 0);

	CW_MEMBER[1] = TextDrawCreate(579.000000, 217.000000, "MarkoBALBALBALBALB~n~_");
	TextDrawAlignment(CW_MEMBER[1], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER[1], 255);
	TextDrawFont(CW_MEMBER[1], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER[1], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER[1], -1);
	TextDrawSetOutline(CW_MEMBER[1], 0);
	TextDrawSetProportional(CW_MEMBER[1], 1);
	TextDrawSetShadow(CW_MEMBER[1], 1);
	TextDrawUseBox(CW_MEMBER[1], 1);
	TextDrawBoxColour(CW_MEMBER[1], 133);
	TextDrawTextSize(CW_MEMBER[1], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER[1], 0);

	CW_MEMBER[2] = TextDrawCreate(579.000000, 234.300003, "DESERTGhoSt~n~_");
	TextDrawAlignment(CW_MEMBER[2], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER[2], 255);
	TextDrawFont(CW_MEMBER[2], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER[2], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER[2], -1);
	TextDrawSetOutline(CW_MEMBER[2], 0);
	TextDrawSetProportional(CW_MEMBER[2], 1);
	TextDrawSetShadow(CW_MEMBER[2], 1);
	TextDrawUseBox(CW_MEMBER[2], 1);
	TextDrawBoxColour(CW_MEMBER[2], 133);
	TextDrawTextSize(CW_MEMBER[2], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER[2], 0);

	CW_MEMBER[3] = TextDrawCreate(579.000000, 251.300003, "Ahmet~n~_");
	TextDrawAlignment(CW_MEMBER[3], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER[3], 255);
	TextDrawFont(CW_MEMBER[3], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER[3], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER[3], -1);
	TextDrawSetOutline(CW_MEMBER[3], 0);
	TextDrawSetProportional(CW_MEMBER[3], 1);
	TextDrawSetShadow(CW_MEMBER[3], 1);
	TextDrawUseBox(CW_MEMBER[3], 1);
	TextDrawBoxColour(CW_MEMBER[3], 133);
	TextDrawTextSize(CW_MEMBER[3], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER[3], 0);

	CW_MEMBER[4] = TextDrawCreate(579.000000, 268.299987, "Christofski~n~_");
	TextDrawAlignment(CW_MEMBER[4], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER[4], 255);
	TextDrawFont(CW_MEMBER[4], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER[4], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER[4], -1);
	TextDrawSetOutline(CW_MEMBER[4], 0);
	TextDrawSetProportional(CW_MEMBER[4], 1);
	TextDrawSetShadow(CW_MEMBER[4], 1);
	TextDrawUseBox(CW_MEMBER[4], 1);
	TextDrawBoxColour(CW_MEMBER[4], 133);
	TextDrawTextSize(CW_MEMBER[4], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER[4], 0);

	CW_MEMBER[5] = TextDrawCreate(579.000000, 285.399993, "Scream~n~_");
	TextDrawAlignment(CW_MEMBER[5], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER[5], 255);
	TextDrawFont(CW_MEMBER[5], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER[5], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER[5], -1);
	TextDrawSetOutline(CW_MEMBER[5], 0);
	TextDrawSetProportional(CW_MEMBER[5], 1);
	TextDrawSetShadow(CW_MEMBER[5], 1);
	TextDrawUseBox(CW_MEMBER[5], 1);
	TextDrawBoxColour(CW_MEMBER[5], 133);
	TextDrawTextSize(CW_MEMBER[5], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER[5], 0);

	CW_MEMBER[6] = TextDrawCreate(579.000000, 302.399993, "Navi~n~_");
	TextDrawAlignment(CW_MEMBER[6], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER[6], 255);
	TextDrawFont(CW_MEMBER[6], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER[6], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER[6], -1);
	TextDrawSetOutline(CW_MEMBER[6], 0);
	TextDrawSetProportional(CW_MEMBER[6], 1);
	TextDrawSetShadow(CW_MEMBER[6], 1);
	TextDrawUseBox(CW_MEMBER[6], 1);
	TextDrawBoxColour(CW_MEMBER[6], 133);
	TextDrawTextSize(CW_MEMBER[6], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER[6], 0);

	CW_MEMBER[7] = TextDrawCreate(579.000000, 319.799987, "Marko_1925~n~_");
	TextDrawAlignment(CW_MEMBER[7], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER[7], 255);
	TextDrawFont(CW_MEMBER[7], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER[7], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER[7], -1);
	TextDrawSetOutline(CW_MEMBER[7], 0);
	TextDrawSetProportional(CW_MEMBER[7], 1);
	TextDrawSetShadow(CW_MEMBER[7], 1);
	TextDrawUseBox(CW_MEMBER[7], 1);
	TextDrawBoxColour(CW_MEMBER[7], 133);
	TextDrawTextSize(CW_MEMBER[7], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER[7], 0);

	CW_MEMBER[8] = TextDrawCreate(579.000000, 336.799987, "Google~n~_");
	TextDrawAlignment(CW_MEMBER[8], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER[8], 255);
	TextDrawFont(CW_MEMBER[8], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER[8], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER[8], -1);
	TextDrawSetOutline(CW_MEMBER[8], 0);
	TextDrawSetProportional(CW_MEMBER[8], 1);
	TextDrawSetShadow(CW_MEMBER[8], 1);
	TextDrawUseBox(CW_MEMBER[8], 1);
	TextDrawBoxColour(CW_MEMBER[8], 133);
	TextDrawTextSize(CW_MEMBER[8], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER[8], 0);

	CW_MEMBER[9] = TextDrawCreate(579.000000, 353.799987, "Test_User~n~_");
	TextDrawAlignment(CW_MEMBER[9], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER[9], 255);
	TextDrawFont(CW_MEMBER[9], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER[9], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER[9], -1);
	TextDrawSetOutline(CW_MEMBER[9], 0);
	TextDrawSetProportional(CW_MEMBER[9], 1);
	TextDrawSetShadow(CW_MEMBER[9], 1);
	TextDrawUseBox(CW_MEMBER[9], 1);
	TextDrawBoxColour(CW_MEMBER[9], 133);
	TextDrawTextSize(CW_MEMBER[9], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER[9], 0);



	CW_MEMBER_2[0] = TextDrawCreate(61.0000, 200.000000, "Seif_Tounes~n~_");
	TextDrawAlignment(CW_MEMBER_2[0], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER_2[0], 255);
	TextDrawFont(CW_MEMBER_2[0], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER_2[0], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER_2[0], -1);
	TextDrawSetOutline(CW_MEMBER_2[0], 0);
	TextDrawSetProportional(CW_MEMBER_2[0], 1);
	TextDrawSetShadow(CW_MEMBER_2[0], 1);
	TextDrawUseBox(CW_MEMBER_2[0], 1);
	TextDrawBoxColour(CW_MEMBER_2[0], 133);
	TextDrawTextSize(CW_MEMBER_2[0], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER_2[0], 0);

	CW_MEMBER_2[1] = TextDrawCreate(61.0000, 217.000000, "MarkoBALBALBALBALB~n~_");
	TextDrawAlignment(CW_MEMBER_2[1], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER_2[1], 255);
	TextDrawFont(CW_MEMBER_2[1], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER_2[1], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER_2[1], -1);
	TextDrawSetOutline(CW_MEMBER_2[1], 0);
	TextDrawSetProportional(CW_MEMBER_2[1], 1);
	TextDrawSetShadow(CW_MEMBER_2[1], 1);
	TextDrawUseBox(CW_MEMBER_2[1], 1);
	TextDrawBoxColour(CW_MEMBER_2[1], 133);
	TextDrawTextSize(CW_MEMBER_2[1], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER_2[1], 0);

	CW_MEMBER_2[2] = TextDrawCreate(61.0000, 234.300003, "DESERTGhoSt~n~_");
	TextDrawAlignment(CW_MEMBER_2[2], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER_2[2], 255);
	TextDrawFont(CW_MEMBER_2[2], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER_2[2], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER_2[2], -1);
	TextDrawSetOutline(CW_MEMBER_2[2], 0);
	TextDrawSetProportional(CW_MEMBER_2[2], 1);
	TextDrawSetShadow(CW_MEMBER_2[2], 1);
	TextDrawUseBox(CW_MEMBER_2[2], 1);
	TextDrawBoxColour(CW_MEMBER_2[2], 133);
	TextDrawTextSize(CW_MEMBER_2[2], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER_2[2], 0);

	CW_MEMBER_2[3] = TextDrawCreate(61.0000, 251.300003, "Ahmet~n~_");
	TextDrawAlignment(CW_MEMBER_2[3], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER_2[3], 255);
	TextDrawFont(CW_MEMBER_2[3], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER_2[3], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER_2[3], -1);
	TextDrawSetOutline(CW_MEMBER_2[3], 0);
	TextDrawSetProportional(CW_MEMBER_2[3], 1);
	TextDrawSetShadow(CW_MEMBER_2[3], 1);
	TextDrawUseBox(CW_MEMBER_2[3], 1);
	TextDrawBoxColour(CW_MEMBER_2[3], 133);
	TextDrawTextSize(CW_MEMBER_2[3], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER_2[3], 0);

	CW_MEMBER_2[4] = TextDrawCreate(61.0000, 268.299987, "Christofski~n~_");
	TextDrawAlignment(CW_MEMBER_2[4], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER_2[4], 255);
	TextDrawFont(CW_MEMBER_2[4], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER_2[4], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER_2[4], -1);
	TextDrawSetOutline(CW_MEMBER_2[4], 0);
	TextDrawSetProportional(CW_MEMBER_2[4], 1);
	TextDrawSetShadow(CW_MEMBER_2[4], 1);
	TextDrawUseBox(CW_MEMBER_2[4], 1);
	TextDrawBoxColour(CW_MEMBER_2[4], 133);
	TextDrawTextSize(CW_MEMBER_2[4], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER_2[4], 0);

	CW_MEMBER_2[5] = TextDrawCreate(61.0000, 285.399993, "Scream~n~_");
	TextDrawAlignment(CW_MEMBER_2[5], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER_2[5], 255);
	TextDrawFont(CW_MEMBER_2[5], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER_2[5], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER_2[5], -1);
	TextDrawSetOutline(CW_MEMBER_2[5], 0);
	TextDrawSetProportional(CW_MEMBER_2[5], 1);
	TextDrawSetShadow(CW_MEMBER_2[5], 1);
	TextDrawUseBox(CW_MEMBER_2[5], 1);
	TextDrawBoxColour(CW_MEMBER_2[5], 133);
	TextDrawTextSize(CW_MEMBER_2[5], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER_2[5], 0);

	CW_MEMBER_2[6] = TextDrawCreate(61.0000, 302.399993, "Navi~n~_");
	TextDrawAlignment(CW_MEMBER_2[6], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER_2[6], 255);
	TextDrawFont(CW_MEMBER_2[6], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER_2[6], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER_2[6], -1);
	TextDrawSetOutline(CW_MEMBER_2[6], 0);
	TextDrawSetProportional(CW_MEMBER_2[6], 1);
	TextDrawSetShadow(CW_MEMBER_2[6], 1);
	TextDrawUseBox(CW_MEMBER_2[6], 1);
	TextDrawBoxColour(CW_MEMBER_2[6], 133);
	TextDrawTextSize(CW_MEMBER_2[6], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER_2[6], 0);

	CW_MEMBER_2[7] = TextDrawCreate(61.0000, 319.799987, "Marko_1925~n~_");
	TextDrawAlignment(CW_MEMBER_2[7], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER_2[7], 255);
	TextDrawFont(CW_MEMBER_2[7], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER_2[7], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER_2[7], -1);
	TextDrawSetOutline(CW_MEMBER_2[7], 0);
	TextDrawSetProportional(CW_MEMBER_2[7], 1);
	TextDrawSetShadow(CW_MEMBER_2[7], 1);
	TextDrawUseBox(CW_MEMBER_2[7], 1);
	TextDrawBoxColour(CW_MEMBER_2[7], 133);
	TextDrawTextSize(CW_MEMBER_2[7], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER_2[7], 0);

	CW_MEMBER_2[8] = TextDrawCreate(61.0000, 336.799987, "Google~n~_");
	TextDrawAlignment(CW_MEMBER_2[8], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER_2[8], 255);
	TextDrawFont(CW_MEMBER_2[8], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER_2[8], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER_2[8], -1);
	TextDrawSetOutline(CW_MEMBER_2[8], 0);
	TextDrawSetProportional(CW_MEMBER_2[8], 1);
	TextDrawSetShadow(CW_MEMBER_2[8], 1);
	TextDrawUseBox(CW_MEMBER_2[8], 1);
	TextDrawBoxColour(CW_MEMBER_2[8], 133);
	TextDrawTextSize(CW_MEMBER_2[8], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER_2[8], 0);

	CW_MEMBER_2[9] = TextDrawCreate(61.0000, 353.799987, "Test_User~n~_");
	TextDrawAlignment(CW_MEMBER_2[9], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW_MEMBER_2[9], 255);
	TextDrawFont(CW_MEMBER_2[9], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW_MEMBER_2[9], 0.149998, 0.799998);
	TextDrawColour(CW_MEMBER_2[9], -1);
	TextDrawSetOutline(CW_MEMBER_2[9], 0);
	TextDrawSetProportional(CW_MEMBER_2[9], 1);
	TextDrawSetShadow(CW_MEMBER_2[9], 1);
	TextDrawUseBox(CW_MEMBER_2[9], 1);
	TextDrawBoxColour(CW_MEMBER_2[9], 133);
	TextDrawTextSize(CW_MEMBER_2[9], 640.000000, 120.000000);
	TextDrawSetSelectable(CW_MEMBER_2[9], 0);

    Warmup0 = TextDrawCreate(317.000000, 125.000000, "Warmup:_23_seconds");
	TextDrawAlignment(Warmup0, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(Warmup0, 255);
	TextDrawFont(Warmup0, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(Warmup0, 0.270000, 1.299999);
	TextDrawColour(Warmup0, -1);
	TextDrawSetOutline(Warmup0, 0);
	TextDrawSetProportional(Warmup0, 1);
	TextDrawSetShadow(Warmup0, 1);
	TextDrawUseBox(Warmup0, 1);
	TextDrawBoxColour(Warmup0, 40);
	TextDrawTextSize(Warmup0, 363.000000, -100.000000);
	TextDrawSetSelectable(Warmup0, 0);

	Warmup1 = TextDrawCreate(266.000000, 125.000000, "_");
	TextDrawBackgroundColour(Warmup1, 255);
	TextDrawFont(Warmup1, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(Warmup1, 0.409999, 1.299993);
	TextDrawColour(Warmup1, 20);
	TextDrawSetOutline(Warmup1, 0);
	TextDrawSetProportional(Warmup1, 1);
	TextDrawSetShadow(Warmup1, 1);
	TextDrawUseBox(Warmup1, 1);
	TextDrawBoxColour(Warmup1, 20);
	TextDrawTextSize(Warmup1, 368.000000, -79.000000);
	TextDrawSetSelectable(Warmup1, 0);

	Warmup2 = TextDrawCreate(263.000000, 125.000000, "_");
	TextDrawBackgroundColour(Warmup2, 255);
	TextDrawFont(Warmup2, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(Warmup2, 0.449999, 1.299993);
	TextDrawColour(Warmup2, 20);
	TextDrawSetOutline(Warmup2, 0);
	TextDrawSetProportional(Warmup2, 1);
	TextDrawSetShadow(Warmup2, 1);
	TextDrawUseBox(Warmup2, 1);
	TextDrawBoxColour(Warmup2, 20);
	TextDrawTextSize(Warmup2, 372.000000, -79.000000);
	TextDrawSetSelectable(Warmup2, 0);

	CW[0] = TextDrawCreate(169.000000, 138.000000, "_");
	TextDrawBackgroundColour(CW[0], 255);
	TextDrawFont(CW[0], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CW[0], 0.500000, 20.399997);
	TextDrawColour(CW[0], -1);
	TextDrawSetOutline(CW[0], 0);
	TextDrawSetProportional(CW[0], 1);
	TextDrawSetShadow(CW[0], 1);
	TextDrawUseBox(CW[0], 1);
	TextDrawBoxColour(CW[0], -206);
	TextDrawTextSize(CW[0], 460.000000, 8.000000);
	TextDrawSetSelectable(CW[0], 0);

	CW[1] = TextDrawCreate(150.000000, 126.000000, "-~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~-");
	TextDrawBackgroundColour(CW[1], 16711935);
	TextDrawFont(CW[1], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW[1], 26.739990, 1.899999);
	TextDrawColour(CW[1], -1);
	TextDrawSetOutline(CW[1], 1);
	TextDrawSetProportional(CW[1], 1);
	TextDrawSetSelectable(CW[1], 0);

	CW[2] = TextDrawCreate(166.000000, 128.000000, "'");
	TextDrawBackgroundColour(CW[2], 16711935);
	TextDrawFont(CW[2], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW[2], 0.150000, 60.199996);
	TextDrawColour(CW[2], -1);
	TextDrawSetOutline(CW[2], 1);
	TextDrawSetProportional(CW[2], 1);
	TextDrawSetSelectable(CW[2], 0);

	CW[3] = TextDrawCreate(460.000000, 128.000000, "'");
	TextDrawBackgroundColour(CW[3], 16711935);
	TextDrawFont(CW[3], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW[3], 0.150000, 60.199996);
	TextDrawColour(CW[3], -1);
	TextDrawSetOutline(CW[3], 1);
	TextDrawSetProportional(CW[3], 1);
	TextDrawSetSelectable(CW[3], 0);

	CW[4] = TextDrawCreate(312.000000, 153.000000, "TAF                       vs                       RAW");
	TextDrawAlignment(CW[4], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW[4], 65535);
	TextDrawFont(CW[4], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CW[4], 0.209999, 1.000000);
	TextDrawColour(CW[4], -1);
	TextDrawSetOutline(CW[4], 1);
	TextDrawSetProportional(CW[4], 1);
	TextDrawSetSelectable(CW[4], 0);

	CW[5] = TextDrawCreate(312.000000, 213.000000, "ROUNDS: 5~n~~n~MAX MEMBERS: 5~n~~n~Map: De Dust 2");
	TextDrawAlignment(CW[5], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW[5], 0);
	TextDrawFont(CW[5], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW[5], 0.170000, 1.100000);
	TextDrawColour(CW[5], 65535);
	TextDrawSetOutline(CW[5], 0);
	TextDrawSetProportional(CW[5], 1);
	TextDrawSetShadow(CW[5], 1);
	TextDrawSetSelectable(CW[5], 0);

	CW[6] = TextDrawCreate(312.000000, 301.000000, "War starting in: ~r~59");
	TextDrawAlignment(CW[6], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW[6], 0);
	TextDrawFont(CW[6], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW[6], 0.170000, 1.100000);
	TextDrawColour(CW[6], 65535);
	TextDrawSetOutline(CW[6], 0);
	TextDrawSetProportional(CW[6], 1);
	TextDrawSetShadow(CW[6], 1);
	TextDrawSetSelectable(CW[6], 0);

	CW[7] = TextDrawCreate(289.000000, 189.000000, "WAR INFO");
	TextDrawBackgroundColour(CW[7], 255);
	TextDrawFont(CW[7], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CW[7], 0.259999, 1.200000);
	TextDrawColour(CW[7], -1);
	TextDrawSetOutline(CW[7], 0);
	TextDrawSetProportional(CW[7], 1);
	TextDrawSetShadow(CW[7], 1);
	TextDrawSetSelectable(CW[7], 0);

	CW[8] = TextDrawCreate(312.000000, 191.000000, "PARTICIPANTS                                                   PARTICIPANTS");
	TextDrawAlignment(CW[8], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW[8], 255);
	TextDrawFont(CW[8], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CW[8], 0.180000, 0.899999);
	TextDrawColour(CW[8], -1);
	TextDrawSetOutline(CW[8], 0);
	TextDrawSetProportional(CW[8], 1);
	TextDrawSetShadow(CW[8], 1);
	TextDrawSetSelectable(CW[8], 0);

	CW[9] = TextDrawCreate(203.000000, 213.000000, "User1~n~User2~n~User3~n~User4~n~User5~n~User6~n~User7~n~User8~n~User9~n~User10");
	TextDrawBackgroundColour(CW[9], 255);
	TextDrawFont(CW[9], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CW[9], 0.150000, 0.799998);
	TextDrawColour(CW[9], -16776961);
	TextDrawSetOutline(CW[9], 0);
	TextDrawSetProportional(CW[9], 1);
	TextDrawSetShadow(CW[9], 0);
	TextDrawSetSelectable(CW[9], 0);

	CW[10] = TextDrawCreate(380.000000, 213.000000, "User1~n~User2~n~User3~n~User4~n~User5~n~User6~n~User7~n~User8~n~User9~n~User10");
	TextDrawBackgroundColour(CW[10], 255);
	TextDrawFont(CW[10], TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CW[10], 0.150000, 0.799998);
	TextDrawColour(CW[10], -16776961);
	TextDrawSetOutline(CW[10], 0);
	TextDrawSetProportional(CW[10], 1);
	TextDrawSetShadow(CW[10], 0);
	TextDrawSetSelectable(CW[10], 0);

	CW[11] = TextDrawCreate(221.000000, 302.000000, "UNREADY ~w~(10/10)");
	TextDrawAlignment(CW[11], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW[11], 0);
	TextDrawFont(CW[11], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW[11], 0.140000, 0.900000);
	TextDrawColour(CW[11], 16711935);
	TextDrawSetOutline(CW[11], 0);
	TextDrawSetProportional(CW[11], 1);
	TextDrawSetShadow(CW[11], 1);
	TextDrawSetSelectable(CW[11], 0);

	CW[12] = TextDrawCreate(401.000000, 302.000000, "READY ~w~(10/10)");
	TextDrawAlignment(CW[12], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(CW[12], 0);
	TextDrawFont(CW[12], TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CW[12], 0.140000, 0.900000);
	TextDrawColour(CW[12], 16711935);
	TextDrawSetOutline(CW[12], 0);
	TextDrawSetProportional(CW[12], 1);
	TextDrawSetShadow(CW[12], 1);
	TextDrawSetSelectable(CW[12], 0);

	dmusicbox = TextDrawCreate(323.000000, 88.000000, "~n~I Am - AWOLNATION~n~~n~Special donor death music kit~n~~n~");
	TextDrawAlignment(dmusicbox, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(dmusicbox, 95);
	TextDrawFont(dmusicbox, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(dmusicbox, 0.170000, 0.900000);
	TextDrawColour(dmusicbox, -1);
	TextDrawSetOutline(dmusicbox, 0);
	TextDrawSetProportional(dmusicbox, 1);
	TextDrawSetShadow(dmusicbox, 1);
	TextDrawUseBox(dmusicbox, 1);
	TextDrawBoxColour(dmusicbox, 95);
	TextDrawTextSize(dmusicbox, 489.000000, 258.000000);
	TextDrawSetSelectable(dmusicbox, 0);

	dmusicicon = TextDrawCreate(188.000000, 52.000000, "_");
	TextDrawBackgroundColour(dmusicicon, -871318784);
	TextDrawFont(dmusicicon, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawLetterSize(dmusicicon, 0.640000, 4.600000);
	TextDrawColour(dmusicicon, -1);
	TextDrawSetOutline(dmusicicon, 1);
	TextDrawSetProportional(dmusicicon, 1);
	TextDrawUseBox(dmusicicon, 1);
	TextDrawBoxColour(dmusicicon, -16776961);
	TextDrawTextSize(dmusicicon, 78.000000, 107.000000);
	TextDrawSetPreviewModel(dmusicicon, 2103);
	TextDrawSetPreviewRot(dmusicicon, 0.000000, 0.000000, 180.000000, 1.000000);
	TextDrawSetSelectable(dmusicicon, 0);

    KillBOX1 = TextDrawCreate(270.000000, 134.000000, "_~n~_");
	TextDrawBackgroundColour(KillBOX1, 255);
	TextDrawFont(KillBOX1, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(KillBOX1, 0.500000, 1.399999);
	TextDrawColour(KillBOX1, -1);
	TextDrawSetOutline(KillBOX1, 0);
	TextDrawSetProportional(KillBOX1, 1);
	TextDrawSetShadow(KillBOX1, 1);
	TextDrawUseBox(KillBOX1, 1);
	TextDrawBoxColour(KillBOX1, 55);
	TextDrawTextSize(KillBOX1, 368.000000, -34.000000);
	TextDrawSetSelectable(KillBOX1, 0);

	KillBOX2 = TextDrawCreate(319.000000, 137.000000, "~n~_~n~");
	TextDrawAlignment(KillBOX2, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawBackgroundColour(KillBOX2, 255);
	TextDrawFont(KillBOX2, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(KillBOX2, 0.300000, 1.100000);
	TextDrawColour(KillBOX2, 255);
	TextDrawSetOutline(KillBOX2, 0);
	TextDrawSetProportional(KillBOX2, 1);
	TextDrawSetShadow(KillBOX2, 0);
	TextDrawUseBox(KillBOX2, 1);
	TextDrawBoxColour(KillBOX2, 14451199);
	TextDrawTextSize(KillBOX2, 351.000000, 101.000000);
	TextDrawSetSelectable(KillBOX2, 0);


	ServerWeb = TextDrawCreate(547.000000, 30.000000, "WWW.MW3-SAMP.ORG");
	TextDrawBackgroundColour(ServerWeb, 65535);
	TextDrawFont(ServerWeb, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(ServerWeb, 0.160000, 0.899999);
	TextDrawColour(ServerWeb, -65281);
	TextDrawSetOutline(ServerWeb, 1);
	TextDrawSetProportional(ServerWeb, 1);
	TextDrawSetSelectable(ServerWeb, 0);

	RC_Menu[0] = TextDrawCreate(219.000000, 140.599426, "box");
	TextDrawLetterSize(RC_Menu[0], 0.000000, 28.799987);
	TextDrawTextSize(RC_Menu[0], 420.749816, 0.000000);
	TextDrawAlignment(RC_Menu[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[0], -1);
	TextDrawUseBox(RC_Menu[0], 1);
	TextDrawBoxColour(RC_Menu[0], 100);
	TextDrawSetShadow(RC_Menu[0], 0);
	TextDrawSetOutline(RC_Menu[0], 0);
	TextDrawBackgroundColour(RC_Menu[0], 255);
	TextDrawFont(RC_Menu[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[0], 1);
	TextDrawSetShadow(RC_Menu[0], 0);

	RC_Menu[1] = TextDrawCreate(220.000000, 141.000000, "box");
	TextDrawLetterSize(RC_Menu[1], 0.000000, 0.959999);
	TextDrawTextSize(RC_Menu[1], 419.600067, 0.000000);
	TextDrawAlignment(RC_Menu[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[1], -1);
	TextDrawUseBox(RC_Menu[1], 1);
	TextDrawBoxColour(RC_Menu[1], 150);
	TextDrawSetShadow(RC_Menu[1], 0);
	TextDrawSetOutline(RC_Menu[1], 0);
	TextDrawBackgroundColour(RC_Menu[1], 255);
	TextDrawFont(RC_Menu[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[1], 1);
	TextDrawSetShadow(RC_Menu[1], 0);

	RC_Menu[2] = TextDrawCreate(255.500244, 137.000000, "Race_Event_Creation");
	TextDrawLetterSize(RC_Menu[2], 0.400000, 1.600000);
	TextDrawAlignment(RC_Menu[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[2], -1);
	TextDrawSetShadow(RC_Menu[2], 0);
	TextDrawSetOutline(RC_Menu[2], 0);
	TextDrawBackgroundColour(RC_Menu[2], 255);
	TextDrawFont(RC_Menu[2], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[2], 1);
	TextDrawSetShadow(RC_Menu[2], 0);

	RC_Menu[3] = TextDrawCreate(266.000000, 175.000213, "box");
	TextDrawLetterSize(RC_Menu[3], 0.000000, 1.439998);
	TextDrawTextSize(RC_Menu[3], 373.999877, 0.000000);
	TextDrawAlignment(RC_Menu[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[3], -1);
	TextDrawUseBox(RC_Menu[3], 1);
	TextDrawBoxColour(RC_Menu[3], 255);
	TextDrawSetShadow(RC_Menu[3], 0);
	TextDrawSetOutline(RC_Menu[3], 0);
	TextDrawBackgroundColour(RC_Menu[3], 255);
	TextDrawFont(RC_Menu[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[3], 1);
	TextDrawSetShadow(RC_Menu[3], 0);

	RC_Menu[4] = TextDrawCreate(266.000000, 199.799835, "box");
	TextDrawLetterSize(RC_Menu[4], 0.000000, 1.439998);
	TextDrawTextSize(RC_Menu[4], 373.999877, 0.000000);
	TextDrawAlignment(RC_Menu[4], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[4], -1);
	TextDrawUseBox(RC_Menu[4], 1);
	TextDrawBoxColour(RC_Menu[4], 255);
	TextDrawSetShadow(RC_Menu[4], 0);
	TextDrawSetOutline(RC_Menu[4], 0);
	TextDrawBackgroundColour(RC_Menu[4], 255);
	TextDrawFont(RC_Menu[4], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[4], 1);
	TextDrawSetShadow(RC_Menu[4], 0);

	RC_Menu[5] = TextDrawCreate(266.000000, 224.999450, "box");
	TextDrawLetterSize(RC_Menu[5], 0.000000, 1.439998);
	TextDrawTextSize(RC_Menu[5], 373.999877, 0.000000);
	TextDrawAlignment(RC_Menu[5], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[5], -1);
	TextDrawUseBox(RC_Menu[5], 1);
	TextDrawBoxColour(RC_Menu[5], 255);
	TextDrawSetShadow(RC_Menu[5], 0);
	TextDrawSetOutline(RC_Menu[5], 0);
	TextDrawBackgroundColour(RC_Menu[5], 255);
	TextDrawFont(RC_Menu[5], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[5], 1);
	TextDrawSetShadow(RC_Menu[5], 0);

	RC_Menu[6] = TextDrawCreate(266.000000, 224.999450, "box");
	TextDrawLetterSize(RC_Menu[6], 0.000000, 1.439998);
	TextDrawTextSize(RC_Menu[6], 373.999877, 0.000000);
	TextDrawAlignment(RC_Menu[6], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[6], -1);
	TextDrawUseBox(RC_Menu[6], 1);
	TextDrawBoxColour(RC_Menu[6], 255);
	TextDrawSetShadow(RC_Menu[6], 0);
	TextDrawSetOutline(RC_Menu[6], 0);
	TextDrawBackgroundColour(RC_Menu[6], 255);
	TextDrawFont(RC_Menu[6], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[6], 1);
	TextDrawSetShadow(RC_Menu[6], 0);

	RC_Menu[7] = TextDrawCreate(266.000000, 249.799072, "box");
	TextDrawLetterSize(RC_Menu[7], 0.000000, 1.439998);
	TextDrawTextSize(RC_Menu[7], 373.999877, 0.000000);
	TextDrawAlignment(RC_Menu[7], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[7], -1);
	TextDrawUseBox(RC_Menu[7], 1);
	TextDrawBoxColour(RC_Menu[7], 255);
	TextDrawSetShadow(RC_Menu[7], 0);
	TextDrawSetOutline(RC_Menu[7], 0);
	TextDrawBackgroundColour(RC_Menu[7], 255);
	TextDrawFont(RC_Menu[7], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[7], 1);
	TextDrawSetShadow(RC_Menu[7], 0);

	RC_Menu[8] = TextDrawCreate(320.700378, 173.600250, "Vehicle_Model_ID");
	TextDrawLetterSize(RC_Menu[8], 0.379999, 1.600000);
	TextDrawAlignment(RC_Menu[8], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(RC_Menu[8], -1);
	TextDrawSetShadow(RC_Menu[8], 0);
	TextDrawSetOutline(RC_Menu[8], 0);
	TextDrawBackgroundColour(RC_Menu[8], 255);
	TextDrawFont(RC_Menu[8], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[8], 1);
	TextDrawSetShadow(RC_Menu[8], 0);
	TextDrawTextSize(RC_Menu[8], 15.000000, 39.500000);
	TextDrawSetSelectable(RC_Menu[8], 1);

	RC_Menu[9] = TextDrawCreate(320.200378, 197.999877, "Maps");
	TextDrawLetterSize(RC_Menu[9], 0.379999, 1.600000);
	TextDrawAlignment(RC_Menu[9], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(RC_Menu[9], -1);
	TextDrawSetShadow(RC_Menu[9], 0);
	TextDrawSetOutline(RC_Menu[9], 0);
	TextDrawBackgroundColour(RC_Menu[9], 255);
	TextDrawFont(RC_Menu[9], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[9], 1);
	TextDrawSetShadow(RC_Menu[9], 0);
	TextDrawTextSize(RC_Menu[9], 15.000000, 39.500000);
	TextDrawSetSelectable(RC_Menu[9], 1);

	RC_Menu[10] = TextDrawCreate(320.100341, 223.599487, "Player_Color");
	TextDrawLetterSize(RC_Menu[10], 0.379999, 1.600000);
	TextDrawAlignment(RC_Menu[10], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(RC_Menu[10], -1);
	TextDrawSetShadow(RC_Menu[10], 0);
	TextDrawSetOutline(RC_Menu[10], 0);
	TextDrawBackgroundColour(RC_Menu[10], 255);
	TextDrawFont(RC_Menu[10], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[10], 1);
	TextDrawSetShadow(RC_Menu[10], 0);
	TextDrawTextSize(RC_Menu[10], 15.000000, 39.500000);
	TextDrawSetSelectable(RC_Menu[10], 1);

	RC_Menu[11] = TextDrawCreate(318.600341, 248.399108, "Vehicle_Color");
	TextDrawLetterSize(RC_Menu[11], 0.379999, 1.600000);
	TextDrawAlignment(RC_Menu[11], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(RC_Menu[11], -1);
	TextDrawSetShadow(RC_Menu[11], 0);
	TextDrawSetOutline(RC_Menu[11], 0);
	TextDrawBackgroundColour(RC_Menu[11], 255);
	TextDrawFont(RC_Menu[11], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[11], 1);
	TextDrawSetShadow(RC_Menu[11], 0);
	TextDrawTextSize(RC_Menu[11], 15.000000, 39.500000);
	TextDrawSetSelectable(RC_Menu[11], 1);

	RC_Menu[12] = TextDrawCreate(266.000000, 274.998687, "box");
	TextDrawLetterSize(RC_Menu[12], 0.000000, 1.439998);
	TextDrawTextSize(RC_Menu[12], 373.999877, 0.000000);
	TextDrawAlignment(RC_Menu[12], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[12], -1);
	TextDrawUseBox(RC_Menu[12], 1);
	TextDrawBoxColour(RC_Menu[12], 255);
	TextDrawSetShadow(RC_Menu[12], 0);
	TextDrawSetOutline(RC_Menu[12], 0);
	TextDrawBackgroundColour(RC_Menu[12], 255);
	TextDrawFont(RC_Menu[12], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[12], 1);
	TextDrawSetShadow(RC_Menu[12], 0);

	RC_Menu[13] = TextDrawCreate(266.000000, 300.598297, "box");
	TextDrawLetterSize(RC_Menu[13], 0.000000, 1.439998);
	TextDrawTextSize(RC_Menu[13], 373.999877, 0.000000);
	TextDrawAlignment(RC_Menu[13], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[13], -1);
	TextDrawUseBox(RC_Menu[13], 1);
	TextDrawBoxColour(RC_Menu[13], 255);
	TextDrawSetShadow(RC_Menu[13], 0);
	TextDrawSetOutline(RC_Menu[13], 0);
	TextDrawBackgroundColour(RC_Menu[13], 255);
	TextDrawFont(RC_Menu[13], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[13], 1);
	TextDrawSetShadow(RC_Menu[13], 0);

	RC_Menu[14] = TextDrawCreate(318.100341, 273.998718, "Player_Skin");
	TextDrawLetterSize(RC_Menu[14], 0.379999, 1.600000);
	TextDrawAlignment(RC_Menu[14], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(RC_Menu[14], -1);
	TextDrawSetShadow(RC_Menu[14], 0);
	TextDrawSetOutline(RC_Menu[14], 0);
	TextDrawBackgroundColour(RC_Menu[14], 255);
	TextDrawFont(RC_Menu[14], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[14], 1);
	TextDrawSetShadow(RC_Menu[14], 0);
	TextDrawTextSize(RC_Menu[14], 15.000000, 39.500000);
	TextDrawSetSelectable(RC_Menu[14], 1);

	RC_Menu[15] = TextDrawCreate(318.100341, 299.598327, "Car_Nos");
	TextDrawLetterSize(RC_Menu[15], 0.379999, 1.600000);
	TextDrawAlignment(RC_Menu[15], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(RC_Menu[15], -1);
	TextDrawSetShadow(RC_Menu[15], 0);
	TextDrawSetOutline(RC_Menu[15], 0);
	TextDrawBackgroundColour(RC_Menu[15], 255);
	TextDrawFont(RC_Menu[15], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[15], 1);
	TextDrawSetShadow(RC_Menu[15], 0);
	TextDrawTextSize(RC_Menu[15], 15.000000, 39.500000);
	TextDrawSetSelectable(RC_Menu[15], 1);

	RC_Menu[16] = TextDrawCreate(266.000000, 326.197906, "box");
	TextDrawLetterSize(RC_Menu[16], 0.000000, 1.439998);
	TextDrawTextSize(RC_Menu[16], 373.999877, 0.000000);
	TextDrawAlignment(RC_Menu[16], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[16], -1);
	TextDrawUseBox(RC_Menu[16], 1);
	TextDrawBoxColour(RC_Menu[16], 255);
	TextDrawSetShadow(RC_Menu[16], 0);
	TextDrawSetOutline(RC_Menu[16], 0);
	TextDrawBackgroundColour(RC_Menu[16], 255);
	TextDrawFont(RC_Menu[16], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[16], 1);
	TextDrawSetShadow(RC_Menu[16], 0);

	RC_Menu[17] = TextDrawCreate(266.000000, 351.397521, "box");
	TextDrawLetterSize(RC_Menu[17], 0.000000, 1.439998);
	TextDrawTextSize(RC_Menu[17], 373.999877, 0.000000);
	TextDrawAlignment(RC_Menu[17], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[17], -1);
	TextDrawUseBox(RC_Menu[17], 1);
	TextDrawBoxColour(RC_Menu[17], 255);
	TextDrawSetShadow(RC_Menu[17], 0);
	TextDrawSetOutline(RC_Menu[17], 0);
	TextDrawBackgroundColour(RC_Menu[17], 255);
	TextDrawFont(RC_Menu[17], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[17], 1);
	TextDrawSetShadow(RC_Menu[17], 0);

	RC_Menu[18] = TextDrawCreate(320.999847, 325.197937, "Vehicle_plates");
	TextDrawLetterSize(RC_Menu[18], 0.379999, 1.600000);
	TextDrawAlignment(RC_Menu[18], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(RC_Menu[18], -1);
	TextDrawSetShadow(RC_Menu[18], 0);
	TextDrawSetOutline(RC_Menu[18], 0);
	TextDrawBackgroundColour(RC_Menu[18], 255);
	TextDrawFont(RC_Menu[18], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[18], 1);
	TextDrawSetShadow(RC_Menu[18], 0);
	TextDrawTextSize(RC_Menu[18], 15.000000, 39.500000);
	TextDrawSetSelectable(RC_Menu[18], 1);

	RC_Menu[19] = TextDrawCreate(321.100341, 349.997558, "Invulnerabillity");
	TextDrawLetterSize(RC_Menu[19], 0.379999, 1.600000);
	TextDrawAlignment(RC_Menu[19], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(RC_Menu[19], -1);
	TextDrawSetShadow(RC_Menu[19], 0);
	TextDrawSetOutline(RC_Menu[19], 0);
	TextDrawBackgroundColour(RC_Menu[19], 255);
	TextDrawFont(RC_Menu[19], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[19], 1);
	TextDrawSetShadow(RC_Menu[19], 0);
	TextDrawTextSize(RC_Menu[19], 15.000000, 39.500000);
	TextDrawSetSelectable(RC_Menu[19], 1);

	RC_Menu[20] = TextDrawCreate(265.800018, 375.000000, "box");
	TextDrawLetterSize(RC_Menu[20], 0.000000, 1.439998);
	TextDrawTextSize(RC_Menu[20], 373.599884, 0.000000);
	TextDrawAlignment(RC_Menu[20], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(RC_Menu[20], -1);
	TextDrawUseBox(RC_Menu[20], 1);
	TextDrawBoxColour(RC_Menu[20], 255);
	TextDrawSetShadow(RC_Menu[20], 0);
	TextDrawSetOutline(RC_Menu[20], 0);
	TextDrawBackgroundColour(RC_Menu[20], 255);
	TextDrawFont(RC_Menu[20], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[20], 1);
	TextDrawSetShadow(RC_Menu[20], 0);

	RC_Menu[21] = TextDrawCreate(320.799957, 373.597198, "Rewards");
	TextDrawLetterSize(RC_Menu[21], 0.379999, 1.600000);
	TextDrawAlignment(RC_Menu[21], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(RC_Menu[21], -1);
	TextDrawSetShadow(RC_Menu[21], 0);
	TextDrawSetOutline(RC_Menu[21], 0);
	TextDrawBackgroundColour(RC_Menu[21], 255);
	TextDrawFont(RC_Menu[21], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(RC_Menu[21], 1);
	TextDrawSetShadow(RC_Menu[21], 0);
	TextDrawTextSize(RC_Menu[21], 15.000000, 39.500000);
	TextDrawSetSelectable(RC_Menu[21], 1);

	DM_Menu[0] = TextDrawCreate(219.000000, 140.599426, "box");
	TextDrawLetterSize(DM_Menu[0], 0.000000, 28.799987);
	TextDrawTextSize(DM_Menu[0], 420.749816, 0.000000);
	TextDrawAlignment(DM_Menu[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[0], -1);
	TextDrawUseBox(DM_Menu[0], 1);
	TextDrawBoxColour(DM_Menu[0], 100);
	TextDrawSetShadow(DM_Menu[0], 0);
	TextDrawSetOutline(DM_Menu[0], 0);
	TextDrawBackgroundColour(DM_Menu[0], 255);
	TextDrawFont(DM_Menu[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[0], 1);
	TextDrawSetShadow(DM_Menu[0], 0);

	DM_Menu[1] = TextDrawCreate(220.000000, 141.000000, "box");
	TextDrawLetterSize(DM_Menu[1], 0.000000, 0.959999);
	TextDrawTextSize(DM_Menu[1], 419.600067, 0.000000);
	TextDrawAlignment(DM_Menu[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[1], -1);
	TextDrawUseBox(DM_Menu[1], 1);
	TextDrawBoxColour(DM_Menu[1], 150);
	TextDrawSetShadow(DM_Menu[1], 0);
	TextDrawSetOutline(DM_Menu[1], 0);
	TextDrawBackgroundColour(DM_Menu[1], 255);
	TextDrawFont(DM_Menu[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[1], 1);
	TextDrawSetShadow(DM_Menu[1], 0);

	DM_Menu[2] = TextDrawCreate(260.900573, 137.000000, "DM_Event_Creation");
	TextDrawLetterSize(DM_Menu[2], 0.400000, 1.600000);
	TextDrawAlignment(DM_Menu[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[2], -1);
	TextDrawSetShadow(DM_Menu[2], 0);
	TextDrawSetOutline(DM_Menu[2], 0);
	TextDrawBackgroundColour(DM_Menu[2], 255);
	TextDrawFont(DM_Menu[2], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[2], 1);
	TextDrawSetShadow(DM_Menu[2], 0);

	DM_Menu[3] = TextDrawCreate(266.000000, 175.000213, "box");
	TextDrawLetterSize(DM_Menu[3], 0.000000, 1.439998);
	TextDrawTextSize(DM_Menu[3], 373.999877, 0.000000);
	TextDrawAlignment(DM_Menu[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[3], -1);
	TextDrawUseBox(DM_Menu[3], 1);
	TextDrawBoxColour(DM_Menu[3], 255);
	TextDrawSetShadow(DM_Menu[3], 0);
	TextDrawSetOutline(DM_Menu[3], 0);
	TextDrawBackgroundColour(DM_Menu[3], 255);
	TextDrawFont(DM_Menu[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[3], 1);
	TextDrawSetShadow(DM_Menu[3], 0);

	DM_Menu[4] = TextDrawCreate(266.000000, 199.799835, "box");
	TextDrawLetterSize(DM_Menu[4], 0.000000, 1.439998);
	TextDrawTextSize(DM_Menu[4], 373.999877, 0.000000);
	TextDrawAlignment(DM_Menu[4], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[4], -1);
	TextDrawUseBox(DM_Menu[4], 1);
	TextDrawBoxColour(DM_Menu[4], 255);
	TextDrawSetShadow(DM_Menu[4], 0);
	TextDrawSetOutline(DM_Menu[4], 0);
	TextDrawBackgroundColour(DM_Menu[4], 255);
	TextDrawFont(DM_Menu[4], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[4], 1);
	TextDrawSetShadow(DM_Menu[4], 0);

	DM_Menu[5] = TextDrawCreate(266.000000, 224.999450, "box");
	TextDrawLetterSize(DM_Menu[5], 0.000000, 1.439998);
	TextDrawTextSize(DM_Menu[5], 373.999877, 0.000000);
	TextDrawAlignment(DM_Menu[5], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[5], -1);
	TextDrawUseBox(DM_Menu[5], 1);
	TextDrawBoxColour(DM_Menu[5], 255);
	TextDrawSetShadow(DM_Menu[5], 0);
	TextDrawSetOutline(DM_Menu[5], 0);
	TextDrawBackgroundColour(DM_Menu[5], 255);
	TextDrawFont(DM_Menu[5], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[5], 1);
	TextDrawSetShadow(DM_Menu[5], 0);

	DM_Menu[6] = TextDrawCreate(266.000000, 224.999450, "box");
	TextDrawLetterSize(DM_Menu[6], 0.000000, 1.439998);
	TextDrawTextSize(DM_Menu[6], 373.999877, 0.000000);
	TextDrawAlignment(DM_Menu[6], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[6], -1);
	TextDrawUseBox(DM_Menu[6], 1);
	TextDrawBoxColour(DM_Menu[6], 255);
	TextDrawSetShadow(DM_Menu[6], 0);
	TextDrawSetOutline(DM_Menu[6], 0);
	TextDrawBackgroundColour(DM_Menu[6], 255);
	TextDrawFont(DM_Menu[6], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[6], 1);
	TextDrawSetShadow(DM_Menu[6], 0);

	DM_Menu[7] = TextDrawCreate(266.000000, 249.799072, "box");
	TextDrawLetterSize(DM_Menu[7], 0.000000, 1.439998);
	TextDrawTextSize(DM_Menu[7], 373.999877, 0.000000);
	TextDrawAlignment(DM_Menu[7], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[7], -1);
	TextDrawUseBox(DM_Menu[7], 1);
	TextDrawBoxColour(DM_Menu[7], 255);
	TextDrawSetShadow(DM_Menu[7], 0);
	TextDrawSetOutline(DM_Menu[7], 0);
	TextDrawBackgroundColour(DM_Menu[7], 255);
	TextDrawFont(DM_Menu[7], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[7], 1);
	TextDrawSetShadow(DM_Menu[7], 0);

	DM_Menu[8] = TextDrawCreate(320.700378, 173.600250, "Random_Skin_1");
	TextDrawLetterSize(DM_Menu[8], 0.379999, 1.600000);
	TextDrawAlignment(DM_Menu[8], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(DM_Menu[8], -1);
	TextDrawSetShadow(DM_Menu[8], 0);
	TextDrawSetOutline(DM_Menu[8], 0);
	TextDrawBackgroundColour(DM_Menu[8], 255);
	TextDrawFont(DM_Menu[8], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[8], 1);
	TextDrawSetShadow(DM_Menu[8], 0);
	TextDrawTextSize(DM_Menu[8], 15.000000, 39.500000);
	TextDrawSetSelectable(DM_Menu[8], 1);

	DM_Menu[9] = TextDrawCreate(320.200378, 197.999877, "Random_Skin_2");
	TextDrawLetterSize(DM_Menu[9], 0.379999, 1.600000);
	TextDrawAlignment(DM_Menu[9], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(DM_Menu[9], -1);
	TextDrawSetShadow(DM_Menu[9], 0);
	TextDrawSetOutline(DM_Menu[9], 0);
	TextDrawBackgroundColour(DM_Menu[9], 255);
	TextDrawFont(DM_Menu[9], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[9], 1);
	TextDrawSetShadow(DM_Menu[9], 0);
	TextDrawTextSize(DM_Menu[9], 15.000000, 39.500000);
	TextDrawSetSelectable(DM_Menu[9], 1);

	DM_Menu[10] = TextDrawCreate(320.100341, 223.599487, "Random_Skin_3");
	TextDrawLetterSize(DM_Menu[10], 0.379999, 1.600000);
	TextDrawAlignment(DM_Menu[10], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(DM_Menu[10], -1);
	TextDrawSetShadow(DM_Menu[10], 0);
	TextDrawSetOutline(DM_Menu[10], 0);
	TextDrawBackgroundColour(DM_Menu[10], 255);
	TextDrawFont(DM_Menu[10], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[10], 1);
	TextDrawSetShadow(DM_Menu[10], 0);
	TextDrawTextSize(DM_Menu[10], 15.000000, 39.500000);
	TextDrawSetSelectable(DM_Menu[10], 1);

	DM_Menu[11] = TextDrawCreate(318.600341, 248.399108, "Color");
	TextDrawLetterSize(DM_Menu[11], 0.379999, 1.600000);
	TextDrawAlignment(DM_Menu[11], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(DM_Menu[11], -1);
	TextDrawSetShadow(DM_Menu[11], 0);
	TextDrawSetOutline(DM_Menu[11], 0);
	TextDrawBackgroundColour(DM_Menu[11], 255);
	TextDrawFont(DM_Menu[11], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[11], 1);
	TextDrawSetShadow(DM_Menu[11], 0);
	TextDrawTextSize(DM_Menu[11], 15.000000, 39.500000);
	TextDrawSetSelectable(DM_Menu[11], 1);

	DM_Menu[12] = TextDrawCreate(266.000000, 274.998687, "box");
	TextDrawLetterSize(DM_Menu[12], 0.000000, 1.439998);
	TextDrawTextSize(DM_Menu[12], 373.999877, 0.000000);
	TextDrawAlignment(DM_Menu[12], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[12], -1);
	TextDrawUseBox(DM_Menu[12], 1);
	TextDrawBoxColour(DM_Menu[12], 255);
	TextDrawSetShadow(DM_Menu[12], 0);
	TextDrawSetOutline(DM_Menu[12], 0);
	TextDrawBackgroundColour(DM_Menu[12], 255);
	TextDrawFont(DM_Menu[12], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[12], 1);
	TextDrawSetShadow(DM_Menu[12], 0);

	DM_Menu[13] = TextDrawCreate(266.000000, 300.598297, "box");
	TextDrawLetterSize(DM_Menu[13], 0.000000, 1.439998);
	TextDrawTextSize(DM_Menu[13], 373.999877, 0.000000);
	TextDrawAlignment(DM_Menu[13], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[13], -1);
	TextDrawUseBox(DM_Menu[13], 1);
	TextDrawBoxColour(DM_Menu[13], 255);
	TextDrawSetShadow(DM_Menu[13], 0);
	TextDrawSetOutline(DM_Menu[13], 0);
	TextDrawBackgroundColour(DM_Menu[13], 255);
	TextDrawFont(DM_Menu[13], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[13], 1);
	TextDrawSetShadow(DM_Menu[13], 0);

	DM_Menu[14] = TextDrawCreate(318.100341, 273.998718, "Weapon_1");
	TextDrawLetterSize(DM_Menu[14], 0.379999, 1.600000);
	TextDrawAlignment(DM_Menu[14], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(DM_Menu[14], -1);
	TextDrawSetShadow(DM_Menu[14], 0);
	TextDrawSetOutline(DM_Menu[14], 0);
	TextDrawBackgroundColour(DM_Menu[14], 255);
	TextDrawFont(DM_Menu[14], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[14], 1);
	TextDrawSetShadow(DM_Menu[14], 0);
	TextDrawTextSize(DM_Menu[14], 15.000000, 39.500000);
	TextDrawSetSelectable(DM_Menu[14], 1);

	DM_Menu[15] = TextDrawCreate(318.100341, 299.598327, "Weapon_2");
	TextDrawLetterSize(DM_Menu[15], 0.379999, 1.600000);
	TextDrawAlignment(DM_Menu[15], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(DM_Menu[15], -1);
	TextDrawSetShadow(DM_Menu[15], 0);
	TextDrawSetOutline(DM_Menu[15], 0);
	TextDrawBackgroundColour(DM_Menu[15], 255);
	TextDrawFont(DM_Menu[15], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[15], 1);
	TextDrawSetShadow(DM_Menu[15], 0);
	TextDrawTextSize(DM_Menu[15], 15.000000, 39.500000);
	TextDrawSetSelectable(DM_Menu[15], 1);

	DM_Menu[16] = TextDrawCreate(266.000000, 326.197906, "box");
	TextDrawLetterSize(DM_Menu[16], 0.000000, 1.439998);
	TextDrawTextSize(DM_Menu[16], 373.999877, 0.000000);
	TextDrawAlignment(DM_Menu[16], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[16], -1);
	TextDrawUseBox(DM_Menu[16], 1);
	TextDrawBoxColour(DM_Menu[16], 255);
	TextDrawSetShadow(DM_Menu[16], 0);
	TextDrawSetOutline(DM_Menu[16], 0);
	TextDrawBackgroundColour(DM_Menu[16], 255);
	TextDrawFont(DM_Menu[16], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[16], 1);
	TextDrawSetShadow(DM_Menu[16], 0);

	DM_Menu[17] = TextDrawCreate(266.000000, 351.397521, "box");
	TextDrawLetterSize(DM_Menu[17], 0.000000, 1.439998);
	TextDrawTextSize(DM_Menu[17], 373.999877, 0.000000);
	TextDrawAlignment(DM_Menu[17], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[17], -1);
	TextDrawUseBox(DM_Menu[17], 1);
	TextDrawBoxColour(DM_Menu[17], 255);
	TextDrawSetShadow(DM_Menu[17], 0);
	TextDrawSetOutline(DM_Menu[17], 0);
	TextDrawBackgroundColour(DM_Menu[17], 255);
	TextDrawFont(DM_Menu[17], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[17], 1);
	TextDrawSetShadow(DM_Menu[17], 0);

	DM_Menu[18] = TextDrawCreate(320.999847, 325.197937, "Weapon_3");
	TextDrawLetterSize(DM_Menu[18], 0.379999, 1.600000);
	TextDrawAlignment(DM_Menu[18], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(DM_Menu[18], -1);
	TextDrawSetShadow(DM_Menu[18], 0);
	TextDrawSetOutline(DM_Menu[18], 0);
	TextDrawBackgroundColour(DM_Menu[18], 255);
	TextDrawFont(DM_Menu[18], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[18], 1);
	TextDrawSetShadow(DM_Menu[18], 0);
	TextDrawTextSize(DM_Menu[18], 15.000000, 39.500000);
	TextDrawSetSelectable(DM_Menu[18], 1);

	DM_Menu[19] = TextDrawCreate(321.100341, 349.997558, "Weapon_4");
	TextDrawLetterSize(DM_Menu[19], 0.379999, 1.600000);
	TextDrawAlignment(DM_Menu[19], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(DM_Menu[19], -1);
	TextDrawSetShadow(DM_Menu[19], 0);
	TextDrawSetOutline(DM_Menu[19], 0);
	TextDrawBackgroundColour(DM_Menu[19], 255);
	TextDrawFont(DM_Menu[19], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[19], 1);
	TextDrawSetShadow(DM_Menu[19], 0);
	TextDrawTextSize(DM_Menu[19], 15.000000, 39.500000);
	TextDrawSetSelectable(DM_Menu[19], 1);

	DM_Menu[20] = TextDrawCreate(265.800018, 375.000000, "box");
	TextDrawLetterSize(DM_Menu[20], 0.000000, 1.439998);
	TextDrawTextSize(DM_Menu[20], 373.599884, 0.000000);
	TextDrawAlignment(DM_Menu[20], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Menu[20], -1);
	TextDrawUseBox(DM_Menu[20], 1);
	TextDrawBoxColour(DM_Menu[20], 255);
	TextDrawSetShadow(DM_Menu[20], 0);
	TextDrawSetOutline(DM_Menu[20], 0);
	TextDrawBackgroundColour(DM_Menu[20], 255);
	TextDrawFont(DM_Menu[20], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[20], 1);
	TextDrawSetShadow(DM_Menu[20], 0);

	DM_Menu[21] = TextDrawCreate(320.799957, 373.597198, "Rewards");
	TextDrawLetterSize(DM_Menu[21], 0.379999, 1.600000);
	TextDrawAlignment(DM_Menu[21], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(DM_Menu[21], -1);
	TextDrawSetShadow(DM_Menu[21], 0);
	TextDrawSetOutline(DM_Menu[21], 0);
	TextDrawBackgroundColour(DM_Menu[21], 255);
	TextDrawFont(DM_Menu[21], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Menu[21], 1);
	TextDrawSetShadow(DM_Menu[21], 0);
	TextDrawTextSize(DM_Menu[21], 15.000000, 39.500000);
	TextDrawSetSelectable(DM_Menu[21], 1);

	Event_Menu[0] = TextDrawCreate(220.399993, 169.339935, "box");
	TextDrawLetterSize(Event_Menu[0], 0.000000, 13.520002);
	TextDrawTextSize(Event_Menu[0], 413.999694, 0.000000);
	TextDrawAlignment(Event_Menu[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Event_Menu[0], -1);
	TextDrawUseBox(Event_Menu[0], 1);
	TextDrawBoxColour(Event_Menu[0], 100);
	TextDrawSetShadow(Event_Menu[0], 0);
	TextDrawSetOutline(Event_Menu[0], 0);
	TextDrawBackgroundColour(Event_Menu[0], 255);
	TextDrawFont(Event_Menu[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Event_Menu[0], 1);
	TextDrawSetShadow(Event_Menu[0], 0);

	Event_Menu[1] = TextDrawCreate(220.400009, 169.839935, "box");
	TextDrawLetterSize(Event_Menu[1], 0.000000, 0.560001);
	TextDrawTextSize(Event_Menu[1], 414.000152, 0.000000);
	TextDrawAlignment(Event_Menu[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Event_Menu[1], -1);
	TextDrawUseBox(Event_Menu[1], 1);
	TextDrawBoxColour(Event_Menu[1], 150);
	TextDrawSetShadow(Event_Menu[1], 0);
	TextDrawSetOutline(Event_Menu[1], 0);
	TextDrawBackgroundColour(Event_Menu[1], 255);
	TextDrawFont(Event_Menu[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Event_Menu[1], 1);
	TextDrawSetShadow(Event_Menu[1], 0);

	Event_Menu[2] = TextDrawCreate(262.800170, 165.560028, "Event_Management_Tool");
	TextDrawLetterSize(Event_Menu[2], 0.192799, 1.226666);
	TextDrawAlignment(Event_Menu[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Event_Menu[2], -1);
	TextDrawSetShadow(Event_Menu[2], 0);
	TextDrawSetOutline(Event_Menu[2], 2);
	TextDrawBackgroundColour(Event_Menu[2], 255);
	TextDrawFont(Event_Menu[2], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Event_Menu[2], 1);
	TextDrawSetShadow(Event_Menu[2], 0);

	Event_Menu[3] = TextDrawCreate(277.099975, 200.613525, "box");
	TextDrawLetterSize(Event_Menu[3], 0.000000, 1.279999);
	TextDrawTextSize(Event_Menu[3], 365.099975, 0.000000);
	TextDrawAlignment(Event_Menu[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Event_Menu[3], -1);
	TextDrawUseBox(Event_Menu[3], 1);
	TextDrawBoxColour(Event_Menu[3], 150);
	TextDrawSetShadow(Event_Menu[3], 0);
	TextDrawSetOutline(Event_Menu[3], 0);
	TextDrawBackgroundColour(Event_Menu[3], 255);
	TextDrawFont(Event_Menu[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Event_Menu[3], 1);
	TextDrawSetShadow(Event_Menu[3], 0);

	Event_Menu[4] = TextDrawCreate(277.099975, 225.360595, "box");
	TextDrawLetterSize(Event_Menu[4], 0.000000, 1.279999);
	TextDrawTextSize(Event_Menu[4], 365.099975, 0.000000);
	TextDrawAlignment(Event_Menu[4], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Event_Menu[4], -1);
	TextDrawUseBox(Event_Menu[4], 1);
	TextDrawBoxColour(Event_Menu[4], 150);
	TextDrawSetShadow(Event_Menu[4], 0);
	TextDrawSetOutline(Event_Menu[4], 0);
	TextDrawBackgroundColour(Event_Menu[4], 255);
	TextDrawFont(Event_Menu[4], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Event_Menu[4], 1);
	TextDrawSetShadow(Event_Menu[4], 0);

	Event_Menu[5] = TextDrawCreate(276.299987, 249.960845, "box");
	TextDrawLetterSize(Event_Menu[5], 0.000000, 1.279999);
	TextDrawTextSize(Event_Menu[5], 364.299987, 0.000000);
	TextDrawAlignment(Event_Menu[5], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Event_Menu[5], -1);
	TextDrawUseBox(Event_Menu[5], 1);
	TextDrawBoxColour(Event_Menu[5], 150);
	TextDrawSetShadow(Event_Menu[5], 0);
	TextDrawSetOutline(Event_Menu[5], 0);
	TextDrawBackgroundColour(Event_Menu[5], 255);
	TextDrawFont(Event_Menu[5], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Event_Menu[5], 1);
	TextDrawSetShadow(Event_Menu[5], 0);

	Event_Menu[6] = TextDrawCreate(274.699981, 275.161102, "box");
	TextDrawLetterSize(Event_Menu[6], 0.000000, 1.279999);
	TextDrawTextSize(Event_Menu[6], 362.699981, 0.000000);
	TextDrawAlignment(Event_Menu[6], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Event_Menu[6], -1);
	TextDrawUseBox(Event_Menu[6], 1);
	TextDrawBoxColour(Event_Menu[6], 150);
	TextDrawSetShadow(Event_Menu[6], 0);
	TextDrawSetOutline(Event_Menu[6], 0);
	TextDrawBackgroundColour(Event_Menu[6], 255);
	TextDrawFont(Event_Menu[6], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Event_Menu[6], 1);
	TextDrawSetShadow(Event_Menu[6], 0);

	Event_Menu[7] = TextDrawCreate(319.700500, 198.960006, "TDM_Event");
	TextDrawLetterSize(Event_Menu[7], 0.400000, 1.600000);
	TextDrawAlignment(Event_Menu[7], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(Event_Menu[7], -1);
	TextDrawSetShadow(Event_Menu[7], 0);
	TextDrawSetOutline(Event_Menu[7], 0);
	TextDrawBackgroundColour(Event_Menu[7], 255);
	TextDrawFont(Event_Menu[7], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Event_Menu[7], 1);
	TextDrawSetShadow(Event_Menu[7], 0);
	TextDrawTextSize(Event_Menu[7], 15.000000, 39.500000);
	TextDrawSetSelectable(Event_Menu[7], 1);

	Event_Menu[8] = TextDrawCreate(318.600372, 222.960250, "DM_Event");
	TextDrawLetterSize(Event_Menu[8], 0.400000, 1.600000);
	TextDrawAlignment(Event_Menu[8], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(Event_Menu[8], -1);
	TextDrawSetShadow(Event_Menu[8], 0);
	TextDrawSetOutline(Event_Menu[8], 0);
	TextDrawBackgroundColour(Event_Menu[8], 255);
	TextDrawFont(Event_Menu[8], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Event_Menu[8], 1);
	TextDrawSetShadow(Event_Menu[8], 0);
	TextDrawTextSize(Event_Menu[8], 15.000000, 39.500000);
	TextDrawSetSelectable(Event_Menu[8], 1);

	Event_Menu[9] = TextDrawCreate(320.200408, 247.560501, "Zombie_Event");
	TextDrawLetterSize(Event_Menu[9], 0.400000, 1.600000);
	TextDrawAlignment(Event_Menu[9], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(Event_Menu[9], -1);
	TextDrawSetShadow(Event_Menu[9], 0);
	TextDrawSetOutline(Event_Menu[9], 0);
	TextDrawBackgroundColour(Event_Menu[9], 255);
	TextDrawFont(Event_Menu[9], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Event_Menu[9], 1);
	TextDrawSetShadow(Event_Menu[9], 0);
	TextDrawTextSize(Event_Menu[9], 15.000000, 39.500000);
	TextDrawSetSelectable(Event_Menu[9], 1);


	Event_Menu[10] = TextDrawCreate(319.000396, 273.360748, "Racing_Event");
	TextDrawLetterSize(Event_Menu[10], 0.400000, 1.600000);
	TextDrawAlignment(Event_Menu[10], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(Event_Menu[10], -1);
	TextDrawSetShadow(Event_Menu[10], 0);
	TextDrawSetOutline(Event_Menu[10], 0);
	TextDrawBackgroundColour(Event_Menu[10], 255);
	TextDrawFont(Event_Menu[10], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Event_Menu[10], 1);
	TextDrawSetShadow(Event_Menu[10], 0);
	TextDrawTextSize(Event_Menu[10], 15.000000, 39.500000);
	TextDrawSetSelectable(Event_Menu[10], 1);

	Event_Menu[11] = TextDrawCreate(409.801666, 165.560028, "x");
	TextDrawLetterSize(Event_Menu[11], 0.192799, 1.226666);
	TextDrawAlignment(Event_Menu[11], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Event_Menu[11], -1);
	TextDrawSetShadow(Event_Menu[11], 0);
	TextDrawSetOutline(Event_Menu[11], 2);
	TextDrawBackgroundColour(Event_Menu[11], 255);
	TextDrawFont(Event_Menu[11], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(Event_Menu[11], 1);
	TextDrawSetShadow(Event_Menu[11], 0);
	TextDrawTextSize(Event_Menu[11], 10.000000, 39.500000);
	TextDrawSetSelectable(Event_Menu[11], 1);

	TDM_Menu[0] = TextDrawCreate(219.000000, 140.599426, "box");
	TextDrawLetterSize(TDM_Menu[0], 0.000000, 28.799987);
	TextDrawTextSize(TDM_Menu[0], 420.749816, 0.000000);
	TextDrawAlignment(TDM_Menu[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[0], -1);
	TextDrawUseBox(TDM_Menu[0], 1);
	TextDrawBoxColour(TDM_Menu[0], 100);
	TextDrawSetShadow(TDM_Menu[0], 0);
	TextDrawSetOutline(TDM_Menu[0], 0);
	TextDrawBackgroundColour(TDM_Menu[0], 255);
	TextDrawFont(TDM_Menu[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[0], 1);
	TextDrawSetShadow(TDM_Menu[0], 0);

	TDM_Menu[1] = TextDrawCreate(220.000000, 141.000000, "box");
	TextDrawLetterSize(TDM_Menu[1], 0.000000, 0.959999);
	TextDrawTextSize(TDM_Menu[1], 419.600067, 0.000000);
	TextDrawAlignment(TDM_Menu[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[1], -1);
	TextDrawUseBox(TDM_Menu[1], 1);
	TextDrawBoxColour(TDM_Menu[1], 150);
	TextDrawSetShadow(TDM_Menu[1], 0);
	TextDrawSetOutline(TDM_Menu[1], 0);
	TextDrawBackgroundColour(TDM_Menu[1], 255);
	TextDrawFont(TDM_Menu[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[1], 1);
	TextDrawSetShadow(TDM_Menu[1], 0);

	TDM_Menu[2] = TextDrawCreate(252.400573, 137.000000, "TDM_Event_Creation");
	TextDrawLetterSize(TDM_Menu[2], 0.400000, 1.600000);
	TextDrawAlignment(TDM_Menu[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[2], -1);
	TextDrawSetShadow(TDM_Menu[2], 0);
	TextDrawSetOutline(TDM_Menu[2], 0);
	TextDrawBackgroundColour(TDM_Menu[2], 255);
	TextDrawFont(TDM_Menu[2], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[2], 1);
	TextDrawSetShadow(TDM_Menu[2], 0);

	TDM_Menu[3] = TextDrawCreate(266.000000, 175.000213, "box");
	TextDrawLetterSize(TDM_Menu[3], 0.000000, 1.439999);
	TextDrawTextSize(TDM_Menu[3], 373.999877, 0.000000);
	TextDrawAlignment(TDM_Menu[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[3], -1);
	TextDrawUseBox(TDM_Menu[3], 1);
	TextDrawBoxColour(TDM_Menu[3], 255);
	TextDrawSetShadow(TDM_Menu[3], 0);
	TextDrawSetOutline(TDM_Menu[3], 0);
	TextDrawBackgroundColour(TDM_Menu[3], 255);
	TextDrawFont(TDM_Menu[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[3], 1);
	TextDrawSetShadow(TDM_Menu[3], 0);

	TDM_Menu[4] = TextDrawCreate(266.000000, 199.799835, "box");
	TextDrawLetterSize(TDM_Menu[4], 0.000000, 1.439999);
	TextDrawTextSize(TDM_Menu[4], 373.999877, 0.000000);
	TextDrawAlignment(TDM_Menu[4], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[4], -1);
	TextDrawUseBox(TDM_Menu[4], 1);
	TextDrawBoxColour(TDM_Menu[4], 255);
	TextDrawSetShadow(TDM_Menu[4], 0);
	TextDrawSetOutline(TDM_Menu[4], 0);
	TextDrawBackgroundColour(TDM_Menu[4], 255);
	TextDrawFont(TDM_Menu[4], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[4], 1);
	TextDrawSetShadow(TDM_Menu[4], 0);

	TDM_Menu[5] = TextDrawCreate(266.000000, 224.999450, "box");
	TextDrawLetterSize(TDM_Menu[5], 0.000000, 1.439999);
	TextDrawTextSize(TDM_Menu[5], 373.999877, 0.000000);
	TextDrawAlignment(TDM_Menu[5], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[5], -1);
	TextDrawUseBox(TDM_Menu[5], 1);
	TextDrawBoxColour(TDM_Menu[5], 255);
	TextDrawSetShadow(TDM_Menu[5], 0);
	TextDrawSetOutline(TDM_Menu[5], 0);
	TextDrawBackgroundColour(TDM_Menu[5], 255);
	TextDrawFont(TDM_Menu[5], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[5], 1);
	TextDrawSetShadow(TDM_Menu[5], 0);

	TDM_Menu[6] = TextDrawCreate(266.000000, 224.999450, "box");
	TextDrawLetterSize(TDM_Menu[6], 0.000000, 1.439999);
	TextDrawTextSize(TDM_Menu[6], 373.999877, 0.000000);
	TextDrawAlignment(TDM_Menu[6], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[6], -1);
	TextDrawUseBox(TDM_Menu[6], 1);
	TextDrawBoxColour(TDM_Menu[6], 255);
	TextDrawSetShadow(TDM_Menu[6], 0);
	TextDrawSetOutline(TDM_Menu[6], 0);
	TextDrawBackgroundColour(TDM_Menu[6], 255);
	TextDrawFont(TDM_Menu[6], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[6], 1);
	TextDrawSetShadow(TDM_Menu[6], 0);

	TDM_Menu[7] = TextDrawCreate(266.000000, 249.799072, "box");
	TextDrawLetterSize(TDM_Menu[7], 0.000000, 1.439999);
	TextDrawTextSize(TDM_Menu[7], 373.999877, 0.000000);
	TextDrawAlignment(TDM_Menu[7], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[7], -1);
	TextDrawUseBox(TDM_Menu[7], 1);
	TextDrawBoxColour(TDM_Menu[7], 255);
	TextDrawSetShadow(TDM_Menu[7], 0);
	TextDrawSetOutline(TDM_Menu[7], 0);
	TextDrawBackgroundColour(TDM_Menu[7], 255);
	TextDrawFont(TDM_Menu[7], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[7], 1);
	TextDrawSetShadow(TDM_Menu[7], 0);

	TDM_Menu[8] = TextDrawCreate(320.700378, 173.600250, "Team_one's_name");
	TextDrawLetterSize(TDM_Menu[8], 0.379999, 1.600000);
	TextDrawAlignment(TDM_Menu[8], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(TDM_Menu[8], -1);
	TextDrawSetShadow(TDM_Menu[8], 0);
	TextDrawSetOutline(TDM_Menu[8], 0);
	TextDrawBackgroundColour(TDM_Menu[8], 255);
	TextDrawFont(TDM_Menu[8], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[8], 1);
	TextDrawSetShadow(TDM_Menu[8], 0);
	TextDrawTextSize(TDM_Menu[8], 15.000000, 39.500000);
	TextDrawSetSelectable(TDM_Menu[8], 1);

	TDM_Menu[9] = TextDrawCreate(320.200378, 197.999877, "Team_two's_name");
	TextDrawLetterSize(TDM_Menu[9], 0.379999, 1.600000);
	TextDrawAlignment(TDM_Menu[9], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(TDM_Menu[9], -1);
	TextDrawSetShadow(TDM_Menu[9], 0);
	TextDrawSetOutline(TDM_Menu[9], 0);
	TextDrawBackgroundColour(TDM_Menu[9], 255);
	TextDrawFont(TDM_Menu[9], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[9], 1);
	TextDrawSetShadow(TDM_Menu[9], 0);
	TextDrawTextSize(TDM_Menu[9], 15.000000, 39.500000);
	TextDrawSetSelectable(TDM_Menu[9], 1);

	TDM_Menu[10] = TextDrawCreate(320.100341, 223.599487, "Team_one_weaps");
	TextDrawLetterSize(TDM_Menu[10], 0.379999, 1.600000);
	TextDrawAlignment(TDM_Menu[10], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(TDM_Menu[10], -1);
	TextDrawSetShadow(TDM_Menu[10], 0);
	TextDrawSetOutline(TDM_Menu[10], 0);
	TextDrawBackgroundColour(TDM_Menu[10], 255);
	TextDrawFont(TDM_Menu[10], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[10], 1);
	TextDrawSetShadow(TDM_Menu[10], 0);
	TextDrawTextSize(TDM_Menu[10], 15.000000, 39.500000);
	TextDrawSetSelectable(TDM_Menu[10], 1);

	TDM_Menu[11] = TextDrawCreate(318.600341, 248.399108, "Team_two_weaps");
	TextDrawLetterSize(TDM_Menu[11], 0.379999, 1.600000);
	TextDrawAlignment(TDM_Menu[11], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(TDM_Menu[11], -1);
	TextDrawSetShadow(TDM_Menu[11], 0);
	TextDrawSetOutline(TDM_Menu[11], 0);
	TextDrawBackgroundColour(TDM_Menu[11], 255);
	TextDrawFont(TDM_Menu[11], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[11], 1);
	TextDrawSetShadow(TDM_Menu[11], 0);
	TextDrawTextSize(TDM_Menu[11], 15.000000, 39.500000);
	TextDrawSetSelectable(TDM_Menu[11], 1);

	TDM_Menu[12] = TextDrawCreate(266.000000, 274.998687, "box");
	TextDrawLetterSize(TDM_Menu[12], 0.000000, 1.439999);
	TextDrawTextSize(TDM_Menu[12], 373.999877, 0.000000);
	TextDrawAlignment(TDM_Menu[12], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[12], -1);
	TextDrawUseBox(TDM_Menu[12], 1);
	TextDrawBoxColour(TDM_Menu[12], 255);
	TextDrawSetShadow(TDM_Menu[12], 0);
	TextDrawSetOutline(TDM_Menu[12], 0);
	TextDrawBackgroundColour(TDM_Menu[12], 255);
	TextDrawFont(TDM_Menu[12], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[12], 1);
	TextDrawSetShadow(TDM_Menu[12], 0);

	TDM_Menu[13] = TextDrawCreate(266.000000, 300.598297, "box");
	TextDrawLetterSize(TDM_Menu[13], 0.000000, 1.439999);
	TextDrawTextSize(TDM_Menu[13], 373.999877, 0.000000);
	TextDrawAlignment(TDM_Menu[13], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[13], -1);
	TextDrawUseBox(TDM_Menu[13], 1);
	TextDrawBoxColour(TDM_Menu[13], 255);
	TextDrawSetShadow(TDM_Menu[13], 0);
	TextDrawSetOutline(TDM_Menu[13], 0);
	TextDrawBackgroundColour(TDM_Menu[13], 255);
	TextDrawFont(TDM_Menu[13], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[13], 1);
	TextDrawSetShadow(TDM_Menu[13], 0);

	TDM_Menu[14] = TextDrawCreate(318.100341, 273.998718, "Team_one_skin");
	TextDrawLetterSize(TDM_Menu[14], 0.379999, 1.600000);
	TextDrawAlignment(TDM_Menu[14], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(TDM_Menu[14], -1);
	TextDrawSetShadow(TDM_Menu[14], 0);
	TextDrawSetOutline(TDM_Menu[14], 0);
	TextDrawBackgroundColour(TDM_Menu[14], 255);
	TextDrawFont(TDM_Menu[14], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[14], 1);
	TextDrawSetShadow(TDM_Menu[14], 0);
	TextDrawTextSize(TDM_Menu[14], 15.000000, 39.500000);
	TextDrawSetSelectable(TDM_Menu[14], 1);

	TDM_Menu[15] = TextDrawCreate(318.100341, 299.598327, "Team_two_skin");
	TextDrawLetterSize(TDM_Menu[15], 0.379999, 1.600000);
	TextDrawAlignment(TDM_Menu[15], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(TDM_Menu[15], -1);
	TextDrawSetShadow(TDM_Menu[15], 0);
	TextDrawSetOutline(TDM_Menu[15], 0);
	TextDrawBackgroundColour(TDM_Menu[15], 255);
	TextDrawFont(TDM_Menu[15], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[15], 1);
	TextDrawSetShadow(TDM_Menu[15], 0);
	TextDrawTextSize(TDM_Menu[15], 15.000000, 39.500000);
	TextDrawSetSelectable(TDM_Menu[15], 1);

	TDM_Menu[16] = TextDrawCreate(266.000000, 326.197906, "box");
	TextDrawLetterSize(TDM_Menu[16], 0.000000, 1.439999);
	TextDrawTextSize(TDM_Menu[16], 373.999877, 0.000000);
	TextDrawAlignment(TDM_Menu[16], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[16], -1);
	TextDrawUseBox(TDM_Menu[16], 1);
	TextDrawBoxColour(TDM_Menu[16], 255);
	TextDrawSetShadow(TDM_Menu[16], 0);
	TextDrawSetOutline(TDM_Menu[16], 0);
	TextDrawBackgroundColour(TDM_Menu[16], 255);
	TextDrawFont(TDM_Menu[16], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[16], 1);
	TextDrawSetShadow(TDM_Menu[16], 0);

	TDM_Menu[17] = TextDrawCreate(266.000000, 351.397521, "box");
	TextDrawLetterSize(TDM_Menu[17], 0.000000, 1.439999);
	TextDrawTextSize(TDM_Menu[17], 373.999877, 0.000000);
	TextDrawAlignment(TDM_Menu[17], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[17], -1);
	TextDrawUseBox(TDM_Menu[17], 1);
	TextDrawBoxColour(TDM_Menu[17], 255);
	TextDrawSetShadow(TDM_Menu[17], 0);
	TextDrawSetOutline(TDM_Menu[17], 0);
	TextDrawBackgroundColour(TDM_Menu[17], 255);
	TextDrawFont(TDM_Menu[17], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[17], 1);
	TextDrawSetShadow(TDM_Menu[17], 0);

	TDM_Menu[18] = TextDrawCreate(320.999847, 325.197937, "Team_one_color");
	TextDrawLetterSize(TDM_Menu[18],0.379999, 1.600000);
	TextDrawAlignment(TDM_Menu[18], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(TDM_Menu[18], -1);
	TextDrawSetShadow(TDM_Menu[18], 0);
	TextDrawSetOutline(TDM_Menu[18], 0);
	TextDrawBackgroundColour(TDM_Menu[18], 255);
	TextDrawFont(TDM_Menu[18], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[18], 1);
	TextDrawSetShadow(TDM_Menu[18], 0);
	TextDrawTextSize(TDM_Menu[18], 15.000000, 39.500000);
	TextDrawSetSelectable(TDM_Menu[18], 1);

	TDM_Menu[19] = TextDrawCreate(321.100341, 349.997558, "Team_two_color");
	TextDrawLetterSize(TDM_Menu[19], 0.379999, 1.600000);
	TextDrawAlignment(TDM_Menu[19], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(TDM_Menu[19], -1);
	TextDrawSetShadow(TDM_Menu[19], 0);
	TextDrawSetOutline(TDM_Menu[19], 0);
	TextDrawBackgroundColour(TDM_Menu[19], 255);
	TextDrawFont(TDM_Menu[19], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[19], 1);
	TextDrawSetShadow(TDM_Menu[19], 0);
	TextDrawTextSize(TDM_Menu[19], 20.000000, 39.500000);
	TextDrawSetSelectable(TDM_Menu[19], 1);

	TDM_Menu[20] = TextDrawCreate(265.800018, 375.000000, "box");
	TextDrawLetterSize(TDM_Menu[20], 0.000000, 1.439999);
	TextDrawTextSize(TDM_Menu[20], 373.599884, 0.000000);
	TextDrawAlignment(TDM_Menu[20], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDM_Menu[20], -1);
	TextDrawUseBox(TDM_Menu[20], 1);
	TextDrawBoxColour(TDM_Menu[20], 255);
	TextDrawSetShadow(TDM_Menu[20], 0);
	TextDrawSetOutline(TDM_Menu[20], 0);
	TextDrawBackgroundColour(TDM_Menu[20], 255);
	TextDrawFont(TDM_Menu[20], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[20], 1);
	TextDrawSetShadow(TDM_Menu[20], 0);


	TDM_Menu[21] = TextDrawCreate(320.799957, 373.597198, "Rewards");
	TextDrawLetterSize(TDM_Menu[21], 0.379999, 1.600000);
	TextDrawAlignment(TDM_Menu[21], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(TDM_Menu[21], -1);
	TextDrawSetShadow(TDM_Menu[21], 0);
	TextDrawSetOutline(TDM_Menu[21], 0);
	TextDrawBackgroundColour(TDM_Menu[21], 255);
	TextDrawFont(TDM_Menu[21], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDM_Menu[21], 1);
	TextDrawSetShadow(TDM_Menu[21], 0);
	TextDrawTextSize(TDM_Menu[21], 15.000000, 39.500000);
	TextDrawSetSelectable(TDM_Menu[21], 1);


	//fix for invsible object (connect check obj)
	CreateDynamicObject(11695, 481.21869, 2864.86523, 32.07680,   0.00000, 3.00000, 73.74420);
	CreateDynamicObject(17029, 383.06967, 2821.30469, 68.40293,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17029, 590.58386, 2830.44800, 24.62630,   0.00000, 0.00000, 30.66670);
	CreateDynamicObject(17029, 594.98999, 2861.83105, -4.04800,   0.00000, -18.00000, 255.93018);
	//

	//desert zone near aus and area51
	CreateDynamicObject(16370, 464.89999, 2248.3, 37.3, 5, 356, 90);
	CreateDynamicObject(12929, 470.39999, 2248.3, 35.25, 355, 3, 270);
	CreateDynamicObject(3861, 465, 2251, 37.3, 354, 2, 270);
	CreateDynamicObject(964, 465, 2248.3, 36, 0, 0, 270);
	CreateDynamicObject(964, 465, 2246.8, 36, 0, 0, 270);
	CreateDynamicObject(964, 463.29999, 2246.6001, 36, 0, 0, 270);
	CreateDynamicObject(964, 463.39999, 2248.3, 36, 0, 0, 270);
	CreateDynamicObject(2358, 463.10001, 2248.2, 37.1, 0, 0, 288);
	CreateDynamicObject(2359, 464.20001, 2251.8999, 37.3, 0, 0, 285);
	CreateDynamicObject(11494, 450.89999, 2234.3999, 36.5, 3, 3, 0);
	CreateDynamicObject(1458, 454.10001, 2256.6001, 37.4, 5, 0, 0);
	CreateDynamicObject(13367, 485.39999, 2253, 46, 0, 0, 0);
	AddStaticVehicle(470,448.9524,2236.0188,37.6585,47.9097,1,1); // partiot

	//army res
	CreateDynamicObject(10841, -574, 2616.8, 59.9, 0, 0, 0);
	CreateDynamicObject(10841, -551.19, 2616.8, 59.9, 0, 0, 0);
	CreateDynamicObject(10841, -537.59998, 2631.5, 59.9, 0, 0, 90);
	CreateDynamicObject(17049, -537.29999, 2617.3999, 51.3, 0, 0, 342);
	CreateDynamicObject(10841, -587.90002, 2602.3, 59.9, 0, 0, 90);
	CreateDynamicObject(17049, -587.90002, 2616.1001, 51.3, 0, 0, 330);
	CreateDynamicObject(10841, -587.90002, 2579.49, 59.9, 0, 0, 90);
	CreateDynamicObject(17049, -587.09998, 2565.5, 51.3, 0, 0, 87);
	CreateDynamicObject(10841, -572.70001, 2565.2, 59.9, 0, 0, 0);
	CreateDynamicObject(10841, -549.966, 2565.2, 59.9, 0, 0, 0);
	CreateDynamicObject(17049, -536, 2564.8999, 51.3, 0, 0, 71);
	CreateDynamicObject(17049, -536.29999, 2642.3, 51.3, 0, 0, 341.999);
	CreateDynamicObject(10841, -521.90002, 2641.1001, 59.9, 0, 0, 0);
	CreateDynamicObject(10841, -505.60001, 2615, 59.9, 0, 0, 90);
	CreateDynamicObject(17049, -505.5, 2600.8, 51.3, 0, 0, 341.999);
	CreateDynamicObject(17049, -505.5, 2585, 51.3, 0, 0, 80);
	CreateDynamicObject(17049, -507.39999, 2640.5, 51.3, 0, 0, 345.999);
	CreateDynamicObject(10841, -505.60001, 2630, 59.9, 0, 0, 90);
	CreateDynamicObject(10841, -505.60001, 2570.8999, 59.9, 0, 0, 90);
	CreateDynamicObject(10841, -535.79999, 2556, 59.9, 0, 0, 90);
	CreateDynamicObject(17049, -535.5, 2544.3999, 51.3, 0, 0, 70.999);
	CreateDynamicObject(17049, -506.20001, 2545.8, 51.3, 0, 0, 70.999);
	CreateDynamicObject(10841, -505.60001, 2555.8, 59.9, 0, 0, 90);
	CreateDynamicObject(10841, -515.29999, 2545.8, 59.9, 0, 0, 0);
	CreateDynamicObject(10841, -525.5, 2545.8, 59.9, 0, 0, 0);
	CreateDynamicObject(3268, -564.40002, 2589.7, 52.5, 0, 0, 180);
	CreateDynamicObject(3877, -494.70001, 2588.5, 54.2, 0, 0, 0);
	CreateDynamicObject(3877, -494.70001, 2597.3999, 54.2, 0, 0, 0);
	CreateDynamicObject(3115, -564.79999, 2606.3999, 61, 0, 0, 0);
	CreateDynamicObject(2985, -492, 2588.3999, 52.5, 0, 0, 0);
	CreateDynamicObject(2985, -492.39999, 2597.3999, 52.5, 0, 0, 0);
	CreateDynamicObject(3279, -511, 2564.5, 52.2, 0, 0, 0);
	CreateDynamicObject(14414, -552.40002, 2609.6001, 58, 0, 0, 270);
	CreateDynamicObject(14416, -542.59998, 2609.6221, 51.86, 0, 0, 90);
	CreateDynamicObject(3115, -564.79999, 2575.6001, 61, 0, 0, 0);
	CreateDynamicObject(14414, -551.5, 2570.8, 58, 0, 0, 270);
	CreateDynamicObject(14416, -542, 2570.8, 51.9, 0, 0, 90);
	CreateDynamicObject(3934, -564.59998, 2574.8, 61.3, 0, 0, 0);
	CreateDynamicObject(3934, -564.40002, 2607, 61.3, 0, 0, 0);
	CreateDynamicObject(3279, -511, 2622.8999, 52.2, 0, 0, 0);
	CreateDynamicObject(10832, -488.20001, 2604.2, 54.5, 0, 0, 90);
	CreateDynamicObject(18257, -560.20001, 2576, 52.5, 0, 0, 0);
	CreateDynamicObject(18257, -565.29999, 2605.7, 52.5, 0, 0, 0);
	CreateDynamicObject(964, -551.90002, 2600.5, 52.5, 0, 0, 0);
	CreateDynamicObject(964, -550.70001, 2602, 52.5, 0, 0, 0);
	CreateDynamicObject(964, -552.70001, 2602, 52.5, 0, 0, 0);
	CreateDynamicObject(964, -551.90002, 2603.5, 52.5, 0, 0, 0);
	CreateDynamicObject(964, -551.5, 2602.3, 53.43, 0, 0, 0);
	CreateDynamicObject(3861, -547.90002, 2603.8999, 53.7, 0, 0, 0);
	CreateDynamicObject(350, -549.09998, 2602.5, 53.5, 0, 0, 0);
	CreateDynamicObject(348, -549, 2602.7, 53.6, 0, 0, 0);
	CreateDynamicObject(349, -548.09998, 2602.5, 53.6, 0, 0, 0);
	CreateDynamicObject(350, -547.20001, 2602.5, 53.6, 0, 0, 0);
	CreateDynamicObject(351, -548.20001, 2602.8999, 53.6, 0, 0, 0);
	CreateDynamicObject(353, -547.09998, 2603.1001, 53.6, 0, 0, 0);


	CreateDynamicObject(8356,2373.9004000,-4084.0000000,0.3000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8356,2373.8999000,-3896.6001000,0.3000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8392,2396.0000000,-4131.7900000,29.9000000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(10377,2344.6001000,-4051.0000000,18.3000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2904,2354.6001000,-4108.5000000,1.6000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(2904,2354.6001000,-4108.5000000,4.2000000,0.0000000,0.0000000,81.9960000); //
	CreateDynamicObject(2904,2354.6001000,-4108.3999000,8.3000000,0.0000000,0.0000000,81.9960000); //
	CreateDynamicObject(2904,2354.6001000,-4108.3999000,10.9000000,0.0000000,0.0000000,81.9960000); //
	CreateDynamicObject(3980,2414.8000000,-4018.5000000,10.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(8079,2402.8701000,-3904.3000000,14.4000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8356,2353.9004000,-4031.2998000,0.3000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8356,2390.0000000,-3843.8994000,0.3000000,0.0000000,90.0000000,179.9950000); //
	CreateDynamicObject(8356,2353.9004000,-3843.8994000,0.3000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8356,2372.2002000,-3709.3398000,0.3000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8356,2485.9004000,-3730.7998000,0.3000000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(8356,2391.8999000,-3623.3000000,0.3000000,0.0000000,90.0000000,179.9950000); //
	CreateDynamicObject(8356,2353.7000000,-3722.8999000,0.3000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(5310,2368.6001000,-3642.3000000,6.4000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(5310,2427.0000000,-3712.0000000,6.4000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(5310,2497.3000000,-3711.8999000,6.4000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8356,2483.0000000,-3750.1699000,0.3000000,0.0000000,90.0000000,89.9950000); //
	CreateDynamicObject(8356,2597.3000000,-3804.8000000,0.3000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8356,2597.2000000,-3945.3999000,0.3000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8356,2597.2000000,-4094.2000000,0.3000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8356,2596.8000000,-4191.8999000,0.3000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8356,2546.1001000,-3701.6001000,-118.3000000,0.0000000,90.0000000,89.9890000); //
	CreateDynamicObject(5310,2564.5000000,-3711.8000000,6.4000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8356,2614.0000000,-3798.3999000,0.3000000,0.0000000,90.0000000,179.9950000); //
	CreateDynamicObject(3037,2602.8000000,-3722.6001000,2.5000000,0.0000000,0.0000000,88.0000000); //
	CreateDynamicObject(3037,2612.6001000,-3722.8999000,2.5000000,0.0000000,0.0000000,87.9950000); //
	CreateDynamicObject(3037,2603.2000000,-3722.5000000,6.9000000,0.0000000,0.0000000,87.9950000); //
	CreateDynamicObject(3037,2611.8999000,-3722.8000000,6.9000000,0.0000000,0.0000000,87.9950000); //
	CreateDynamicObject(8356,2614.0000000,-3980.1001000,0.3000000,0.0000000,90.0000000,179.9950000); //
	CreateDynamicObject(8356,2614.0000000,-4167.5000000,0.3000000,0.0000000,90.0000000,179.9950000); //
	CreateDynamicObject(8356,2487.5000000,-4266.3999000,0.3000000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(8356,2315.8999000,-4266.8999000,0.3000000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(8356,2372.3999000,-4198.3999000,0.3000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8356,2577.3000000,-3843.0000000,0.3000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8356,2577.3000000,-4025.8000000,0.0000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8356,2577.3000000,-4152.7998000,0.3000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8356,2614.0000000,-4346.2998000,0.0000000,0.0000000,90.0000000,179.9950000); //
	CreateDynamicObject(8356,2560.3000000,-4284.7002000,0.3000000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(8356,2412.8999000,-4284.7002000,0.3000000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(8356,2353.9004000,-4253.0000000,0.3000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8356,2353.9004000,-4140.1001000,0.3000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(8356,2392.3999000,-4153.2002000,0.3000000,0.0000000,90.0000000,179.9950000); //
	CreateDynamicObject(8356,2487.0000000,-4246.5000000,3.9000000,0.0000000,90.0000000,270.0000000); //
	CreateDynamicObject(3037,2397.3999000,-4246.8999000,2.5000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3037,2397.5000000,-4246.8999000,6.7000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3037,2397.5000000,-4246.8999000,10.8000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3037,2397.6001000,-4246.8999000,14.5000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3037,2397.6001000,-4246.5000000,18.3000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3037,2397.6001000,-4246.5000000,22.7000000,0.0000000,0.0000000,90.0000000); //


	CBDM_Top[0] = TextDrawCreate(38.800010, 124.293334, "box");
	TextDrawLetterSize(CBDM_Top[0], 0.000000, 10.203988);
	TextDrawTextSize(CBDM_Top[0], 218.000030, 0.000000);
	TextDrawAlignment(CBDM_Top[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(CBDM_Top[0], -1);
	TextDrawUseBox(CBDM_Top[0], 1);
	TextDrawBoxColour(CBDM_Top[0], 150);
	TextDrawSetShadow(CBDM_Top[0], 0);
	TextDrawSetOutline(CBDM_Top[0], 0);
	TextDrawBackgroundColour(CBDM_Top[0], 255);
	TextDrawFont(CBDM_Top[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(CBDM_Top[0], 1);
	TextDrawSetShadow(CBDM_Top[0], 0);

	CBDM_Top[1] = TextDrawCreate(75.400016, 124.293258, "Top_CBDM_Players");
	TextDrawLetterSize(CBDM_Top[1], 0.400000, 1.600000);
	TextDrawAlignment(CBDM_Top[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(CBDM_Top[1], -1);
	TextDrawSetShadow(CBDM_Top[1], 0);
	TextDrawSetOutline(CBDM_Top[1], 0);
	TextDrawBackgroundColour(CBDM_Top[1], 255);
	TextDrawFont(CBDM_Top[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(CBDM_Top[1], 1);
	TextDrawSetShadow(CBDM_Top[1], 0);

	CBDM_Top[2] = TextDrawCreate(22.700057, 134.746505, "-");
	TextDrawLetterSize(CBDM_Top[2], 14.611122, 1.353599);
	TextDrawAlignment(CBDM_Top[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(CBDM_Top[2], -1);
	TextDrawSetShadow(CBDM_Top[2], 0);
	TextDrawSetOutline(CBDM_Top[2], 0);
	TextDrawBackgroundColour(CBDM_Top[2], 255);
	TextDrawFont(CBDM_Top[2], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(CBDM_Top[2], 1);
	TextDrawSetShadow(CBDM_Top[2], 0);


	CBDM_Top[3] = TextDrawCreate(53.200042, 150.273208, "-Mike63~n~-Test1~n~-Test2_~n~-Free_Slot~n~-Free_Slot~n~-Free_Slot~n~-Free_Slot");
	TextDrawLetterSize(CBDM_Top[3], 0.328000, 0.980266);
	TextDrawAlignment(CBDM_Top[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(CBDM_Top[3], -1);
	TextDrawSetShadow(CBDM_Top[3], 0);
	TextDrawSetOutline(CBDM_Top[3], 0);
	TextDrawBackgroundColour(CBDM_Top[3], 255);
	TextDrawFont(CBDM_Top[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(CBDM_Top[3], 1);
	TextDrawSetShadow(CBDM_Top[3], 0);


	DSDM_Top[0] = TextDrawCreate(38.800010, 124.293334, "box");
	TextDrawLetterSize(DSDM_Top[0], 0.000000, 10.203988);
	TextDrawTextSize(DSDM_Top[0], 218.000030, 0.000000);
	TextDrawAlignment(DSDM_Top[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DSDM_Top[0], -1);
	TextDrawUseBox(DSDM_Top[0], 1);
	TextDrawBoxColour(DSDM_Top[0], 150);
	TextDrawSetShadow(DSDM_Top[0], 0);
	TextDrawSetOutline(DSDM_Top[0], 0);
	TextDrawBackgroundColour(DSDM_Top[0], 255);
	TextDrawFont(DSDM_Top[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DSDM_Top[0], 1);
	TextDrawSetShadow(DSDM_Top[0], 0);

	DSDM_Top[1] = TextDrawCreate(75.400016, 124.293258, "Top_SDM_Players");
	TextDrawLetterSize(DSDM_Top[1], 0.400000, 1.600000);
	TextDrawAlignment(DSDM_Top[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DSDM_Top[1], -1);
	TextDrawSetShadow(DSDM_Top[1], 0);
	TextDrawSetOutline(DSDM_Top[1], 0);
	TextDrawBackgroundColour(DSDM_Top[1], 255);
	TextDrawFont(DSDM_Top[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DSDM_Top[1], 1);
	TextDrawSetShadow(DSDM_Top[1], 0);

	DSDM_Top[2] = TextDrawCreate(22.700057, 134.746505, "-");
	TextDrawLetterSize(DSDM_Top[2], 14.611122, 1.353599);
	TextDrawAlignment(DSDM_Top[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DSDM_Top[2], -1);
	TextDrawSetShadow(DSDM_Top[2], 0);
	TextDrawSetOutline(DSDM_Top[2], 0);
	TextDrawBackgroundColour(DSDM_Top[2], 255);
	TextDrawFont(DSDM_Top[2], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(DSDM_Top[2], 1);
	TextDrawSetShadow(DSDM_Top[2], 0);

	DSDM_Top[3] = TextDrawCreate(53.200042, 150.273208, "-Mike63~n~-Test1~n~-Test2_~n~-Free_Slot~n~-Free_Slot~n~-Free_Slot~n~-Free_Slot");
	TextDrawLetterSize(DSDM_Top[3], 0.328000, 0.980266);
	TextDrawAlignment(DSDM_Top[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DSDM_Top[3], -1);
	TextDrawSetShadow(DSDM_Top[3], 0);
	TextDrawSetOutline(DSDM_Top[3], 0);
	TextDrawBackgroundColour(DSDM_Top[3], 255);
	TextDrawFont(DSDM_Top[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DSDM_Top[3], 1);
	TextDrawSetShadow(DSDM_Top[3], 0);

	DM_Top[0] = TextDrawCreate(38.800010, 124.293334, "box");
	TextDrawLetterSize(DM_Top[0], 0.000000, 10.203988);
	TextDrawTextSize(DM_Top[0], 218.000030, 0.000000);
	TextDrawAlignment(DM_Top[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Top[0], -1);
	TextDrawUseBox(DM_Top[0], 1);
	TextDrawBoxColour(DM_Top[0], 150);
	TextDrawSetShadow(DM_Top[0], 0);
	TextDrawSetOutline(DM_Top[0], 0);
	TextDrawBackgroundColour(DM_Top[0], 255);
	TextDrawFont(DM_Top[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Top[0], 1);
	TextDrawSetShadow(DM_Top[0], 0);

	DM_Top[1] = TextDrawCreate(75.400016, 124.293258, "Top_DM_Players");
	TextDrawLetterSize(DM_Top[1], 0.400000, 1.600000);
	TextDrawAlignment(DM_Top[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Top[1], -1);
	TextDrawSetShadow(DM_Top[1], 0);
	TextDrawSetOutline(DM_Top[1], 0);
	TextDrawBackgroundColour(DM_Top[1], 255);
	TextDrawFont(DM_Top[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Top[1], 1);
	TextDrawSetShadow(DM_Top[1], 0);

	DM_Top[2] = TextDrawCreate(22.700057, 134.746505, "-");
	TextDrawLetterSize(DM_Top[2], 14.611122, 1.353599);
	TextDrawAlignment(DM_Top[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Top[2], -1);
	TextDrawSetShadow(DM_Top[2], 0);
	TextDrawSetOutline(DM_Top[2], 0);
	TextDrawBackgroundColour(DM_Top[2], 255);
	TextDrawFont(DM_Top[2], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(DM_Top[2], 1);
	TextDrawSetShadow(DM_Top[2], 0);

	DM_Top[3] = TextDrawCreate(53.200042, 150.273208, "-Mike63~n~-Test1~n~-Test2_~n~-Free_Slot~n~-Free_Slot~n~-Free_Slot~n~-Free_Slot");
	TextDrawLetterSize(DM_Top[3], 0.328000, 0.980266);
	TextDrawAlignment(DM_Top[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(DM_Top[3], -1);
	TextDrawSetShadow(DM_Top[3], 0);
	TextDrawSetOutline(DM_Top[3], 0);
	TextDrawBackgroundColour(DM_Top[3], 255);
	TextDrawFont(DM_Top[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(DM_Top[3], 1);
	TextDrawSetShadow(DM_Top[3], 0);
	for (new line; line < sizeof(BoxDrawStr); line ++)
	{
		strcopy(BoxDrawStr[line], " ");
	}
	//BoxDraw[0] = TextDrawCreate(365, 328+38, BoxDrawStr[0]);
	BoxDraw[0] = TextDrawCreate(472.600250, 374.000+20, BoxDrawStr[0]);
	TextDrawLetterSize(BoxDraw[0], 0.260798, 0.50);
	TextDrawAlignment(BoxDraw[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(BoxDraw[0], -1);
	TextDrawSetShadow(BoxDraw[0], 0);
	TextDrawSetOutline(BoxDraw[0], 0);
	TextDrawBackgroundColour(BoxDraw[0], 255);
	TextDrawFont(BoxDraw[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(BoxDraw[0], 1);
	TextDrawSetShadow(BoxDraw[0], 0);

	BoxDraw[1] = TextDrawCreate(472.600250, 384.000+20, BoxDrawStr[1]);
	TextDrawLetterSize(BoxDraw[1], 0.260798, 0.5);
	TextDrawAlignment(BoxDraw[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(BoxDraw[1], -1);
	TextDrawSetShadow(BoxDraw[1], 0);
	TextDrawSetOutline(BoxDraw[1], 0);
	TextDrawBackgroundColour(BoxDraw[1], 255);
	TextDrawFont(BoxDraw[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(BoxDraw[1], 1);
	TextDrawSetShadow(BoxDraw[1], 0);

	BoxDraw[2] = TextDrawCreate(472.600250, 394.000+20, BoxDrawStr[2]);
	TextDrawLetterSize(BoxDraw[2], 0.260798, 0.5);
	TextDrawAlignment(BoxDraw[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(BoxDraw[2], -1);
	TextDrawSetShadow(BoxDraw[2], 0);
	TextDrawSetOutline(BoxDraw[2], 0);
	TextDrawBackgroundColour(BoxDraw[2], 255);
	TextDrawFont(BoxDraw[2], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(BoxDraw[2], 1);
	TextDrawSetShadow(BoxDraw[2], 0);

	BoxDraw[3] = TextDrawCreate(472.600250, 404.000+20, BoxDrawStr[3]);
	TextDrawLetterSize(BoxDraw[3], 0.260798, 0.5);
	TextDrawAlignment(BoxDraw[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(BoxDraw[3], -1);
	TextDrawSetShadow(BoxDraw[3], 0);
	TextDrawSetOutline(BoxDraw[3], 0);
	TextDrawBackgroundColour(BoxDraw[3], 255);
	TextDrawFont(BoxDraw[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(BoxDraw[3], 1);
	TextDrawSetShadow(BoxDraw[3], 0);

	BoxDraw[4] = TextDrawCreate(472.600250, 414.000+20, BoxDrawStr[4]);
	TextDrawLetterSize(BoxDraw[4], 0.260798, 0.5);
	TextDrawAlignment(BoxDraw[4], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(BoxDraw[4], -1);
	TextDrawSetShadow(BoxDraw[4], 0);
	TextDrawSetOutline(BoxDraw[4], 0);
	TextDrawBackgroundColour(BoxDraw[4], 255);
	TextDrawFont(BoxDraw[4], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(BoxDraw[4], 1);
	TextDrawSetShadow(BoxDraw[4], 0);
	for(new line; line<5; line++)
	{

		TextDrawLetterSize(BoxDraw[line], 0.28-0.11, 0.83);
		TextDrawSetShadow(BoxDraw[line], 0);
		TextDrawAlignment(BoxDraw[line], TEXT_DRAW_ALIGN_LEFT);
		TextDrawBoxColour(BoxDraw[line], 0x000000FF);
		TextDrawFont(BoxDraw[line], TEXT_DRAW_FONT_1);
		TextDrawSetOutline(BoxDraw[line], 1);
		TextDrawShowForAll(BoxDraw[line]);
	}
	BoxDraw0 = TextDrawCreate(471.000000, 388.000000, "_");
	TextDrawLetterSize(BoxDraw0, 0.500000, 8.400001);
	TextDrawAlignment(BoxDraw0, TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(BoxDraw0, -116);
	TextDrawUseBox(BoxDraw0, 1);
	TextDrawBoxColour(BoxDraw0, 100);
	TextDrawTextSize(BoxDraw0, 639.000000, 2.000000);
	TextDrawSetShadow(BoxDraw0, 0);
	TextDrawSetOutline(BoxDraw0, 0);
	TextDrawBackgroundColour(BoxDraw0, 100);
	TextDrawFont(BoxDraw0, TEXT_DRAW_FONT_1);
	TextDrawSetProportional(BoxDraw0, 1);
	TextDrawSetShadow(BoxDraw0, 0);

	BoxDraw1 = TextDrawCreate(471.000000, 377.000000, "_");
	TextDrawBackgroundColour(BoxDraw1, 255);
	TextDrawFont(BoxDraw1, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(BoxDraw1, 0.000000, 0.899999);
	TextDrawColour(BoxDraw1, -1);
	TextDrawSetOutline(BoxDraw1, 0);
	TextDrawSetProportional(BoxDraw1, 1);
	TextDrawSetShadow(BoxDraw1, 1);
	TextDrawUseBox(BoxDraw1, 1);
	TextDrawBoxColour(BoxDraw1, 255);
	TextDrawTextSize(BoxDraw1, 641.000000, 0.000000);
	TextDrawSetSelectable(BoxDraw1, 0);


	onconnect[0] = TextDrawCreate(-10.500000, 331.750213, "box");
	TextDrawLetterSize(onconnect[0], 0.000000, 12.449996);
	TextDrawTextSize(onconnect[0], 658.000000, 0.000000);
	TextDrawAlignment(onconnect[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[0], -1);
	TextDrawUseBox(onconnect[0], 1);
	TextDrawBoxColour(onconnect[0], 286330704);
	TextDrawSetShadow(onconnect[0], 0);
	TextDrawSetOutline(onconnect[0], 0);
	TextDrawBackgroundColour(onconnect[0], 255);
	TextDrawFont(onconnect[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(onconnect[0], 0);
	TextDrawSetShadow(onconnect[0], 0);

	onconnect[1] = TextDrawCreate(-7.000000, -0.749809, "box");
	TextDrawLetterSize(onconnect[1], 0.000000, 12.449996);
	TextDrawTextSize(onconnect[1], 684.000000, 0.000000);
	TextDrawAlignment(onconnect[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[1], -1);
	TextDrawUseBox(onconnect[1], 1);
	TextDrawBoxColour(onconnect[1], 286330704);
	TextDrawSetShadow(onconnect[1], 0);
	TextDrawSetOutline(onconnect[1], 0);
	TextDrawBackgroundColour(onconnect[1], 255);
	TextDrawFont(onconnect[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(onconnect[1], 0);
	TextDrawSetShadow(onconnect[1], 0);

	onconnect[2] = TextDrawCreate(696.000000, 114.166641, "box");
	TextDrawLetterSize(onconnect[2], 0.000000, -0.300000);
	TextDrawTextSize(onconnect[2], -26.000000, 0.000000);
	TextDrawAlignment(onconnect[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[2], -1);
	TextDrawUseBox(onconnect[2], 1);
	TextDrawBoxColour(onconnect[2], 255);
	TextDrawSetShadow(onconnect[2], 0);
	TextDrawSetOutline(onconnect[2], 0);
	TextDrawBackgroundColour(onconnect[2], 255);
	TextDrawFont(onconnect[2], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(onconnect[2], 1);
	TextDrawSetShadow(onconnect[2], 0);

	onconnect[3] = TextDrawCreate(645.500000, 331.166656, "box");
	TextDrawLetterSize(onconnect[3], 0.000000, -0.300000);
	TextDrawTextSize(onconnect[3], -65.000000, 0.000000);
	TextDrawAlignment(onconnect[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[3], -1);
	TextDrawUseBox(onconnect[3], 1);
	TextDrawBoxColour(onconnect[3], 255);
	TextDrawSetShadow(onconnect[3], 0);
	TextDrawSetOutline(onconnect[3], 0);
	TextDrawBackgroundColour(onconnect[3], 255);
	TextDrawFont(onconnect[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(onconnect[3], 1);
	TextDrawSetShadow(onconnect[3], 0);

	onconnect[4] = TextDrawCreate(355.852874, 209.249969, "to");
	TextDrawLetterSize(onconnect[4], 0.335999, 1.664162);
	TextDrawAlignment(onconnect[4], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[4], -5963521);
	TextDrawSetShadow(onconnect[4], 2);
	TextDrawSetOutline(onconnect[4], 0);
	TextDrawBackgroundColour(onconnect[4], 255);
	TextDrawFont(onconnect[4], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(onconnect[4], 1);
	TextDrawSetShadow(onconnect[4], 2);

	onconnect[5] = TextDrawCreate(310.000000, 223.250015, "Call_of_duty");
	TextDrawLetterSize(onconnect[5], 0.187000, 1.197499);
	TextDrawAlignment(onconnect[5], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[5], 16711935);
	TextDrawSetShadow(onconnect[5], 1);
	TextDrawSetOutline(onconnect[5], 0);
	TextDrawBackgroundColour(onconnect[5], 255);
	TextDrawFont(onconnect[5], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(onconnect[5], 1);
	TextDrawSetShadow(onconnect[5], 1);

	onconnect[6] = TextDrawCreate(473.500000, 329.416229, "www.mw3-samp.org");
	TextDrawLetterSize(onconnect[6], 0.389999, 1.185832);
	TextDrawAlignment(onconnect[6], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[6], -2147483393);
	TextDrawSetShadow(onconnect[6], 1);
	TextDrawSetOutline(onconnect[6], 0);
	TextDrawBackgroundColour(onconnect[6], 255);
	TextDrawFont(onconnect[6], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(onconnect[6], 1);
	TextDrawSetShadow(onconnect[6], 1);

	onconnect[7] = TextDrawCreate(341.000000, 252.416671, "v7.7.4");
	TextDrawLetterSize(onconnect[7], 0.166500, 0.964164);
	TextDrawAlignment(onconnect[7], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[7], -1);
	TextDrawSetShadow(onconnect[7], 1);
	TextDrawSetOutline(onconnect[7], 0);
	TextDrawBackgroundColour(onconnect[7], 255);
	TextDrawFont(onconnect[7], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(onconnect[7], 1);
	TextDrawSetShadow(onconnect[7], 1);

	onconnect[8] = TextDrawCreate(194.000000, 131.083297, "particle:cloudmasked");
	TextDrawLetterSize(onconnect[8], 0.000000, 0.000000);
	TextDrawTextSize(onconnect[8], 222.000000, 174.000000);
	TextDrawAlignment(onconnect[8], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[8], 255);
	TextDrawSetShadow(onconnect[8], 0);
	TextDrawSetOutline(onconnect[8], 0);
	TextDrawBackgroundColour(onconnect[8], 255);
	TextDrawFont(onconnect[8], TEXT_DRAW_FONT_SPRITE_DRAW);
	TextDrawSetProportional(onconnect[8], 0);
	TextDrawSetShadow(onconnect[8], 0);

	onconnect[9] = TextDrawCreate(240.852874, 189.999969, "Welcome");
	TextDrawLetterSize(onconnect[9], 0.681500, 2.638329);
	TextDrawAlignment(onconnect[9], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[9], -5963521);
	TextDrawSetShadow(onconnect[9], 2);
	TextDrawSetOutline(onconnect[9], 0);
	TextDrawBackgroundColour(onconnect[9], 255);
	TextDrawFont(onconnect[9], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(onconnect[9], 1);
	TextDrawSetShadow(onconnect[9], 2);

	onconnect[10] = TextDrawCreate(309.500000, 224.416748, "MW3");
	TextDrawLetterSize(onconnect[10], 0.637000, 3.705832);
	TextDrawAlignment(onconnect[10], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(onconnect[10], 16711935);
	TextDrawSetShadow(onconnect[10], 1);
	TextDrawSetOutline(onconnect[10], 0);
	TextDrawBackgroundColour(onconnect[10], 255);
	TextDrawFont(onconnect[10], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(onconnect[10], 1);
	TextDrawSetShadow(onconnect[10], 1);

	TDEditor_PTD[0] = TextDrawCreate(-31.500000, -0.749979, "virsutinisjuodas");
	TextDrawLetterSize(TDEditor_PTD[0], 0.000000, 11.549995);
	TextDrawTextSize(TDEditor_PTD[0], 682.000000, 0.000000);
	TextDrawAlignment(TDEditor_PTD[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[0], -1);
	TextDrawUseBox(TDEditor_PTD[0], 1);
	TextDrawBoxColour(TDEditor_PTD[0], 255);
	TextDrawSetShadow(TDEditor_PTD[0], 0);
	TextDrawSetOutline(TDEditor_PTD[0], 0);
	TextDrawBackgroundColour(TDEditor_PTD[0], 255);
	TextDrawFont(TDEditor_PTD[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDEditor_PTD[0], 1);
	TextDrawSetShadow(TDEditor_PTD[0], 0);

	TDEditor_PTD[1] = TextDrawCreate(-37.500000, 341.083190, "apatinisjuodas");
	TextDrawLetterSize(TDEditor_PTD[1], 0.000000, 11.549995);
	TextDrawTextSize(TDEditor_PTD[1], 718.000000, 0.000000);
	TextDrawAlignment(TDEditor_PTD[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[1], -1);
	TextDrawUseBox(TDEditor_PTD[1], 1);
	TextDrawBoxColour(TDEditor_PTD[1], 255);
	TextDrawSetShadow(TDEditor_PTD[1], 0);
	TextDrawSetOutline(TDEditor_PTD[1], 0);
	TextDrawBackgroundColour(TDEditor_PTD[1], 255);
	TextDrawFont(TDEditor_PTD[1], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDEditor_PTD[1], 1);
	TextDrawSetShadow(TDEditor_PTD[1], 0);

	TDEditor_PTD[2] = TextDrawCreate(-23.000000, 340.500000, "apatinelinija");
	TextDrawLetterSize(TDEditor_PTD[2], 0.000000, -0.399998);
	TextDrawTextSize(TDEditor_PTD[2], 794.000000, 0.000000);
	TextDrawAlignment(TDEditor_PTD[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[2], -1);
	TextDrawUseBox(TDEditor_PTD[2], 1);
	TextDrawBoxColour(TDEditor_PTD[2], -2147483393);
	TextDrawSetShadow(TDEditor_PTD[2], 0);
	TextDrawSetOutline(TDEditor_PTD[2], 0);
	TextDrawBackgroundColour(TDEditor_PTD[2], 255);
	TextDrawFont(TDEditor_PTD[2], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDEditor_PTD[2], 1);
	TextDrawSetShadow(TDEditor_PTD[2], 0);

	TDEditor_PTD[3] = TextDrawCreate(-46.500000, 107.749954, "virsutinelinija");
	TextDrawLetterSize(TDEditor_PTD[3], 0.000000, -0.349999);
	TextDrawTextSize(TDEditor_PTD[3], 803.000000, 0.000000);
	TextDrawAlignment(TDEditor_PTD[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[3], -1);
	TextDrawUseBox(TDEditor_PTD[3], 1);
	TextDrawBoxColour(TDEditor_PTD[3], -2147483393);
	TextDrawSetShadow(TDEditor_PTD[3], 0);
	TextDrawSetOutline(TDEditor_PTD[3], 0);
	TextDrawBackgroundColour(TDEditor_PTD[3], 255);
	TextDrawFont(TDEditor_PTD[3], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDEditor_PTD[3], 1);
	TextDrawSetShadow(TDEditor_PTD[3], 0);

	TDEditor_PTD[4] = TextDrawCreate(156.000000, 188.249938, "vidurinebox");
	TextDrawLetterSize(TDEditor_PTD[4], 0.000000, 7.649991);
	TextDrawTextSize(TDEditor_PTD[4], 430.000000, 0.000000);
	TextDrawAlignment(TDEditor_PTD[4], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[4], -1);
	TextDrawUseBox(TDEditor_PTD[4], 1);
	TextDrawBoxColour(TDEditor_PTD[4], 153);
	TextDrawSetShadow(TDEditor_PTD[4], 0);
	TextDrawSetOutline(TDEditor_PTD[4], 0);
	TextDrawBackgroundColour(TDEditor_PTD[4], 255);
	TextDrawFont(TDEditor_PTD[4], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDEditor_PTD[4], 1);
	TextDrawSetShadow(TDEditor_PTD[4], 0);

	TDEditor_PTD[6] = TextDrawCreate(252.500000, 271.666625, "");
	TextDrawLetterSize(TDEditor_PTD[6], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_PTD[6], 126.000000, 122.000000);
	TextDrawAlignment(TDEditor_PTD[6], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[6], -1);
	TextDrawSetShadow(TDEditor_PTD[6], 0);
	TextDrawSetOutline(TDEditor_PTD[6], 0);
	TextDrawBackgroundColour(TDEditor_PTD[6], 0);
	TextDrawFont(TDEditor_PTD[6], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(TDEditor_PTD[6], 0);
	TextDrawSetShadow(TDEditor_PTD[6], 0);
	TextDrawSetPreviewModel(TDEditor_PTD[6], 179);
	TextDrawSetPreviewRot(TDEditor_PTD[6], 0.000000, 0.000000, 0.000000, 1.000000);

	TDEditor_PTD[7] = TextDrawCreate(195.500000, 282.749938, "");
	TextDrawLetterSize(TDEditor_PTD[7], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_PTD[7], 115.000000, 103.000000);
	TextDrawAlignment(TDEditor_PTD[7], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[7], -1);
	TextDrawSetShadow(TDEditor_PTD[7], 0);
	TextDrawSetOutline(TDEditor_PTD[7], 0);
	TextDrawBackgroundColour(TDEditor_PTD[7], 0);
	TextDrawFont(TDEditor_PTD[7], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(TDEditor_PTD[7], 0);
	TextDrawSetShadow(TDEditor_PTD[7], 0);
	TextDrawSetPreviewModel(TDEditor_PTD[7], 206);
	TextDrawSetPreviewRot(TDEditor_PTD[7], 0.000000, 0.000000, 0.000000, 1.000000);

	TDEditor_PTD[8] = TextDrawCreate(215.000000, 258.833312, "");
	TextDrawLetterSize(TDEditor_PTD[8], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_PTD[8], 154.000000, 138.000000);
	TextDrawAlignment(TDEditor_PTD[8], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[8], -1);
	TextDrawSetShadow(TDEditor_PTD[8], 0);
	TextDrawSetOutline(TDEditor_PTD[8], 0);
	TextDrawBackgroundColour(TDEditor_PTD[8], 0);
	TextDrawFont(TDEditor_PTD[8], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(TDEditor_PTD[8], 0);
	TextDrawSetShadow(TDEditor_PTD[8], 0);
	TextDrawSetPreviewModel(TDEditor_PTD[8], 285);
	TextDrawSetPreviewRot(TDEditor_PTD[8], 0.000000, 0.000000, 0.000000, 1.000000);

	TDEditor_PTD[9] = TextDrawCreate(259.968750, 290.333282, "");
	TextDrawLetterSize(TDEditor_PTD[9], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_PTD[9], 115.000000, 103.000000);
	TextDrawAlignment(TDEditor_PTD[9], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[9], -1);
	TextDrawSetShadow(TDEditor_PTD[9], 0);
	TextDrawSetOutline(TDEditor_PTD[9], 0);
	TextDrawBackgroundColour(TDEditor_PTD[9], 0);
	TextDrawFont(TDEditor_PTD[9], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(TDEditor_PTD[9], 0);
	TextDrawSetShadow(TDEditor_PTD[9], 0);
	TextDrawSetPreviewModel(TDEditor_PTD[9], 287);
	TextDrawSetPreviewRot(TDEditor_PTD[9], 0.000000, 0.000000, 0.000000, 1.000000);

	TDEditor_PTD[10] = TextDrawCreate(205.500000, 272.249938, "");
	TextDrawLetterSize(TDEditor_PTD[10], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_PTD[10], 126.000000, 122.000000);
	TextDrawAlignment(TDEditor_PTD[10], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[10], -1);
	TextDrawSetShadow(TDEditor_PTD[10], 0);
	TextDrawSetOutline(TDEditor_PTD[10], 0);
	TextDrawBackgroundColour(TDEditor_PTD[10], 0);
	TextDrawFont(TDEditor_PTD[10], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(TDEditor_PTD[10], 0);
	TextDrawSetShadow(TDEditor_PTD[10], 0);
	TextDrawSetPreviewModel(TDEditor_PTD[10], 73);
	TextDrawSetPreviewRot(TDEditor_PTD[10], 0.000000, 0.000000, 0.000000, 1.000000);

	TDEditor_PTD[11] = TextDrawCreate(289.213073, 293.833068, "");
	TextDrawLetterSize(TDEditor_PTD[11], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_PTD[11], 124.000000, 102.000000);
	TextDrawAlignment(TDEditor_PTD[11], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[11], -1);
	TextDrawSetShadow(TDEditor_PTD[11], 0);
	TextDrawSetOutline(TDEditor_PTD[11], 0);
	TextDrawBackgroundColour(TDEditor_PTD[11], 0);
	TextDrawFont(TDEditor_PTD[11], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(TDEditor_PTD[11], 0);
	TextDrawSetShadow(TDEditor_PTD[11], 0);
	TextDrawSetPreviewModel(TDEditor_PTD[11], 161);
	TextDrawSetPreviewRot(TDEditor_PTD[11], 0.000000, 0.000000, 0.000000, 1.000000);

	TDEditor_PTD[12] = TextDrawCreate(176.213073, 292.666412, "");
	TextDrawLetterSize(TDEditor_PTD[12], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_PTD[12], 127.000000, 102.000000);
	TextDrawAlignment(TDEditor_PTD[12], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[12], -1);
	TextDrawSetShadow(TDEditor_PTD[12], 0);
	TextDrawSetOutline(TDEditor_PTD[12], 0);
	TextDrawBackgroundColour(TDEditor_PTD[12], 0);
	TextDrawFont(TDEditor_PTD[12], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(TDEditor_PTD[12], 0);
	TextDrawSetShadow(TDEditor_PTD[12], 0);
	TextDrawSetPreviewModel(TDEditor_PTD[12], 108);
	TextDrawSetPreviewRot(TDEditor_PTD[12], 0.000000, 0.000000, 0.000000, 1.000000);

	TDEditor_PTD[13] = TextDrawCreate(176.213073, 292.666412, "");
	TextDrawLetterSize(TDEditor_PTD[13], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_PTD[13], 127.000000, 101.000000);
	TextDrawAlignment(TDEditor_PTD[13], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[13], -1);
	TextDrawSetShadow(TDEditor_PTD[13], 0);
	TextDrawSetOutline(TDEditor_PTD[13], 0);
	TextDrawBackgroundColour(TDEditor_PTD[13], 0);
	TextDrawFont(TDEditor_PTD[13], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(TDEditor_PTD[13], 0);
	TextDrawSetShadow(TDEditor_PTD[13], 0);
	TextDrawSetPreviewModel(TDEditor_PTD[13], 108);
	TextDrawSetPreviewRot(TDEditor_PTD[13], 0.000000, 0.000000, 0.000000, 1.000000);

	TDEditor_PTD[14] = TextDrawCreate(287.213073, 311.916412, "");
	TextDrawLetterSize(TDEditor_PTD[14], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_PTD[14], 92.000000, 84.000000);
	TextDrawAlignment(TDEditor_PTD[14], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[14], -1);
	TextDrawSetShadow(TDEditor_PTD[14], 0);
	TextDrawSetOutline(TDEditor_PTD[14], 0);
	TextDrawBackgroundColour(TDEditor_PTD[14], 0);
	TextDrawFont(TDEditor_PTD[14], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(TDEditor_PTD[14], 0);
	TextDrawSetShadow(TDEditor_PTD[14], 0);
	TextDrawSetPreviewModel(TDEditor_PTD[14], 127);
	TextDrawSetPreviewRot(TDEditor_PTD[14], 0.000000, 0.000000, 0.000000, 1.000000);

	TDEditor_PTD[15] = TextDrawCreate(3.500000, 374.333526, "-");
	TextDrawLetterSize(TDEditor_PTD[15], 49.999000, 2.101665);
	TextDrawAlignment(TDEditor_PTD[15], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[15], -2147483393);
	TextDrawSetShadow(TDEditor_PTD[15], 0);
	TextDrawSetOutline(TDEditor_PTD[15], 0);
	TextDrawBackgroundColour(TDEditor_PTD[15], 255);
	TextDrawFont(TDEditor_PTD[15], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(TDEditor_PTD[15], 1);
	TextDrawSetShadow(TDEditor_PTD[15], 0);

	TDEditor_PTD[16] = TextDrawCreate(137.000000, 227.916702, "");
	TextDrawLetterSize(TDEditor_PTD[16], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_PTD[16], 155.000000, 135.000000);
	TextDrawAlignment(TDEditor_PTD[16], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[16], -1);
	TextDrawSetShadow(TDEditor_PTD[16], 0);
	TextDrawSetOutline(TDEditor_PTD[16], 0);
	TextDrawBackgroundColour(TDEditor_PTD[16], 0);
	TextDrawFont(TDEditor_PTD[16], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(TDEditor_PTD[16], 0);
	TextDrawSetShadow(TDEditor_PTD[16], 0);
	TextDrawSetPreviewModel(TDEditor_PTD[16], 417);
	TextDrawSetPreviewRot(TDEditor_PTD[16], 0.000000, 20.000000, 0.000000, 1.000000);
	TextDrawSetPreviewVehicleColours(TDEditor_PTD[16], 1, 1);

	TDEditor_PTD[17] = TextDrawCreate(406.500000, 386.583343, "Server version : v 7.7.4");
	TextDrawLetterSize(TDEditor_PTD[17], 0.207000, 0.894164);
	TextDrawAlignment(TDEditor_PTD[17], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[17], -1);
	TextDrawSetShadow(TDEditor_PTD[17], 0);
	TextDrawSetOutline(TDEditor_PTD[17], 0);
	TextDrawBackgroundColour(TDEditor_PTD[17], 255);
	TextDrawFont(TDEditor_PTD[17], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(TDEditor_PTD[17], 1);
	TextDrawSetShadow(TDEditor_PTD[17], 0);

	TDEditor_PTD[18] = TextDrawCreate(258.000000, 216.250122, "MW3");
	TextDrawLetterSize(TDEditor_PTD[18], 0.753000, 3.466665);
	TextDrawAlignment(TDEditor_PTD[18], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[18], -5963521);
	TextDrawSetShadow(TDEditor_PTD[18], 2);
	TextDrawSetOutline(TDEditor_PTD[18], 0);
	TextDrawBackgroundColour(TDEditor_PTD[18], -2147483393);
	TextDrawFont(TDEditor_PTD[18], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(TDEditor_PTD[18], 1);
	TextDrawSetShadow(TDEditor_PTD[18], 2);

	TDEditor_PTD[19] = TextDrawCreate(152.500000, 181.833328, "vidurinebox");
	TextDrawLetterSize(TDEditor_PTD[19], 0.000000, 9.099994);
	TextDrawTextSize(TDEditor_PTD[19], 434.000000, 0.000000);
	TextDrawAlignment(TDEditor_PTD[19], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[19], -1);
	TextDrawUseBox(TDEditor_PTD[19], 1);
	TextDrawBoxColour(TDEditor_PTD[19], 80);
	TextDrawSetShadow(TDEditor_PTD[19], 0);
	TextDrawSetOutline(TDEditor_PTD[19], 0);
	TextDrawBackgroundColour(TDEditor_PTD[19], 255);
	TextDrawFont(TDEditor_PTD[19], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(TDEditor_PTD[19], 1);
	TextDrawSetShadow(TDEditor_PTD[19], 0);

	TDEditor_PTD[20] = TextDrawCreate(229.000000, 198.750091, "Call Of Duty");
	TextDrawLetterSize(TDEditor_PTD[20], 0.461499, 1.979164);
	TextDrawAlignment(TDEditor_PTD[20], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[20], -5963521);
	TextDrawSetShadow(TDEditor_PTD[20], 2);
	TextDrawSetOutline(TDEditor_PTD[20], 0);
	TextDrawBackgroundColour(TDEditor_PTD[20], -2147483393);
	TextDrawFont(TDEditor_PTD[20], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(TDEditor_PTD[20], 1);
	TextDrawSetShadow(TDEditor_PTD[20], 2);

	TDEditor_PTD[21] = TextDrawCreate(140.500000, 171.333328, "Welcome to");
	TextDrawLetterSize(TDEditor_PTD[21], 0.452499, 1.909165);
	TextDrawAlignment(TDEditor_PTD[21], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(TDEditor_PTD[21], -5963521);
	TextDrawSetShadow(TDEditor_PTD[21], 2);
	TextDrawSetOutline(TDEditor_PTD[21], 0);
	TextDrawBackgroundColour(TDEditor_PTD[21], -2147483393);
	TextDrawFont(TDEditor_PTD[21], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(TDEditor_PTD[21], 1);
	TextDrawSetShadow(TDEditor_PTD[21], 2);

	WC[0] = TextDrawCreate(243.400009, 153.506652, " ");
	TextDrawLetterSize(WC[0], 0.000000, 0.000000);
	TextDrawTextSize(WC[0], 90.000000, 90.000000);
	TextDrawAlignment(WC[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(WC[0], -1);
	TextDrawSetShadow(WC[0], 0);
	TextDrawSetOutline(WC[0], 0);
	TextDrawBackgroundColour(WC[0], 0);
	TextDrawFont(WC[0], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(WC[0], 0);
	TextDrawSetShadow(WC[0], 0);
	TextDrawSetPreviewModel(WC[0], 432);
	TextDrawSetPreviewRot(WC[0], -10.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetPreviewVehicleColours(WC[0], 1, 1);

	WC[1] = TextDrawCreate(313.400024, 153.506652, " ");
	TextDrawLetterSize(WC[1], 0.000000, 0.000000);
	TextDrawTextSize(WC[1], 90.000000, 90.000000);
	TextDrawAlignment(WC[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(WC[1], -1);
	TextDrawSetShadow(WC[1], 0);
	TextDrawSetOutline(WC[1], 0);
	TextDrawBackgroundColour(WC[1], 0);
	TextDrawFont(WC[1], TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetProportional(WC[1], 0);
	TextDrawSetShadow(WC[1], 0);
	TextDrawSetPreviewModel(WC[1], 470);
	TextDrawSetPreviewRot(WC[1], -10.000000, 0.000000, 20.000000, 1.000000);
	TextDrawSetPreviewVehicleColours(WC[1], 1, 1);

	WC[2] = TextDrawCreate(290.000000, 154.000000, "Call_of_duty");
	TextDrawLetterSize(WC[2], 0.295199, 1.137066);
	TextDrawAlignment(WC[2], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(WC[2], -16776961);
	TextDrawSetShadow(WC[2], 0);
	TextDrawSetOutline(WC[2], 1);
	TextDrawBackgroundColour(WC[2], 255);
	TextDrawFont(WC[2], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(WC[2], 1);
	TextDrawSetShadow(WC[2], 0);

	WC[3] = TextDrawCreate(262.000000, 168.346527, "Modern_warfare_3");
	TextDrawLetterSize(WC[3], 0.400000, 1.600000);
	TextDrawAlignment(WC[3], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(WC[3], -16776996);
	TextDrawSetShadow(WC[3], 0);
	TextDrawSetOutline(WC[3], 0);
	TextDrawBackgroundColour(WC[3], 255);
	TextDrawFont(WC[3], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(WC[3], 1);
	TextDrawSetShadow(WC[3], 0);

	WC[4] = TextDrawCreate(279.500000, 213.846527, "version_7.7.4");
	TextDrawLetterSize(WC[4], 0.400000, 1.600000);
	TextDrawAlignment(WC[4], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(WC[4], -16776996);
	TextDrawSetShadow(WC[4], 0);
	TextDrawSetOutline(WC[4], 0);
	TextDrawBackgroundColour(WC[4], 255);
	TextDrawFont(WC[4], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(WC[4], 1);
	TextDrawSetShadow(WC[4], 0);

	WC[5] = TextDrawCreate(275.599945, 232.359848, "team_deathmatch");
	TextDrawLetterSize(WC[5], 0.308800, 1.540266);
	TextDrawAlignment(WC[5], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(WC[5], 65480);
	TextDrawSetShadow(WC[5], 0);
	TextDrawSetOutline(WC[5], 0);
	TextDrawBackgroundColour(WC[5], 65430);
	TextDrawFont(WC[5], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(WC[5], 1);
	TextDrawSetShadow(WC[5], 0);

	WC[6] = TextDrawCreate(269.599945, 248.359848, "www.mw3-samp.org");
	TextDrawLetterSize(WC[6], 0.308800, 1.540266);
	TextDrawAlignment(WC[6], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(WC[6], 65480);
	TextDrawSetShadow(WC[6], 0);
	TextDrawSetOutline(WC[6], 0);
	TextDrawBackgroundColour(WC[6], 65430);
	TextDrawFont(WC[6], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(WC[6], 1);
	TextDrawSetShadow(WC[6], 0);

	C_AD[0] = TextDrawCreate(114.799980, 129.380035, "box");
	TextDrawLetterSize(C_AD[0], 0.000000, 2.880000);
	TextDrawTextSize(C_AD[0], 514.799743, 0.000000);
	TextDrawAlignment(C_AD[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(C_AD[0], -1);
	TextDrawUseBox(C_AD[0], 1);
	TextDrawBoxColour(C_AD[0], 50);
	TextDrawSetShadow(C_AD[0], 0);
	TextDrawSetOutline(C_AD[0], 0);
	TextDrawBackgroundColour(C_AD[0], 100);
	TextDrawFont(C_AD[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(C_AD[0], 1);
	TextDrawSetShadow(C_AD[0], 0);

	C_AD[1] = TextDrawCreate(169.050872, 133.743164, "_________clan_the_inovative_is_recruiting_new_members~n~contact_lafan(76)_or_apply_at_forum_to_join_mw3-samp.org");
	TextDrawLetterSize(C_AD[1], 0.231199, 0.875733);
	TextDrawAlignment(C_AD[1], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(C_AD[1], -1);
	TextDrawSetShadow(C_AD[1], 0);
	TextDrawSetOutline(C_AD[1], 0);
	TextDrawBackgroundColour(C_AD[1], 255);
	TextDrawFont(C_AD[1], TEXT_DRAW_FONT_2);
	TextDrawSetProportional(C_AD[1], 1);
	TextDrawSetShadow(C_AD[1], 0);

	Revoked_License[0] = TextDrawCreate(197.200012, 215.519989, "box");
	TextDrawLetterSize(Revoked_License[0], 0.000000, 8.720001);
	TextDrawTextSize(Revoked_License[0], 445.000000, 0.000000);
	TextDrawAlignment(Revoked_License[0], TEXT_DRAW_ALIGN_LEFT);
	TextDrawColour(Revoked_License[0], -1);
	TextDrawUseBox(Revoked_License[0], 1);
	TextDrawBoxColour(Revoked_License[0], 150);
	TextDrawSetShadow(Revoked_License[0], 0);
	TextDrawSetOutline(Revoked_License[0], 0);
	TextDrawBackgroundColour(Revoked_License[0], 255);
	TextDrawFont(Revoked_License[0], TEXT_DRAW_FONT_1);
	TextDrawSetProportional(Revoked_License[0], 1);
	TextDrawSetShadow(Revoked_License[0], 0);

	Revoked_License[1] = TextDrawCreate(323.500000, 232.500000, "Your_pilot_license_is_revoked~n~_~n~YOU_CAN'T_USE_THIS_VEHICLE");
	TextDrawLetterSize(Revoked_License[1], 0.400000, 1.600000);
	TextDrawAlignment(Revoked_License[1], TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(Revoked_License[1], -2147483393);
	TextDrawSetShadow(Revoked_License[1], 0);
	TextDrawSetOutline(Revoked_License[1], 1);
	TextDrawBackgroundColour(Revoked_License[1], 255);
	TextDrawFont(Revoked_License[1], TEXT_DRAW_FONT_3);
	TextDrawSetProportional(Revoked_License[1], 1);
	TextDrawSetShadow(Revoked_License[1], 0);

	strcopy(ServerInfo[MOTD], "Server has been updated. Check /updates.");
	SetGameModeText("COD-MW3 v7.7.4 TDM|DM|WAR|PUBG");
	EnableStuntBonusForAll(false);

	SetTimer("RandomMessage", 120000, true);
	SetTimer("CheatCheck",5000,true);
	SetTimer("ZoneBonus",60000,true);
	SetTimer("Seconds",1000,true);
	SetTimer("StatsTimer",900000,true);
	SetTimer("Area",120000,true);
	SetTimer("Area2",120000,true);
	SetTimer("Bonusplayer",600000,true);
	SetTimer("BonusZone",300000,true);
	SetTimer("HTournament",3600000,true);
	AddPlayerClass(73,1103.5007,2138.5659,10.8465,97.5010); // MM EURASIA
	AddPlayerClass(179,-815.3048,1540.0059,27.1172,342.5041); // MM ARABIA
	AddPlayerClass(285,-133.1854,1137.0345,19.7422,352.0215); // MM SOVIET
	AddPlayerClass(287,-216.3148,2708.7454,62.6875,183.1748); // MM USA
	AddPlayerClass(206,426.3655,2496.3298,16.5178,88.7274); // MM AUSTRALIA
	AddPlayerClass(249,-700.0863,979.5864,12.3564,179.3200); // BRAZIL
	AddPlayerClass(161,1027.7058,2596.7996,10.8203,334.6729); // MM TALIBAN
	AddPlayerClass(108,-1459.9910,2594.4507,55.8359,11.6016); // MM FRANCE
	AddPlayerClass(127,-1459.9910,2594.4507,55.8359,11.6016); // Mercenaries
	//====================NEW MAP=========
	de_dust();
	de_inferno();
	CreateBase(1);
	CreateBase(2);
	CreateBase(3);
	CreateBase(4);
	CreateBase(5);
	CreateBase(6);
	CreateBase(7);
	CreateBase(20);
	AddClanBase();
	EventMapsLoad();
	mysql_pquery(mysql,"SELECT `name`, `ddm` FROM `playerbase` ORDER BY `ddm` DESC LIMIT 7", "OnTopCheck", "");
	mysql_pquery(mysql,"SELECT `name`, `dsdm` FROM `playerbase` ORDER BY `dsdm` DESC LIMIT 7", "OnTopCheckTwo", "");
	mysql_pquery(mysql,"SELECT `name`, `dcbdm` FROM `playerbase` ORDER BY `dcbdm` DESC LIMIT 7", "OnTopCheckThree", "");

	//pubg loot coords
	mysql_pquery(mysql,"SELECT `x`, `y`, `z` FROM `pubgpickups`", "LoadEventLootCoords", "");
	//
	for(new zi = 0; zi < 10; zi++)
	{

		REPORTS[zi][R_active] = false;
		REPORTS[zi][R_check] = false;
	}
	AddStaticVehicle(512,435.2586,2497.4089,16.9592,89.3755,1,1); // test
	AddStaticVehicle(512,1281.5665,399.2473,19.7597,22.7074,1,1); // br
	AddStaticVehicle(512,931.4639,977.2689,11.3222,159.4422,1,1); // taliban
	AddStaticVehicle(512,-1517.8660,2482.8408,56.2510,169.9162,1,1); // franceee
	AddStaticVehicle(512,-741.2457,1587.8026,27.4098,331.0698,6,6); // arrrrr
	AddStaticVehicle(512,-67.3895,1019.0831,20.0253,358.4484,1,1); // sov
	AddStaticVehicle(512,-291.8674,2610.3584,63.5030,316.9699,152, 152); // usac

	for(new bb=1; bb < MAX_VEHICLES; bb++)
	{

		VehicleBomber[bb] = -1;
		switch(GetVehicleModel(bb))
		{
			case 543:
			{
				WMML[bb][V_O_SAM] = CreateDynamicObjectEx(3267,0,0,-1000,0,0,0,100,100);
				AttachDynamicObjectToVehicle(WMML[bb][V_O_SAM], bb, 0.000000,-1.275000,-0.599999,0.000000,0.000000,0.000000);
				WMML[bb][V_AMMO] = 5;
				ChangeVehicleColours(bb,0,0);
				WMML[bb][V_TEXT] =  Create3DTextLabel("[ Anti Aircraft ]\nMissiles [ 5 / 5 ]", 0x3E9EFFFF, 30.0, 40.0, 50.0, 40.0, 0,true);
				Attach3DTextLabelToVehicle(WMML[bb][V_TEXT],bb,0.0,0.0,1.5);
				AddVehicleComponent(bb, 1084);
			}
			case 554:
			{
				WMML[bb][V_O_SAM] = CreateDynamicObjectEx(3267,0,0,-1000,0,0,0,100,100);
				AttachDynamicObjectToVehicle(WMML[bb][V_O_SAM], bb, 0.000000, -1.600000, -0.399999, 0.000000, 0.000000, 0.000000);
				WMML[bb][V_AMMO] = 10;
				ChangeVehicleColours(bb,1,1);
				WMML[bb][V_TEXT] =  Create3DTextLabel("[ Anti Aircraft Truck ]\nMissiles [ 10 / 10 ]", 0x3E9EFFFF, 30.0, 40.0, 50.0, 40.0, 0,true);
				Attach3DTextLabelToVehicle(WMML[bb][V_TEXT],bb,0.0,0.0,1.5);
				AddVehicleComponent(bb, 1084);
			}
			case 476:
			{
				RUSTL[bb][R_BOMB] = 5;
				RUSTL[bb][R_TEXT] =  Create3DTextLabel("[ Bomber Plane ]\nBombs [ 5 / 5 ]", 0x3E9EFFFF, 30.0, 40.0, 50.0, 40.0, 0,true);
				Attach3DTextLabelToVehicle(RUSTL[bb][R_TEXT],bb,0.0,0.0,1.5);
			}
			case 512:
			{
				CROPDUSTER[bb][C_BOMB] = 5;
				CROPDUSTER[bb][C_TEXT] =  Create3DTextLabel("[ Toxic Bomber Plane ]\nToxic Bombs [ 5 / 5 ]", 0x3E9EFFFF, 30.0, 40.0, 50.0, 40.0, 0,true);
				Attach3DTextLabelToVehicle(CROPDUSTER[bb][C_TEXT],bb,0.0,0.0,1.5);
			}
		}
	}
	for(new i = 0; i < MAX_ZONES; i++)
	{
		Capture_PTD[i] = TextDrawCreate(85.225006, 326.500030, "Team");
		TextDrawLetterSize(Capture_PTD[i], 0.318124, 1.197500);
		TextDrawAlignment(Capture_PTD[i], TEXT_DRAW_ALIGN_CENTRE);
		TextDrawColour(Capture_PTD[i], -1);
		TextDrawSetShadow(Capture_PTD[i], 0);
		TextDrawSetOutline(Capture_PTD[i], 1);
		TextDrawBackgroundColour(Capture_PTD[i], 255);
		TextDrawFont(Capture_PTD[i], TEXT_DRAW_FONT_1);
		TextDrawSetProportional(Capture_PTD[i], 1);
		TextDrawSetShadow(Capture_PTD[i], 0);
		AttackingTeam[i] = -1;
		CountVar[i] = 25;
		tCP[i] = -1;
		UnderAttack{ i } = false;
	}
	// Zones..
	Zone[TEST] = GangZoneCreate(648.395, 1825.354, 813.130, 1998.494);
	CP[TEST] = CreateDynamicCP(710.0447,1959.1855,5.5391, 4.0, -1, -1, -1, 4.0);
	CreatePickup(1314, 1, 710.0447,1959.1855,5.5391, -1);
	Create3DTextLabel(ZName(TEST), COLOR_YELLOW, 710.0447,1959.1855,5.5391, 50.0, 0, true );

	// Zones..
	Zone[AO] = GangZoneCreate(-513.384765, 544.048278, -377.384765, 664.048278);
	CP[AO] = CreateDynamicCP(-440.9412,612.4698,16.7188, 4.0, -1, -1, -1, 4.0);
	CreatePickup(1314, 1, -440.9412,612.4698,16.7188, -1);
	Create3DTextLabel(ZName(AO), COLOR_YELLOW, -440.9412,612.4698,16.7188, 50.0, 0, true );


	//COUNTRY CLUB//

	Zone[CC] = GangZoneCreate(770.357910, 1575.174072, 834.357910, 1743.174072);
	CP[CC] = CreateDynamicCP(801.9143,1671.0134,5.2813, 4.0, -1, -1, -1, 4.0);
	CreatePickup(1314, 1, 801.9143,1671.0134,5.2813, -1); // pickup
	Create3DTextLabel(ZName(CC), COLOR_YELLOW, 801.9143,1671.0134,5.2813, 50.0, 0, true );


	// Drugs Factory

	Zone[DF] = GangZoneCreate(560.838073, 1125.128051, 744.838073, 1349.128051);
	CP[DF] = CreateDynamicCP(601.9775,1245.1831,11.7188, 4.0, -1, -1, -1, 4.0);
	CreatePickup(1314, 1, 601.9775,1245.1831,11.7188, -1); // pickup
	Create3DTextLabel(ZName(DF), COLOR_YELLOW, 601.9775,1245.1831,11.7188, 50.0, 0, true );


	//quarry alright great
	CP[QUARRY] = CreateDynamicCP(588.3246,875.7402,-42.4973,3, -1,-1,-1,4.0);
	Zone[QUARRY] = GangZoneCreate(426.571, 735.814, 618.571, 1015.814);
	CreatePickup(1314, 1, 588.3246,875.7402,-42.4973, -1);
	Create3DTextLabel(ZName(QUARRY), COLOR_YELLOW, 588.3246,875.7402,-42.4973, 50.0, 0, true );
	//

	// Ammu Nation - AN

	Zone[AN] = GangZoneCreate(-371.754180, 757.412902, -267.754180, 885.412902);
	CP[AN] = CreateDynamicCP(-326.0032,820.5773,14.3189, 4.0, -1, -1, -1, 4.0);
	CreatePickup(1314, 1, -326.0032,820.5773,14.3189, -1); // pickup
	Create3DTextLabel(ZName(AN), COLOR_YELLOW, -326.0032,820.5773,14.3189, 50.0, 0, true );

	//

	// Farms- CH
	Zone[CH] = GangZoneCreate(-136.018829, -67.458274, -8.018821, 116.541725);
	CP[CH] = CreateDynamicCP(-62.2938,44.9431,3.1103, 4.0, -1, -1, -1, 4.0);
	CreatePickup(1314, 1, -62.2938,44.9431,3.1103, -1); // pickup
	Create3DTextLabel(ZName(CH), COLOR_YELLOW, -62.2938,44.9431,3.1103, 50.0, 0, true );

	//

	// army camp
	Zone[CMP] = GangZoneCreate(421.875, 2185.546875, 580.078125, 2314.453125);
	CP[CMP] = CreateDynamicCP(471.6113,2251.0513,36.3676,4.0,-1,-1,-1,4.0);
	CreatePickup(1314,1,471.6113,2251.0513,36.3676,-1);
	Create3DTextLabel(ZName(CMP), COLOR_YELLOW, 471.6113,2251.0513,36.3676, 50.0, 0, true );
	//

	// Mc Donald's - MD
	Zone[MD] = GangZoneCreate(-1237.963, 1790.028, -1167.963, 1832.028);
	CP[MD] = CreateDynamicCP(-1198.3751,1821.2531,41.7188, 4.0, -1, -1, -1, 4.0);
	CreatePickup(1314, 1, -1198.3751,1821.2531,41.7188, -1); // pickup
	Create3DTextLabel(ZName(MD), COLOR_YELLOW, -1198.3751,1821.2531,41.7188, 50.0, 0, true );


	//

	// Gas Station - GS
	Zone[GS] = GangZoneCreate(-1507.938, 1831.366, -1427.672, 1879.632);
	CP[GS] = CreateDynamicCP(-1469.4241,1871.3962,32.6328, 4.0, -1, -1, -1, 4.0);
	CreatePickup(1314, 1, -1469.4241,1871.3962,32.6328, -1); // pickup
	Create3DTextLabel(ZName(GS), COLOR_YELLOW, -1469.4241,1871.3962,32.6328, 50.0, 0, true );

	//

	// Fish Shop - FS
	Zone[FS] = GangZoneCreate(-1391.073, 2039.043, -1335.073, 2081.043);
	CP[FS] = CreateDynamicCP(-1353.5428,2057.3787,53.1172, 4.0, -1, -1, -1, 4.0);
	CreatePickup(1314, 1, -1353.5428,2057.3787,53.1172, -1); // pickup
	Create3DTextLabel(ZName(FS), COLOR_YELLOW, -1353.5428,2057.3787,53.1172, 50.0, 0, true );

	//

	// Jays Shop - JS
	Zone[JS] = GangZoneCreate(-1961.164, 2309.425, -1877.164, 2407.425);
	CP[JS] = CreateDynamicCP(-1937.6462,2380.9592,49.5000, 4.0, -1, -1, -1, 4.0);
	CreatePickup(1314, 1, -1937.6462,2380.9592,49.5000, -1); // pickup
	Create3DTextLabel(ZName(JS), COLOR_YELLOW, -1937.6462,2380.9592,49.5, 50.0, 0, true );


	//snakes farm
	CP[SNAKE] = CreateDynamicCP(-36.5458, 2347.6426, 24.1406,3, -1,-1,-1,4.0);
	Zone[SNAKE] = GangZoneCreate(-62.5000000000005,2318.359375,23.4375,2390.625);
	CreatePickup(1314, 1, -36.5458, 2347.6426, 24.1406, -1);
	Create3DTextLabel(ZName(SNAKE), COLOR_YELLOW, -36.5458, 2347.6426, 24.1406, 50.0, 0, true );

	//bayside sea shore
	CP[BAY] = CreateDynamicCP(260.0900,2889.5242,11.1854,3, -1,-1,-1,4.0);
	Zone[BAY] = GangZoneCreate(236.328125,2892.578125,292.96875,2943.359375);
	CreatePickup(1314, 1, 260.0900,2889.5242,11.1854, -1);
	Create3DTextLabel(ZName(BAY), COLOR_YELLOW, 260.0900,2889.5242,11.1854, 50.0, 0, true );

	//area 51
	CP[BIG] = CreateDynamicCP(254.1981,1802.2262,7.4141,3, -1,-1,-1,4.0);
	Zone[BIG] = GangZoneCreate(-46.875,1697.265625,423.828125,2115.234375);
	CreatePickup(1314, 1, 254.1981,1802.2262,7.4141, -1);
	Create3DTextLabel(ZName(BIG), COLOR_YELLOW, 254.1981,1802.2262,7.4141, 50.0, 0, true );

	//area 52
	CP[A52] = CreateDynamicCP(-2571.8511,2471.7515,6.4761,3, -1,-1,-1,4.0);
	Zone[A52] = GangZoneCreate(-2649.850, 2190.971, -2159.175, 2486.162);
	CreatePickup(1314, 1, -2571.8511,2471.7515,6.4761, -1);
	Create3DTextLabel(ZName(A52), COLOR_YELLOW, -2571.8511,2471.7515,6.4761, 50.0, 0, true );

	//space station
	CP[SPS] = CreateDynamicCP(-1811.9757,3196.7776,817.6555,3, -1,-1,-1,4.0);
	Zone[SPS] = GangZoneCreate(-886.854, 2266.387, -718.854, 2448.387);
	CreatePickup(1314, 1, -1811.9757,3196.7776,817.6555, -1);
	Create3DTextLabel(ZName(SPS), COLOR_YELLOW, -2571.8511,2471.7515,6.4761, 50.0, 255, true );

	//Petrol Station
	CP[OPP] = CreateDynamicCP(-2204.7358,1920.2222,-45.3192,3, -1,-1,-1,4.0);
	Zone[OPP] =	GangZoneCreate( -2273.811, 1837.958, -2133.774, 1964.284);
	CreatePickup(1314, 1, -2204.7358,1920.2222,-45.3192, -1);
	Create3DTextLabel(ZName(OPP), COLOR_YELLOW, -2204.7358,1920.2222,-45.3192, 50.0, 0, true );

	// bridge
	CP[BRD] = CreateDynamicCP(-902.1199,2696.3083,42.3703,3,-1,-1,-1,4.0);
	Zone[BRD] = GangZoneCreate(-1253.90625, 2666.015625, -849.609375, 2771.484375);
	CreatePickup(1314,1,-902.1199,2696.3083,42.3703,-1);
	Create3DTextLabel(ZName(BRD), COLOR_YELLOW, -902.1199,2696.3083,42.3703, 50.0, 0, true );

	//army hotel
	CP[ARMY] = CreateDynamicCP(-551.6992,2593.0771,53.9348,3, -1,-1,-1,4.0);
	Zone[ARMY] = GangZoneCreate(-617.1875,2531.25,-455.078125,2658.203125);
	CreatePickup(1314, 1, -551.6992,2593.0771,53.9348, -1);
	Create3DTextLabel(ZName(ARMY), COLOR_YELLOW, -551.6992,2593.0771,53.9348, 50.0, 0, true );


	//army petrol bunk
	CP[PETROL] = CreateDynamicCP(670.9215,1705.4658,7.1875,3, -1,-1,-1,4.0);
	Zone[PETROL] = GangZoneCreate(609.375,1652.34375,714.84375,1767.578125);
	CreatePickup(1314, 1, 670.9215,1705.4658,7.1875, -1);
	Create3DTextLabel(ZName(PETROL), COLOR_YELLOW, 670.9215,1705.4658,7.1875, 50.0, 0, true );

	//Oil Factory
	CP[OIL] = CreateDynamicCP(221.0856,1422.6615,10.5859,3, -1,-1,-1,4.0);
	Zone[OIL] = GangZoneCreate(95.703125,1339.84375,287.109375,1484.375);
	CreatePickup(1314, 1, 221.0856,1422.6615,10.5859, -1);
	Create3DTextLabel(ZName(OIL), COLOR_YELLOW, 221.0856,1422.6615,10.5859, 50.0, 0, true );


	//Desert Guest House
	CP[GUEST] = CreateDynamicCP(-314.8433,1773.9176,43.6406,3, -1,-1,-1,4.0);
	Zone[GUEST] = GangZoneCreate(-357.421875,1707.03125,-253.90625,1835.9375);
	CreatePickup(1314, 1, -314.8433,1773.9176,43.6406, -1);
	Create3DTextLabel(ZName(GUEST), COLOR_YELLOW, -314.8433,1773.9176,43.6406, 50.0, 0, true );

	//Big Ear
	CP[EAR] = CreateDynamicCP(-311.0136,1542.9733,75.5625,3, -1,-1,-1,4.0);
	Zone[EAR] = GangZoneCreate(-437.5,1513.671875,-244.140625,1636.71875);
	CreatePickup(1314, 1, -311.0136,1542.9733,75.5625, -1);
	Create3DTextLabel(ZName(EAR), COLOR_YELLOW, -311.0136,1542.9733,75.5625, 50.0, 0, true );

	// Hospital
	CP[HOS] = CreateDynamicCP(1067.3274,1003.5995,11.0000,3, -1,-1,-1,4.0);
	Zone[HOS] = GangZoneCreate(966.796875, 960.9375, 1177.734375, 1160.15625);
	CreatePickup(1314,1,1067.3274,1003.5995,11.0000,-1);
	Create3DTextLabel(ZName(HOS), COLOR_YELLOW, 1067.3274,1003.5995,11.0000, 50.0, 0, true );

	// Las Venturas Airport
	CP[LVA] = CreateDynamicCP(1617.8091,1171.5394,14.2188,3, -1,-1,-1,4.0);
	Zone[LVA] = GangZoneCreate(1259, 1157.5, 1625, 1881.5);
	CreatePickup(1314,1,1617.8091,1171.5394,14.2188,-1);
	Create3DTextLabel(ZName(LVA), COLOR_YELLOW, 1617.8091,1171.5394,14.2188, 50.0, 0, true );

	//Military Trend
	CP[MT] = CreateDynamicCP(-104.2878,1896.7731,15.4551, 3, -1,-1,-1,4.0);
	Zone[MT] = GangZoneCreate(-128, 1852.5, -91, 1898.5);
	CreatePickup(1314,1,-104.2878,1896.7731,15.4551,-1);
	Create3DTextLabel(ZName(MT), COLOR_YELLOW, -104.2878,1896.7731,15.4551, 50.0, 0, true );

	//Pump house
	CP[PH] = CreateDynamicCP(1048.5999755859,2909.3000488281,47.799999237061,3, -1,-1,-1,4.0);
	Zone[PH] = GangZoneCreate(1031, 2900.5, 1075, 2926.5);
	CreatePickup(1314,1,1048.589,2909.30281,47.799999237061,-1);
	Create3DTextLabel(ZName(PH), COLOR_YELLOW, 1048.5999755859,2909.3000488281,47.799, 50.0, 0, true );

	//Cargo Ship
	CP[CARGO] = CreateDynamicCP(-2372.8000488281,1551.1999511719,2.0999999046326,3, -1,-1,-1,4.0);
	Zone[CARGO] = GangZoneCreate(-2527, 1514.5, -2295, 1579.5);
	CreatePickup(1314,1,-2372.8000488281,1551.1999511719,2.0999999046326,-1);
	Create3DTextLabel(ZName(CARGO), COLOR_YELLOW, -2372.8000488281,1551.1999511719,2.099, 50.0, 0, true );

	//SFPD
	CP[SFPD] = CreateDynamicCP(-1616.0999755859,685.79998779297,7.1999998092651,3, -1,-1,-1,4.0);
	Zone[SFPD] = GangZoneCreate(-1654, 644.5, -1569, 687.5);
	CreatePickup(1314,1,-1616.0999755859,685.79998779297,7.1999998092651,-1);
	Create3DTextLabel(ZName(SFPD), COLOR_YELLOW, -1616.0999755859,685.79998779297,7.19999, 50.0, 0, true );

	//Baselball Stadium
	CP[BST] = CreateDynamicCP(1360.8000488281,2196.1000976563,9.8000001907349,3, -1,-1,-1,4.0);
	Zone[BST] = GangZoneCreate(1299, 2102.5, 1399, 2202.5);
	CreatePickup(1314,1,1360.8000488281,2196.1000976563,9.8000001907349,-1);
	Create3DTextLabel(ZName(BST), COLOR_YELLOW, 1360.8000488281,2196.1000976563,9.800, 50.0, 0, true );

	//Aircraft Carrier
	CP[CRAFT] = CreateDynamicCP(-1348,494.29998779297,18.200000762939,3, -1,-1,-1,4.0);
	Zone[CRAFT] = GangZoneCreate(-1470, 457.5, -1241, 519.5);
	CreatePickup(1314,1,-1348,494.29998779297,18.200000762939,-1);
	Create3DTextLabel(ZName(CRAFT), COLOR_YELLOW, -1348,494.29998779297,18.200000, 50.0, 0, true );

	//San Fierro Docks
	CP[SFDOCK] = CreateDynamicCP(-1733.8000488281,190.80000305176,3.5999999046326,3, -1,-1,-1,4.0);
	Zone[SFDOCK] = GangZoneCreate(-1754, 110.5, -1714, 235.5);
	CreatePickup(1314,1,-1733.8000488281,190.80000305176,3.5999999046326,-1);
	Create3DTextLabel(ZName(SFDOCK), COLOR_YELLOW, -1733.8000488281,190.80000305176,3.599, 50.0, 0, true );

	//Fisher's Lagoon
	CP[FSL] = CreateDynamicCP(2162.3999023438,-103.09999847412,2.7999999523163,3, -1,-1,-1,4.0);
	Zone[FSL] = GangZoneCreate(2114, -140.5, 2206, -26.5);
	CreatePickup(1314,1,2162.3999023438,-103.09999847412,2.7999999523163,-1);
	Create3DTextLabel(ZName(FSL), COLOR_YELLOW,2162.3999023438,-103.09999847412,2.799999, 50.0, 0, true );

	RP = CreatePickup(1210,2,-148.4453,1110.0249,19.7500, -1); // sov
	AP = CreatePickup(1210,2,-824.0439,1570.2931,27.1222, -1); // arab
	EP = CreatePickup(1210,2,1132.0225,1916.1094,11.10, -1); // eurasia
	A2P = CreatePickup(1210,2,433.9764,2512.4409,16.4844, -1); // australia
	MP = CreatePickup(1210,2,-247.7238,2603.3044,62.8924, -1); //usa pickup
	CHP = CreatePickup(1210,2,-702.0231,946.4190,12.5164, -1); // brazil
	IDP = CreatePickup(1210,2,1053.0963,2565.9834,10.9491, -1); // taliban
	AirPick = CreatePickup(1313,2,213.6228,1822.5692,6.4141,-1); // area 51
	Air2Pick = CreatePickup(1313,2,-1812.9015,3211.9358,817.6779,255); // SPS
	LocatorPick = CreatePickup(19522,2,-2531.7483,2451.1455,5.4470,-1); // area 52
	ParaPick = CreatePickup(19131,2,-2532.5620,2447.5063,5.4470,-1); // Paratroop Pickup
	FlashPick = CreatePickup(1313,2,-2533.1792,2455.2319,5.4470,-1); // area 52 flash
	AirCPick = CreatePickup(1210,2,-1347.9625,501.7175,18.2344,-1); // AirCraft
	FRP = CreatePickup(1210,2,-1518.5146,2641.4976,55.8797,0); // france
	CBPick = CreatePickup(1210,2,-1336.5931,1341.9229,3.0868,0); //clan base
	// Text3D
	Nuke3D = CreateDynamic3DTextLabel("Nuke\nReady", 0x00FF54FF,213.6228,1822.5692,6.4141, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0,-1, 10.0 );
	Nuke23D = CreateDynamic3DTextLabel("Space Nuke\nReady", 0x00FF54FF,-1812.9015,3211.9358,817.6779, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 255, 255,-1, 10.0 );
	Flash3D = CreateDynamic3DTextLabel("Flash Bomb\nReady", 0x00FF54FF,-2533.1792,2455.2319,5.4470, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0,-1, 10.0 );
	Brief[0] = Create3DTextLabel("Weapon Shop\nSoviet", 0x00FF00FF, -148.4453,1110.0249,19.7500, 40.0, 0, true);
	Brief[1] = Create3DTextLabel("Weapon Shop\nArabia", 0x00FF00FF, -824.0439,1570.2931,27.1222, 40.0, 0);
	Brief[2] = Create3DTextLabel("Weapon Shop\nEurasia", 0x00FF00FF, 1132.0225,1916.1094,11.10, 40.0, 0); //
	Brief[3] = Create3DTextLabel("Weapon Shop\nAustralia", 0x00FF00FF, 433.9764,2512.4409,16.5844, 40.0, 0);
	Brief[4] = Create3DTextLabel("Weapon Shop\nUsa", 0x00FF00FF, -247.7238,2603.3044,62.8924, 40.0, 0);
	Brief[5] = Create3DTextLabel("Weapon Shop\nBrazil", 0x00FF00FF, -702.0231,946.4190,12.5164, 40.0, 0);
	Brief[6] = Create3DTextLabel("Weapon Shop\nTaliban", 0x00FF00FF,1053.0963,2565.9834,10.9491, 40.0, 0);
	Brief[7] = Create3DTextLabel("Weapon Shop\nFrance", 0x00FF00FF,-1518.5146,2641.4976,55.8797, 40.0, 0);
	Brief[8] = Create3DTextLabel("Weapon Shop\nClan Base", 0x00FF00FF,-1336.5931,1341.9229,3.3868, 40.0, 0);

	// Zones Briefcase
	SP1 = CreatePickup(1210,2,638.4871,1685.9109,6.9922,0);
	SP2 = CreatePickup(1210,2,220.0877,1920.2765,17.6406,0);
	SP3 = CreatePickup(1210,2,-5.3158,2329.3057,24.1347,0);
	SP4 = CreatePickup(1210,2,-290.0079,1535.2976,75.5625,0);
	SP5 = CreatePickup(1210,2,463.0647,2250.6934,37.0511,0);
	SP6 = CreatePickup(1210,2,-2535.9175,2353.9641,16.7333,0);
	GZ_ZONE1 = GangZoneCreate(-353.515625,2574.21875,-113.28125,2796.875); //NEW USA
	GZ_ZONE2 = GangZoneCreate(994.1957, 1817.512, 1185.533, 2049.596); // Eurasia
	GZ_ZONE3 = GangZoneCreate(89.0625000000005,2418.75,466.40625,2617.96875); //AUSTRALIAN ARMADA
	GZ_ZONE4 = GangZoneCreate(-309.375,1024.21875,103.125,1211.71875); //Soviet Union
	GZ_ZONE5 = GangZoneCreate(-875.8406, 1389.667, -607.2495, 1623.225); //Arabia
	GZ_ZONE6 = GangZoneCreate(-769.520507, 808.620483, -633.520507, 1056.620483); // Brazil
	GZ_ZONE7 = GangZoneCreate(929.864990, 2536.129150, 1241.864990, 2720.129150); // taliban
	GZ_ZONE8 = GangZoneCreate(-1658.203125, 2519.53125, -1341.796875, 2759.765625); // france


	/// COMMAND CENTERS ////

	CMDCP[TEAM_EURASIA] = CreateDynamicCP(1096.5172,1890.5281,10.8130,1.0, -1,-1,-1,20.0);
	Create3DTextLabel("Eurasia Command Center", 0x3E9EFFFF, 1096.5172,1890.5281,12.5, 40.0, 0,true);
	CMDCP[TEAM_ARAB] = CreateDynamicCP(-752.2571,1596.3229,27.1172,1.0, -1,-1,-1,20.0);
	Create3DTextLabel("Arabia Command Center", 0x3E9EFFFF, -752.2571,1596.3229,29.0, 40.0, 0,true);
	CMDCP[TEAM_SOVIET] = CreateDynamicCP(-107.4471,1137.4742,19.7422,1.0, -1,-1,-1,20.0);
	Create3DTextLabel("Soviet Command Center", 0x3E9EFFFF, -107.4471,1137.4742,21.0, 40.0, 0,true);
	CMDCP[TEAM_USA] = CreateDynamicCP(-268.3221,2623.2104,62.8917,1.0, -1,-1,-1,20.0);
	Create3DTextLabel("USA Command Center", 0x3E9EFFFF, -268.3221,2623.2104,64.0, 40.0, 0,true);
	CMDCP[TEAM_AUS] = CreateDynamicCP(413.0412,2484.4333,16.4844,1.0, -1,-1,-1,20.0);
	Create3DTextLabel("Australia Command Center", 0x3E9EFFFF, 413.0412,2484.4333,18.0, 40.0, 0,true);
	CMDCP[TEAM_CH] = CreateDynamicCP(-725.3972,992.5811,12.2487,1.0, -1,-1,-1,20.0);
	Create3DTextLabel("Brazil Command Center", 0x3E9EFFFF, -725.3972,992.5811,14.0, 40.0, 0,true);
	CMDCP[TEAM_ID] = CreateDynamicCP(969.4592,2630.7847,10.8203,1.0, -1,-1,-1,20.0);
	Create3DTextLabel("Taliban Command Center", 0x3E9EFFFF, 969.4592,2630.7847,12.0, 40.0, 0,true);
	CMDCP[TEAM_FRANCE] = CreateDynamicCP(-1490.7959,2635.1409,55.8359,1.0, -1,-1,-1,20.0);
	Create3DTextLabel("France Command Center", 0x3E9EFFFF, -1490.7959,2635.1409,57.0, 40.0, 0,true);
	ExitCP = CreateDynamicCP(2516.4814,-2656.1167,28.1025,1.0, -1,-1,-1,20.0);
	UnderCP = CreateDynamicCP(-2205.7271,1911.0815,-45.3192,1.0, -1,-1,-1,5.0);
	UpCP = CreateDynamicCP(-2203.4495,1903.5446,2.9526,1.0, -1,-1,-1,5.0);
	SUnderCP = CreateDynamicCP(-1812.3835,3194.4580,821.5206,1.0, -1,-1,-1,5.0);
	SUpCP = CreateDynamicCP(-786.5989,2417.5176,157.1028,1.0, -1,-1,-1,5.0);
	CMDPickup = CreatePickup(1247,2,2502.0852,-2655.6985,27.1025,-1);
	airvehdriver = -1;

	CMD0 = TextDrawCreate(0.000000, 1.000000, "_");
	TextDrawBackgroundColour(CMD0, 255);
	TextDrawFont(CMD0, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CMD0, 0.500000, 50.099998);
	TextDrawColour(CMD0, -1);
	TextDrawSetOutline(CMD0, 0);
	TextDrawSetProportional(CMD0, 1);
	TextDrawSetShadow(CMD0, 1);
	TextDrawUseBox(CMD0, 1);
	TextDrawBoxColour(CMD0, 255);
	TextDrawTextSize(CMD0, 80.000000, 190.000000);
	TextDrawSetSelectable(CMD0, 0);

	CMD1 = TextDrawCreate(558.000000, 1.000000, "_");
	TextDrawBackgroundColour(CMD1, 255);
	TextDrawFont(CMD1, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CMD1, 2.599998, 50.099998);
	TextDrawColour(CMD1, -1);
	TextDrawSetOutline(CMD1, 0);
	TextDrawSetProportional(CMD1, 1);
	TextDrawSetShadow(CMD1, 1);
	TextDrawUseBox(CMD1, 1);
	TextDrawBoxColour(CMD1, 255);
	TextDrawTextSize(CMD1, 650.000000, 190.000000);
	TextDrawSetSelectable(CMD1, 0);

	CMD2 = TextDrawCreate(78.000000, 1.000000, "_");
	TextDrawBackgroundColour(CMD2, 255);
	TextDrawFont(CMD2, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CMD2, 2.599998, 10.899996);
	TextDrawColour(CMD2, -1);
	TextDrawSetOutline(CMD2, 0);
	TextDrawSetProportional(CMD2, 1);
	TextDrawSetShadow(CMD2, 1);
	TextDrawUseBox(CMD2, 1);
	TextDrawBoxColour(CMD2, 255);
	TextDrawTextSize(CMD2, 650.000000, 190.000000);
	TextDrawSetSelectable(CMD2, 0);

	CMD3 = TextDrawCreate(78.000000, 348.000000, "_");
	TextDrawBackgroundColour(CMD3, 255);
	TextDrawFont(CMD3, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CMD3, 2.599998, 10.899996);
	TextDrawColour(CMD3, -1);
	TextDrawSetOutline(CMD3, 0);
	TextDrawSetProportional(CMD3, 1);
	TextDrawSetShadow(CMD3, 1);
	TextDrawUseBox(CMD3, 1);
	TextDrawBoxColour(CMD3, 255);
	TextDrawTextSize(CMD3, 650.000000, 190.000000);
	TextDrawSetSelectable(CMD3, 0);

	CMD4 = TextDrawCreate(296.000000, 211.000000, ">   <");
	TextDrawBackgroundColour(CMD4, 16711935);
	TextDrawFont(CMD4, TEXT_DRAW_FONT_2);
	TextDrawLetterSize(CMD4, 0.439996, 2.500020);
	TextDrawColour(CMD4, -1);
	TextDrawSetOutline(CMD4, 1);
	TextDrawSetProportional(CMD4, 1);
	TextDrawSetSelectable(CMD4, 0);

	CMD5 = TextDrawCreate(311.000000, 185.000000, "v");
	TextDrawBackgroundColour(CMD5, 16711935);
	TextDrawFont(CMD5, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CMD5, 0.639999, 3.599999);
	TextDrawColour(CMD5, -1);
	TextDrawSetOutline(CMD5, 1);
	TextDrawSetProportional(CMD5, 1);
	TextDrawSetSelectable(CMD5, 0);

	CMD6 = TextDrawCreate(311.000000, 259.000000, "v");
	TextDrawBackgroundColour(CMD6, 16711935);
	TextDrawFont(CMD6, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CMD6, 0.639999, -3.499999);
	TextDrawColour(CMD6, -1);
	TextDrawSetOutline(CMD6, 1);
	TextDrawSetProportional(CMD6, 1);
	TextDrawSetSelectable(CMD6, 0);

	CMD7 = TextDrawCreate(264.000000, 219.000000, "-   -");
	TextDrawBackgroundColour(CMD7, 255);
	TextDrawFont(CMD7, TEXT_DRAW_FONT_3);
	TextDrawLetterSize(CMD7, 1.399999, 0.599999);
	TextDrawColour(CMD7, -16776961);
	TextDrawSetOutline(CMD7, 1);
	TextDrawSetProportional(CMD7, 1);
	TextDrawSetSelectable(CMD7, 0);

	CMD8 = TextDrawCreate(317.000000, 108.000000, "-~n~-");
	TextDrawBackgroundColour(CMD8, 255);
	TextDrawFont(CMD8, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CMD8, 0.079999, 11.199998);
	TextDrawColour(CMD8, -16776961);
	TextDrawSetOutline(CMD8, 1);
	TextDrawSetProportional(CMD8, 1);
	TextDrawSetSelectable(CMD8, 0);

	CMD9 = TextDrawCreate(457.000000, 0.000000, "Please aim using Right mouse button for better accuracy");
	TextDrawBackgroundColour(CMD9, 255);
	TextDrawFont(CMD9, TEXT_DRAW_FONT_1);
	TextDrawLetterSize(CMD9, 0.190000, 1.000000);
	TextDrawColour(CMD9, -1);
	TextDrawSetOutline(CMD9, 0);
	TextDrawSetProportional(CMD9, 1);
	TextDrawSetShadow(CMD9, 1);
	TextDrawSetSelectable(CMD9, 0);

	Announce = TextDrawCreate(315.783294, 319.083251, "Type ~p~/Yes~n~~w~to join the event");
	TextDrawLetterSize(Announce, 0.478111, 1.850833);
	TextDrawAlignment(Announce, TEXT_DRAW_ALIGN_CENTRE);
	TextDrawColour(Announce, -1);
	TextDrawSetShadow(Announce, 0);
	TextDrawSetOutline(Announce, 1);
	TextDrawBackgroundColour(Announce, 51);
	TextDrawFont(Announce, TEXT_DRAW_FONT_3);
	TextDrawSetProportional(Announce, 1);


	UsePlayerPedAnims();
	DisableInteriorEnterExits();

	//---------

	ServerInfo[ReadCmds] = ServerInfo[NoCaps] = 1;
	ServerInfo[MaxMuteWarnings] = 3;
	ServerInfo[ReadPMs] = ServerInfo[AntiSwear] = ServerInfo[AntiSpam] = 1;
	ServerInfo[MML] = ServerInfo[Spreetext] = ServerInfo[RENDER] = ServerInfo[FloodIP] = true;
	ServerInfo[AntiCh] = ServerInfo[Sawn] = false;
	new hour,minuite,second; gettime(hour,minuite,second);
	ServerInfo[ServerTime] = hour;

	print("Game Mode Loaded");
	for(new cars=1; cars<MAX_VEHICLES; cars++) SetVehicleToRespawn(cars);
	mysql_pquery(mysql, "SELECT * FROM `tournament` ORDER BY `TID` DESC LIMIT 1", "OnTournamentcheck", "");
	ReloadQuests();
	return 1;
}

HasJoined(playerid)
{
	new isthere;
	isthere = 0;
	foreach(new x : JOINED1)
	{
		if (x == playerid)
		{
		    isthere = 1;
		    break;
		}
	}
	if(!isthere)
	{
		foreach(new x : JOINED2)
		{
			if (x == playerid)
			{
			    isthere = 1;
			    break;
			}
		}
	}
	return isthere;
}

ShowMVP(playerid)
{
    TextDrawShowForPlayer(playerid, MVP_BoxTitle);
    TextDrawShowForPlayer(playerid, MVP_Box2);
    TextDrawShowForPlayer(playerid, MVP_Picture);
    TextDrawShowForPlayer(playerid, MVP_Description);
    return 1;
}

HideMVP(playerid)
{
    TextDrawHideForPlayer(playerid, MVP_BoxTitle);
    TextDrawHideForPlayer(playerid, MVP_Box2);
    TextDrawHideForPlayer(playerid, MVP_Picture);
    TextDrawHideForPlayer(playerid, MVP_Description);
    return 1;
}

CheckMVP(winner)
{
    new maxx = CLAN_WAR[CW_MAX];
    new maxdmg, maxkills, maxdmger, maxkillser;
    maxdmg = maxkills = -1;
    if(winner == 1)
	{
		for(new i=0; i < maxx; i++)
		{
		    new player = WAR_SLOT_T1[i];
		    if(!IsPlayerConnected(player)) continue;
		    if(CW_R_DAMAGE[player] > maxdmg) { maxdmg = CW_R_DAMAGE[player]; maxdmger = player; }
		    if(CW_R_KILLS[player] > maxkills) { maxkills = CW_R_KILLS[player]; maxkillser = player; }
			TextDrawSetPreviewModel(MVP_Picture, 2050);
		}
	}
	else
	{
		for(new i=0; i < maxx; i++)
		{
		    new player = WAR_SLOT_T2[i];
		    if(!IsPlayerConnected(player)) continue;
		    if(CW_R_DAMAGE[player] > maxdmg) { maxdmg = CW_R_DAMAGE[player]; maxdmger = player; }
		    if(CW_R_KILLS[player] > maxkills) { maxkills = CW_R_KILLS[player]; maxkillser = player; }
			TextDrawSetPreviewModel(MVP_Picture, 2049);
		}
	}
	if((maxx - maxkills) < 2)
	{
 	    TextDrawSetString(MVP_BoxTitle, "%s win the round~n~~n~~n~", cTag[maxkillser]);
		TextDrawSetString(MVP_Description, "~y~] ~w~MVP: %s for most eliminations. (%d)", PlayerInfo[maxkillser][Nick], maxkills);
	}
	else
	{
 	    TextDrawSetString(MVP_BoxTitle, "%s win the round~n~~n~~n~", cTag[maxdmger]);
		TextDrawSetString(MVP_Description, "~y~] ~w~MVP: %s for most eliminations. (%d)", PlayerInfo[maxdmger][Nick], maxdmg);
	}
	return 1;
}

HasJoined1(playerid)
{
	new isthere;
	isthere = 0;
	foreach(new x : JOINED1)
	{
		if (x == playerid)
		{
		    isthere = 1;
		    break;
		}
	}
	return isthere;
}

IsAlive1(playerid)
{
	new isthere;
	isthere = 0;
	foreach(new x : ALIVE1)
	{
		if (x == playerid)
		{
		    isthere = 1;
		    break;
		}
	}
	return isthere;
}

IsAlive2(playerid)
{
	new isthere;
	isthere = 0;
	foreach(new x : ALIVE2)
	{
		if (x == playerid)
		{
		    isthere = 1;
		    break;
		}
	}
	return isthere;
}

IsBlocked(playerid, id)
{
	new isthere;
	foreach(new x : BLOCKED[playerid])
	{
		if (x == id)
		{
		    isthere = 1;
		    break;
		}
	}
	return isthere;
}

InArena(playerid, arena)
{
	new isthere;
	foreach(new x : ARENA[arena])
	{
		if (x == playerid)
		{
		    isthere = 1;
		    break;
		}
	}
	return isthere;
}

HasJoined2(playerid)
{
	new isthere;
	isthere = 0;
	foreach(new x : JOINED2)
	{
		if (x == playerid)
		{
		    isthere = 1;
		    break;
		}
	}
	return isthere;
}


CMD:mdm(playerid, params[])
{
	if(PlayerInfo[playerid][JailTime] > 0) return ERR(playerid, "Cannot use this cmd while in jail.");
	if(HasJoined(playerid)) return ERR(playerid,"You can't change your class while in a clan war");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	new Float:HP;
	GetPlayerHealth(playerid,HP);
	if(HP < 50) return ERR(playerid, "Cannot use this cmd when you have less than 50HP.");
	if(PlayerInfo[playerid][InDuel]) return ERR(playerid, "Cannot use this cmd while duelling.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You are already in MDM stadium, use /qdm first.");
	if(AntiSK[playerid]) return SendClientMessage(playerid, RED,"You cannot join MDM while in antiSK protection! try again later");
	if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
	if(PlayerInfo[playerid][OnDuty] == 1) cmd_adminduty(playerid);
 	KillTimer(PlayerInfo[playerid][SL]);
	Iter_Add(ARENA[MDM], playerid);
	Iter_Remove(ARENA[NON], playerid);
	SendClientMessageToAll(0xA448FFFF, "[MDM ARENA] %s(%d) has joined minigun deathmatch stadium * total players: %d", PlayerInfo[playerid][Nick], playerid, MDmCount());
	CheckDMPlayer(playerid);
	return 1;
}

CMD:dm(playerid, params[])
{
	if(!PlayerInfo[playerid][IsSpawned]) return ERR(playerid,"You have to be spawned to use this cmd");
	if(HasJoined(playerid)) return ERR(playerid,"You can't change your class while in a clan war");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	new Float:HP;
	GetPlayerHealth(playerid,HP);
	if(HP < 50) return ERR(playerid, "Cannot use this cmd when you have less than 50HP.");
	if(PlayerInfo[playerid][InDuel]) return ERR(playerid, "Cannot use this cmd while duelling.");
	if(PlayerInfo[playerid][JailTime] > 0) return ERR(playerid, "Cannot use this cmd while in jail.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You are already in a DM stadium, use /qdm first.");
	if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
	if(!AntiSK[playerid])
	{
		if(PlayerInfo[playerid][OnDuty] == 1) cmd_adminduty(playerid);
  		KillTimer(PlayerInfo[playerid][SL]);
		Iter_Add(ARENA[EDM], playerid);
		Iter_Remove(ARENA[NON], playerid);
		SendClientMessageToAll(0xA448FFFF, "[DM ARENA] %s(%d) has joined deathmatch stadium * Total players: %d", PlayerInfo[playerid][Nick], playerid, DmCount());
		CheckDMPlayer(playerid);
		TextDrawShowForPlayer(playerid, DM_Top[0]);
		TextDrawShowForPlayer(playerid, DM_Top[1]);
		TextDrawShowForPlayer(playerid, DM_Top[2]);
		TextDrawShowForPlayer(playerid, DM_Top[3]);
		return 1;
	}
	SendClientMessage(playerid, RED,"You cannot join DM while in antiSK protection! Try again later");
	return 1;
}

CMD:sdm(playerid, params[])
{
	if(!PlayerInfo[playerid][IsSpawned]) return ERR(playerid,"You have to be spawned to use this cmd");
	if(PlayerInfo[playerid][JailTime] > 0) return ERR(playerid, "Cannot use this cmd while in jail.");
	if(PlayerInfo[playerid][JailTime] > 0) return ERR(playerid, "Cannot use this cmd while in jail.");
	if(HasJoined(playerid)) return ERR(playerid,"You can't change your class while in a clan war");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	new Float:HP;
	GetPlayerHealth(playerid,HP);
	if(HP < 50) return ERR(playerid, "Cannot use this cmd when you have less than 50HP.");
	if(PlayerInfo[playerid][InDuel]) return ERR(playerid, "Cannot use this cmd while duelling.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You are already in a DM stadium, use /qdm first.");
	if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
	if(!AntiSK[playerid])
	{
		if(PlayerInfo[playerid][OnDuty] == 1) cmd_adminduty(playerid);
  		KillTimer(PlayerInfo[playerid][SL]);
		Iter_Add(ARENA[SDM], playerid);
		Iter_Remove(ARENA[NON], playerid);
		SendClientMessageToAll(0xA448FFFF, "[SDM ARENA] %s(%d) has joined Sniper deathmatch stadium * Total players: %d", PlayerInfo[playerid][Nick], playerid, sDmCount());
		TextDrawShowForPlayer(playerid, DSDM_Top[0]);
		TextDrawShowForPlayer(playerid, DSDM_Top[1]);
		TextDrawShowForPlayer(playerid, DSDM_Top[2]);
		TextDrawShowForPlayer(playerid, DSDM_Top[3]);
		CheckDMPlayer(playerid);
		return 1;
	}
	SendClientMessage(playerid, RED,"You cannot join SDM while in AntiSK protection! Try again later");
	return 1;
}

CMD:chdm(playerid, params[])
{
	if(!PlayerInfo[playerid][IsSpawned]) return ERR(playerid,"You have to be spawned to use this cmd");
	if(PlayerInfo[playerid][JailTime] > 0) return ERR(playerid, "Cannot use this cmd while in jail.");
	if(HasJoined(playerid)) return ERR(playerid,"You can't change your class while in a clan war");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	new Float:HP;
	GetPlayerHealth(playerid,HP);
	if(HP < 50) return ERR(playerid, "Cannot use this cmd when you have less than 50HP.");
	if(PlayerInfo[playerid][InDuel]) return ERR(playerid, "Cannot use this cmd while duelling.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You are already in a DM stadium, use /qdm first.");
	if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
	if(!AntiSK[playerid])
	{

		if(PlayerInfo[playerid][OnDuty] == 1) cmd_adminduty(playerid);
		KillTimer(PlayerInfo[playerid][SL]);
		Iter_Add(ARENA[CHDM], playerid);
		Iter_Remove(ARENA[NON], playerid);
		SendClientMessageToAll(0xA448FFFF, "[CHDM ARENA] %s(%d) has joined Chainsaw deathmatch stadium * Total players: %d", PlayerInfo[playerid][Nick], playerid, CHDmCount());
		CheckDMPlayer(playerid);
		return 1;
	}
	SendClientMessage(playerid, RED,"You cannot join SDM while in AntiSK protection! Try again later");
	return 1;
}

CMD:cbdm(playerid, params[])
{
	if(!PlayerInfo[playerid][IsSpawned]) return ERR(playerid,"You have to be spawned to use this cmd");
	if(PlayerInfo[playerid][JailTime] > 0) return ERR(playerid, "Cannot use this cmd while in jail.");
	if(HasJoined(playerid)) return ERR(playerid,"You can't change your class while in a clan war");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	new Float:HP;
	GetPlayerHealth(playerid,HP);
	if(HP < 50) return ERR(playerid, "Cannot use this cmd when you have less than 50HP.");
	if(PlayerInfo[playerid][InDuel]) return ERR(playerid, "Cannot use this cmd while duelling.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You are already in CBDM stadium, use /qdm first.");
	if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
	if(!AntiSK[playerid])
	{

		if(PlayerInfo[playerid][OnDuty]) cmd_adminduty(playerid);
		KillTimer(PlayerInfo[playerid][SL]);
		Iter_Add(ARENA[CBDM], playerid);
		Iter_Remove(ARENA[NON], playerid);
		SendClientMessageToAll(0xA448FFFF, "[CBDM ARENA] %s(%d) has joined C-Bug deathmatch stadium * Total players: %d", PlayerInfo[playerid][Nick], playerid, CDmCount());
		TextDrawShowForPlayer(playerid, CBDM_Top[0]);
		TextDrawShowForPlayer(playerid, CBDM_Top[1]);
		TextDrawShowForPlayer(playerid, CBDM_Top[2]);
		TextDrawShowForPlayer(playerid, CBDM_Top[3]);
		CheckDMPlayer(playerid);
		return 1;
	}
	SendClientMessage(playerid, RED,"You cannot join CBDM while in AntiSK protection! Try again later");
	return 1;
}

CMD:hsdm(playerid, params[])
{
	if(!PlayerInfo[playerid][IsSpawned]) return ERR(playerid,"You have to be spawned to use this cmd");
	if(PlayerInfo[playerid][JailTime] > 0) return ERR(playerid, "Cannot use this cmd while in jail.");
	if(HasJoined(playerid)) return ERR(playerid,"You can't change your class while in a clan war");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	new Float:HP;
	GetPlayerHealth(playerid,HP);
	if(HP < 50) return ERR(playerid, "Cannot use this cmd when you have less than 50HP.");
	if(PlayerInfo[playerid][InDuel]) return ERR(playerid, "Cannot use this cmd while duelling.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You are already in Headshot-Only stadium, use /qdm first.");
	if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
	if(!AntiSK[playerid])
	{
		if(PlayerInfo[playerid][OnDuty]) cmd_adminduty(playerid);
		KillTimer(PlayerInfo[playerid][SL]);
		Iter_Add(ARENA[HSDM], playerid);
		Iter_Remove(ARENA[NON], playerid);
		SendClientMessageToAll(0xA448FFFF, "[HSDM ARENA] %s(%d) has joined Headshot-Only deathmatch stadium * Total players: %d", PlayerInfo[playerid][Nick], playerid, HSDmCount());
		CheckDMPlayer(playerid);
		return 1;
	}
	SendClientMessage(playerid, RED,"You cannot join CBDM while in AntiSK protection! Try again later");
	return 1;
}


CMD:apr(playerid, params[]) return cmd_aprogress(playerid, params);


CMD:aprogress(playerid, params[])
{
	if(sscanf(params,"d",achtarget[playerid])) return USG(playerid, "/aprogress [id]");
	if(!IsPlayerConnected(achtarget[playerid])) return SendClientMessage(playerid, RED,"Searched player is not connected.");
	ShowPlayerDialog(playerid, APROGRESS, DIALOG_STYLE_LIST, "Achievements Progress", "{BB6600}Bronze Achievements\n{B9BABA}Silver Achievements\n{EDC200}Gold Achievements", "Select", "Cancel");
	new tar = achtarget[playerid];
	SendClientMessage(playerid, -1, "Displaying %s Achievements Progress.", PlayerInfo[tar][Nick]);
	return true;
}

CMD:twitch(playerid)
{
	new strr[128];
    file_read("./././././var/www/html/results.txt", strr, sizeof(strr));
    file_read("/var/www/html/results.txt", strr, sizeof(strr));
    SendClientMessage(playerid, COLOR_YELLOW, "Twitch Viewers: %s", strr);
	return 1;
}

createachievementstextdraws(playerid)
{
	logotd[playerid] = CreatePlayerTextDraw(playerid,183+44.000000, 462.000000, "LD_DRV:goboat");
	PlayerTextDrawBackgroundColour(playerid,logotd[playerid] , 255);
	PlayerTextDrawFont(playerid,logotd[playerid] , TEXT_DRAW_FONT_SPRITE_DRAW);
	PlayerTextDrawLetterSize(playerid,logotd[playerid] , 0.520000, -0.699999);
	PlayerTextDrawColour(playerid,logotd[playerid] , -1);
	PlayerTextDrawSetOutline(playerid,logotd[playerid] , 0);
	PlayerTextDrawSetProportional(playerid,logotd[playerid] , 1);
	PlayerTextDrawSetShadow(playerid,logotd[playerid] , 1);
	PlayerTextDrawUseBox(playerid,logotd[playerid] , 1);
	PlayerTextDrawBoxColour(playerid,logotd[playerid] , -1);
	PlayerTextDrawTextSize(playerid,logotd[playerid] , 38.000000, 48.000000);

	achbox[playerid]  = CreatePlayerTextDraw(playerid,176+44.000000, 450.000000, "_");
	PlayerTextDrawBackgroundColour(playerid,achbox[playerid], 255);
	PlayerTextDrawFont(playerid,achbox[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,achbox[playerid], 0.210000, 7.399999);
	PlayerTextDrawColour(playerid,achbox[playerid], -1);
	PlayerTextDrawSetOutline(playerid,achbox[playerid], 0);
	PlayerTextDrawSetProportional(playerid,achbox[playerid], 1);
	PlayerTextDrawSetShadow(playerid,achbox[playerid], 1);
	PlayerTextDrawUseBox(playerid,achbox[playerid], 1);
	PlayerTextDrawBoxColour(playerid,achbox[playerid], 101);
	PlayerTextDrawTextSize(playerid,achbox[playerid], 393+44.000000, 17.000000);

	achtitle[playerid] = CreatePlayerTextDraw(playerid,298+44.000000, 467.000000, "Silver Achievement : No Fear Man");
	PlayerTextDrawAlignment(playerid,achtitle[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid,achtitle[playerid], 255);
	PlayerTextDrawFont(playerid,achtitle[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,achtitle[playerid], 0.180000, 1.000000);
	PlayerTextDrawColour(playerid,achtitle[playerid], -1);
	PlayerTextDrawSetOutline(playerid,achtitle[playerid], 0);
	PlayerTextDrawSetProportional(playerid,achtitle[playerid], 1);
	PlayerTextDrawSetShadow(playerid,achtitle[playerid], 1);

	achtext[playerid] = CreatePlayerTextDraw(playerid,298+44.000000, 491.000000, "Get 3 kills with sniper weapon");
	PlayerTextDrawAlignment(playerid,achtext[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid,achtext[playerid], 255);
	PlayerTextDrawFont(playerid,achtext[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid,achtext[playerid], 0.180000, 1.000000);
	PlayerTextDrawColour(playerid,achtext[playerid], -1);
	PlayerTextDrawSetOutline(playerid,achtext[playerid], 0);
	PlayerTextDrawSetProportional(playerid,achtext[playerid], 1);
	PlayerTextDrawSetShadow(playerid,achtext[playerid], 1);

	PlayerTextDrawShow(playerid,logotd[playerid]);
	PlayerTextDrawShow(playerid,achbox[playerid]);
	PlayerTextDrawShow(playerid,achtitle[playerid]);
	PlayerTextDrawShow(playerid,achtext[playerid]);

	return 1;
}

ShowKillTD(playerid, const str[17])
{
	KillTDShow[playerid] = true;
	TextDrawShowForPlayer(playerid, KillBOX1);
	TextDrawShowForPlayer(playerid, KillBOX2);
	PlayerTextDrawSetString(playerid, HSTD[playerid], str);
	PlayerTextDrawShow(playerid, HSTD[playerid]);
	KillTDTick[playerid] = GetTickCount() +2000;
	return 1;
}

HideKillsTD(playerid)
{
    KillTDShow[playerid] = false;
	TextDrawHideForPlayer(playerid, KillBOX1);
	TextDrawHideForPlayer(playerid, KillBOX2);
	PlayerTextDrawHide(playerid, HSTD[playerid]);
	PlayerPlaySound(playerid, 19801,0,0,0);
	return 1;
}

forward ShowToyList(playerid);
public ShowToyList(playerid)
{
	SendClientMessage(playerid,Lg,"Choose a toy");
	ShowModelSelectionMenu(playerid, toylist, "Select Toy");
	return 1;
}


//forward AntyVehHack();
//public AntyVehHack()
//{
//    foreach(new i : Player)
//    {
    //    if(!(2 <= GetPlayerState(i) <= 6)) RemovePlayerFromVehicle(i);
  //      if(GetPlayerCameraMode(i) == 18 && GetPlayerSpecialAction(i) == 3){
//	        SendClientMessage(i,0x33AA33AA,"You motherfucker!");
//	        new str[150];
//			format(str, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) was kicked for fake vehicle data.", PlayerInfo[i][Nick], i);
//			AntiCheatNotification(-1, str);
	    //    return KickX(i);
      //  }
    //}
  //  return true;
//}

forward StopAlarm(playerid);
public StopAlarm(playerid)
{
	PlayerPlaySound(playerid, 19801,0,0,0);
	return 1;
}

WeaponStatus(playerid, level)
{
	new str[256];
	strcat(str, "Weapon\tProgress\n");
	new tar = achtarget[playerid];
	switch(level)
	{
		case 1:
		{
			if(PlayerKills[tar][fist]>49) strcat(str, "Fist\tUnlocked\n");
			else format(str, _, "%sFist\t%d%%\n", str, PlayerKills[tar][fist]*100/50);
			if(PlayerKills[tar][m9]>49) strcat(str, "M9\tUnlocked\n");
			else format(str, _, "%sM9\t%d%%\n", str, PlayerKills[tar][m9]*100/50);
			if(PlayerKills[tar][sm9]>49) strcat(str, "Silenced\tUnlocked\n");
			else format(str, _, "%sSilenced\t%d%%\n", str, PlayerKills[tar][sm9]/50);
			if(PlayerKills[tar][ak47]>49) strcat(str, "AK47\tUnlocked\n");
			else format(str, _, "%sAK47\t%d%%\n", str, PlayerKills[tar][ak47]*100/50);
			if(PlayerKills[tar][m4]>49) strcat(str, "M4\tUnlocked\n");
			else format(str, _, "%sM4\t%d%%\n", str, PlayerKills[tar][m4]*100/50);
			if(PlayerKills[tar][rpg]>49) strcat(str, "RPG\tUnlocked\n");
			else format(str, _, "%sRPG\t%d%%\n", str, PlayerKills[tar][rpg]*100/50);
			if(PlayerKills[tar][satchel]>49) strcat(str, "Satchels\tUnlocked\n");
			else format(str, _, "%sSatchels\t%d%%\n", str, PlayerKills[tar][satchel]*100/50);
			if(PlayerKills[tar][grenade]>49) strcat(str, "Grenade\tUnlocked\n");
			else format(str, _, "%sGrenade\t%d%%\n", str, PlayerKills[tar][grenade]*100/50);
			if(PlayerKills[tar][knife]>49) strcat(str, "Knife\tUnlocked\n");
			else format(str, _, "%sKnife\t%d%%\n", str, PlayerKills[tar][knife]*100/50);
			if(PlayerKills[tar][chainsaw]>49) strcat(str, "Chainsaw\tUnlocked\n");
			else format(str, _, "%sChainsaw\t%d%%\n", str, PlayerKills[tar][chainsaw]*100/50);
			if(PlayerKills[tar][molotov]>49) strcat(str, "Molotov\tUnlocked\n");
			else format(str, _, "%sMolotov\t%d%%\n", str, PlayerKills[tar][molotov]*100/50);
			if(PlayerKills[tar][deagle]>49) strcat(str, "Deagle\tUnlocked\n");
			else format(str, _, "%sDeagle\t%d%%\n", str, PlayerKills[tar][deagle]*100/50);
			if(PlayerKills[tar][shotgun]>49) strcat(str, "Shotgun\tUnlocked\n");
			else format(str, _, "%sShotgun\t%d%%\n", str, PlayerKills[tar][shotgun]*100/50);
			if(PlayerKills[tar][sawnoff]>49) strcat(str, "Sawnoff\tUnlocked\n");
			else format(str, _, "%sSawnoff\t%d%%\n", str, PlayerKills[tar][sawnoff]*100/50);
			if(PlayerKills[tar][combat]>49) strcat(str, "Spaz\tUnlocked\n");
			else format(str, _, "%sSpaz\t%d%%\n", str, PlayerKills[tar][combat]*100/50);
			if(PlayerKills[tar][smg]>49) strcat(str, "SMG\tUnlocked\n");
			else format(str, _, "%sSMG\t%d%%\n", str, PlayerKills[tar][smg]*100/50);
			if(PlayerKills[tar][tec9]>49) strcat(str, "TEC9\tUnlocked\n");
			else format(str, _, "%sTEC9\t%d%%\n", str, PlayerKills[tar][tec9]*100/50);
			if(PlayerKills[tar][mp5]>49) strcat(str, "MP5\tUnlocked\n");
			else format(str, _, "%sMP5\t%d%%\n", str, PlayerKills[tar][mp5]*100/50);
			if(PlayerKills[tar][rifle]>49) strcat(str, "Rifle\tUnlocked\n");
			else format(str, _, "%sRifle\t%d%%\n", str, PlayerKills[tar][rifle]*100/50);
			if(PlayerKills[tar][sniper]>49) strcat(str, "Sniper\tUnlocked\n");
			else format(str, _, "%sSniper\t%d%%\n", str, PlayerKills[tar][sniper]*100/50);
		}
		case 0:
		{

			if(PlayerKills[tar][fist]>9) strcat(str, "Fist\tUnlocked\n");
			else format(str, _, "%sFist\t%d%%\n", str, PlayerKills[tar][fist]*100/10);
			if(PlayerKills[tar][m9]>9) strcat(str, "M9\tUnlocked\n");
			else format(str, _, "%sM9\t%d%%\n", str, PlayerKills[tar][m9]*100/10);
			if(PlayerKills[tar][sm9]>9) strcat(str, "Silenced\tUnlocked\n");
			else format(str, _, "%sSilenced\t%d%%\n", str, PlayerKills[tar][sm9]*100/10);
			if(PlayerKills[tar][ak47]>9) strcat(str, "AK47\tUnlocked\n");
			else format(str, _, "%sAK47\t%d%%\n", str, PlayerKills[tar][ak47]*100/10);
			if(PlayerKills[tar][m4]>9) strcat(str, "M4\tUnlocked\n");
			else format(str, _, "%sM4\t%d%%\n", str, PlayerKills[tar][m4]*100/10);
			if(PlayerKills[tar][rpg]>9) strcat(str, "RPG\tUnlocked\n");
			else format(str, _, "%sRPG\t%d%%\n", str, PlayerKills[tar][rpg]*100/10);
			if(PlayerKills[tar][satchel]>9) strcat(str, "Satchels\tUnlocked\n");
			else format(str, _, "%sSatchels\t%d%%\n", str, PlayerKills[tar][satchel]*100/10);
			if(PlayerKills[tar][grenade]>9) strcat(str, "Grenade\tUnlocked\n");
			else format(str, _, "%sGrenade\t%d%%\n", str, PlayerKills[tar][grenade]*100/10);
			if(PlayerKills[tar][knife]>9) strcat(str, "Knife\tUnlocked\n");
			else format(str, _, "%sKnife\t%d%%\n", str, PlayerKills[tar][knife]*100/10);
			if(PlayerKills[tar][chainsaw]>9) strcat(str, "Chainsaw\tUnlocked\n");
			else format(str, _, "%sChainsaw\t%d%%\n", str, PlayerKills[tar][chainsaw]*100/10);
			if(PlayerKills[tar][molotov]>9) strcat(str, "Molotov\tUnlocked\n");
			else format(str, _, "%sMolotov\t%d%%\n", str, PlayerKills[tar][molotov]*100/10);
			if(PlayerKills[tar][deagle]>9) strcat(str, "Deagle\tUnlocked\n");
			else format(str, _, "%sDeagle\t%d%%\n", str, PlayerKills[tar][deagle]*100/10);
			if(PlayerKills[tar][shotgun]>9) strcat(str, "Shotgun\tUnlocked\n");
			else format(str, _, "%sShotgun\t%d%%\n", str, PlayerKills[tar][shotgun]*100/10);
			if(PlayerKills[tar][sawnoff]>9) strcat(str, "Sawnoff\tUnlocked\n");
			else format(str, _, "%sSawnoff\t%d%%\n", str, PlayerKills[tar][sawnoff]*100/10);
			if(PlayerKills[tar][combat]>9) strcat(str, "Spaz\tUnlocked\n");
			else format(str, _, "%sSpaz\t%d%%\n", str, PlayerKills[tar][combat]*100/10);
			if(PlayerKills[tar][smg]>9) strcat(str, "SMG\tUnlocked\n");
			else format(str, _, "%sSMG\t%d%%\n", str, PlayerKills[tar][smg]*100/10);
			if(PlayerKills[tar][tec9]>9) strcat(str, "TEC9\tUnlocked\n");
			else format(str, _, "%sTEC9\t%d%%\n", str, PlayerKills[tar][tec9]*100/10);
			if(PlayerKills[tar][mp5]>9) strcat(str, "MP5\tUnlocked\n");
			else format(str, _, "%sMP5\t%d%%\n", str, PlayerKills[tar][mp5]*100/10);
			if(PlayerKills[tar][rifle]>9) strcat(str, "Rifle\tUnlocked\n");
			else format(str, _, "%sRifle\t%d%%\n", str, PlayerKills[tar][rifle]*100/10);
			if(PlayerKills[tar][sniper]>9) strcat(str, "Sniper\tUnlocked\n");
			else format(str, _, "%sSniper\t%d%%\n", str, PlayerKills[tar][sniper]*100/10);
		}
		case 2:
		{

			if(PlayerKills[tar][fist]>99) strcat(str, "Fist\tUnlocked\n");
			else format(str, _, "%sFist\t%d%%\n", str, PlayerKills[tar][fist]*100/100);
			if(PlayerKills[tar][m9]>99) strcat(str, "M9\tUnlocked\n");
			else format(str, _, "%sM9\t%d%%\n", str, PlayerKills[tar][m9]*100/100);
			if(PlayerKills[tar][sm9]>99) strcat(str, "Silenced\tUnlocked\n");
			else format(str, _, "%sSilenced\t%d%%\n", str, PlayerKills[tar][sm9]*100/100);
			if(PlayerKills[tar][ak47]>99) strcat(str, "AK47\tUnlocked\n");
			else format(str, _, "%sAK47\t%d%%\n", str, PlayerKills[tar][ak47]*100/100);
			if(PlayerKills[tar][m4]>99) strcat(str, "M4\tUnlocked\n");
			else format(str, _, "%sM4\t%d%%\n", str, PlayerKills[tar][m4]*100/100);
			if(PlayerKills[tar][rpg]>99) strcat(str, "RPG\tUnlocked\n");
			else format(str, _, "%sRPG\t%d%%\n", str, PlayerKills[tar][rpg]*100/100);
			if(PlayerKills[tar][satchel]>99) strcat(str, "Satchels\tUnlocked\n");
			else format(str, _, "%sSatchels\t%d%%\n", str, PlayerKills[tar][satchel]*100/100);
			if(PlayerKills[tar][grenade]>99) strcat(str, "Grenade\tUnlocked\n");
			else format(str, _, "%sGrenade\t%d%%\n", str, PlayerKills[tar][grenade]*100/100);
			if(PlayerKills[tar][knife]>99) strcat(str, "Knife\tUnlocked\n");
			else format(str, _, "%sKnife\t%d%%\n", str, PlayerKills[tar][knife]*100/100);
			if(PlayerKills[tar][chainsaw]>99) strcat(str, "Chainsaw\tUnlocked\n");
			else format(str, _, "%sChainsaw\t%d%%\n", str, PlayerKills[tar][chainsaw]*100/100);
			if(PlayerKills[tar][molotov]>99) strcat(str, "Molotov\tUnlocked\n");
			else format(str, _, "%sMolotov\t%d%%\n", str, PlayerKills[tar][molotov]*100/100);
			if(PlayerKills[tar][deagle]>99) strcat(str, "Deagle\tUnlocked\n");
			else format(str, _, "%sDeagle\t%d%%\n", str, PlayerKills[tar][deagle]*100/100);
			if(PlayerKills[tar][shotgun]>99) strcat(str, "Shotgun\tUnlocked\n");
			else format(str, _, "%sShotgun\t%d%%\n", str, PlayerKills[tar][shotgun]*100/100);
			if(PlayerKills[tar][sawnoff]>99) strcat(str, "Sawnoff\tUnlocked\n");
			else format(str, _, "%sSawnoff\t%d%%\n", str, PlayerKills[tar][sawnoff]*100/100);
			if(PlayerKills[tar][combat]>99) strcat(str, "Spaz\tUnlocked\n");
			else format(str, _, "%sSpaz\t%d%%\n", str, PlayerKills[tar][combat]*100/100);
			if(PlayerKills[tar][smg]>99) strcat(str, "SMG\tUnlocked\n");
			else format(str, _, "%sSMG\t%d%%\n", str, PlayerKills[tar][smg]*100/100);
			if(PlayerKills[tar][tec9]>99) strcat(str, "TEC9\tUnlocked\n");
			else format(str, _, "%sTEC9\t%d%%\n", str, PlayerKills[tar][tec9]*100/100);
			if(PlayerKills[tar][mp5]>99) strcat(str, "MP5\tUnlocked\n");
			else format(str, _, "%sMP5\t%d%%\n", str, PlayerKills[tar][mp5]*100/100);
			if(PlayerKills[tar][rifle]>99) strcat(str, "Rifle\tUnlocked\n");
			else format(str, _, "%sRifle\t%d%%\n", str, PlayerKills[tar][rifle]*100/100);
			if(PlayerKills[tar][sniper]>99) strcat(str, "Sniper\tUnlocked\n");
			else format(str, _, "%sSniper\t%d%%\n", str, PlayerKills[tar][sniper]*100/100);
		}
	}
	return str;
}
MissionStatus(playerid, level)
{
	new str[256];
	strcat(str, "Mission Achievement\tProgress\n");
	new tar = achtarget[playerid];
	switch(level)
	{

		case 0:
		{

			if(PlayerInfo[tar][ZCaptures]>49) strcat(str, "Zones Captured\tUnlocked\n");
			else format(str, _, "%sZones Captured\t%d%%\n", str, PlayerInfo[tar][ZCaptures]*100/50);
			if(PlayerInfo[tar][ZHelps]>49) strcat(str, "Zones Assists\tUnlocked\n");
			else format(str, _, "%sZones Assists\t%d%%\n", str, PlayerInfo[tar][ZHelps]*100/50);
			strcat(str, "Hostages Captured\tdisabled\n");
			strcat(str, "Hostages Assists\tdisabled\n");
			strcat(str, "Hostages Executed\tdisabled\n");
		}
		case 1:
		{

			if(PlayerInfo[tar][ZCaptures]>99) strcat(str, "Zones Captured\tUnlocked\n");
			else format(str, _, "%sZones Captured\t%d%%\n", str, PlayerInfo[tar][ZCaptures]*100/100);
			if(PlayerInfo[tar][ZHelps]>99) strcat(str, "Zones Assists\tUnlocked\n");
			else format(str, _, "%sZones Assists\t%d%%\n", str, PlayerInfo[tar][ZHelps]*100/100);
			strcat(str, "Hostages Captured\tdisabled\n");
			strcat(str, "Hostages Assists\tdisabled\n");
			strcat(str, "Hostages Executed\tdisabled\n");
		}
		case 2:
		{

			if(PlayerInfo[tar][ZCaptures]>499) strcat(str, "Zones Captured\tUnlocked\n");
			else format(str, _, "%sZones Captured\t%d%%\n", str, PlayerInfo[tar][ZCaptures]*100/500);
			if(PlayerInfo[tar][ZHelps]>499) strcat(str, "Zones Assists\tUnlocked\n");
			else format(str, _, "%sZones Assists\t%d%%\n", str, PlayerInfo[tar][ZHelps]*100/500);
			strcat(str, "Hostages Captured\tdisabled\n");
			strcat(str, "Hostages Assists\tdisabled\n");
			strcat(str, "Hostages Executed\tdisabled\n");
		}
	}
	return str;
}
StatsStatus(playerid, level)
{
	new str[256];
	strcat(str, "Stats Achievement\tProgress\n");
	new tar = achtarget[playerid];
	switch(level)
	{
		case 0:
		{
			if(PlayerInfo[tar][MCSpree]>9) strcat(str, "Max Zones Spree\tUnlocked\n");
			else format(str, _, "%sMax Zones Spree\t%d%%\n", str, PlayerInfo[tar][MCSpree]*100/10);
			if(PlayerInfo[tar][MHCSpree]>49) strcat(str, "Max Hostaging Spree\tdisabled\n");
			else format(str, _, "%sMax Hostaging Spree\tdisabled\n", str);
			if(PlayerInfo[tar][MKSpree]>9) strcat(str, "Max Kills Spree\tUnlocked\n");
			else format(str, _, "%sMax Kills Spree\t%d%%\n", str, PlayerInfo[tar][MKSpree]/50);
			if(PlayerInfo[tar][MDSpree]>9) strcat(str, "Max Deaths Spree\tUnlocked\n");
			else format(str, _, "%sMax Deaths Spree\t%d%%\n", str, PlayerInfo[tar][MDSpree]*100/10);
			if(PlayerInfo[tar][Deaths]>49) strcat(str, "Deaths\tUnlocked\n");
			else format(str, _, "%sDeaths\t%d%%\n", str, PlayerInfo[tar][Deaths]*100/50);
			if(PlayerInfo[tar][Kills]>99) strcat(str, "Kills\tUnlocked\n");
			else format(str, _, "%sKills\t%d%%\n", str, PlayerInfo[tar][Kills]*100/100);
		}
		case 1:
		{
			if(PlayerInfo[tar][MCSpree]>24) strcat(str, "Max Zones Spree\tUnlocked\n");
			else format(str, _, "%sMax Zones Spree\t%d%%\n", str, PlayerInfo[tar][MCSpree]*100/25);
			if(PlayerInfo[tar][MHCSpree]>49) strcat(str, "Max Hostaging Spree\tdisabled\n");
			else format(str, _, "%sMax Hostaging Spree\tdisabled\n", str);
			if(PlayerInfo[tar][MKSpree]>49) strcat(str, "Max Kills Spree\tUnlocked\n");
			else format(str, _, "%sMax Kills Spree\t%d%%\n", str, PlayerInfo[tar][MKSpree]/50);
			if(PlayerInfo[tar][MDSpree]>14) strcat(str, "Max Deaths Spree\tUnlocked\n");
			else format(str, _, "%sMax Deaths Spree\t%d%%\n", str, PlayerInfo[tar][MDSpree]*100/15);
			if(PlayerInfo[tar][Deaths]>99) strcat(str, "Deaths\tUnlocked\n");
			else format(str, _, "%sDeaths\t%d%%\n", str, PlayerInfo[tar][Deaths]*100/100);
			if(PlayerInfo[tar][Kills]>499) strcat(str, "Kills\tUnlocked\n");
			else format(str, _, "%sKills\t%d%%\n", str, PlayerInfo[tar][Kills]*100/500);
		}
		case 2:
		{
			if(PlayerInfo[tar][MCSpree]>49) strcat(str, "Max Zones Spree\tUnlocked\n");
			else format(str, _, "%sMax Zones Spree\t%d%%\n", str, PlayerInfo[tar][MCSpree]*100/50);
			if(PlayerInfo[tar][MHCSpree]>49) strcat(str, "Max Hostaging Spree\tdisabled\n");
			else format(str, _, "%sMax Hostaging Spree\tdisabled\n", str);
			if(PlayerInfo[tar][MKSpree]>100) strcat(str, "Max Kills Spree\tUnlocked\n");
			else format(str, _, "%sMax Kills Spree\t%d%%\n", str, PlayerInfo[tar][MKSpree]/100);
			if(PlayerInfo[tar][MDSpree]>19) strcat(str, "Max Deaths Spree\tUnlocked\n");
			else format(str, _, "%sMax Deaths Spree\t%d%%\n", str, PlayerInfo[tar][MDSpree]*100/20);
			if(PlayerInfo[tar][Deaths]>499) strcat(str, "Deaths\tUnlocked\n");
			else format(str, _, "%sDeaths\t%d%%\n", str, PlayerInfo[tar][Deaths]*100/500);
			if(PlayerInfo[tar][Kills]>1999) strcat(str, "Kills\tUnlocked\n");
			else format(str, _, "%sKills\t%d%%\n", str, PlayerInfo[tar][Kills]*100/2000);
		}
	}
	return str;
}
NewAchievement(playerid, typee, const title[50], const text[50])
{
	TextDrawHideForPlayer(playerid, TournamentTD);
	TextDrawHideForPlayer(playerid, TournamentTD2);
	switch(typee)
	{

		case 0:
		{

			achtype[playerid] = "LD_DRV:bronze";
			SendClientMessage(playerid, COLOR_PURPLE, "New Bronze Achievement Unlocked : +10 score and +10000$");
			SetPlayerScore(playerid, GetPlayerScore(playerid)+10);
			GiveCash(playerid, 10000);
		}
		case 1:
		{

			achtype[playerid] = "LD_DRV:silver";
			SendClientMessage(playerid, COLOR_PURPLE, "New Silver Achievement Unlocked : +20 score and +20000$");
			SetPlayerScore(playerid, GetPlayerScore(playerid)+20);
			GiveCash(playerid, 20000);
		}
		case 2:
		{

			achtype[playerid] = "LD_DRV:gold";
			SendClientMessage(playerid, COLOR_PURPLE, "New Gold Achievement Unlocked : +35 score and +35000$");
			SetPlayerScore(playerid, GetPlayerScore(playerid)+35);
			GiveCash(playerid, 35000);
		}
	}
	achtitlee[playerid] = title;
	achtexte[playerid] = text;
	achtdpos[playerid] = 0;
	SetTimerEx("NewAchTimer", 200, false, "d", playerid);
	PlayAudioStreamForPlayer(playerid, "http://bit.ly/2GYVJHd");
	AddClanPoints(playerid, 0);
	return 1;
}

forward NewAchTimer(playerid);
public NewAchTimer(playerid)
{
	if(!IsPlayerConnected(playerid))
	{

		PlayerTextDrawDestroy(playerid, logotd[playerid]);
		PlayerTextDrawDestroy(playerid, achtitle[playerid]);
		PlayerTextDrawDestroy(playerid, achtext[playerid]);
		PlayerTextDrawDestroy(playerid, achbox[playerid]);
		StopAudioStreamForPlayer(playerid);
		return 1;
	}
	achtdpos[playerid]++;
	if(achtdpos[playerid] < 36)
	{

		PlayerTextDrawDestroy(playerid, logotd[playerid]);
		PlayerTextDrawDestroy(playerid, achtitle[playerid]);
		PlayerTextDrawDestroy(playerid, achtext[playerid]);
		PlayerTextDrawDestroy(playerid, achbox[playerid]);

		new combien = achtdpos[playerid]*2;

		achbox[playerid]  = CreatePlayerTextDraw(playerid,176+44.000000, (450.000000-combien), "_");
		PlayerTextDrawBackgroundColour(playerid,achbox[playerid], 255);
		PlayerTextDrawFont(playerid,achbox[playerid], TEXT_DRAW_FONT_1);
		PlayerTextDrawLetterSize(playerid,achbox[playerid], 0.210000, 7.399999);
		PlayerTextDrawColour(playerid,achbox[playerid], -1);
		PlayerTextDrawSetOutline(playerid,achbox[playerid], 0);
		PlayerTextDrawSetProportional(playerid,achbox[playerid], 1);
		PlayerTextDrawSetShadow(playerid,achbox[playerid], 1);
		PlayerTextDrawUseBox(playerid,achbox[playerid], 1);
		PlayerTextDrawBoxColour(playerid,achbox[playerid], 101);
		PlayerTextDrawTextSize(playerid,achbox[playerid], 393+44.000000, 17.000000);

		achtitle[playerid] = CreatePlayerTextDraw(playerid,298+44.000000, (467.000000-combien), achtitlee[playerid]);
		PlayerTextDrawAlignment(playerid,achtitle[playerid], TEXT_DRAW_ALIGN_CENTRE);
		PlayerTextDrawBackgroundColour(playerid,achtitle[playerid], 255);
		PlayerTextDrawFont(playerid,achtitle[playerid], TEXT_DRAW_FONT_1);
		PlayerTextDrawLetterSize(playerid,achtitle[playerid], 0.180000, 1.000000);
		PlayerTextDrawColour(playerid,achtitle[playerid], -1);
		PlayerTextDrawSetOutline(playerid,achtitle[playerid], 0);
		PlayerTextDrawSetProportional(playerid,achtitle[playerid], 1);
		PlayerTextDrawSetShadow(playerid,achtitle[playerid], 1);

		logotd[playerid] = CreatePlayerTextDraw(playerid,183+44.000000, (462.000000-combien), achtype[playerid]);
		PlayerTextDrawBackgroundColour(playerid,logotd[playerid] , 255);
		PlayerTextDrawFont(playerid,logotd[playerid] , TEXT_DRAW_FONT_SPRITE_DRAW);
		PlayerTextDrawLetterSize(playerid,logotd[playerid] , 0.520000, -0.699999);
		PlayerTextDrawColour(playerid,logotd[playerid] , -1);
		PlayerTextDrawSetOutline(playerid,logotd[playerid] , 0);
		PlayerTextDrawSetProportional(playerid,logotd[playerid] , 1);
		PlayerTextDrawSetShadow(playerid,logotd[playerid] , 1);
		PlayerTextDrawUseBox(playerid,logotd[playerid] , 1);
		PlayerTextDrawBoxColour(playerid,logotd[playerid] , -1);
		PlayerTextDrawTextSize(playerid,logotd[playerid] , 38.000000, 48.000000);

		achtext[playerid] = CreatePlayerTextDraw(playerid,298+44.000000, (491.000000-combien), achtexte[playerid]);
		PlayerTextDrawAlignment(playerid,achtext[playerid], TEXT_DRAW_ALIGN_CENTRE);
		PlayerTextDrawBackgroundColour(playerid,achtext[playerid], 255);
		PlayerTextDrawFont(playerid,achtext[playerid], TEXT_DRAW_FONT_1);
		PlayerTextDrawLetterSize(playerid,achtext[playerid], 0.180000, 1.000000);
		PlayerTextDrawColour(playerid,achtext[playerid], -1);
		PlayerTextDrawSetOutline(playerid,achtext[playerid], 0);
		PlayerTextDrawSetProportional(playerid,achtext[playerid], 1);
		PlayerTextDrawSetShadow(playerid,achtext[playerid], 1);

		PlayerTextDrawShow(playerid,logotd[playerid]);
		PlayerTextDrawShow(playerid,achbox[playerid]);
		PlayerTextDrawShow(playerid,achtitle[playerid]);
		PlayerTextDrawShow(playerid,achtext[playerid]);
	}
	else if(achtdpos[playerid] == 75)
	{

		PlayerTextDrawDestroy(playerid, logotd[playerid]);
		PlayerTextDrawDestroy(playerid, achtitle[playerid]);
		PlayerTextDrawDestroy(playerid, achtext[playerid]);
		PlayerTextDrawDestroy(playerid, achbox[playerid]);
		StopAudioStreamForPlayer(playerid);
		if(tournamentshown[playerid])
		{
			TextDrawShowForPlayer(playerid, TournamentTD);
			TextDrawShowForPlayer(playerid, TournamentTD2);
		}
		return 1;
	}
	SetTimerEx("NewAchTimer", 200, false, "d", playerid);
	return 1;
}


AddClanPoints(playerid, typee)
{
	new x = PlayerInfo[playerid][InClan];
	if(x < 0) return 1;
	new str[120];
	strcat(str, PlayerInfo[playerid][Nick]);
	switch(typee)
	{
		case 0:
		{

			format(str, _, "CLAN POINTS: clan recieved 1 honor point for %s's achievement", str);
			ClanMSG(x, str);
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+1,`cathp`=`cathp`+1 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 1:
		{
			format(str, _, "CLAN POINTS: clan recieved 1 honor point for %s's killing spree", str);
			ClanMSG(x, str);
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+1,`cathp`=`cathp`+1 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 2:
		{
			format(str, _, "CLAN POINTS: clan recieved 1 honor point for %s's capturing spree", str);
			ClanMSG(x, str);
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+1,`cathp`=`cathp`+1 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 3:
		{
			ClanMSG(x, "CLAN POINTS: clan recieved 50 honor points for Protecting area 51");
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+50,`cathp`=`cathp`+50 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 4:
		{
			format(str, _, "CLAN POINTS: %s is on 10 killing spree (+2 Honor points)", str);
			ClanMSG(x, str);
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+2,`cathp`=`cathp`+2 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 5:
		{
			format(str, _, "CLAN POINTS: %s is on 10 Capturing spree (+1 Honor points)", str);
			ClanMSG(x, str);
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+1,`cathp`=`cathp`+1 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 6:
		{
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+2,`cathp`=`cathp`+2 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 7:
		{
			format(str, _, "CLAN POINTS: %s has killed 15 players with Airstrike (+3 Honor points)", str);
			ClanMSG(x, str);
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+3,`cathp`=`cathp`+3 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 8:
		{
			format(str, _, "CLAN POINTS: %s has killed 10 players with AMML (+10 Honor points)", str);
			ClanMSG(x, str);
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+10,`cathp`=`cathp`+10 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 9:
		{
			ClanMSG(x,"CLAN POINTS: clan recieved 90 honor points for Protecting area 51 (+40 Military Tent bonus)");
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+90,`cathp`=`cathp`+90 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 10:
		{
			ClanMSG(x,"CLAN POINTS: clan recieved 50 honor points for Protecting area 52");
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+50,`cathp`=`cathp`+50 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 11:
		{
			ClanMSG(x,"CLAN POINTS: clan recieved 90 honor points for Protecting area 52 (+40 Oil Platform bonus)");
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+90,`cathp`=`cathp`+90 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
		case 12:
		{
			ClanMSG(x,"CLAN POINTS: clan recieved 50 honor points for taking down a Zeppelin.");
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`+50,`cathp`=`cathp`+50 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, str);
		}
	}
	return 1;
}


forward GetCTTags(playerid);
public GetCTTags(playerid)
{
    new cc = cache_num_rows(), maxteams = CLAN_TOURNAMENT[CT_INITIAL_TEAMS];
	if(cc < maxteams)
	{
		SendClientMessage(playerid, Dred, "ERROR: You have a wrong clan ID, clan tournament has been canceled."); CLAN_TOURNAMENT[CT_ON] = false;
		foreach(new i : CT_TEAMS) {CT_TEAM[i] = -1;}
		Iter_Clear(CT_TEAMS);
		return 1;
	}
	new idd[8],gottag[8][6];
	for(new i =0; i < cc; i++)
	{
		cache_get_value_name(i,"ctag",gottag[i],6);
		cache_get_value_name_int(i,"cid", idd[i]);
	}
	for(new i=0; i < maxteams; i++)
	{
	    for(new j=0; j < maxteams; j++)
	    {
	    	if(CT_TEAM[i] == idd[j])
	    	{
	    	    strcopy(CT_TEAM_TAG[i], gottag[j]);
	    	}
	    }
	}
	new strr[342];
	new maxmembers = CLAN_TOURNAMENT[CT_MAX];
	new query[450];
    for(new i=0; i < 4; i++) strcopy(CT_SEMI_TAG[i], "?");
    strcopy(CT_FINALS_TAG[0], "?");
    strcopy(CT_FINALS_TAG[1], "?");
	if(maxteams == 4)
	{
		format(strr, _, "You have successfully created a clan tournament\n\nDetails:\n\n\nMax Teams:%d\nMax Team Members:%d\n\nTeams:\n >%s\n>%s\n>%s\n>%s", maxteams, maxmembers, CT_TEAM_TAG[0], CT_TEAM_TAG[1], CT_TEAM_TAG[2], CT_TEAM_TAG[3]);
        CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CT_TEAM[0];
        CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CT_TEAM[2];
        CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CT_TEAM[1];
        CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CT_TEAM[3];
        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_TEAM_TAG[0], CT_TEAM_TAG[2]);
        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_TEAM_TAG[1], CT_TEAM_TAG[3]);
		CLAN_TOURNAMENT[CT_QUARTER_TEAM1][0] = CLAN_TOURNAMENT[CT_QUARTER_TEAM1][1] = CLAN_TOURNAMENT[CT_QUARTER_TEAM1][2] = CLAN_TOURNAMENT[CT_QUARTER_TEAM1][3] =
		CLAN_TOURNAMENT[CT_QUARTER_TEAM2][0] = CLAN_TOURNAMENT[CT_QUARTER_TEAM2][1] = CLAN_TOURNAMENT[CT_QUARTER_TEAM2][2] = CLAN_TOURNAMENT[CT_QUARTER_TEAM2][3] =
		CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_TOURNAMENT[CT_WINNER] = -1;
/*
        format(str, _, "%s - %s", CT_TEAM_TAG[0], CT_TEAM_TAG[4]);
        TextDrawSetString(CT_QUARTER[0], str);
        format(str, _, "%s - %s", CT_TEAM_TAG[1], CT_TEAM_TAG[5]);
        TextDrawSetString(CT_QUARTER[1], str);
        format(str, _, "%s - %s", CT_TEAM_TAG[2], CT_TEAM_TAG[6]);
        TextDrawSetString(CT_QUARTER[2], str);
        format(str, _, "%s - %s", CT_TEAM_TAG[3], CT_TEAM_TAG[7]);
        TextDrawSetString(CT_QUARTER[3], str);*/

        new cttg[4][7];
		for(new i=0;i < 4; i++)
		{
		    strcopy(cttg[i], CT_TEAM_TAG[i]);
		}
		mysql_format(mysql, query, sizeof(query), "INSERT INTO `tournament` (`PHASE`,`IT`,`MAX`,`ST1_0`,`ST1_1`,`ST2_0`,`ST2_1`,`STAG_0`,`STAG_1`,`STAG_2`,`STAG_3`) VALUES ('1','4','%d','%d','%d','%d','%d','%e','%e','%e','%e')", maxmembers,CT_TEAM[0],CT_TEAM[1],CT_TEAM[2],CT_TEAM[3],cttg[0],cttg[1],cttg[2],cttg[3]);
		mysql_tquery(mysql, query);
	}
	else
	{
		format(strr, _, "You have successfully created a clan tournament\n\nDetails:\n\n\nMax Teams:%d\nMax Team Members:%d\n\nTeams:\n >%d\n>%s\n>%s\n>%s\n>%d\n>%s\n>%s\n>%s", maxteams, maxmembers, CT_TEAM_TAG[0],CT_TEAM_TAG[1],CT_TEAM_TAG[2],CT_TEAM_TAG[3],CT_TEAM_TAG[4],CT_TEAM_TAG[5],CT_TEAM_TAG[6],CT_TEAM_TAG[7]);
        CLAN_TOURNAMENT[CT_QUARTER_TEAM1][0] = CT_TEAM[0];
        CLAN_TOURNAMENT[CT_QUARTER_TEAM2][0] = CT_TEAM[4];
        CLAN_TOURNAMENT[CT_QUARTER_TEAM1][1] = CT_TEAM[1];
        CLAN_TOURNAMENT[CT_QUARTER_TEAM2][1] = CT_TEAM[5];
        CLAN_TOURNAMENT[CT_QUARTER_TEAM1][2] = CT_TEAM[2];
        CLAN_TOURNAMENT[CT_QUARTER_TEAM2][2] = CT_TEAM[6];
        CLAN_TOURNAMENT[CT_QUARTER_TEAM1][3] = CT_TEAM[3];
        CLAN_TOURNAMENT[CT_QUARTER_TEAM2][3] = CT_TEAM[7];
        TextDrawSetString(CT_QUARTER[0], "%s - %s", CT_TEAM_TAG[0], CT_TEAM_TAG[4]);
        TextDrawSetString(CT_QUARTER[1], "%s - %s", CT_TEAM_TAG[1], CT_TEAM_TAG[5]);
        TextDrawSetString(CT_QUARTER[2], "%s - %s", CT_TEAM_TAG[2], CT_TEAM_TAG[6]);
        TextDrawSetString(CT_QUARTER[3], "%s - %s", CT_TEAM_TAG[3], CT_TEAM_TAG[7]);
		CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] =
		CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] =
		CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_TOURNAMENT[CT_WINNER] = -1;
        new cg[8][7], cd[8];
		for(new i=0;i < 8; i++)
		{
		    strcopy(cg[i], CT_TEAM_TAG[i]);
		    cd[i] = CT_TEAM[i];
		}
		mysql_format(mysql, query, sizeof(query), "INSERT INTO `tournament` (`PHASE`,`IT`,`MAX`,`QT1_0`,`QT1_1`,`QT1_2`,`QT1_3`,`QT2_0`,`QT2_1`,`QT2_2`,`QT2_3`,`TTAG_0`,`TTAG_1`,`TTAG_2`,`TTAG_3`,`TTAG_4`,`TTAG_5`,`TTAG_6`,`TTAG_7`) VALUES ('0','8','%d','%d','%d','%d','%d','%d','%d','%d','%d','%e','%e','%e','%e','%e','%e','%e','%e')", maxmembers,cd[0],cd[1],cd[2],cd[3],cd[4],cd[5],cd[6],cd[7],cg[0],cg[1],cg[2],cg[3],cg[4],cg[5],cg[6],cg[7]);
		mysql_tquery(mysql, query);
	}
	ShowPlayerDialog(playerid, MAKECT7_DIALOG, DIALOG_STYLE_MSGBOX, "Clan Tournament Creator: Done", strr, "ok", "");
	return 1;
}

CMD:setclanpoint(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 8) return ERRR(playerid,8);
	new id,pt;
	if(sscanf(params,"dd",id,pt)) return USG(playerid,"/Setclanpoint (clanid) (points)");
	if(pt < 0) return ERR(playerid,"Invalid Clan points");
	new query[96];
	mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `chpoints` = '%d' WHERE `cid`='%d' LIMIT 1", pt, id);
	mysql_tquery(mysql, query, "OnSetClanPoint", "idd", playerid, id, pt);
	return 1;
}

forward OnSetClanPoint(playerid, clanid, points);
public OnSetClanPoint(playerid, clanid, points)
{
	SendClientMessage(playerid,Lg,"You have set clan id %d honor points to %d",clanid,points);
	return 1;
}

CMD:csetowner(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 8) return ERRR(playerid,8);
	new id,name[24];
	if(sscanf(params,"ds[24]",id,name)) return USG(playerid,"/csetowner (clanid) (new owner)");
	if(strlen(name) < 2 || strlen(name) > 24) return ERR(playerid,"Invalid name length");
	if(id < 0) return ERR(playerid,"Invalid Clan ID");
	new query[107];
	mysql_format(mysql, query, sizeof(query),"SELECT `id` FROM `playerbase` WHERE `name` = '%e' LIMIT 1", name);
	mysql_pquery(mysql, query, "OnSetOwnerCheck", "isd", playerid, name, id);
	return 1;
}

forward OnSetOwnerCheck(playerid, name[24], clanid);
public OnSetOwnerCheck(playerid, name[24], clanid)
{
	if(cache_num_rows()>0)
	{

		new query[120];
		mysql_format(mysql, query, sizeof(query),"UPDATE `playerbase` SET `clanown` = -1 WHERE `clanown` = '%d' LIMIT 1", clanid);
		mysql_tquery(mysql, query);
		mysql_format(mysql, query, sizeof(query),"UPDATE `clans` SET `cowner` = '%e' WHERE `cid`= %d LIMIT 1", name,clanid);
		mysql_tquery(mysql, query);
		mysql_format(mysql, query, sizeof(query),"UPDATE `playerbase` SET `clanown` = '%d' WHERE `name`= '%e' LIMIT 1", clanid, name);
		mysql_tquery(mysql, query);
		SendClientMessage(playerid, Lg, "You have set %s as owner for clan id %d", name, clanid);
		return 1;
	}
	else return SendClientMessage(playerid, RED, "New owner not found.");
}

CMD:csetkills(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 8) return ERRR(playerid,8);
	new id,pt;
	if(sscanf(params,"dd",id,pt)) return USG(playerid,"/csetkills (clanid) (kills)");
	if(pt < 0) return ERR(playerid,"Invalid Clan kills");
	new query[200];
	mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `ckills` = '%d' WHERE `cid`='%d' LIMIT 1", pt, id);
	mysql_tquery(mysql, query, "OnSetClanKills", "idd", playerid, id, pt);
	return 1;
}

forward OnSetClanKills(playerid, clanid, kills);
public OnSetClanKills(playerid, clanid, kills)
{
	SendClientMessage(playerid,Lg,"You have set clan id %d kills to %d",clanid,kills);
}

CMD:csetdeaths(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 8) return ERRR(playerid,8);
	new id,pt;
	if(sscanf(params,"dd",id,pt)) return USG(playerid,"/csetdeaths (clanid) (deaths)");
	if(pt < 0) return ERR(playerid,"Invalid Clan deaths");
	new query[200];
	mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `cdeaths` = '%d' WHERE `cid`='%d' LIMIT 1", pt, id);
	mysql_tquery(mysql, query, "OnSetClanDeaths", "idd", playerid, id, pt);
	return 1;
}

forward OnSetClanDeaths(playerid, clanid, deaths);
public OnSetClanDeaths(playerid, clanid, deaths)
{
	SendClientMessage(playerid,Lg,"You have set clan id %d deaths to %d",clanid,deaths);
	return 1;
}

CMD:cremove(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 8) return ERRR(playerid,8);
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/cremove (clanid)");
	new query[256];
	mysql_format(mysql, query, sizeof(query), "DELETE FROM `clans` WHERE `cid` ='%d' LIMIT 1", id);
	mysql_tquery(mysql, query);
	mysql_format(mysql, query, sizeof(query), "UPDATE `playerbase` SET `inclan` = '-1' , `clanlead` ='-1' , `clanown` = '-1' WHERE `inclan` ='%d' LIMIT 1", id);
	mysql_tquery(mysql, query);
	foreach(new i : Player)
	{
		if(PlayerInfo[i][InClan] == id)
		{
			SendClientMessage(playerid, Dred, "Your clan has been deleted by an admin");
			PlayerInfo[playerid][InClan] = -1;
			PlayerInfo[playerid][ClanLead] = -1;
			PlayerInfo[playerid][ClanOwn] = -1;
			PlayerInfo[playerid][ClanCoOwn] = -1;
			cName[playerid][0] = EOS;
			cLevel[playerid] = 0;
			PlayerInfo[playerid][CR] = PlayerInfo[playerid][CRP] = 0;
			cTag[playerid][0] = EOS;
			cRankName[playerid][0] = EOS;
		}
	}
	SendClientMessage(playerid,Lg,"Clan id %d Removed From database (if it ever exists)",id);
	return 1;
}

CMD:csetlevel(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 8) return ERRR(playerid,8);
	new id,pt;
	if(sscanf(params,"dd",id,pt)) return USG(playerid,"/csetlevel (clanid) (lvl)");
	if(pt < 0 || pt > 6) return ERR(playerid,"Invalid Clan level (1 - 6)");
	new query[200];
	foreach(new i : Player) if(PlayerInfo[i][InClan] == id) cLevel[i] = pt;
	mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `clevel` = '%d' WHERE `cid`='%d' LIMIT 1", pt, id);
	mysql_tquery(mysql, query, "OnSetClanLevel", "idd", playerid, id, pt);
	return 1;
}

forward OnSetClanLevel(playerid, clanid, level);
public OnSetClanLevel(playerid, clanid, level)
{
	SendClientMessage(playerid,Lg,"You have set clan id %d level to %d",clanid,level);
	return 1;
}

CMD:csetskin(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 8) return ERRR(playerid,8);
	new id,pt;
	if(sscanf(params,"dd",id,pt)) return USG(playerid,"/csetskin (clanid) (skin)");
	if(!IsValidSkin(pt)) return ERR(playerid,"Invalid Clan skin");
	new query[200];
	mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `cskin` = '%d' WHERE `cid`='%d' LIMIT 1", pt, id);
	mysql_tquery(mysql, query, "OnSetClanSkin", "idd", playerid, id, pt);
	return 1;
}

forward OnSetClanSkin(playerid, clanid, skin);
public OnSetClanSkin(playerid, clanid, skin)
{
	SendClientMessage(playerid,Lg,"You have set clan id %d skin to %d",clanid,skin);
	return 1;
}

CMD:csettag(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 8) return ERRR(playerid,8);
	new id,pt[4];
	if(sscanf(params,"ds[4]",id,pt)) return USG(playerid,"/csettag (clanid) (tag)");
	if(strlen(pt) < 2 || strlen(pt) > 5) return ERR(playerid,"Invalid Clan tag");
	new query[200];
	mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `ctag` = '%e' WHERE `cid`='%d' LIMIT 1", pt, id);
	mysql_tquery(mysql, query, "OnSetClanTag", "ids", playerid, id, pt);
	return 1;
}

forward OnSetClanTag(playerid, clanid, tag[5]);
public OnSetClanTag(playerid, clanid, tag[5])
{
	SendClientMessage(playerid,Lg,"You have set clan id %d tag to %s",clanid,tag);
	return 1;
}

CMD:csetname(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 8) return ERRR(playerid,8);
	new id,pt[20];
	if(sscanf(params,"ds[20]",id,pt)) return USG(playerid,"/csetname (clanid) (name)");
	if(strlen(pt) < 2 || strlen(pt) > 20) return ERR(playerid,"Invalid Clan name");
	new query[200];
	mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `cname` = '%e' WHERE `cid`='%d' LIMIT 1", pt, id);
	mysql_tquery(mysql, query, "OnSetClanName", "ids", playerid, id, pt);
	return 1;
}

forward OnSetClanName(playerid, clanid, newname[20]);
public OnSetClanName(playerid, clanid, newname[20])
{
	if(cache_num_rows()>0)
	{

		new name[20];
		cache_get_value_name(0, "cname", name);
		SendClientMessage(playerid,Lg,"You have set clan id %d ( %s ) name to %s",clanid,name,newname);
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Specified clanid was not found in the database.");
}

//pubg event loot

ReloadPUBGLoot()
{
	foreach(new i : PUBGIterator)
	{
        DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        PUBGLootObj[i][ObjID] = -1;
        DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
	}
	Iter_Clear(PUBGIterator);
    mysql_pquery(mysql,"SELECT `x`, `y`, `z` FROM `pubgpickups`", "LoadEventLootCoords", "");
	return 1;
}

forward LoadEventLootCoords();
public LoadEventLootCoords()
{
	new cc = cache_num_rows();
	new Float:xx,Float:yy,Float:zz, type, tag[36];
	for(new i =0; i < cc; i++)
	{
		cache_get_value_name_float(i,"x", xx);
		PUBGLootObj[i][SpawnX] = xx;
		cache_get_value_name_float(i,"y", yy);
		PUBGLootObj[i][SpawnY] = yy;
		cache_get_value_name_float(i,"z", zz);
		PUBGLootObj[i][SpawnZ] = zz;
		Iter_Add(PUBGIterator, i);
		switch(random(100))
		{
		    case 0..4: 		{ type = LOOT_ARMOUR; 		tag = "Armour"; 				}
		    case 5..8: 		{ type = LOOT_MEDKIT; 		tag = "Medkit"; 				}
		    case 9..17: 	{ type = LOOT_SNIPER; 		tag = "Sniper"; 				}
		    case 18..30: 	{ type = LOOT_DEAGLE; 		tag = "Deagle"; 				}
		    case 31..50: 	{ type = LOOT_SHOTGUN; 		tag = "Shotgun";			 	}
		    case 51..70: 	{ type = LOOT_MP5;     	 	tag = "MP5"; 					}
		    case 71..80: 	{ type = LOOT_M4;    		tag = "M16A4"; 					}
		    case 81..88: 	{ type = LOOT_RIFLE; 		tag = "KAR98K"; 				}
		    case 89..92: 	{ type = LOOT_GRENADE; 		tag = "Grenade"; 				}
		    case 93..96: 	{ type = LOOT_MOLOTOV; 		tag = "Molotov"; 				}
		    case 97..99: 	{ type = LOOT_SILENCED; 	tag = "Pistol w/ Suppressor"; 	}
		}
		strcat(tag, "\n\nF to pickup");
		PUBGLootObj[i][ObjType] = type;
	    PUBGLootObj[i][ObjID] = CreateDynamicObject(type,xx,yy,zz,0,0,0, 500, 0);
        PUBGLootObj[i][ObjIDLabel] = CreateDynamic3DTextLabel(tag, 0xFFFF00AA, xx, yy, zz-0.1, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 500, 0,-1, 20.0 );
	}
	return 1;
}
//

forward ClanMemberStats(playerid);
public ClanMemberStats(playerid)
{
    new cname[24], crank, claston[25], cvip, ckills, cdeaths, cXP, cscore;

	cache_get_value_name(0,"name",cname,24);
	cache_get_value_name(0,"laston",claston,25);
	cache_get_value_name_int(0,"crank", crank);
	cache_get_value_name_int(0,"vip", cvip);
	cache_get_value_name_int(0,"kills", ckills);
	cache_get_value_name_int(0,"deaths", cdeaths);
	cache_get_value_name_int(0,"XP", cXP);
	cache_get_value_name_int(0,"score", cscore);

	new header[50];
	format(header, _, "{C71CFF}Stats of {0094FF}%s", cname);
	ShowPlayerDialog(playerid, DIALOG_CMEMBERSSTATS, DIALOG_STYLE_MSGBOX, header, "\n{C71CFF}Last On: {0094FF}%s\n{C71CFF}Kills: {0094FF}%d\n{C71CFF}Deaths: {0094FF}%d\n{C71CFF}Score: {0094FF}%d\n{C71CFF}XP: {0094FF}%d\n{C71CFF}Clan Rank: {0094FF}%d\n{C71CFF}VIP Level: {0094FF}%d", "Back", "", claston, ckills, cdeaths, cscore, cXP, crank, cvip);

	return 1;
}

forward FriendStats(playerid);
public FriendStats(playerid)
{
    new cname[24], claston[25], cvip, ckills, cdeaths, cXP, cscore;

	cache_get_value_name(0,"name",cname,24);
	cache_get_value_name(0,"laston",claston,25);
	cache_get_value_name_int(0,"vip", cvip);
	cache_get_value_name_int(0,"kills", ckills);
	cache_get_value_name_int(0,"deaths", cdeaths);
	cache_get_value_name_int(0,"XP", cXP);
	cache_get_value_name_int(0,"score", cscore);
	new header[50];
	format(header, sizeof header, "{C71CFF}Stats of {0094FF}%s",cname);
	ShowPlayerDialog(playerid, DIALOG_FRIENDSTATS, DIALOG_STYLE_MSGBOX, header, "\n{C71CFF}Last On: {0094FF}%s\n{C71CFF}Kills: {0094FF}%d\n{C71CFF}Deaths: {0094FF}%d\n{C71CFF}Score: {0094FF}%d\n{C71CFF}XP: {0094FF}%d\n{C71CFF}VIP Level: {0094FF}%d", "OK", "Back", claston, ckills, cdeaths, cscore, cXP, cvip);
	return 1;
}

forward OnTopCheckThree();
public OnTopCheckThree()
{
	new top[25], ddmz,str[250];
	new cc = cache_num_rows();
	for(new i =0; i < cc; i++)
	{

		cache_get_value_name(i,"name",top,25);
		cache_get_value_name_int(i,"dcbdm", ddmz);
		format(str, _, "%s-%s - %d~n~", str, top, ddmz);
	}
	TextDrawSetString(CBDM_Top[3], str);
}
forward OnTopCheckTwo();
public OnTopCheckTwo()
{
	new top[25], ddmz,str[250];
	new cc = cache_num_rows();
	for(new i =0; i < cc; i++)
	{

		cache_get_value_name(i,"name",top);
		cache_get_value_name_int(i,"dsdm", ddmz);
		format(str, _, "%s-%s - %d~n~", str, top, ddmz);
	}
	TextDrawSetString(DSDM_Top[3], str);
}
forward OnTopCheck();
public OnTopCheck()
{
	new top[25], ddmz,str[250];
	new cc = cache_num_rows();
	for(new i =0; i < cc; i++)
	{

		cache_get_value_name(i,"name",top,25);
		cache_get_value_name_int(i,"ddm", ddmz);
		format(str, _, "%s-%s - %d~n~", str, top, ddmz);
	}
	TextDrawSetString(DM_Top[3], str);
}

forward Area();
public Area()
{
	new bb = tCP[BIG], gg = tCP[MT];
	foreach(new i : ARENA[NON])
	{
	    new team = GetPlayerTeam(i);
		new x = PlayerInfo[i][InClan];
		if(bb == team)
		{
			if(x == AreaClan)
			{
				if(x != -1)
				{
					if(IsPlayerInArea(i, -46.875,1697.265625,423.828125,2115.234375))
					{
						if(gg == team) AddClanPoints(i, 9);
						else AddClanPoints(i, 3);
						foreach(new ll: Player)
						{
						    if(PlayerInfo[ll][InClan] == x)
						    {
								AreaProtects[ll] ++;
								if(QuestContent[4] == CONTENT_A51PROTECT)
								{
								    QuestProgress[ll][4] ++;
								    if(AreaProtects[ll] == 10)
									{
								    	if(!Bit_Get(QuestDone[ll], 4))
								    	{
								    	    Bit_Let(QuestDone[ll], 4);
								    	    SendClientMessage(ll, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
								    	    TextDrawHideForPlayer(ll,Quest[4]);
								    	    PlayerInfo[ll][XP] += 100;
								    	    GiveCash(ll, 50000);
								    	}
									}
								}
							}
						}
						SendClientMessageToAll(COLOR_BLUE, "Clan %s got at least 50 honor points for securing Area 51", cName[i]);
						break;
					}
				}
			}
		}
	}
	return 1;
}

forward Area2();
public Area2()
{
	new bb = tCP[A52], gg = tCP[OPP];
	foreach(new i : ARENA[NON])
	{
		new x = PlayerInfo[i][InClan], team = GetPlayerTeam(i);
		if(bb == team)
		{
			if(x == AreaClan2)
			{
				if(x != -1)
				{
					if(IsPlayerInArea(i, -2649.850, 2190.971, -2159.175, 2486.162))
					{
					    if(gg == team) AddClanPoints(i, 11);
						else AddClanPoints(i, 10);
						SendClientMessageToAll(COLOR_BLUE, "Clan %s got at least 50 honor points for securing Area 52.", cName[i]);
						break;
					}
				}
			}
		}
	}
	return 1;
}

ReloadQuests()
{
	new q0,q1,q2,q3,q4;
	QuestContent[0] = q0 = random(4);
	QuestContent[1] = q1 = random(7);
	QuestContent[2] = q2 = random(7);
	QuestContent[3] = q3 = random(5);
	QuestContent[4] = q4 = random(6);
	switch(q0)
	{
	    case CONTENT_ZCAPTURE: TextDrawSetString(Quest[0],"Capture 20 zones.");
	    case CONTENT_ZASSIST: TextDrawSetString(Quest[0],"Make 15 zone capture assists.");
	    case CONTENT_ZPREVENT: TextDrawSetString(Quest[0],"Prevent 10 enemies from capturing.");
	    case CONTENT_ZSPREE: TextDrawSetString(Quest[0],"Make a 15 zone capture spree.");
	}
	switch(q1)
	{
	    case CONTENT_HEADSHOT: TextDrawSetString(Quest[1],"Make 45 headshots.");
	    case CONTENT_KASSIST: TextDrawSetString(Quest[1],"Make 30 kill assists.");
	    case CONTENT_M4KILLS: TextDrawSetString(Quest[1],"Make 35 M4 kills.");
	    case CONTENT_SPAZKILLS: TextDrawSetString(Quest[1],"Make 40 Spaz Shotgun kills.");
	    case CONTENT_BASEKILL: TextDrawSetString(Quest[1],"Kill 23 enemies in their bases.");
	    case CONTENT_VKILL: TextDrawSetString(Quest[1],"Kill 15 drivers/passengers.");
	    case CONTENT_HVKILL: TextDrawSetString(Quest[1],"Kill 10 heavy vehicles drivers.");
	}
	switch(q2)
	{
	    case CONTENT_BACKSTAB: TextDrawSetString(Quest[2],"Backstab 50 enemies (Spy).");
	    case CONTENT_DETONATE: TextDrawSetString(Quest[2],"/detonate 21 enemies (Demolisher).");
	    case CONTENT_HEAL: TextDrawSetString(Quest[2],"/heal 16 teammates.");
	    case CONTENT_ASSAULT: TextDrawSetString(Quest[2],"Kill 36 enemies (Assault).");
	    case CONTENT_TOXIC: TextDrawSetString(Quest[2],"Kill 19 enemies with Toxic Plane.");
	    case CONTENT_RBOMBS: TextDrawSetString(Quest[2],"Kill 23 enemies with Rustler Bombs.");
	    case CONTENT_FBANG: TextDrawSetString(Quest[2],"Flash 25 enemies (Scout/JetTrooper).");
	}
	switch(q3)
	{
	    case CONTENT_RACS: TextDrawSetString(Quest[3],"Make 12 RACS kills.");
	    case CONTENT_AAML: TextDrawSetString(Quest[3],"Make 17 AAML kills.");
	    case CONTENT_DBOOST: TextDrawSetString(Quest[3],"/DBoost 50 teammates.");
	    case CONTENT_KVIPS: TextDrawSetString(Quest[3],"Kill other VIPs 15 times.");
	    case CONTENT_KVEHICLES: TextDrawSetString(Quest[3],"Destroy 10 enemy vehicles.");
	}
	switch(q4)
	{
	    case CONTENT_A51PROTECT: TextDrawSetString(Quest[4],"Protect Area51 10 times.");
	    case CONTENT_ZCLANASSIST: TextDrawSetString(Quest[4],"Assist 10 captures with your clan.");
	    case CONTENT_CWWIN: TextDrawSetString(Quest[4],"Win 7 clan wars.");
	    case CONTENT_CWJOIN: TextDrawSetString(Quest[4],"Participate in 14 clan wars.");
	    case CONTENT_CHEAL: TextDrawSetString(Quest[4],"/Heal 10 clan members.");
	}
	return 1;
}

SpreadGas(Float:meters) return SetTimerEx("SpreadGasT", 500, false, "f", meters);

forward SpreadGasT(Float:meters);
public SpreadGasT(Float:meters)
{
	if(!PUBGLaunched) return 1;
 	PUBGCircleFloat[2] -= MeterPlier;
	new Float:x = PUBGCircleFloat[0], Float:y = PUBGCircleFloat[1], Float:r = PUBGCircleFloat[2];
	GZ_ShapeDestroy(PUBGCircle);
	PUBGCircle = GZ_ShapeCreate(CIRCLE, x, y, r);
	GZ_ShapeShowForAll(PUBGCircle, 0x00FF0084);
	meters -= MeterPlier;
	if(meters < 1.0) return 1;
	else return SetTimerEx("SpreadGasT", 500, false, "f", meters);
}

Float:GetPointDistanceToPoint(Float:x1,Float:y1,Float:x2,Float:y2)
{
  new Float:x, Float:y;
  x = x1-x2;
  y = y1-y2;
  return floatsqroot(x*x+y*y);
}

IsPlayerBot(playerid)
{
    new TempId[80], TempNumb;
    GPCI(playerid, TempId, sizeof(TempId));
    for(new i = 0; i < strlen(TempId); i++)
    {
        if(TempId[i] >= '0' && TempId[i] <= '9')  TempNumb++;
    }
    return (TempNumb >= 30 || strlen(TempId) <= 30) ? true : false;
}

forward AirTimer();
public AirTimer()
{
    if(AirON)
	{
	    new secss = AirSecs - (GetTickCount()/1000);
	    new msg[28];
	    format(msg, _, "Nuke\nCooldown: %d seconds", secss);
	    UpdateDynamic3DTextLabelText(Nuke3D, 0xFF0000FF, msg);
	    if(secss < 0)
		{
			AirON = 0;
			UpdateDynamic3DTextLabelText(Nuke3D, 0x00FF54FF, "Nuke\nReady");
			return 1;
		}
		SetTimer("AirTimer", 1000, false);
	}
	return 1;
}

forward Air2Timer();
public Air2Timer()
{
    if(Air2ON)
	{
	    new secss = Air2Secs - (GetTickCount()/1000);
	    new msg[34];
	    format(msg, _, "Space Nuke\nCooldown: %d seconds", secss);
	    UpdateDynamic3DTextLabelText(Nuke23D, 0xFF0000FF, msg);
	    if(secss < 1)
		{
			Air2ON = 0;
			UpdateDynamic3DTextLabelText(Nuke23D, 0x00FF54FF, "Space Nuke\nReady");
			return 1;
		}
		SetTimer("Air2Timer", 1000, false);
	}
	return 1;
}

forward FlashTimer();
public FlashTimer()
{
    if(FlashON)
	{
	    new secss = FlashSecs - (GetTickCount()/1000);
	    new msg[40];
	    format(msg, _, "Flash Bomb\nCooldown: %d seconds", secss);
	    UpdateDynamic3DTextLabelText(Flash3D, 0xFF0000FF, msg);
	    if(secss < 0)
		{
			FlashON = 0;
			UpdateDynamic3DTextLabelText(Nuke3D, 0x00FF54FF, "Flash Bomb\nReady");
			return 1;
		}
		SetTimer("FlashTimer", 1000, false);
	}
	return 1;
}

NullizeProgress(arr[MAX_QUESTS])
{
    for(new j = 0; j < MAX_QUESTS; j++) arr[j] = 0;
}

forward POTimer();
public POTimer()
{
	if(PUBGOpen)
	{
	    new str[4]; format(str, _, "%d", Iter_Count(PUBGEvent));
		TextDrawSetString(PUBGAliveTD, str);
		foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PUBGAliveTD);
		SetTimer("POTimer", 1000, false);
	}
	return 1;
}

forward PLTimer();
public PLTimer()
{
	if(PUBGLaunched)
	{
		TextDrawSetString(PUBGAliveTD, "%d", Iter_Count(PUBGEvent));
	    if(PUBGKillExpiry > 0)
	    {
	        foreach(new i : PUBGEvent) TextDrawShowForPlayer(i,PUBGKillTD);
			PUBGKillExpiry --;
		} else TextDrawHideForAll(PUBGKillTD);
		new Float:rr, Float:xx, Float:yy;
		rr = PUBGCircleFloat[2], xx = PUBGCircleFloat[0], yy = PUBGCircleFloat[1];
		if(++PUBGLaunchTime > 5)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
					if(Iter_Contains(PUBGEvent, i))
					{
				    	new Float:x, Float:y, Float:z;
					    GetPlayerPos(i,x,y,z);
					    if( rr < GetPointDistanceToPoint(x,y,xx,yy) )
						{
							GameTextForPlayer(i,"~r~You are out of the safe zone!~n~-1 HP (Gas intoxication)",1000,5);
							new Float:hp; GetPlayerHealth(i, hp);
							SetPlayerHealth(i, hp-1.00);
							PlayerPlaySound(i, 1134, 0, 0, 0);
						}
					}
				}
			}
		}
		switch(PUBGLaunchTime)
		{
		    case 60:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 1 minute");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 65: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 110:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 10 seconds");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 115: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 120:
		    {
		        MeterPlier = 1.25;
		        TextDrawSetString(PubgSafeZoneTD, "Toxic Gas is spreading");
		        SpreadGas(25.00);
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 125: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 130:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 4 minutes");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 135: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 190:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 3 minutes");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 195: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 250:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 2 minutes");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 255: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 310:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 1 minute");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 315: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 360:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 10 seconds");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 365: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 370:
		    {
		        MeterPlier = 2.5;
		        TextDrawSetString(PubgSafeZoneTD, "Toxic Gas is spreading");
		        SpreadGas(50.00);
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 375: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 380:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 5 minutes");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 385: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 440:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 4 minutes");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 445: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 500:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 3 minutes");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 505: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 560:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 2 minutes");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		  	case 565: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 620:
			{
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 1 minute");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 625: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 670:
		    {
		        TextDrawSetString(PubgSafeZoneTD, "Restricting play area in 10 seconds");
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 675: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		    case 680:
		    {
		        MeterPlier = 3.75;
		        TextDrawSetString(PubgSafeZoneTD, "Toxic Gas is spreading");
		        SpreadGas(75.00);
                foreach(new i: PUBGEvent) TextDrawShowForPlayer(i, PubgSafeZoneTD);
		    }
		    case 685: foreach(new i: PUBGEvent) TextDrawHideForPlayer(i, PubgSafeZoneTD);
		}
		SetTimer("PLTimer", 1000, false);
	}
	return 1;
}

forward Seconds();
public Seconds()
{
    new Day;
	getdate(.day = Day);
	if(Day != LastServerDay) //A new day = Quests refresh
	{
	    LastServerDay = Day;
	    ReloadQuests();
	    foreach(new playerid: Player) { for(new i = 0 ; i < 5; i++) Bit_Vet(QuestDone[playerid], i); cmd_toggletextdraws(playerid); cmd_toggletextdraws(playerid); }
	    SendClientMessageToAll(COLOR_YELLOW, "[Daily Quests] It's midnight! Your quests list has been refreshed.");
	    foreach(new i : Player) NullizeProgress(QuestProgress[i]);
		mysql_tquery(mysql, "UPDATE `playerbase` SET `qp` = 0000000000", "", "");
	}
	foreach(new i : Player)
	{
	    if(ZPShown[i] != 0)
		{
			if((GetTickCount() - LastZPShown[i]) > 2000)
			{
				HidePlayerProgressBar(i, ZP_HPBar[i]);
				ZPShown[i] = 0;
			}
		}
		if(PlayerInfo[i][JailTime] > 0) if(-- PlayerInfo[i][JailTime] < 1) JailRelease(i);
		new
        WEAPON:weapon,
        ammo;
	    GetPlayerWeaponData(i, WEAPON_SLOT_UNARMED, weapon, ammo);
	    if (ammo == dlevel[i])
	    {
	        desynctick[i] = gettime()+3;
	    }
	    SetPlayerAmmo(i, weapon, ammo+1);
	    dlevel[i] = ammo;
        new vt = GetPlayerVehicleID(i);
        if(vt != 0)
        {
			new Float:X;
			new Float:Y, Float:Z;
			GetVehicleVelocity(vt, X, Y, Z);
			if(floatround(floatsqroot(X * X + Y * Y) * 200, floatround_round) > 300)
			{
				new msg[150];
                format(msg, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) might be speed hacking (On-Vehicle).", PlayerInfo[i][Nick], i);
				AntiCheatNotification(-1, msg);
			}
			new mod = GetVehicleModel(vt);
			switch(mod)
			{
				case PLANES: {goto mylabel;}
				case HELIS: {goto mylabel;}
				default:
				{
					GetVehiclePos(vt,X,Y,Z);
					foreach(new o: PlacedMines)
					{
						new mom = Mine[o][m_player];
						if(GetVehicleDistanceFromPoint(vt,Mine[o][m_x],Mine[o][m_y],Mine[o][m_z]) < 4 && Tryg3D::GetPlayerSpeed(i) < 200.0 && i != mom && GetPlayerTeam(i) != GetPlayerTeam(mom))
						{
							new Float:HP; GetPlayerHealth(i,HP);
							if(HP < 70)
							{
							    new nam[24]; strcat(nam, PlayerInfo[mom][Nick]);
								SendClientMessage(i,Dred,"* You have been exploded by %s(%d) mine",nam,mom);
								SendDeathMessage(mom,i,39);
								SendClientMessage(mom,-1,"{80FF00}[Mine] {FFFFFF}You killed {80FF00}%s(%d){FFFFFF} with an explosive mine,you earn 1 score and $1500 cash reward.",PlayerInfo[i][Nick],i);
								if(cPerk[mom][P_MONEY] > 0)
								{
									SendClientMessage(mom, COLOR_YELLOW, "[Clan Perk]: You got double the kill money.");
									GiveCash(mom,1500);
								}
								GiveCash(mom,1500);
								if(PlayerInfo[mom][InClan] != -1)
								{
									if(PlayerInfo[i][InClan] != PlayerInfo[mom][InClan])
									{
										new str[256],rnn;
										rnn = random(1500);
										format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, nam);
										ConnectKills[mom] ++;
										ClanMSG(PlayerInfo[mom][InClan],str);
										foreach(new j : Player) if(PlayerInfo[mom][InClan] == PlayerInfo[j][InClan]) GiveCash(j,rnn);
									}
								}
								SetPlayerScore(mom,GetPlayerScore(mom)+1);
								SetPlayerHealth(i,0);
							}else SetPlayerHealth(i,HP-68);
							SetVehicleHealth(vt, 0);
							Mine[o][m_used] = false;
							new ob1 = Mine[o][m_object], ob2 = Mine[o][m_object2];
							IsAMine[ob1] = false;
							IsAMine[ob2] = false;
							DestroyDynamicObject(ob2);
							DestroyDynamicObject(ob1);
							Mine[o][m_object2] = Mine[o][m_object] = -1;
							DestroyDynamic3DTextLabel(Mine[o][m_label]);
							GameTextForPlayer(i,"~r~Explosive Mine",5000,5);
							GameTextForPlayer(mom,"~g~Mine exploded",5000,5);
							PlayerPlaySound(i,1159,X,Y,Z);
							CreateExplosion(X,Y,Z,6,2.0);
							Mine[o][m_player] = INVALID_PLAYER_ID;
							Iter_Remove(PlacedMines,o);
							goto mylabel;
						}
					}
				}
			}
			mylabel:switch(mod)
			{
			    case 447,520,432,425,512,543,554,476:
			    {
					new sz = sizeof(BASERAPE);
					for(new zo = 0; zo< sz; zo++) if(gTeam[i] != zo) if(IsPlayerInArea(i, BASERAPE[zo][MinXX], BASERAPE[zo][MinYY], BASERAPE[zo][MaxXX], BASERAPE[zo][MaxYY])) GameTextForPlayer(i,"~r~Do not attack enemy base~n~~r~with heavy vehicles. Leave now!", 1000, 3);
				}
			}
		}
		if(PlayerInfo[i][CMDSPAM] > 0) PlayerInfo[i][CMDSPAM] --;
		if(PlayerInfo[i][MAXSPAM] > 0) PlayerInfo[i][MAXSPAM] --;
		if(PlayerInfo[i][SUI] > 0) PlayerInfo[i][SUI] -= 1000;
		if(gClass[i] == MEDIC)
		{
		    if(-- PlayerInfo[i][MEDICHEAL] < 1)
		    {
				new Float:hp;
		        GetPlayerHealth(i, hp);
				if(hp < 90)
				{
				    SetPlayerHealth(i, hp +10.0);
				    PlayerInfo[i][MEDICHEAL] = 30;
				}
		    }
		}
		if(ParkDamage[i] > 0) ParkDamage[i] --;
		if(PlayerInfo[i][Muted])
		{
			if(-- PlayerInfo[i][MuteTime] < 1)
			{
				SendClientMessage(i,green,"UNMUTE: You have been unmuted");
				PlayerInfo[i][Muted] = false;
			}
		}
		if(PlayerInfo[i][CMuted])
		{
			if(-- PlayerInfo[i][CMuteTime] < 1)
			{
				SendClientMessage(i,green,"UNMUTE: You have been clan unmuted");
				PlayerInfo[i][CMuted] = false;
			}
		}
		if(KillTDShow[i]) if(GetTickCount() - KillTDTick[i] > 0) HideKillsTD(i);
	}
	return 1;
}

new BonD = INVALID_PLAYER_ID;
new BonS,BonC;

forward Bonusplayer();
public Bonusplayer()
{
	new id = Iter_Random(Player);
	BonS = random(10)+5;
	BonC = random(10000)+10000;
	if(id != INVALID_PLAYER_ID)
	{
		if(!IsPlayerConnected(id)) return 1;
		BonD = id;
		SendClientMessageToAll(-1, "{FF3737}[BOUNTY]: {66B3FF}\"%s\"{CACACA} is the new bounty player kill them and earn {66B3FF}%d${CACACA} & {66B3FF}%d{CACACA} score.", PlayerInfo[id][Nick], BonC, BonS);
	}
	return 1;
}
new ZoneD = -1,ZoneS,ZoneC;
forward BonusZone();
public BonusZone()
{
	new id = random(30);
	ZoneD = id;
	ZoneC = random(20000)+10000;
	ZoneS = random(8)+5;
	SendClientMessageToAll(-1, "{FF3737}[BONUS-ZONE]: {CACACA}Capture {66B3FF}\"%s\"{CACACA} and get {66B3FF}%d${CACACA} & {66B3FF}%d{CACACA} score.", ZName(id), ZoneC, ZoneS);
}

forward HTournament();
public HTournament()
{
	new ii = random(MAX_TOUR);
	new str[102];
	TournamentTick = GetTickCount() + 3600000;
	if(CurrentWinner == -1) SendClientMessageToAll(Lb, "No one won the tournament, a new one has started.");
	else
	{
		SendClientMessageToAll(Lb, "%s won the hourly tournament (50XP+50Score+$50k) and a new tournament has started.", PlayerInfo[CurrentWinner][Nick]);
		GiveCash(CurrentWinner, 50000);
		PlayerInfo[CurrentWinner][XP] += 50;
		SetPlayerScore(CurrentWinner, GetPlayerScore(CurrentWinner)+50);
	}
	switch(ii)
	{

		case TOUR_DEAG: str = "Hourly_Tournament:~b~_Top_Deagle_Kills~n~~b~Current_Winner:_~w~None";
		case TOUR_HEAD: str = "Hourly_Tournament:~b~_Top_Headshots~n~~b~Current_Winner:_~w~None";
		case TOUR_CAP: str = "Hourly_Tournament:~b~Top_Zone_Captures~n~~b~Current_Winner:_~w~None";
		case TOUR_KILLS: str = "Hourly_Tournament:~b~_Top Kills~n~~b~Current_Winner:_~w~None";
	}
	CurrentTOUR = ii;
	TextDrawSetString(TournamentTD, str);
	if(ServerInfo[ServerTime] == 23) ServerInfo[ServerTime] = 0;
	else ServerInfo[ServerTime] ++;
	foreach(new i: Player)
	{
		SetPlayerTime(i, ServerInfo[ServerTime], 0);
		CurrentTOURCount[i] = 0;
		if(tournamentshown[i]) if(PlayerInfo[i][IsSpawned]) TextDrawShowForPlayer(i, TournamentTD);
	}
	PlayerPlaySound(CurrentWinner, 5855,0,0,0);
	CurrentWinner = -1;
	CurrentTOURValue = 0;
	mysql_pquery(mysql,"SELECT `name`, `ddm` FROM `playerbase` ORDER BY `ddm` DESC LIMIT 7", "OnTopCheck", "");
	mysql_pquery(mysql,"SELECT `name`, `dsdm` FROM `playerbase` ORDER BY `dsdm` DESC LIMIT 7", "OnTopCheckTwo", "");
	mysql_pquery(mysql,"SELECT `name`, `dcbdm` FROM `playerbase` ORDER BY `dcbdm` DESC LIMIT 7", "OnTopCheckThree", "");
	return 1;
}

forward StatsTimer();
public StatsTimer()
{
	foreach(new i : Player) if(!PlayerInfo[i][is_undercover]) SavePlayer(i);
	SendClientMessageToAll(cb,"* Your stats have been automatically saved .");
	return 1;
}

forward ZoneBonus();
public ZoneBonus()
{
	new bb = tCP[HOS];
	foreach(new i : ARENA[NON])
	{
		if(bb == GetPlayerTeam(i))
		{
			new Float:HP;
			GetPlayerHealth(i,HP);
			if(HP < 92) SetPlayerHealth(i,HP+8);
		}
	}
	return 1;
}

IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(X >= MinX)
	{

		if(X <= MaxX)
		{

			if(Y >= MinY)
			{

				if(Y <= MaxY)
				{

					return 1;
				}
			}
		}
	}
	return 0;
}
forward CheatCheck();
public CheatCheck()
{
	foreach(new i : Player)
	{
		if(PlayerInfo[i][Rage] != 0) PlayerInfo[i][Rage] --;
		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK)
		{
			if(gClass[i] != JET)
			{
				if(PlayerInfo[i][Level] < 1)
				{
				    new str[128];
					format(str, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) has been kicked for jetpack hacks.", PlayerInfo[i][Nick], i);
	 				AntiCheatNotification(-1, str);
					KickX(i);
				}
			}
		}
		if(GetPlayerMoney(i) > PlayerInfo[i][Cash])
		{
			ResetPlayerMoney(i);
			GivePlayerMoney(i,PlayerInfo[i][Cash]);
		}
	}
	return 1;
}

public OnGameModeExit()
{
    for(new i=1; i < MAX_TEAMS-1; i++)
	{
		DestroyObject(BehemethObject[i]);
	}
    KillTimer(timerhack);
	TextDrawHideForAll(ServerWeb);
	TextDrawDestroy(ServerWeb);
	TextDrawHideForAll(BoxDraw0);
	TextDrawHideForAll(BoxDraw1);
	TextDrawDestroy(BoxDraw0);
	TextDrawDestroy(BoxDraw1);
	TextDrawHideForAll(BoxDraw[0]);
	TextDrawDestroy(BoxDraw[0]);
	TextDrawHideForAll(BoxDraw[1]);
	TextDrawDestroy(BoxDraw[1]);
	TextDrawHideForAll(BoxDraw[2]);
	TextDrawDestroy(BoxDraw[2]);
	TextDrawHideForAll(BoxDraw[3]);
	TextDrawDestroy(BoxDraw[3]);
	TextDrawHideForAll(BoxDraw[4]);
	TextDrawDestroy(BoxDraw[4]);
	Iter_Clear(JOINED1);
	Iter_Clear(JOINED2);
	Iter_Clear(ALIVE1);
	Iter_Clear(ALIVE2);
	Iter_Clear(CT_TEAMS);
	for(new i=0; i <8; i++) Delete3DTextLabel(Brief[i]);
	Delete3DTextLabel(Nuke3D);
	if(CLAN_TOURNAMENT[CT_ON])
	{
	    new str[400];
	    new qt10= CLAN_TOURNAMENT[CT_QUARTER_TEAM1][0],qt11= CLAN_TOURNAMENT[CT_QUARTER_TEAM1][1],qt12= CLAN_TOURNAMENT[CT_QUARTER_TEAM1][2],qt13= CLAN_TOURNAMENT[CT_QUARTER_TEAM1][3];
	    new qt20= CLAN_TOURNAMENT[CT_QUARTER_TEAM2][0],qt21= CLAN_TOURNAMENT[CT_QUARTER_TEAM2][1],qt22= CLAN_TOURNAMENT[CT_QUARTER_TEAM2][2],qt23= CLAN_TOURNAMENT[CT_QUARTER_TEAM2][3];
	    mysql_format(mysql, str, sizeof(str), "UPDATE `tournament` SET `ON`=1, `CM`='%d', `PHASE`='%d',`QT1_0`='%d',`QT1_1`='%d',`QT1_2`='%d',`QT1_3`='%d',`QT2_0`='%d',`QT2_1`='%d',`QT2_2`='%d',`QT2_3`='%d' ORDER BY `TID` DESC LIMIT 1", CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH], CLAN_TOURNAMENT[CT_PHASE], qt10,qt11,qt12,qt13,qt20,qt21,qt22,qt23);
		mysql_tquery(mysql, str);
		new st10= CLAN_TOURNAMENT[CT_SEMI_TEAM1][0],st11= CLAN_TOURNAMENT[CT_SEMI_TEAM1][1];
	    new st20= CLAN_TOURNAMENT[CT_SEMI_TEAM2][0],st21= CLAN_TOURNAMENT[CT_SEMI_TEAM2][1];
	    new ft1= CLAN_TOURNAMENT[CT_FINALS_TEAM1],ft2= CLAN_TOURNAMENT[CT_FINALS_TEAM2];
	    mysql_format(mysql, str, sizeof(str), "UPDATE `tournament` SET `ST1_0`='%d',`ST1_1`='%d',`ST2_0`='%d',`ST2_1`='%d',`FT1`='%d',`FT2`='%d' WHERE `TID` = LAST_INSERT_ID() LIMIT 1", st10,st11,st20,st21,ft1,ft2);
		mysql_tquery(mysql, str);
		mysql_format(mysql, str, sizeof(str), "UPDATE `tournament` SET `TTAG_0`='%e',`TTAG_1`='%e',`TTAG_2`='%e',`TTAG_3`='%e',`TTAG_4`='%e',`TTAG_5`='%e',`TTAG_6`='%e',`TTAG_7`='%e' ORDER BY `TID` DESC LIMIT 1", CT_TEAM_TAG[0],CT_TEAM_TAG[1],CT_TEAM_TAG[2],CT_TEAM_TAG[3],CT_TEAM_TAG[4],CT_TEAM_TAG[5],CT_TEAM_TAG[6],CT_TEAM_TAG[7]);
		mysql_tquery(mysql, str);
		mysql_format(mysql, str, sizeof(str), "UPDATE `tournament` SET `STAG_0`='%e',`STAG_1`='%e',`STAG_2`='%e',`STAG_3`='%e',`FTAG_1`='%e',`FTAG_2`='%e' ORDER BY `TID` DESC LIMIT 1", CT_SEMI_TAG[0],CT_SEMI_TAG[1],CT_SEMI_TAG[2],CT_SEMI_TAG[3],CT_FINALS_TAG[0],CT_FINALS_TAG[1]);
		mysql_tquery(mysql, str);
	}
	return 1;
}

WonTournament(winner)
{
    new str[400];
    new qt10= CLAN_TOURNAMENT[CT_QUARTER_TEAM1][0],qt11= CLAN_TOURNAMENT[CT_QUARTER_TEAM1][1],qt12= CLAN_TOURNAMENT[CT_QUARTER_TEAM1][2],qt13= CLAN_TOURNAMENT[CT_QUARTER_TEAM1][3];
    new qt20= CLAN_TOURNAMENT[CT_QUARTER_TEAM2][1],qt21= CLAN_TOURNAMENT[CT_QUARTER_TEAM2][1],qt22= CLAN_TOURNAMENT[CT_QUARTER_TEAM2][2],qt23= CLAN_TOURNAMENT[CT_QUARTER_TEAM2][3];
    mysql_format(mysql, str, sizeof(str), "UPDATE `tournament` SET `ON`=0, `PHASE`='%d',`QT1_0`='%d',`QT1_1`='%d',`QT1_2`='%d',`QT1_3`='%d',`QT2_0`='%d',`QT2_1`='%d',`QT2_2`='%d',`QT2_3`='%d' ORDER BY `TID` DESC LIMIT 1", CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH], qt10,qt11,qt12,qt13,qt20,qt21,qt22,qt23);
	mysql_tquery(mysql, str);
	new st10= CLAN_TOURNAMENT[CT_SEMI_TEAM1][0],st11= CLAN_TOURNAMENT[CT_SEMI_TEAM1][1];
    new st20= CLAN_TOURNAMENT[CT_SEMI_TEAM2][0],st21= CLAN_TOURNAMENT[CT_SEMI_TEAM2][1];
    new ft1= CLAN_TOURNAMENT[CT_FINALS_TEAM1],ft2= CLAN_TOURNAMENT[CT_FINALS_TEAM2];
    mysql_format(mysql, str, sizeof(str), "UPDATE `tournament` SET `ST1_0`='%d',`ST1_1`='%d',`ST2_0`='%d',`ST2_1`='%d',`FT1`='%d',`FT2`='%d' ORDER BY `TID` DESC LIMIT 1", st10,st11,st20,st21,ft1,ft2);
	mysql_tquery(mysql, str);
	mysql_format(mysql, str, sizeof(str), "UPDATE `tournament` SET `TTAG_0`='%e',`TTAG_1`='%e',`TTAG_2`='%e',`TTAG_3`='%e',`TTAG_4`='%e',`TTAG_5`='%e',`TTAG_6`='%e',`TTAG_7`='%e' ORDER BY `TID` DESC LIMIT 1", CT_TEAM_TAG[0],CT_TEAM_TAG[1],CT_TEAM_TAG[2],CT_TEAM_TAG[3],CT_TEAM_TAG[4],CT_TEAM_TAG[5],CT_TEAM_TAG[6],CT_TEAM_TAG[7]);
	mysql_tquery(mysql, str);
	mysql_format(mysql, str, sizeof(str), "UPDATE `tournament` SET `STAG_0`='%e',`STAG_1`='%e',`STAG_2`='%e',`STAG_3`='%e',`FTAG_1`='%e',`FTAG_2`='%e',`WINNER`='%d' ORDER BY `TID` DESC LIMIT 1", CT_SEMI_TAG[0],CT_SEMI_TAG[1],CT_SEMI_TAG[2],CT_SEMI_TAG[3],CT_FINALS_TAG[0],CT_FINALS_TAG[1], winner);
	mysql_tquery(mysql, str);
	return 1;
}

forward RandomMessage();
public RandomMessage() return SendClientMessageToAll(0xE1E1E1FF,RandomMessages[random(sizeof(RandomMessages))]);

public OnPlayerRequestClass(playerid, classid)
{
    DestroyPlayerObject(playerid, RQOb[playerid]);
	RQOb[playerid] = CreatePlayerObject(playerid, 9958, 110.3281, 1661.7604, 86.0131, 0.0000, 0.0000, 71.0998);
	//SetPlayerPos(playerid,222.6384,1822.8483,6.4141);
	//SetPlayerFacingAngle(playerid,270.4797);
	FirstSpawn[playerid] = 1;
	switch(classid)
	{

		case 0:
		{

			gTeam[playerid] = TEAM_EURASIA;
			SetPlayerTeam(playerid, TEAM_EURASIA);
			SetPlayerSkin(playerid, 73);
			SetPlayerColor(playerid, TEAM_EURASIA_COLOR);
			SetPlayerPos(playerid, 71.9624, 1674.6556, 82.5066);
			SetPlayerFacingAngle(playerid, 147.6999);
			InterpolateCameraPos(playerid, 59.536064, 1673.005493, 83.235565, 69.756607, 1672.111938, 84.454414, 4000);
			InterpolateCameraLookAt(playerid, 64.295684, 1674.443969, 82.709449, 72.095420, 1676.175537, 82.717437, 4000);
			/*InterpolateCameraPos(playerid,224.5114, 1817.9122, 6.8258, 224.1133, 1826.8372, 6.8258, 12000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, 224.0518, 1818.8054, 6.7358,  223.5887, 1825.9811, 6.7558, 12000, CAMERA_MOVE);*/
			GameTextForPlayer(playerid,"~g~Eurasia",1500,3);
		}
		case 1:
		{

			// ARABIAN INVASION //
			SetPlayerTeam(playerid, TEAM_ARAB);
			SetPlayerSkin(playerid, 179);
			gTeam[playerid] = TEAM_ARAB;
			SetPlayerColor(playerid, TEAM_ARAB_COLOR);
			SetPlayerPos(playerid, 88.6021, 1669.1998, 85.2966);
			SetPlayerFacingAngle(playerid, 147.6999);
			InterpolateCameraPos(playerid, 69.756607, 1672.111938, 84.454414, 86.806121, 1666.306518, 86.224792, 2000);
			InterpolateCameraLookAt(playerid, 72.095420, 1676.175537, 82.717437, 88.875381, 1670.540039, 84.552940, 2000);
			/*InterpolateCameraPos(playerid, 227.8697, 1822.9988, 9.9196,225.3625, 1823.1010, 6.6445, 15000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, 226.8663, 1823.0253, 8.9746, 224.3592, 1823.0699, 6.6495, 15000, CAMERA_MOVE);*/
			GameTextForPlayer(playerid,"~y~Arabia",1500,3);
		}
		case 2:
		{

			// SOVIET UNION //
			SetPlayerSkin(playerid, 285);
			SetPlayerTeam(playerid, TEAM_SOVIET);
			gTeam[playerid] = TEAM_SOVIET;
			SetPlayerColor(playerid, TEAM_SOVIET_COLOR);
			SetPlayerPos(playerid, 103.0952, 1664.1647, 85.4066);
			SetPlayerFacingAngle(playerid, 147.6999);
			InterpolateCameraPos(playerid, 86.806121, 1666.306518, 86.224792, 101.301986, 1661.883911, 86.926155, 2000);
			InterpolateCameraLookAt(playerid, 88.875381, 1670.540039, 84.552940, 103.269798, 1666.055419, 84.995864, 2000);
			/*InterpolateCameraPos(playerid, 229.1560, 1822.6487, 9.4584,225.3885, 1822.7159, 6.4460, 15000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,  228.1509, 1822.6511, 9.0434, 224.3835, 1822.7260, 6.5910, 15000, CAMERA_MOVE);*/
			GameTextForPlayer(playerid,"~r~soviet",1500,3);
		}
		case 3:
		{

			// USA //
			SetPlayerTeam(playerid, TEAM_USA);
			SetPlayerSkin(playerid, 287);
			gTeam[playerid] = TEAM_USA;
			SetPlayerColor(playerid, TEAM_USA_COLOR);
			SetPlayerPos(playerid, 131.9678, 1654.8914, 85.4066);
			SetPlayerFacingAngle(playerid, 147.6999);
			InterpolateCameraPos(playerid, 101.301986, 1661.883911, 86.926155, 129.663330, 1652.157836, 85.841308, 5000);
			InterpolateCameraLookAt(playerid, 103.269798, 1666.055419, 84.995864, 131.773529, 1656.631225, 85.109054, 3000);
			/*InterpolateCameraPos(playerid, 224.4495, 1826.5226, 6.2291,  225.5680, 1821.0745, 9.3010, 15000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,   223.8361, 1825.7271, 6.2991, 224.6548, 1821.4924, 8.5210, 15000, CAMERA_MOVE);*/
			GameTextForPlayer(playerid,"~b~USA",1500,3);
		}
		case 4:
		{
			// AUS //
			SetPlayerTeam(playerid, TEAM_AUS);
			SetPlayerSkin(playerid, 206);
			gTeam[playerid] = TEAM_AUS;
			SetPlayerColor(playerid, TEAM_AUS_COLOR);
			SetPlayerPos(playerid, 131.0375, 1655.1605, 85.4066);
			SetPlayerFacingAngle(playerid, -60.00);
			InterpolateCameraPos(playerid, 129.663330, 1652.157836, 85.841308, 134.428436, 1657.233032, 85.331863, 3000);
			InterpolateCameraLookAt(playerid, 131.773529, 1656.631225, 85.109054, 130.346801, 1654.345581, 85.275779, 1000);
			/*InterpolateCameraPos(playerid, 223.4969, 1822.6700, 10.5367, 226.6405, 1822.6938, 7.9210, 15000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,  222.4918, 1822.7129, 9.0467,225.6349, 1822.7246, 7.7110, 15000, CAMERA_MOVE);*/
			GameTextForPlayer(playerid,"~p~Australia",1500,3);
		}
		case 5:
		{
			SetPlayerTeam(playerid, TEAM_CH);
			SetPlayerSkin(playerid, 112);
			gTeam[playerid] = TEAM_CH;
			SetPlayerColor(playerid, TEAM_CH_COLOR);
			SetPlayerPos(playerid, 116.36, 1660.46, 85.4066);
			SetPlayerFacingAngle(playerid, 32.00);
			InterpolateCameraPos(playerid, 134.428436, 1657.233032, 85.331863, 114.563835, 1662.823364, 86.293212, 5000);
			InterpolateCameraLookAt(playerid, 130.346801, 1654.345581, 85.275779, 117.297332, 1658.857543, 84.951522, 3000);
			/*InterpolateCameraPos(playerid, 229.1560, 1822.6487, 9.4584,225.3885, 1822.7159, 6.4460, 15000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,  228.1509, 1822.6511, 9.0434, 224.3835, 1822.7260, 6.5910, 15000, CAMERA_MOVE);*/
			GameTextForPlayer(playerid,"~y~~h~Brazil",1500,3);
		}
		case 6:
		{

			SetPlayerTeam(playerid, TEAM_ID);
			SetPlayerSkin(playerid, 161);
			gTeam[playerid] = TEAM_ID;
			SetPlayerColor(playerid, TEAM_ID_COLOR);
			SetPlayerPos(playerid, 102.6737, 1665.8417, 84.6);
			SetPlayerFacingAngle(playerid, -71.00);
			InterpolateCameraPos(playerid, 114.563835, 1662.823364, 86.293212, 105.229110, 1666.848022, 85.40, 5000);
			InterpolateCameraLookAt(playerid, 117.297332, 1658.857543, 84.951522, 100.552162, 1665.089233, 84.971214, 3000);
			/*InterpolateCameraPos(playerid, 225.7789, 1826.6067, 8.8212 , 222.6884, 1816.2227, 8.8212, 15000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, 225.0153, 1825.9519, 8.2810, 222.6009, 1817.2255, 8.4410, 15000, CAMERA_MOVE);*/
			GameTextForPlayer(playerid,"~r~~h~Taliban",1500,3);
		}
		case 7:
		{

			SetPlayerTeam(playerid, TEAM_FRANCE);
			SetPlayerSkin(playerid, 108);
			gTeam[playerid] = TEAM_FRANCE;
			SetPlayerColor(playerid, TEAM_FR_COLOR);
			SetPlayerPos(playerid, 87.5174, 1670.8511, 83.7);
			SetPlayerFacingAngle(playerid, -25.70);
			InterpolateCameraPos(playerid, 105.229110, 1666.848022, 85.40, 87.942741, 1673.196655, 84.980598, 5000);
			InterpolateCameraLookAt(playerid, 100.552162, 1665.089233, 84.971214, 87.516792, 1668.417968, 83.572311, 2000);
			/*InterpolateCameraPos(playerid, 229.1560, 1822.6487, 9.4584,225.3885, 1822.7159, 6.4460, 15000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,  228.1509, 1822.6511, 9.0434, 224.3835, 1822.7260, 6.5910, 15000, CAMERA_MOVE);*/
			GameTextForPlayer(playerid,"~b~~h~France",1500,3);
		}
		case 8:
		{
			SetPlayerTeam(playerid, TEAM_MERC);
			SetPlayerSkin(playerid, 127);
			gTeam[playerid] = TEAM_MERC;
			SetPlayerColor(playerid, -1);
			SetPlayerFacingAngle(playerid, 15.00);
			SetPlayerPos(playerid, 72.6561, 1674.8646, 82.5);
			InterpolateCameraPos(playerid, 87.942741, 1673.196655, 84.980598, 70.636688, 1677.028808, 83.023941, 5000);
			InterpolateCameraLookAt(playerid, 87.516792, 1668.417968, 83.572311, 73.879020, 1673.239013, 82.670326, 2000);
			/*InterpolateCameraPos(playerid, 229.1560, 1822.6487, 9.4584,225.3885, 1822.7159, 6.4460, 15000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,  228.1509, 1822.6511, 9.0434, 224.3835, 1822.7260, 6.5910, 15000, CAMERA_MOVE);*/
			GameTextForPlayer(playerid,"~w~~h~Mercenaries",1500,3);
		}
	}
	return 1;
}

PD_CONSOLE(playerid)
{
    ClanLine1[playerid]= CreatePlayerTextDraw(playerid,302.000000, 201.000000, "0~n~4654~n~8897~n~45~n~Arabia~n~");
	PlayerTextDrawAlignment(playerid,ClanLine1[playerid], TEXT_DRAW_ALIGN_RIGHT);
	PlayerTextDrawBackgroundColour(playerid,ClanLine1[playerid], 255);
	PlayerTextDrawFont(playerid,ClanLine1[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,ClanLine1[playerid], 0.190000, 1.000000);
	PlayerTextDrawColour(playerid,ClanLine1[playerid], -1);
	PlayerTextDrawSetOutline(playerid,ClanLine1[playerid], 0);
	PlayerTextDrawSetProportional(playerid,ClanLine1[playerid], 1);
	PlayerTextDrawSetShadow(playerid,ClanLine1[playerid], 1);

	ClanLine2[playerid] = CreatePlayerTextDraw(playerid,444.000000, 201.000000, "0~n~64/100~n~56~n~54~n~654~n~");
	PlayerTextDrawAlignment(playerid,ClanLine2[playerid], TEXT_DRAW_ALIGN_RIGHT);
	PlayerTextDrawBackgroundColour(playerid,ClanLine2[playerid], 255);
	PlayerTextDrawFont(playerid,ClanLine2[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,ClanLine2[playerid], 0.190000, 1.000000);
	PlayerTextDrawColour(playerid,ClanLine2[playerid], -1);
	PlayerTextDrawSetOutline(playerid,ClanLine2[playerid], 0);
	PlayerTextDrawSetProportional(playerid,ClanLine2[playerid], 1);
	PlayerTextDrawSetShadow(playerid,ClanLine2[playerid], 1);

	ClanName[playerid] = CreatePlayerTextDraw(playerid, 317.000000, 121.000000, "] Hounds Of Justice ] ~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~");
	PlayerTextDrawAlignment(playerid, ClanName[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, ClanName[playerid], 255);
	PlayerTextDrawFont(playerid, ClanName[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, ClanName[playerid], 0.260000, 1.099999);
	PlayerTextDrawColour(playerid, ClanName[playerid], -16776961);
	PlayerTextDrawSetOutline(playerid, ClanName[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ClanName[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ClanName[playerid], 1);
	PlayerTextDrawUseBox(playerid, ClanName[playerid], 1);
	PlayerTextDrawBoxColour(playerid, ClanName[playerid], 4900);
	PlayerTextDrawTextSize(playerid, ClanName[playerid], -1.000000, 285.000000);


	ClanOwners[playerid] = CreatePlayerTextDraw(playerid, 315.000000, 137.000000, "~r~~h~Owner: ~w~Seif_Tounes");
	PlayerTextDrawAlignment(playerid, ClanOwners[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, ClanOwners[playerid], -251);
	PlayerTextDrawFont(playerid, ClanOwners[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, ClanOwners[playerid], 0.200000, 0.899999);
	PlayerTextDrawColour(playerid, ClanOwners[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ClanOwners[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ClanOwners[playerid], 1);

	ClanCoOwners[playerid] = CreatePlayerTextDraw(playerid, 315.000000, 145.000000, "~r~~h~~h~Co-Owner: ~w~Seif_Tounes");
	PlayerTextDrawAlignment(playerid, ClanCoOwners[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, ClanCoOwners[playerid], -251);
	PlayerTextDrawFont(playerid, ClanCoOwners[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, ClanCoOwners[playerid], 0.200000, 0.899999);
	PlayerTextDrawColour(playerid, ClanCoOwners[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ClanCoOwners[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ClanCoOwners[playerid], 1);

	ClanLeaders[playerid] = CreatePlayerTextDraw(playerid, 315.000000, 153.000000, "~p~~h~Leader: ~w~Seif_Tounes");
	PlayerTextDrawAlignment(playerid, ClanLeaders[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, ClanLeaders[playerid], -251);
	PlayerTextDrawFont(playerid, ClanLeaders[playerid], TEXT_DRAW_FONT_1);
	PlayerTextDrawLetterSize(playerid, ClanLeaders[playerid], 0.200000, 0.899999);
	PlayerTextDrawColour(playerid, ClanLeaders[playerid], 16711935);
	PlayerTextDrawSetOutline(playerid, ClanLeaders[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ClanLeaders[playerid], 1);

	ClanSlogan[playerid] = CreatePlayerTextDraw(playerid, 317.000000, 173.000000, "~b~~h~~h~~h~Beware the hounds of justice");
	PlayerTextDrawAlignment(playerid, ClanSlogan[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, ClanSlogan[playerid], 255);
	PlayerTextDrawFont(playerid, ClanSlogan[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, ClanSlogan[playerid], 0.200000, 1.200000);
	PlayerTextDrawColour(playerid, ClanSlogan[playerid], -1);
	PlayerTextDrawSetOutline(playerid, ClanSlogan[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ClanSlogan[playerid], 1);

	SpecPanel_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 6.499946, 257.450012, "192.168.0.1_-_Jelly23~n~192.168.0.1_-_JJJJJJJJJJJJJJJJJJJJJJJJ~n~192.166.61.21_-_(Agent)andycaoz~n~192.155.59.129_-_(AGENT)Jimm");
	PlayerTextDrawLetterSize(playerid, SpecPanel_PTD[playerid][0], 0.154374, 0.888333);
	PlayerTextDrawAlignment(playerid, SpecPanel_PTD[playerid][0], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, SpecPanel_PTD[playerid][0], -16776961);
	PlayerTextDrawSetShadow(playerid, SpecPanel_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanel_PTD[playerid][0], 1);
	PlayerTextDrawBackgroundColour(playerid, SpecPanel_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, SpecPanel_PTD[playerid][0], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, SpecPanel_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SpecPanel_PTD[playerid][0], 0);

	SpecPanel_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 174.700180, 257.450012, "HEALTH:_100.00~n~ARMOUR:_100.00~n~PING:_265~n~FPS:_90~n~PACKET_LOSS:_2.50~n~SCORE:_8592~n~TEAM:_EURASIA~n~CLASS:_ASSAULT");
	PlayerTextDrawLetterSize(playerid, SpecPanel_PTD[playerid][1], 0.154374, 0.888333);
	PlayerTextDrawAlignment(playerid, SpecPanel_PTD[playerid][1], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, SpecPanel_PTD[playerid][1], -16776961);
	PlayerTextDrawSetShadow(playerid, SpecPanel_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanel_PTD[playerid][1], 1);
	PlayerTextDrawBackgroundColour(playerid, SpecPanel_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, SpecPanel_PTD[playerid][1], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, SpecPanel_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SpecPanel_PTD[playerid][1], 0);

	SpecPanel_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 346.301116, 257.450012, "SLOT_2:_DESERT_EAGLE_(5000)~n~SLOT_3:_COMBAT_SHOTGUN_(4000)~n~SLOT_4:_MP5_(2000)~n~SLOT_5:_AK-47_(2000)~n~SLOT_6:_SNIPER_RIFLE_");
	PlayerTextDrawLetterSize(playerid, SpecPanel_PTD[playerid][2], 0.154374, 0.888333);
	PlayerTextDrawAlignment(playerid, SpecPanel_PTD[playerid][2], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, SpecPanel_PTD[playerid][2], -16776961);
	PlayerTextDrawSetShadow(playerid, SpecPanel_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, SpecPanel_PTD[playerid][2], 1);
	PlayerTextDrawBackgroundColour(playerid, SpecPanel_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, SpecPanel_PTD[playerid][2], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, SpecPanel_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SpecPanel_PTD[playerid][2], 0);

}

LoadPlayerServer(playerid)
{
	Iter_Add(ARENA[NON], playerid);
	SetPlayerMapIcon(playerid,1,710.0447,1959.1855,5.5391,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,2,801.9143,1671.0134,5.2813,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,3,601.9775,1245.1831,11.7188,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,4,-326.0032,820.5773,14.3189,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,5,-62.2938,44.9431,3.1103,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,6,-1198.3751,1821.2531,41.7188,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,7,-1469.4241,1871.3962,32.6328,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,8,-1353.5428,2057.3787,53.1172,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,9,-1937.6462,2380.9592,49.5000,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,10,-36.5458, 2347.6426, 24.1406,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,11,260.0900,2889.5242,11.1854,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,12,254.1981,1802.2262,7.4141,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,13,-551.6992,2593.0771,53.9348,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,14,670.9215,1705.4658,7.1875,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,15,221.0856,1422.6615,10.5859,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,16,588.3246,875.7402,-42.4973,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,17,-314.8433,1773.9176,43.6406,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,18,-311.0136,1542.9733,75.5625,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid,19,414.36,2532.11,16.57,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid, 20, 213.6228,1822.5692,6.4141, 23, 0, MAPICON_LOCAL); // area 51
	SetPlayerMapIcon(playerid, 21, 1067.3274,1003.5995,11.0000, 19, 0, MAPICON_LOCAL); // hospital
	SetPlayerMapIcon(playerid, 22, 471.6113,2251.0513,36.3676,19,0,MAPICON_LOCAL);

	SetPlayerMapIcon(playerid, 23, -148.4453,1110.0249,19.7500, 18,2,MAPICON_LOCAL); // sov
	SetPlayerMapIcon(playerid, 24, -824.0439,1570.2931,27.1222, 18,2,MAPICON_LOCAL);  // arab
	SetPlayerMapIcon(playerid, 25, 1132.0225,1916.1094,11.80, 18,2,MAPICON_LOCAL); // eurasia
	SetPlayerMapIcon(playerid, 26, 414.4114,2531.4324,16.5912, 18,2,MAPICON_LOCAL); // australia
	SetPlayerMapIcon(playerid, 27, -252.4021,2603.1230,62.8582, 18,2,MAPICON_LOCAL);  //usa
	SetPlayerMapIcon(playerid, 28, -702.0231,946.4190,12.5164, 18,2,MAPICON_LOCAL); // brazil
	SetPlayerMapIcon(playerid, 29, -1518.5146,2641.4976,55.8797, 18,2,MAPICON_LOCAL);  // france
	SetPlayerMapIcon(playerid, 30, 1053.0963,2565.9834,10.9491, 18,2,MAPICON_LOCAL);  // taliban

	SetPlayerMapIcon(playerid, 31, -902.1199,2696.3083,42.3703,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid, 32, 1617.8091,1171.5394,14.2188,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid, 33, -104.2878,1896.7731,15.4551,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid, 34, 1048.5999755859,2909.3000488281,47.799999237061,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid, 35, -2372.8000488281,1551.1999511719,2.0999999046326,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid, 36, 1360.8000488281,2196.1000976563,9.8000001907349,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid, 37, -1348,494.29998779297,18.200000762939,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid, 38, -1733.8000488281,190.80000305176,3.6,19,-1,MAPICON_LOCAL);
	SetPlayerMapIcon(playerid, 39, 2162.4,-103.1,2.8,19,-1,MAPICON_LOCAL); // 40 USED FOR CLAN BASE

	SetPlayerMapIcon(playerid, 41, -1370.2069,1329.4095,6.2774, 23,2,MAPICON_LOCAL); //Clan Base Airstrike

	SetPlayerMapIcon(playerid,42,-440.9412,612.4698,16.7188,19,-1,MAPICON_LOCAL); // Abondoned Outpost
	SetPlayerMapIcon(playerid,43,-2571.8511,2471.7515,6.4761,19,-1,MAPICON_LOCAL); // A52
	SetPlayerMapIcon(playerid,44,-2204.7358,1920.2222,-45.3192,19,-1,MAPICON_LOCAL); //	OP
	SetPlayerMapIcon(playerid,45,-786.5989,2417.5176,157.1028,19,-1,MAPICON_LOCAL); //	SPS
	

    CRName[playerid] = CreatePlayerTextDraw(playerid,316.000000, 252.000000, "UNRANKED");
	PlayerTextDrawAlignment(playerid,CRName[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid,CRName[playerid], 255);
	PlayerTextDrawFont(playerid,CRName[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,CRName[playerid], 0.219999, 1.399999);
	PlayerTextDrawColour(playerid,CRName[playerid], -16711681);
	PlayerTextDrawSetOutline(playerid,CRName[playerid], 0);
	PlayerTextDrawSetProportional(playerid,CRName[playerid], 1);
	PlayerTextDrawSetShadow(playerid,CRName[playerid], 1);

	ZP_CooldownBar[playerid] = CreatePlayerProgressBar(playerid, 25.000000, 310.000000, 5.2, 150.2, 8453973, 100.0000, BAR_DIRECTION_UP);
	ZP_HPBar[playerid] = CreatePlayerProgressBar(playerid, 30.000000, 310.000000, 5.2, 150.2, 0x00CA00FF, 2500.0000, BAR_DIRECTION_UP);

	ZBar[playerid] = CreatePlayerProgressBar(playerid, 44.000000, 328.000000, 88.500000, 9.199998, 8453973, 100.0000, BAR_DIRECTION_RIGHT);

	CW_STAT_BAR[playerid][HPP][0] = CreatePlayerProgressBar(playerid, 523.000000, 210.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][ARMOURR][0] = CreatePlayerProgressBar(playerid, 584.000000, 210.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][HPP][1] = CreatePlayerProgressBar(playerid, 523.000000, 227.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][ARMOURR][1] = CreatePlayerProgressBar(playerid, 584.000000, 227.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][HPP][2] = CreatePlayerProgressBar(playerid, 523.000000, 244.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][ARMOURR][2] = CreatePlayerProgressBar(playerid, 584.000000, 244.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][HPP][3] = CreatePlayerProgressBar(playerid, 523.000000, 261.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][ARMOURR][3] = CreatePlayerProgressBar(playerid, 584.000000, 261.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][HPP][4] = CreatePlayerProgressBar(playerid, 523.000000, 278.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][ARMOURR][4] = CreatePlayerProgressBar(playerid, 584.000000, 278.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][HPP][5] = CreatePlayerProgressBar(playerid, 523.000000, 295.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][ARMOURR][5] = CreatePlayerProgressBar(playerid, 584.000000, 295.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][HPP][6] = CreatePlayerProgressBar(playerid, 523.000000, 312.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][ARMOURR][6] = CreatePlayerProgressBar(playerid, 584.000000, 312.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][HPP][7] = CreatePlayerProgressBar(playerid, 523.000000, 329.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][ARMOURR][7] = CreatePlayerProgressBar(playerid, 584.000000, 329.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][HPP][8] = CreatePlayerProgressBar(playerid, 523.000000, 346.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][ARMOURR][8] = CreatePlayerProgressBar(playerid, 584.000000, 346.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][HPP][9] = CreatePlayerProgressBar(playerid, 523.000000, 364.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR[playerid][ARMOURR][9] = CreatePlayerProgressBar(playerid, 584.000000, 364.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);



	CW_STAT_BAR_2[playerid][HPP][0] = CreatePlayerProgressBar(playerid, 523.000000-518.000, 210.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][ARMOURR][0] = CreatePlayerProgressBar(playerid, 584.000000-518.000, 210.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][HPP][1] = CreatePlayerProgressBar(playerid, 523.000000-518.000, 227.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][ARMOURR][1] = CreatePlayerProgressBar(playerid, 584.000000-518.000, 227.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][HPP][2] = CreatePlayerProgressBar(playerid, 523.000000-518.000, 244.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][ARMOURR][2] = CreatePlayerProgressBar(playerid, 584.000000-518.000, 244.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][HPP][3] = CreatePlayerProgressBar(playerid, 523.000000-518.000, 261.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][ARMOURR][3] = CreatePlayerProgressBar(playerid, 584.000000-518.000, 261.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][HPP][4] = CreatePlayerProgressBar(playerid, 523.000000-518.000, 278.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][ARMOURR][4] = CreatePlayerProgressBar(playerid, 584.000000-518.000, 278.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][HPP][5] = CreatePlayerProgressBar(playerid, 523.000000-518.000, 295.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][ARMOURR][5] = CreatePlayerProgressBar(playerid, 584.000000-518.000, 295.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][HPP][6] = CreatePlayerProgressBar(playerid, 523.000000-518.000, 312.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][ARMOURR][6] = CreatePlayerProgressBar(playerid, 584.000000-518.000, 312.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][HPP][7] = CreatePlayerProgressBar(playerid, 523.000000-518.000, 329.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][ARMOURR][7] = CreatePlayerProgressBar(playerid, 584.00-518.000, 329.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][HPP][8] = CreatePlayerProgressBar(playerid, 523.000000-518.000, 346.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][ARMOURR][8] = CreatePlayerProgressBar(playerid, 584.000000-518.000, 346.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][HPP][9] = CreatePlayerProgressBar(playerid, 523.000000-518.000, 364.000000, 52.500000, 3.199999, -16776961, 100.0000, BAR_DIRECTION_RIGHT);
	CW_STAT_BAR_2[playerid][ARMOURR][9] = CreatePlayerProgressBar(playerid, 584.000000-518.000, 364.000000, 52.500000, 3.199999, -1, 100.0000, BAR_DIRECTION_RIGHT);

	CRBar[playerid] = CreatePlayerProgressBar(playerid, 180.000000, 314.000000, 280.000000, 10.000000, 858993663, 100.000000, BAR_DIRECTION_RIGHT);

	CR_PREVR[playerid] = CreatePlayerTextDraw(playerid, 180.000000, 314.000000, "_");
	PlayerTextDrawBackgroundColour(playerid, CR_PREVR[playerid], 255);
	PlayerTextDrawFont(playerid, CR_PREVR[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, CR_PREVR[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, CR_PREVR[playerid], -1);
	PlayerTextDrawSetOutline(playerid, CR_PREVR[playerid], 0);
	PlayerTextDrawSetProportional(playerid, CR_PREVR[playerid], 1);
	PlayerTextDrawSetShadow(playerid, CR_PREVR[playerid], 1);

	CR_NEXTR[playerid] = CreatePlayerTextDraw(playerid, 455.000000, 314.000000, "Silver");
	PlayerTextDrawAlignment(playerid, CR_NEXTR[playerid], TEXT_DRAW_ALIGN_RIGHT);
	PlayerTextDrawBackgroundColour(playerid, CR_NEXTR[playerid], 255);
	PlayerTextDrawFont(playerid, CR_NEXTR[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, CR_NEXTR[playerid], 0.200000, 1.000000);
	PlayerTextDrawColour(playerid, CR_NEXTR[playerid], -1);
	PlayerTextDrawSetOutline(playerid, CR_NEXTR[playerid], 0);
	PlayerTextDrawSetProportional(playerid, CR_NEXTR[playerid], 1);
	PlayerTextDrawSetShadow(playerid, CR_NEXTR[playerid], 1);

	//vip shop
	
    PVipShop[playerid][0] = CreatePlayerTextDraw(playerid,279.000000, 164.000000, "55");
	PlayerTextDrawBackgroundColour(playerid, PVipShop[playerid][0], 255);
	PlayerTextDrawFont(playerid, PVipShop[playerid][0], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, PVipShop[playerid][0], 0.150000, 0.899999);
	PlayerTextDrawColour(playerid, PVipShop[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, PVipShop[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, PVipShop[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PVipShop[playerid][0], 0);

	PVipShop[playerid][1] = CreatePlayerTextDraw(playerid,206.000000, 177.000000, "PRoMO CODE: None");
	PlayerTextDrawBackgroundColour(playerid, PVipShop[playerid][1], 255);
	PlayerTextDrawFont(playerid, PVipShop[playerid][1], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, PVipShop[playerid][1], 0.150000, 0.899999);
	PlayerTextDrawColour(playerid, PVipShop[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, PVipShop[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, PVipShop[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PVipShop[playerid][1], 0);

	PVipShop[playerid][2] = CreatePlayerTextDraw(playerid,366.000000, 177.000000, "Enter a ~b~~h~promo code");
	PlayerTextDrawBackgroundColour(playerid, PVipShop[playerid][2], 255);
	PlayerTextDrawFont(playerid, PVipShop[playerid][2], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, PVipShop[playerid][2], 0.150000, 0.899999);
	PlayerTextDrawColour(playerid, PVipShop[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, PVipShop[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, PVipShop[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PVipShop[playerid][2], 0);
	PlayerTextDrawTextSize(playerid, PVipShop[playerid][2], 450.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, PVipShop[playerid][2], 1);

	PVipShop[playerid][3] = CreatePlayerTextDraw(playerid,318.000000, 246.000000, "___VIP Level                        ___Click to see");
	PlayerTextDrawAlignment(playerid, PVipShop[playerid][3], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, PVipShop[playerid][3], 255);
	PlayerTextDrawFont(playerid, PVipShop[playerid][3], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, PVipShop[playerid][3], 0.159998, 0.899999);
	PlayerTextDrawColour(playerid, PVipShop[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, PVipShop[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PVipShop[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, PVipShop[playerid][3], 1);
	PlayerTextDrawBoxColour(playerid, PVipShop[playerid][3], 255);
	PlayerTextDrawTextSize(playerid, PVipShop[playerid][3], 10.000000, 170.000000);
	PlayerTextDrawSetSelectable(playerid, PVipShop[playerid][3], 1);

	PVipShop[playerid][4] = CreatePlayerTextDraw(playerid,318.000000, 258.000000, "_________XP                                 1000 XP = $2");
	PlayerTextDrawAlignment(playerid, PVipShop[playerid][4], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, PVipShop[playerid][4], 255);
	PlayerTextDrawFont(playerid, PVipShop[playerid][4], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, PVipShop[playerid][4], 0.159998, 0.899999);
	PlayerTextDrawColour(playerid, PVipShop[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, PVipShop[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PVipShop[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, PVipShop[playerid][4], 1);
	PlayerTextDrawBoxColour(playerid, PVipShop[playerid][4], 255);
	PlayerTextDrawTextSize(playerid, PVipShop[playerid][4], 10.000000, 170.000000);
	PlayerTextDrawSetSelectable(playerid, PVipShop[playerid][4], 1);

	PVipShop[playerid][5] = CreatePlayerTextDraw(playerid,318.000000, 270.000000, "________Kills                             2000 KILLS = $1");
	PlayerTextDrawAlignment(playerid, PVipShop[playerid][5], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, PVipShop[playerid][5], 255);
	PlayerTextDrawFont(playerid, PVipShop[playerid][5], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, PVipShop[playerid][5], 0.159998, 0.899999);
	PlayerTextDrawColour(playerid, PVipShop[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, PVipShop[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, PVipShop[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, PVipShop[playerid][5], 1);
	PlayerTextDrawBoxColour(playerid, PVipShop[playerid][5], 255);
	PlayerTextDrawTextSize(playerid, PVipShop[playerid][5], 10.000000, 170.000000);
	PlayerTextDrawSetSelectable(playerid, PVipShop[playerid][5], 1);

	PVipShop[playerid][6] = CreatePlayerTextDraw(playerid,318.000000, 282.000000, "_________DEATHS                         -2000 DEATHS = $1");
	PlayerTextDrawAlignment(playerid, PVipShop[playerid][6], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, PVipShop[playerid][6], 255);
	PlayerTextDrawFont(playerid, PVipShop[playerid][6], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, PVipShop[playerid][6], 0.159998, 0.899999);
	PlayerTextDrawColour(playerid, PVipShop[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, PVipShop[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, PVipShop[playerid][6], 1);
	PlayerTextDrawUseBox(playerid, PVipShop[playerid][6], 1);
	PlayerTextDrawBoxColour(playerid, PVipShop[playerid][6], 255);
	PlayerTextDrawTextSize(playerid, PVipShop[playerid][6], 10.000000, 170.000000);
	PlayerTextDrawSetSelectable(playerid, PVipShop[playerid][6], 1);

	PVipShop[playerid][7] = CreatePlayerTextDraw(playerid,318.000000, 234.000000, "________SCORE                           1000 score = $1");
	PlayerTextDrawAlignment(playerid, PVipShop[playerid][7], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, PVipShop[playerid][7], 255);
	PlayerTextDrawFont(playerid, PVipShop[playerid][7], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, PVipShop[playerid][7], 0.159998, 0.899999);
	PlayerTextDrawColour(playerid, PVipShop[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, PVipShop[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, PVipShop[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, PVipShop[playerid][7], 1);
	PlayerTextDrawBoxColour(playerid, PVipShop[playerid][7], 255);
	PlayerTextDrawTextSize(playerid, PVipShop[playerid][7], 10.000000, 170.000000);
	PlayerTextDrawSetSelectable(playerid, PVipShop[playerid][7], 1);

	//
	HSTD[playerid] = CreatePlayerTextDraw(playerid, 319.000000, 140.000000, "Headshot +1");
	PlayerTextDrawAlignment(playerid, HSTD[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, HSTD[playerid], 255);
	PlayerTextDrawFont(playerid, HSTD[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, HSTD[playerid], 0.310000, 1.400000);
	PlayerTextDrawColour(playerid, HSTD[playerid], 255);
	PlayerTextDrawSetOutline(playerid, HSTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, HSTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HSTD[playerid], 0);

	TUT[playerid][0] = CreatePlayerTextDraw(playerid, 319.600067, 252.186218, "Welcome_to_Modern_Warfare_3_Server~n~tutorial_5/6:_my_objective");
	PlayerTextDrawLetterSize(playerid, TUT[playerid][0], 0.538399, 1.958400);
	PlayerTextDrawAlignment(playerid, TUT[playerid][0], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawColour(playerid, TUT[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, TUT[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TUT[playerid][0], 0);
	PlayerTextDrawBackgroundColour(playerid, TUT[playerid][0], 255);
	PlayerTextDrawFont(playerid, TUT[playerid][0], TEXT_DRAW_FONT_3);
	PlayerTextDrawSetProportional(playerid, TUT[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TUT[playerid][0], 0);

	TUT[playerid][1] = CreatePlayerTextDraw(playerid, 646.799743, 451.333404, "box");
	PlayerTextDrawLetterSize(playerid, TUT[playerid][1], 0.000000, -18.017501);
	PlayerTextDrawTextSize(playerid, TUT[playerid][1], -20.749973, 0.000000);
	PlayerTextDrawAlignment(playerid, TUT[playerid][1], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, TUT[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, TUT[playerid][1], 1);
	PlayerTextDrawBoxColour(playerid, TUT[playerid][1], 150);
	PlayerTextDrawSetShadow(playerid, TUT[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TUT[playerid][1], 0);
	PlayerTextDrawBackgroundColour(playerid, TUT[playerid][1], 255);
	PlayerTextDrawFont(playerid, TUT[playerid][1], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, TUT[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TUT[playerid][1], 0);

	TUT[playerid][2] = CreatePlayerTextDraw(playerid, 322.175079, 296.283233, "Tutorial");
	PlayerTextDrawLetterSize(playerid, TUT[playerid][2], 0.349875, 1.623333);
	PlayerTextDrawAlignment(playerid, TUT[playerid][2], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawColour(playerid, TUT[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TUT[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TUT[playerid][2], 0);
	PlayerTextDrawBackgroundColour(playerid, TUT[playerid][2], 255);
	PlayerTextDrawFont(playerid, TUT[playerid][2], TEXT_DRAW_FONT_2);
	PlayerTextDrawSetProportional(playerid, TUT[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TUT[playerid][2], 0);


	Guit[playerid][0] = CreatePlayerTextDraw(playerid,553.000000, 99.000000, "~b~]]]]]]]]]]]]]]]~n~~n~~w~SCORE: ~g~~h~0~w~/~r~~h~50000");
	PlayerTextDrawAlignment(playerid,Guit[playerid][0], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid,Guit[playerid][0], 255);
	PlayerTextDrawFont(playerid,Guit[playerid][0], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,Guit[playerid][0], 0.190000, 1.000000);
	PlayerTextDrawColour(playerid,Guit[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,Guit[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,Guit[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,Guit[playerid][0], 0);

	Guit[playerid][1] = CreatePlayerTextDraw(playerid, 483.899932, 108.00, "-");
	PlayerTextDrawLetterSize(playerid, Guit[playerid][1], 9.915027, 0.780267);
	PlayerTextDrawAlignment(playerid, Guit[playerid][1], TEXT_DRAW_ALIGN_LEFT);
	PlayerTextDrawColour(playerid, Guit[playerid][1], -5963521);
	PlayerTextDrawSetShadow(playerid, Guit[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Guit[playerid][1], 0);
	PlayerTextDrawBackgroundColour(playerid, Guit[playerid][1], 255);
	PlayerTextDrawFont(playerid, Guit[playerid][1], TEXT_DRAW_FONT_1);
	PlayerTextDrawSetProportional(playerid, Guit[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Guit[playerid][1], 0);

	Guit[playerid][2] = CreatePlayerTextDraw(playerid,556.000000, 377.000000, "XP:_~g~879___~w~Kills:_~g~87897___~w~Deaths:_~g~87898___~w~Clan:_~g~AWA");
	PlayerTextDrawAlignment(playerid,Guit[playerid][2], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid,Guit[playerid][2], 255);
	PlayerTextDrawFont(playerid,Guit[playerid][2], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid,Guit[playerid][2], 0.138999, 0.900000);
	PlayerTextDrawColour(playerid,Guit[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,Guit[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,Guit[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,Guit[playerid][2], 1);

	FlashTD[playerid] = CreatePlayerTextDraw(playerid, 345.000000, -10.000000, "_");
	PlayerTextDrawAlignment(playerid, FlashTD[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, FlashTD[playerid], 255);
	PlayerTextDrawFont(playerid, FlashTD[playerid], TEXT_DRAW_FONT_3);
	PlayerTextDrawLetterSize(playerid, FlashTD[playerid], 0.210000, 51.300003);
	PlayerTextDrawColour(playerid, FlashTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, FlashTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, FlashTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, FlashTD[playerid], 546);
	PlayerTextDrawUseBox(playerid, FlashTD[playerid], 1);
	PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFFFF);
	PlayerTextDrawTextSize(playerid, FlashTD[playerid], 152.000000, 706.000000);


	StatsName[playerid] = CreatePlayerTextDraw(playerid, 317.500000, 140.000000, "12345678912345678912's stats");
	PlayerTextDrawAlignment(playerid, StatsName[playerid], TEXT_DRAW_ALIGN_CENTRE);
	PlayerTextDrawBackgroundColour(playerid, StatsName[playerid], -242);
	PlayerTextDrawFont(playerid, StatsName[playerid], TEXT_DRAW_FONT_3);
	PlayerTextDrawLetterSize(playerid, StatsName[playerid], 0.230000, 1.200000);
	PlayerTextDrawColour(playerid, StatsName[playerid], -1);
	PlayerTextDrawSetOutline(playerid, StatsName[playerid], 1);
	PlayerTextDrawSetProportional(playerid, StatsName[playerid], 1);

	StatsWarning[playerid] = CreatePlayerTextDraw(playerid, 179.000000, 142.000000, "no warnings");
	PlayerTextDrawBackgroundColour(playerid, StatsWarning[playerid], 255);
	PlayerTextDrawFont(playerid, StatsWarning[playerid], TEXT_DRAW_FONT_3);
	PlayerTextDrawLetterSize(playerid, StatsWarning[playerid], 0.289999, 0.899999);
	PlayerTextDrawColour(playerid, StatsWarning[playerid], 1389232895);
	PlayerTextDrawSetOutline(playerid, StatsWarning[playerid], 0);
	PlayerTextDrawSetProportional(playerid, StatsWarning[playerid], 1);
	PlayerTextDrawSetShadow(playerid, StatsWarning[playerid], 1);

	StatsPart1Titles[playerid] = CreatePlayerTextDraw(playerid, 177.000000, 178.000000, "team~n~rank~n~score~n~class~n~money~n~headshots~n~kills~n~deaths~n~k/d ratio");
	PlayerTextDrawBackgroundColour(playerid, StatsPart1Titles[playerid], 255);
	PlayerTextDrawFont(playerid, StatsPart1Titles[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, StatsPart1Titles[playerid], 0.209999, 0.799998);
	PlayerTextDrawColour(playerid, StatsPart1Titles[playerid], 848717050);
	PlayerTextDrawSetOutline(playerid, StatsPart1Titles[playerid], 0);
	PlayerTextDrawSetProportional(playerid, StatsPart1Titles[playerid], 1);
	PlayerTextDrawSetShadow(playerid, StatsPart1Titles[playerid], 1);

	StatsPart2Titles[playerid] = CreatePlayerTextDraw(playerid, 321.000000, 178.000000, "Time Played~n~Med Kits~n~Armour Packs~n~Rank~n~Zones Captured~n~Zone Assists~n~Pilot Liscence~n~Max Kill spree~n~Max Death Spree");
	PlayerTextDrawBackgroundColour(playerid, StatsPart2Titles[playerid], 255);
	PlayerTextDrawFont(playerid, StatsPart2Titles[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, StatsPart2Titles[playerid], 0.209999, 0.799998);
	PlayerTextDrawColour(playerid, StatsPart2Titles[playerid], 848717050);
	PlayerTextDrawSetOutline(playerid, StatsPart2Titles[playerid], 0);
	PlayerTextDrawSetProportional(playerid, StatsPart2Titles[playerid], 1);
	PlayerTextDrawSetShadow(playerid, StatsPart2Titles[playerid], 1);



	StatsPart1[playerid] = CreatePlayerTextDraw(playerid, 310.000000, 178.000000, "Arabia~n~0~n~0~n~Assault~n~5454545~n~54564~n~54654~n~54566~n~1.20");
	PlayerTextDrawAlignment(playerid, StatsPart1[playerid], TEXT_DRAW_ALIGN_RIGHT);
	PlayerTextDrawBackgroundColour(playerid, StatsPart1[playerid], 255);
	PlayerTextDrawFont(playerid, StatsPart1[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, StatsPart1[playerid], 0.209999, 0.799998);
	PlayerTextDrawColour(playerid, StatsPart1[playerid], -1775082246);
	PlayerTextDrawSetOutline(playerid, StatsPart1[playerid], 0);
	PlayerTextDrawSetProportional(playerid, StatsPart1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, StatsPart1[playerid], 1);

	StatsPart2[playerid] = CreatePlayerTextDraw(playerid, 454.000000, 178.000000, "1565:54:56~n~0~n~0~n~0~n~0~n~0~n~0~n~0~n~0~n~");
	PlayerTextDrawAlignment(playerid, StatsPart2[playerid], TEXT_DRAW_ALIGN_RIGHT);
	PlayerTextDrawBackgroundColour(playerid, StatsPart2[playerid], 255);
	PlayerTextDrawFont(playerid, StatsPart2[playerid], TEXT_DRAW_FONT_2);
	PlayerTextDrawLetterSize(playerid, StatsPart2[playerid], 0.209999, 0.799998);
	PlayerTextDrawColour(playerid, StatsPart2[playerid], -1775082246);
	PlayerTextDrawSetOutline(playerid, StatsPart2[playerid], 0);
	PlayerTextDrawSetProportional(playerid, StatsPart2[playerid], 1);
	PlayerTextDrawSetShadow(playerid, StatsPart2[playerid], 1);


	return 1;
}

forward KickBlock(playerid);
public KickBlock(playerid)
{
    new str[150];
	GetPlayerIp(playerid, str, 15);
	BlockIpAddress(str, 60000);
	format(str, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) was kicked for using s0beit, a fake client or being a bot (please note of the name).", PlayerInfo[playerid][Nick], playerid);
	return AntiCheatNotification(-1, str);
}

public OnPlayerConnect(playerid)
{
    ++ rCheck[playerid];
	new namee[24];
	GetPlayerName(playerid, namee, sizeof namee);
	PlayerInfo[playerid][Nick] = namee;
    if(IsPlayerBot(playerid))
    {
		GameTextForPlayer(playerid,"~r~Hacks are not allowed in the server!", 3000, 3);
		SendClientMessage(playerid, red, "Please UNINSTALL your cheats before entering our server.");
		SetTimerEx("KickBlock", 500, false, "d", playerid);
		IsABOT[playerid] = true;
		return 1;
    }
	new ipp[16];
    GetPlayerIp(playerid, ipp, 16);
    strcopy(PlayerInfo[playerid][lastip], ipp);
    if(ServerInfo[FloodIP] == true)
	{
		new number_IP = 0;
		foreach(new i : Player)
		{
			if(!strcmp(PlayerInfo[i][lastip],ipp)) number_IP++;
		}
		if((GetTickCount() - Join_Stamp) < Time_Limit) exceed=1;
		else exceed=0;
		if(exceed)
		{

			if(strcmp(ban_s, ipp, false) == 0)
			{

				Same_IP++;
				if(Same_IP > SAME_IP_CONNECT)
				{
                    IsABOT[playerid] = true;
					BanEx(playerid,"IP FLOODING");
					Same_IP=0;
				}
			}
		}
		else Same_IP=0;
		if(number_IP > IP_LIMIT) { IsABOT[playerid] = true; Kick(playerid);}
		Join_Stamp = GetTickCount();
		strcopy(ban_s, ipp);
	}
	SetPlayerPos(playerid, 100.4520,1686.3737,17.6406);
    IsABOT[playerid] = PlayerInfo[playerid][IsSpawned] = false;
	//
	IsPlayerUsingAnims[playerid] =
	PlayerInfo[playerid][Muted] =
	PlayerInfo[playerid][CMuted] =
	PlayerInfo[playerid][LoggedIn] =
	PlayerInfo[playerid][UseSkin] =
	AntiSK[playerid] =
	PlayerInfo[playerid][HELMET] =
	PlayerInfo[playerid][WEAR] =
	PlayerInfo[playerid][Mask] =
	UsingLauncher[playerid] =
	suiciderprotect[playerid] =
	PlayerInfo[playerid][nameapp] =
	PlayerInfo[playerid][WEARMASK] =
	PlayerInfo[playerid][TUTS] = PlayerInfo[playerid][CWINV] = PlayerInfo[playerid][cleave] = pGPS[playerid] = pCamouflage[playerid] = PlayerInfo[playerid][is_undercover] = PlayerInfo[playerid][namekey] = false;
	PlayerInfo[playerid][FirstCon] = PlayerInfo[playerid][License] = tournamentshown[playerid] = true;
	for(new i = 0; i < 50; i++)
	{
		FriendLine[playerid][i][0] = '\0';
	}
	FriendID[playerid] = FriendDummy;
    GPCI(playerid, PlayerInfo[playerid][p_GPCI], 128);
	Iter_Clear(BLOCKED[playerid]);
	switch(random(10))
	{
		case 0: PlayAudioStreamForPlayer(playerid, "http://bit.ly/2HYV2id");
		case 1: PlayAudioStreamForPlayer(playerid, "http://bit.ly/2F9d4wq");
		case 2: PlayAudioStreamForPlayer(playerid, "http://bit.ly/2F7GtLt");
		case 3: PlayAudioStreamForPlayer(playerid, "http://bit.ly/2oDhrJR");
		case 4: PlayAudioStreamForPlayer(playerid, "http://bit.ly/2HZ7QoH");
		case 5: PlayAudioStreamForPlayer(playerid, "http://bit.ly/2oSugj0");
		case 6: PlayAudioStreamForPlayer(playerid, "http://bit.ly/2pvqHQy");
		case 7: PlayAudioStreamForPlayer(playerid, "http://bit.ly/2GbZBHR");
		case 8: PlayAudioStreamForPlayer(playerid, "http://bit.ly/2pup8BM");
		case 9: PlayAudioStreamForPlayer(playerid, "http://bit.ly/2FWRWOk");
	}
	switch(random(3))
	{

		case 0:
		{
			TextDrawShowForPlayer(playerid,WC[0]);
			TextDrawShowForPlayer(playerid,WC[1]);
			TextDrawShowForPlayer(playerid,WC[2]);
			TextDrawShowForPlayer(playerid,WC[3]);
			TextDrawShowForPlayer(playerid,WC[4]);
			TextDrawShowForPlayer(playerid,WC[5]);
			TextDrawShowForPlayer(playerid,WC[6]);
		}
		case 1:
		{

			TextDrawShowForPlayer(playerid,onconnect[0]);
			TextDrawShowForPlayer(playerid,onconnect[1]);
			TextDrawShowForPlayer(playerid,onconnect[2]);
			TextDrawShowForPlayer(playerid,onconnect[3]);
			TextDrawShowForPlayer(playerid,onconnect[4]);
			TextDrawShowForPlayer(playerid,onconnect[5]);
			TextDrawShowForPlayer(playerid,onconnect[6]);
			TextDrawShowForPlayer(playerid,onconnect[7]);
			TextDrawShowForPlayer(playerid,onconnect[8]);
			TextDrawShowForPlayer(playerid,onconnect[9]);
			TextDrawShowForPlayer(playerid,onconnect[10]);
		}
		case 2:
		{
			TextDrawShowForPlayer(playerid,TDEditor_PTD[0]); TextDrawShowForPlayer(playerid,TDEditor_PTD[1]); TextDrawShowForPlayer(playerid,TDEditor_PTD[21]); TextDrawShowForPlayer(playerid,TDEditor_PTD[20]);
			TextDrawShowForPlayer(playerid,TDEditor_PTD[2]); TextDrawShowForPlayer(playerid,TDEditor_PTD[3]); TextDrawShowForPlayer(playerid,TDEditor_PTD[4]); TextDrawShowForPlayer(playerid,TDEditor_PTD[5]);
			TextDrawShowForPlayer(playerid,TDEditor_PTD[6]); TextDrawShowForPlayer(playerid,TDEditor_PTD[7]); TextDrawShowForPlayer(playerid,TDEditor_PTD[8]); TextDrawShowForPlayer(playerid,TDEditor_PTD[9]);
			TextDrawShowForPlayer(playerid,TDEditor_PTD[10]); TextDrawShowForPlayer(playerid,TDEditor_PTD[11]); TextDrawShowForPlayer(playerid,TDEditor_PTD[12]); TextDrawShowForPlayer(playerid,TDEditor_PTD[13]);
			TextDrawShowForPlayer(playerid,TDEditor_PTD[14]); TextDrawShowForPlayer(playerid,TDEditor_PTD[15]); TextDrawShowForPlayer(playerid,TDEditor_PTD[16]); TextDrawShowForPlayer(playerid,TDEditor_PTD[17]);
			TextDrawShowForPlayer(playerid,TDEditor_PTD[18]); TextDrawShowForPlayer(playerid,TDEditor_PTD[19]);
		}
	}
	rankreq(playerid);

	// =========
	PD_CONSOLE(playerid);
	ResetPlayerMoney(playerid);
	new query[112];
	mysql_format(mysql, query, sizeof(query),"SELECT * FROM `bans` WHERE `b_name` = '%e' or `b_ip` ='%e' LIMIT 1", namee, ipp);
	mysql_pquery(mysql, query, "OnBanCheck", "ii", playerid, rCheck[playerid]);
	for(new i = 0; i < MAX_ZONES; ++i)
	{
		IsPlayerCapturing[playerid]{ i } = false;
		IsPlayerHelping[playerid]{ i } = false;
		ShowZone(i);
	}
	SetPlayerWorldBounds(playerid, 9999.9, -9999.9, 9999.9, -9999.9 );
	ClearChat(playerid);
	format(query, _, "~w~~h~%s ~w~has ~g~joined ~w~the server.", namee);
	BoxMSG(query);
	//---- rezz
	ResetPlayerWeapons(playerid);
	gTeam[playerid] = TEAM_EURASIA;
	SetPlayerTeam(playerid, TEAM_EURASIA);
	SpawnP[playerid] = BASE;
	gClass[playerid] = Assault;
	PlayerInfo[playerid][Dead] = PlayerInfo[playerid][cSkin] = PlayerInfo[playerid][assist] = PlayerInfo[playerid][cinvite] = PlayerInfo[playerid][InClan] = PlayerInfo[playerid][ClanLead] = pLastVeh[playerid] =
	LastPickid[playerid] = cToy1[playerid] = cToy2[playerid] = PlayerInfo[playerid][ClanOwn] = PlayerInfo[playerid][pCar] = LastPm[playerid] = marker[playerid] = marked[playerid] = PlayerInfo[playerid][ClanCoOwn] = -1;
	LastTeamD[playerid] = FirstSpawn[playerid] = 1;

	cName[playerid][0] = cRankName[playerid][0] = VIPLabel[playerid][0] = pms[playerid][0][0] = pms[playerid][1][0] = pms[playerid][2][0] = pms[playerid][3][0] = pms[playerid][4][0] =
	undo[playerid][0][0] = undo[playerid][1][0] = undo[playerid][2][0] = undo[playerid][3][0] = undo[playerid][4][0] = '\0';

	cPerk[playerid] = cPerk[MAX_PLAYERS];

	pDrunkLevelLast[playerid] = pFPS[playerid] = playercheckin[playerid] = Anti_Warn[0][playerid] = Anti_Warn[1][playerid] = PlayerInfo[playerid][mmlt] = Streak[playerid] = rconAttempts[playerid] = PlayerInfo[playerid][Level] = PlayerInfo[playerid][Cash] =
	PlayerInfo[playerid][ZHelps] = PlayerInfo[playerid][MKSpree] =
	PlayerInfo[playerid][MDSpree] = PlayerInfo[playerid][MCSpree] = DStreak[playerid] = PlayerInfo[playerid][MHCSpree] = PlayerInfo[playerid][ddm] = PlayerInfo[playerid][dcbdm] =
	
	PlayerKills[playerid][m9] = PlayerKills[playerid][sm9] = PlayerKills[playerid][fist] = PlayerKills[playerid][ak47] = PlayerKills[playerid][m4] = PlayerKills[playerid][rpg] = PlayerKills[playerid][satchel] =
	PlayerKills[playerid][grenade] = PlayerKills[playerid][knife] = PlayerKills[playerid][chainsaw] = PlayerKills[playerid][molotov] = PlayerKills[playerid][deagle] = PlayerKills[playerid][shotgun] =
	PlayerKills[playerid][sawnoff] = PlayerKills[playerid][combat] = PlayerKills[playerid][smg] = PlayerKills[playerid][tec9] = PlayerKills[playerid][mp5] = PlayerKills[playerid][rifle] = PlayerKills[playerid][sniper] =
	PlayerInfo[playerid][dsdm] = PlayerInfo[playerid][ZCaptures] = PlayerInfo[playerid][Skin] = PlayerInfo[playerid][dRank] = PlayerInfo[playerid][Headshots] =
	dmusickit[playerid] = PlayerInfo[playerid][Deaths] = PlayerInfo[playerid][Kills] = PlayerInfo[playerid][Frozen] = PlayerInfo[playerid][Helper] =
	PlayerInfo[playerid][OnDuty] = PlayerInfo[playerid][Registered] = PlayerInfo[playerid][God] = PlayerInfo[playerid][GodCar] = PlayerInfo[playerid][MuteWarnings] =
	PlayerInfo[playerid][Warnings] = PlayerInfo[playerid][DoorsLocked] = PlayerInfo[playerid][SpamCount] = PlayerInfo[playerid][SpamTime] = PlayerInfo[playerid][FailLogin] =
	PlayerInfo[playerid][Rage] = issync[playerid] = AvailableMines[playerid] = PlayerInfo[playerid][MuteTime] = PlayerInfo[playerid][XP] = ConnectKills[playerid] =
	PlayerInfo[playerid][CR] = PlayerInfo[playerid][CRP] = ConnectDeaths[playerid] = PlayerInfo[playerid][JailTime] = inevent[playerid] = Planted[playerid] = Spectating[playerid] = ReportTick[playerid] =
	PlayerInfo[playerid][hours] = PlayerInfo[playerid][mins] = PlayerInfo[playerid][secs] = SSLOG[playerid][s_capture] = AreaProtects[playerid] = CWJoins[playerid] = CHeals[playerid] = CWWins[playerid] = ZCLANAssist[playerid] =
	DetonateKills[playerid] = AssaultKills[playerid] = Heals[playerid] = Flashes[playerid] = Backstabs[playerid] = Intoxications[playerid] = RustlerBombeds[playerid] = AAMLKills[playerid] = SSLOG[playerid][s_assist] = DBoosts[playerid] = RACSKills[playerid] = VIPSKilled[playerid] = VehiclesDestroyed[playerid] = SSLOG[playerid][s_spazk] = SSLOG[playerid][s_m4k] =
	AtStats[playerid] = HeavyEnemyKill[playerid] = Removeit[playerid] = DriverPassengerKill[playerid] = BaseKills[playerid] = CapturePrevents[playerid] = ZoneAssists[playerid] = hidden[playerid] =
	PlayerInfo[playerid][Streamer] = QuestProgress[playerid][0] = Prest[playerid][0] = Prest[playerid][1] = Prest[playerid][2] = QuestProgress[playerid][1] = QuestProgress[playerid][2] = QuestProgress[playerid][3] = QuestProgress[playerid][4] = 0;

	PlayerInfo[playerid][VPB] = 0.0;

	PlayerInfo[playerid][Duel_I] = PlayerInfo[playerid][Duel_P] = Inviter[playerid] = Invited[playerid] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][ConnectTime] = gettime();


	SendClientMessage(playerid,0x00A4A4FF,"MOTD: %s",ServerInfo[MOTD]);
	DestroyDynamic3DTextLabel(RankLabel[playerid]);
	RankLabel[playerid] = CreateDynamic3DTextLabel("", 0x008080FF, 0.0, 0.0, 0.5, 50.0, playerid, INVALID_VEHICLE_ID, 1);
	return 1;
}

forward OnTournamentcheck();
public OnTournamentcheck()
{
	if(cache_num_rows() == 0) return 1;

	cache_get_value_name_int(0, "ON", CLAN_TOURNAMENT[CT_ON]);
	if(!CLAN_TOURNAMENT[CT_ON]) return 1;
	cache_get_value_name_int(0, "WINNER", CLAN_TOURNAMENT[CT_WINNER]);
	cache_get_value_name_int(0, "CM", CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH]);
	cache_get_value_name_int(0, "PHASE", CLAN_TOURNAMENT[CT_PHASE]);
	cache_get_value_name_int(0, "IT", CLAN_TOURNAMENT[CT_INITIAL_TEAMS]);
	cache_get_value_name_int(0, "MAX", CLAN_TOURNAMENT[CT_MAX]);
	cache_get_value_name_int(0, "QT1_0", CLAN_TOURNAMENT[CT_QUARTER_TEAM1][0]);
	cache_get_value_name_int(0, "QT1_1", CLAN_TOURNAMENT[CT_QUARTER_TEAM1][1]);
	cache_get_value_name_int(0, "QT1_2", CLAN_TOURNAMENT[CT_QUARTER_TEAM1][2]);
	cache_get_value_name_int(0, "QT1_3", CLAN_TOURNAMENT[CT_QUARTER_TEAM1][3]);
	cache_get_value_name_int(0, "QT2_0", CLAN_TOURNAMENT[CT_QUARTER_TEAM2][0]);
	cache_get_value_name_int(0, "QT2_1", CLAN_TOURNAMENT[CT_QUARTER_TEAM2][1]);
	cache_get_value_name_int(0, "QT2_2", CLAN_TOURNAMENT[CT_QUARTER_TEAM2][2]);
	cache_get_value_name_int(0, "QT2_3", CLAN_TOURNAMENT[CT_QUARTER_TEAM2][3]);

	cache_get_value_name_int(0, "ST1_0", CLAN_TOURNAMENT[CT_SEMI_TEAM1][0]);
	cache_get_value_name_int(0, "ST1_1", CLAN_TOURNAMENT[CT_SEMI_TEAM1][1]);
	cache_get_value_name_int(0, "ST2_0", CLAN_TOURNAMENT[CT_SEMI_TEAM2][0]);
	cache_get_value_name_int(0, "ST2_1", CLAN_TOURNAMENT[CT_SEMI_TEAM2][1]);
	cache_get_value_name_int(0, "FT1", CLAN_TOURNAMENT[CT_FINALS_TEAM1]);
	cache_get_value_name_int(0, "FT2", CLAN_TOURNAMENT[CT_FINALS_TEAM2]);

	new ttag[8][7], stag[4][7], ftag[2][7];

	cache_get_value_name(0, "TTAG_0", ttag[0],7);
	cache_get_value_name(0, "TTAG_1", ttag[1],7);
	cache_get_value_name(0, "TTAG_2", ttag[2],7);
	cache_get_value_name(0, "TTAG_3", ttag[3],7);
	cache_get_value_name(0, "TTAG_4", ttag[4],7);
	cache_get_value_name(0, "TTAG_5", ttag[5],7);
	cache_get_value_name(0, "TTAG_6", ttag[6],7);
	cache_get_value_name(0, "TTAG_7", ttag[7],7);

	cache_get_value_name(0, "STAG_0", stag[0],7);
	cache_get_value_name(0, "STAG_1", stag[1],7);
	cache_get_value_name(0, "STAG_2", stag[2],7);
	cache_get_value_name(0, "STAG_3", stag[3],7);

	cache_get_value_name(0, "FTAG_1", ftag[0],7);
	cache_get_value_name(0, "FTAG_2", ftag[1],7);

	for(new i = 0; i < 8; i++) strcopy(CT_TEAM_TAG[i], ttag[i]);
	for(new i = 0; i < 4; i++) strcopy(CT_SEMI_TAG[i], stag[i]);
	strcopy(CT_FINALS_TAG[0], ftag[0]);
	strcopy(CT_FINALS_TAG[1], ftag[1]);

    TextDrawSetString(CT_QUARTER[0], "%s - %s", CT_TEAM_TAG[0], CT_TEAM_TAG[4]);
    TextDrawSetString(CT_QUARTER[1], "%s - %s", CT_TEAM_TAG[1], CT_TEAM_TAG[5]);
    TextDrawSetString(CT_QUARTER[2], "%s - %s", CT_TEAM_TAG[2], CT_TEAM_TAG[6]);
    TextDrawSetString(CT_QUARTER[3], "%s - %s", CT_TEAM_TAG[3], CT_TEAM_TAG[7]);
    TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], CT_SEMI_TAG[2]);
    TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[1], CT_SEMI_TAG[3]);
    TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], CT_FINALS_TAG[1]);
	return 1;
}


forward OnBanCheck(playerid, rid);
public OnBanCheck(playerid, rid)
{
	if(rCheck[playerid] != rid) //if the race_check
	return SendClientMessage(playerid, -1, "You have been disconnected to avoid losing stats, please reconnect."), printf("Invalid Race Check: rCheck[playerid]: %i - race_check:%i", rCheck[playerid]), Kick(playerid);

	if(cache_num_rows()>0)
	{

		new adm[24],res[50],time[50],origin[24],unbantime;
		cache_get_value_name(0, "b_admin", adm, 24);
		cache_get_value_name(0, "b_reason", res,50);
		cache_get_value_name(0, "b_time", time, 50);
		cache_get_value_name(0, "b_name", origin, 24);
		cache_get_value_name_int(0,"expire", unbantime);

		TogglePlayerSpectating(playerid, true);
		if(unbantime == -1)
		{

			SendClientMessage(playerid,0xFF0080FF,"----------------------------------------------------------------------------------------------------------");
			SendClientMessage(playerid,0xFF0080FF,"* You are banned from the MW3 server by %s [ Reason : %s ] | Account Name (%s)",adm,res,origin);
			SendClientMessage(playerid,0xFF0080FF,"* Please if you think this is a mistake make a ban appeal at our Website www.mw3-samp.org/forum");
			SendClientMessage(playerid,0xFF0080FF,"* Dont keep join flooding or you can be range banned for this.");
			SendClientMessage(playerid,0xFF0080FF,"* Quit this client NOW.");
			SendClientMessage(playerid,0xFF0080FF,"----------------------------------------------------------------------------------------------------------");
		}
		else
		{

			new Hour, Minute, Second, Timestamp;
			Timestamp = gettime(Hour, Minute, Second);
			if(Timestamp>unbantime)
			{

				SendClientMessage(playerid, -1, "Your temporary ban has expired.");
				new queryy[220],name[24];
				strcat(name, PlayerInfo[playerid][Nick]);
				mysql_format(mysql, queryy, sizeof(queryy), "SELECT `pass` FROM `playerbase` WHERE `name` = '%e' LIMIT 1", name);
				mysql_pquery(mysql, queryy, "OnAccountCheck", "ii", playerid, rCheck[playerid]);
				mysql_format(mysql, queryy, sizeof(queryy), "DELETE FROM `bans` WHERE `b_name` = '%e'", name);
				mysql_tquery(mysql, queryy);

			}
			else
			{

				SendClientMessage(playerid,0xFF0080FF,"----------------------------------------------------------------------------------------------------------");
				SendClientMessage(playerid,0xFF0080FF,"* You are temporarily banned from the MW3 server by %s [ Reason : %s ] | Account Name (%s)",adm,res,origin);
				SendClientMessage(playerid,0xFF0080FF,"* Please if you think this is a mistake make a ban appeal at our Website www.mw3-samp.org/forum");
				SendClientMessage(playerid,0xFF0080FF,"* Dont keep join flooding or you can be range banned for this.");
				SendClientMessage(playerid,0xFF0080FF,"* Quit this client NOW.");
				SendClientMessage(playerid,0xFF0080FF,"----------------------------------------------------------------------------------------------------------");
			}
		}
		KickX(playerid);
	}
	else
	{
		new queryy[200];
		mysql_format(mysql, queryy, sizeof(queryy), "SELECT `pass` FROM `playerbase` WHERE `name` = '%e' LIMIT 1", PlayerInfo[playerid][Nick]);
		mysql_pquery(mysql, queryy, "OnAccountCheck", "ii", playerid, rid);
	}
	return 1;
}

forward OnAccountCheck(playerid, rid);
public OnAccountCheck(playerid, rid)
{
	if(rCheck[playerid] != rid) //if the race_check
	return SendClientMessage(playerid, -1, "You have been disconnected to avoid losing stats, please reconnect."), printf("Invalid Race Check: rCheck[playerid]: %i - race_check:%i", rCheck[playerid]), KickX(playerid);
	new hour,minuite,second; gettime(hour,minuite,second);
	SetPlayerTime(playerid, hour, minuite);
	createachievementstextdraws(playerid);
	TextDrawHideForPlayer(playerid,WC[0]); TextDrawHideForPlayer(playerid,WC[1]); TextDrawHideForPlayer(playerid,WC[2]); 	TextDrawHideForPlayer(playerid,WC[3]);
	TextDrawHideForPlayer(playerid,WC[4]); TextDrawHideForPlayer(playerid,WC[5]); TextDrawHideForPlayer(playerid,WC[6]); TextDrawHideForPlayer(playerid,onconnect[0]);
	TextDrawHideForPlayer(playerid,onconnect[1]); TextDrawHideForPlayer(playerid,onconnect[2]); TextDrawHideForPlayer(playerid,onconnect[3]); TextDrawHideForPlayer(playerid,onconnect[4]);
	TextDrawHideForPlayer(playerid,onconnect[5]); TextDrawHideForPlayer(playerid,onconnect[6]); TextDrawHideForPlayer(playerid,onconnect[7]);
	TextDrawHideForPlayer(playerid,onconnect[8]); TextDrawHideForPlayer(playerid,onconnect[9]); TextDrawHideForPlayer(playerid,onconnect[10]);
	TextDrawHideForPlayer(playerid,TDEditor_PTD[0]); TextDrawHideForPlayer(playerid,TDEditor_PTD[1]); TextDrawHideForPlayer(playerid,TDEditor_PTD[21]); TextDrawHideForPlayer(playerid,TDEditor_PTD[20]);
	TextDrawHideForPlayer(playerid,TDEditor_PTD[2]); TextDrawHideForPlayer(playerid,TDEditor_PTD[3]); TextDrawHideForPlayer(playerid,TDEditor_PTD[4]); TextDrawHideForPlayer(playerid,TDEditor_PTD[5]);
	TextDrawHideForPlayer(playerid,TDEditor_PTD[6]); TextDrawHideForPlayer(playerid,TDEditor_PTD[7]); TextDrawHideForPlayer(playerid,TDEditor_PTD[8]); TextDrawHideForPlayer(playerid,TDEditor_PTD[9]);
	TextDrawHideForPlayer(playerid,TDEditor_PTD[10]); TextDrawHideForPlayer(playerid,TDEditor_PTD[11]); TextDrawHideForPlayer(playerid,TDEditor_PTD[12]); TextDrawHideForPlayer(playerid,TDEditor_PTD[13]);
	TextDrawHideForPlayer(playerid,TDEditor_PTD[14]); TextDrawHideForPlayer(playerid,TDEditor_PTD[15]); TextDrawHideForPlayer(playerid,TDEditor_PTD[16]); TextDrawHideForPlayer(playerid,TDEditor_PTD[17]);
	TextDrawHideForPlayer(playerid,TDEditor_PTD[18]); TextDrawHideForPlayer(playerid,TDEditor_PTD[19]);

	SetPlayerCameraPos(playerid, 393.6751, 1739.6488, 199.9511); SetPlayerCameraLookAt(playerid, 392.8589, 1740.2338, 199.1110);
	if(cache_num_rows()>0)
	{

		cache_get_value_name(0, "pass", PlayerInfo[playerid][Pass], 129);
		ShowPlayerDialog(playerid, 130, DIALOG_STYLE_PASSWORD, "Login", ""cwhite"Welcome {0080FF}%s "cwhite"you are already registered\nKindly enter password to {0080FF}login"cwhite" to your account", "Login", "", PlayerInfo[playerid][Nick]);
	}
	else
	{

		ShowPlayerDialog(playerid, 126, DIALOG_STYLE_PASSWORD, "Register", ""cwhite"Welcome "cred"%s "cwhite"you are not registered\nKindly enter password to register your account", "Register", "", PlayerInfo[playerid][Nick]);
	}
	return 1;
}

forward OnAccountLoad(playerid, rid);
public OnAccountLoad(playerid, rid)
{
	if(rCheck[playerid] != rid) //if the race_check
	return SendClientMessage(playerid, -1, "You have been disconnected to avoid losing stats, please reconnect."), printf("Invalid Race Check: rCheck[playerid]: %i - race_check:%i", rCheck[playerid]), Kick(playerid);
    SetPlayerTime(playerid,12,0);
	new x;
	cache_get_value_name_int(0, "id", PlayerInfo[playerid][AID]);
	cache_get_value_name_int(0, "adminlvl", PlayerInfo[playerid][Level]);
	cache_get_value_name_int(0, "license", PlayerInfo[playerid][License]);
	cache_get_value_name_int(0, "namekey", PlayerInfo[playerid][namekey]);
	cache_get_value_name_int(0, "mute", PlayerInfo[playerid][MuteTime]);
	cache_get_value_name_int(0, "vip", PlayerInfo[playerid][dRank]);
	cache_get_value_name_int(0, "head", PlayerInfo[playerid][Headshots]);
	cache_get_value_name_int(0, "dmusickit", dmusickit[playerid]);
	cache_get_value_name_int(0, "money", PlayerInfo[playerid][Cash]);
	cache_get_value_name_float(0, "VPB", PlayerInfo[playerid][VPB]);
	cache_get_value_name_int(0, "jailtime", PlayerInfo[playerid][JailTime]);
	cache_get_value_name_int(0, "kills", PlayerInfo[playerid][Kills]);
	cache_get_value_name_int(0, "deaths", PlayerInfo[playerid][Deaths]);
	cache_get_value_name_int(0, "helper", PlayerInfo[playerid][Helper]);
	cache_get_value_name_int(0, "stm", PlayerInfo[playerid][Streamer]);
	new scr; cache_get_value_name_int(0, "score", scr);
	SetPlayerScore(playerid, scr);
	cache_get_value_name_int(0, "medkit", PlayerInfo[playerid][MedKit]);
	cache_get_value_name_int(0, "armourpack", PlayerInfo[playerid][ArmourP]);
	cache_get_value_name_int(0, "skin", PlayerInfo[playerid][Skin]);
	cache_is_value_name_null(0, "useskin", PlayerInfo[playerid][UseSkin]);
	cache_get_value_name_int(0, "inclan", x);
	cache_get_value_name_int(0, "clanlead", PlayerInfo[playerid][ClanLead]);
	cache_get_value_name_int(0, "crank", PlayerInfo[playerid][cRank]);
	cache_get_value_name_int(0, "clanown", PlayerInfo[playerid][ClanOwn]);
	cache_get_value_name_int(0, "clancoown", PlayerInfo[playerid][ClanCoOwn]);
	cache_get_value_name_int(0, "hours", PlayerInfo[playerid][hours]);
	cache_get_value_name_int(0, "minutes", PlayerInfo[playerid][mins]);
	cache_get_value_name_int(0, "seconds", PlayerInfo[playerid][secs]);
	cache_get_value_name_int(0, "ddm", PlayerInfo[playerid][ddm]);
	cache_get_value_name_int(0, "dcbdm", PlayerInfo[playerid][dcbdm]);
	cache_get_value_name_int(0, "dsdm", PlayerInfo[playerid][dsdm]);
	cache_get_value_name(0, "classes", ClassUpgradeDB[playerid]);
	cache_get_value_name(0, "pst", PrestDB[playerid]);
	cache_get_value_name(0, "quests", QuestDoneDB[playerid]);
	cache_get_value_name(0, "toggles", ToggleStateDB[playerid]);
	cache_get_value_name(0, "dtxt", VIPLabel[playerid]);

	new qp[11]; cache_get_value_name(0, "qp", qp);
	for(new i = 0; i < 9; i += 2)
	{
	    new p[3];
	    strcat(p, qp[i]);
	    strcat(p, qp[i+1]);
	    QuestProgress[playerid][i/2] = strval(p);
	}
	switch(QuestContent[0])
	{
	    case CONTENT_ZCAPTURE: SSLOG[playerid][s_capture] =  QuestProgress[playerid][0];
	    case CONTENT_ZASSIST: ZoneAssists[playerid] =  QuestProgress[playerid][0];
	    case CONTENT_ZPREVENT: CapturePrevents[playerid] =  QuestProgress[playerid][0];
	    case CONTENT_ZSPREE: ZonesSpree[playerid] =  QuestProgress[playerid][0];
	}
	switch(QuestContent[1])
	{
	    case CONTENT_HEADSHOT: SSLOG[playerid][s_headshot] =  QuestProgress[playerid][1];
	    case CONTENT_KASSIST: SSLOG[playerid][s_assist] =  QuestProgress[playerid][1];
	    case CONTENT_M4KILLS: SSLOG[playerid][s_m4k] =  QuestProgress[playerid][1];
	    case CONTENT_SPAZKILLS: SSLOG[playerid][s_spazk] =  QuestProgress[playerid][1];
	    case CONTENT_BASEKILL: BaseKills[playerid] =  QuestProgress[playerid][1];
	    case CONTENT_VKILL: DriverPassengerKill[playerid] =  QuestProgress[playerid][1];
	    case CONTENT_HVKILL: HeavyEnemyKill[playerid] =  QuestProgress[playerid][1];
	}
	switch(QuestContent[2])
	{
	    case CONTENT_BACKSTAB: Backstabs[playerid] =  QuestProgress[playerid][2];
	    case CONTENT_DETONATE: DetonateKills[playerid] =  QuestProgress[playerid][2];
	    case CONTENT_HEAL: Heals[playerid] =  QuestProgress[playerid][2];
	    case CONTENT_ASSAULT: AssaultKills[playerid] =  QuestProgress[playerid][2];
	    case CONTENT_TOXIC: Intoxications[playerid] =  QuestProgress[playerid][2];
	    case CONTENT_RBOMBS: RustlerBombeds[playerid] =  QuestProgress[playerid][2];
	    case CONTENT_FBANG: Flashes[playerid] =  QuestProgress[playerid][2];
	}
	switch(QuestContent[3])
	{
		case CONTENT_RACS: RACSKills[playerid] =  QuestProgress[playerid][3];
	    case CONTENT_AAML: AAMLKills[playerid] =  QuestProgress[playerid][3];
	    case CONTENT_DBOOST: DBoosts[playerid] =  QuestProgress[playerid][3];
	    case CONTENT_KVIPS: VIPSKilled[playerid] =  QuestProgress[playerid][3];
	    case CONTENT_KVEHICLES: VehiclesDestroyed[playerid] =  QuestProgress[playerid][3];
	}
	switch(QuestContent[4])
	{
	    case CONTENT_A51PROTECT: AreaProtects[playerid] = QuestProgress[playerid][4];
	    case CONTENT_ZCLANASSIST: ZCLANAssist[playerid] = QuestProgress[playerid][4];
	    case CONTENT_CWWIN: CWWins[playerid] = QuestProgress[playerid][4];
	    case CONTENT_CWJOIN: CWJoins[playerid] = QuestProgress[playerid][4];
	    case CONTENT_CHEAL: CHeals[playerid] = QuestProgress[playerid][4];
	}
	cache_get_value_name_int(0, "XP", PlayerInfo[playerid][XP]);
	for(new i = 0 ; i < 20; i++) { new str[2]; strcat(str, ClassUpgradeDB[playerid][i]); Bit_Set(ClassUpgrade[playerid], i, !!strval(str));}
	for(new i = 0 ; i < 3; i++) { new str[2]; strcat(str, PrestDB[playerid][i]); Prest[playerid][i] = strval(str);}
	for(new i = 0 ; i < 5; i++) { new str[2]; strcat(str, QuestDoneDB[playerid][i]); Bit_Set(QuestDone[playerid], i, !!strval(str));}
	for(new i = 0 ; i < 9; i++) { new str[2]; strcat(str, ToggleStateDB[playerid][i]); Bit_Set(ToggleState[playerid], i, !!strval(str));}
	PlayerInfo[playerid][LoggedIn] = true;
	if(PlayerInfo[playerid][dRank] > 2) if(dmusickit[playerid]<1) SendClientMessage(playerid, COLOR_YELLOW, "[DONOR]: Your killing music kit is not set, use /dmusickit (/dmk) to select one.");
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid,PlayerInfo[playerid][Cash]);
	SendClientMessage(playerid, 0x00A4A4FF, "[ACCOUNT] Successfully logged in.");
	PlayerInfo[playerid][InClan] = x;
	new hp[436];
	new vrk = PlayerInfo[playerid][dRank];
	if(vrk > 0 && Bit_Get(ToggleState[playerid], TOGGLE_VIPMSG))
	{
		strcat(hp, PlayerInfo[playerid][Nick]);
		if(vrk == 6) format(hp, _, "{FF0099}>> {FFFF00}SPONSOR {FF0099}: %s has just landed in MW3, hail! <<", hp);
		else format(hp, _, "{FF0099}>> {FFFF00}VIP {FF0099}: %s has just landed in MW3 <<", hp);
		SendClientMessageToAll(-1, hp);
	}
	if(PlayerInfo[playerid][MuteTime] > 0) PlayerInfo[playerid][Muted] = true;
	if(PlayerInfo[playerid][Level] > 0 || PlayerInfo[playerid][Helper] == 1)
	{
	    if(Bit_Get(ToggleState[playerid], TOGGLE_CMDTDS))
	    {
		    TextDrawShowForPlayer(playerid, AdminCMD_TD[0]);
		    TextDrawShowForPlayer(playerid, AdminCMD_TD[1]);
		    TextDrawShowForPlayer(playerid, AdminCMD_TD[2]);
		    TextDrawShowForPlayer(playerid, AdminCMD_TD[3]);
	    }
	}
	if(x != -1)
	{
		mysql_format(mysql, hp,sizeof(hp), "SELECT `cname`,`ctag`,`cskin`,`clevel`,`cuseranks`,`crank0`,`crank1`,`crank2`,`crank3`,`crank4`,`crank5`,`crank6`,`crank7`,`crank8`,`crank9`,`crank10`,`perk0`,`perk1`,`perk2`,`perk3`,`perk4`,`perk5`,`perk6`,`perk7`,`ctoy1`,`ctoy2`,`rank`,`rankprog` FROM `clans` WHERE `cid` = '%d' LIMIT 1", x);
		mysql_pquery(mysql, hp, "OnClanNameTagLoad", "i", playerid);
		strcopy(hp, PlayerInfo[playerid][Nick]);
		format(hp, _, "CLAN: %s logged in.", hp);
		ClanMSG(x, hp);
	}
	mysql_format(mysql, hp, 128, "SELECT * FROM friends WHERE `alpha`='%d' OR `beta`='%d' LIMIT 50", PlayerInfo[playerid][AID], PlayerInfo[playerid][AID]);
	mysql_pquery(mysql, hp, "OnFriendListLoad", "i", playerid);
	if(fexist(UserPath(playerid))) INI_ParseFile(UserPath(playerid), "LoadUser_%s", .bExtra = true, .extra = playerid);
	else
	{
		new INI:File = INI_Open(UserPath(playerid));
		INI_SetTag(File,"data");
		INI_WriteInt(File,"ak47",0);
		INI_WriteInt(File,"fist",0);
		INI_WriteInt(File,"m4",0);
		INI_WriteInt(File,"rpg",0);
		INI_WriteInt(File,"chainsaw",0);
		INI_WriteInt(File,"grenade",0);
		INI_WriteInt(File,"satchel",0);
		INI_WriteInt(File,"knife",0);
		INI_WriteInt(File,"molotov",0);
		INI_WriteInt(File,"deagle",0);
		INI_WriteInt(File,"shotgun",0);
		INI_WriteInt(File,"sawnoff",0);
		INI_WriteInt(File,"combat",0);
		INI_WriteInt(File,"smg",0);
		INI_WriteInt(File,"tec9",0);
		INI_WriteInt(File,"mp5",0);
		INI_WriteInt(File,"rifle",0);
		INI_WriteInt(File,"sniper",0);
		INI_WriteInt(File,"ZHelps",0);
		INI_WriteInt(File,"MKSpree",0);
		INI_WriteInt(File,"MDSpree",0);
		INI_WriteInt(File,"MCSpree",0);
		INI_WriteInt(File,"ZCaptures",0);
		INI_WriteInt(File,"m9", 0);
		INI_WriteInt(File,"sm9", 0);
		INI_Close(File);
	}
	LoadPlayerServer(playerid);
	return 1;
}

forward OnFriendListLoad(playerid);
public OnFriendListLoad(playerid)
{
    new cc = cache_num_rows();
    new pid = PlayerInfo[playerid][AID];
	if(cc > 0)
	{
		for(new i =0; i < cc; i++)
		{
		    new id1, id2;
		    cache_get_value_name_int(i, "alpha", id1); cache_get_value_name_int(i, "beta", id2);
		    new name[24];
		    if(pid == id1)
		    {
		        cache_get_value_name(i, "betaname", name);
		    	strcopy(FriendLine[playerid][i], name);
				FriendID[playerid][i] = id2;
		    }
		    else
		    {
		        cache_get_value_name(i, "alphaname", name);
		    	strcopy(FriendLine[playerid][i], name);
				FriendID[playerid][i] = id1;
		    }

		}
	}
	return 1;
}

forward OnClanToysLoad(playerid);
public OnClanToysLoad(playerid)
{
	new kk = cache_num_rows();
	for(new i = 0; i < kk; i++)
	{
	    new idx;
		cache_get_value_name_int(i, "index", idx);
		if(idx == 4)
		{
			cache_get_value_name_int(i, "tbone", Toy1Info[playerid][tbone]);
			cache_get_value_name_float(i, "tx", Toy1Info[playerid][tx]);
			cache_get_value_name_float(i, "ty", Toy1Info[playerid][ty]);
			cache_get_value_name_float(i, "tz", Toy1Info[playerid][tz]);
			cache_get_value_name_float(i, "rtx", Toy1Info[playerid][rtx]);
			cache_get_value_name_float(i, "rty", Toy1Info[playerid][rty]);
			cache_get_value_name_float(i, "rtz", Toy1Info[playerid][rtz]);
			cache_get_value_name_float(i, "tsx", Toy1Info[playerid][tsx]);
			cache_get_value_name_float(i, "tsy", Toy1Info[playerid][tsy]);
			cache_get_value_name_float(i, "tsz", Toy1Info[playerid][tsz]);
		}
		else
		{
			cache_get_value_name_int(i, "tbone", Toy2Info[playerid][tbone]);
			cache_get_value_name_float(i, "tx", Toy2Info[playerid][tx]);
			cache_get_value_name_float(i, "ty", Toy2Info[playerid][ty]);
			cache_get_value_name_float(i, "tz", Toy2Info[playerid][tz]);
			cache_get_value_name_float(i, "rtx", Toy2Info[playerid][rtx]);
			cache_get_value_name_float(i, "rty", Toy2Info[playerid][rty]);
			cache_get_value_name_float(i, "rtz", Toy2Info[playerid][rtz]);
			cache_get_value_name_float(i, "tsx", Toy2Info[playerid][tsx]);
			cache_get_value_name_float(i, "tsy", Toy2Info[playerid][tsy]);
			cache_get_value_name_float(i, "tsz", Toy2Info[playerid][tsz]);
		}
	}
	return 1;
}

forward OnClanNameTagLoad(playerid);
public OnClanNameTagLoad(playerid)
{
	if(cache_warning_count()) return SendClientMessage(playerid, RED, "Oups, something went wrong. Could not show your clan name and tag on your player tag.");
	if(cache_num_rows()>0)
	{
		new hp[144];
		new ccname[27], cctag[7];
		cache_get_value_name(0, "cname", ccname);
		strcopy(cName[playerid], ccname);
		cache_get_value_name(0, "ctag", cctag);
		strcopy(cTag[playerid], cctag);
		cache_get_value_name_int(0, "cskin", PlayerInfo[playerid][cSkin]);
		cache_get_value_name_int(0, "perk0", cPerk[playerid][0]);
		cache_get_value_name_int(0, "perk1", cPerk[playerid][1]);
		cache_get_value_name_int(0, "perk2", cPerk[playerid][2]);
		cache_get_value_name_int(0, "perk3", cPerk[playerid][3]);
		cache_get_value_name_int(0, "perk4", cPerk[playerid][4]);
		cache_get_value_name_int(0, "perk5", cPerk[playerid][5]);
		cache_get_value_name_int(0, "perk6", cPerk[playerid][6]);
		cache_get_value_name_int(0, "perk7", cPerk[playerid][7]);
		cache_get_value_name_int(0, "clevel", cLevel[playerid]);
		cache_get_value_name_int(0, "ctoy1", cToy1[playerid]);
		cache_get_value_name_int(0, "ctoy2", cToy2[playerid]);
		cache_get_value_name_int(0, "rank", PlayerInfo[playerid][CR]);
		cache_get_value_name_int(0, "rankprog", PlayerInfo[playerid][CRP]);
		new x = PlayerInfo[playerid][InClan];
		if(cToy1[playerid] != -1 || cToy2[playerid] != -1)
		{
			mysql_format(mysql, hp, sizeof(hp), "SELECT `index`,`tbone`,`tx`,`ty`,`tz`,`rtx`,`rty`,`rtz`,`tsx`,`tsy`,`tsz` FROM `clantoys` WHERE `cid`='%d' LIMIT 2", x);
			mysql_pquery(mysql, hp, "OnClanToysLoad", "i", playerid);
		}
		if(cPerk[playerid][7] > 0) SetPlayerMapIcon(playerid, 40, -1376.5936,1330.8347,15.0127, 57, 0, MAPICON_GLOBAL);
		strcopy(ccname, PlayerInfo[playerid][Nick]);
		new ctagg[8];
		format(ctagg, _, "[%s]", cctag);
		FreeRemoval[playerid] = false;
		if(strfind(ccname, ctagg, true) != -1)
		{
			ShowPlayerDialog(playerid, 2333, DIALOG_STYLE_MSGBOX, "Notice", "{FFFFFF}Our systems detected that you have {F3FF02}%s tag {FFFFFF}in your name, please remove it using /changename\n{FFFFFF}Our clan tag system will automatically add {F3FF02}%s tag {FFFFFF}next to your name in chat\nYou can use /changename this time for free", "ok", "", ctagg, ctagg);
			FreeRemoval[playerid] = true;
		}
		if(PlayerInfo[playerid][ClanOwn] == x) return cRankName[playerid] = "Owner";
		if(PlayerInfo[playerid][ClanCoOwn] == x) return cRankName[playerid] = "Co-Owner";
		if(PlayerInfo[playerid][ClanLead] == x) return cRankName[playerid] = "Leader";
		new str[15];
		switch(PlayerInfo[playerid][cRank])
		{

			case 0: cache_get_value_name(0, "crank0", str);
			case 1: cache_get_value_name(0, "crank1", str);
			case 2: cache_get_value_name(0, "crank2", str);
			case 3: cache_get_value_name(0, "crank3", str);
			case 4: cache_get_value_name(0, "crank4", str);
			case 5: cache_get_value_name(0, "crank5", str);
			case 6: cache_get_value_name(0, "crank6", str);
			case 7: cache_get_value_name(0, "crank7", str);
			case 8: cache_get_value_name(0, "crank8", str);
			case 9: cache_get_value_name(0, "crank9", str);
			case 10: cache_get_value_name(0, "crank10", str);
		}
		cRankName[playerid] = "";
		strcat(cRankName[playerid], str);
	}
	return 1;
}

CBaseOwnershipCheck(playerid)
{
	if(PlayerInfo[playerid][InClan] == -1) return 0;
	new ts = gettime();
	if((cPerk[playerid][7]+ 432000) < ts || cPerk[playerid][7] == 0)
	{
		cPerk[playerid][7] = 0;
		return 0;
	}
	else return 1;
}

forward LoadUser_data(playerid,name[],value[]);
public LoadUser_data(playerid,name[],value[])
{
	INI_Int("m9", PlayerKills[playerid][m9]);
	INI_Int("sm9", PlayerKills[playerid][sm9]);
	INI_Int("fist", PlayerKills[playerid][fist]);
	INI_Int("ak47", PlayerKills[playerid][ak47]);
	INI_Int("m4", PlayerKills[playerid][m4]);
	INI_Int("rpg", PlayerKills[playerid][rpg]);
	INI_Int("satchel", PlayerKills[playerid][satchel]);
	INI_Int("grenade", PlayerKills[playerid][grenade]);
	INI_Int("knife", PlayerKills[playerid][knife]);
	INI_Int("chainsaw", PlayerKills[playerid][chainsaw]);
	INI_Int("molotov", PlayerKills[playerid][molotov]);
	INI_Int("deagle", PlayerKills[playerid][deagle]);
	INI_Int("shotgun", PlayerKills[playerid][shotgun]);
	INI_Int("sawnoff", PlayerKills[playerid][sawnoff]);
	INI_Int("combat", PlayerKills[playerid][combat]);
	INI_Int("smg", PlayerKills[playerid][smg]);
	INI_Int("tec9", PlayerKills[playerid][tec9]);
	INI_Int("mp5", PlayerKills[playerid][mp5]);
	INI_Int("rifle", PlayerKills[playerid][rifle]);
	INI_Int("sniper", PlayerKills[playerid][sniper]);
	INI_Int("ZHelps", PlayerInfo[playerid][ZHelps]);
	INI_Int("MKSpree", PlayerInfo[playerid][MKSpree]);
	INI_Int("MDSpree", PlayerInfo[playerid][MDSpree]);
	INI_Int("MCSpree", PlayerInfo[playerid][MCSpree]);
	INI_Int("ZCaptures", PlayerInfo[playerid][ZCaptures]);
	return 1;
}
UserPath(playerid)
{
	new string[60];
	format(string, _, "%s%d.ini", PATH, PlayerInfo[playerid][AID]);
	return string;
}

forward OnAccountRegister(playerid, rid);
public OnAccountRegister(playerid, rid)
{
	if(rCheck[playerid] != rid) //if the race_check
	return SendClientMessage(playerid, -1, "You have been disconnected to avoid losing stats, please reconnect."), printf("Invalid Race Check: rCheck[playerid]: %i - race_check:%i", rCheck[playerid]), Kick(playerid);
    SetPlayerTime(playerid,12,0);
	SendClientMessage(playerid, 0x00A4A4FF, "Successfully registered - 100,000$ + 15 score as a bonus.");
	PlayerInfo[playerid][AID] = cache_insert_id();
	new INI:File = INI_Open(UserPath(playerid));
	INI_SetTag(File,"data");
	INI_WriteInt(File,"ak47",0);
	INI_WriteInt(File,"fist",0);
	INI_WriteInt(File,"m4",0);
	INI_WriteInt(File,"rpg",0);
	INI_WriteInt(File,"chainsaw",0);
	INI_WriteInt(File,"grenade",0);
	INI_WriteInt(File,"satchel",0);
	INI_WriteInt(File,"knife",0);
	INI_WriteInt(File,"molotov",0);
	INI_WriteInt(File,"deagle",0);
	INI_WriteInt(File,"shotgun",0);
	INI_WriteInt(File,"sawnoff",0);
	INI_WriteInt(File,"combat",0);
	INI_WriteInt(File,"smg",0);
	INI_WriteInt(File,"tec9",0);
	INI_WriteInt(File,"mp5",0);
	INI_WriteInt(File,"rifle",0);
	INI_WriteInt(File,"sniper",0);
	INI_WriteInt(File,"ZHelps",0);
	INI_WriteInt(File,"MKSpree",0);
	INI_WriteInt(File,"MDSpree",0);
	INI_WriteInt(File,"MCSpree",0);
	INI_WriteInt(File,"ZCaptures",0);
	INI_WriteInt(File,"m9", 0);
	INI_WriteInt(File,"sm9", 0);
		
	INI_Close(File);
	ClassUpgradeDB[playerid][0] = '\0';
	PrestDB[playerid][0] = '\0';
	QuestDoneDB[playerid][0] = '\0';
	ToggleStateDB[playerid][0] = '\0';
 	Bit_SetAll(ClassUpgrade[playerid], false);
 	Bit_SetAll(QuestDone[playerid], false);

 	Bit_Set(ToggleState[playerid], TOGGLE_TEXTDRAWS, true);
 	Bit_Set(ToggleState[playerid], TOGGLE_DND, false);
 	Bit_Set(ToggleState[playerid], TOGGLE_ANTISK, true);
 	Bit_Set(ToggleState[playerid], TOGGLE_CLANTAG, true);
 	Bit_Set(ToggleState[playerid], TOGGLE_VIPMSG, true);

	LoadPlayerServer(playerid);
	return 1;
}
UpdateLabelText(playerid)
{
	new string[150];
	if(!InArena(playerid, NON))
	{

		if(InArena(playerid, SDM)) format(string, _, "%s\nSniper Death-Match", GetRankName(playerid));
		else if(InArena(playerid, EDM)) format(string, _, "%s\nDeath-Match", GetRankName(playerid));
		else if(InArena(playerid, MDM)) format(string, _, "%s\nMinigun Death-Match", GetRankName(playerid));
		else if(InArena(playerid, CBDM)) format(string, _, "%s\nCB-Death-Match", GetRankName(playerid));
		else if(InArena(playerid, HSDM)) format(string, _, "%s\nHS-Death-Match", GetRankName(playerid));
		else if(InArena(playerid, CHDM)) format(string, _, "%s\nChainsaw-Death-Match", GetRankName(playerid));
		if(!isnull(VIPLabel[playerid])) format(string, _, "%s\n"cyellow"%s", string, VIPLabel[playerid]);
		UpdateDynamic3DTextLabelText(RankLabel[playerid],-1,string);
		return 1;
	}
	if(HasJoined(playerid)) return 1;
	if(gTeam[playerid] == TEAM_NONE)
	{

		UpdateDynamic3DTextLabelText(RankLabel[playerid],0x15FF00FF ,"Administrator\n!!Do Not Attack!!");
		return 1;
	}
	if(AntiSK[playerid]) return UpdateDynamic3DTextLabelText(RankLabel[playerid],COLOR_YELLOW,"Anti Spawn kill Protection");
	else
	{
		if(PlayerInfo[playerid][InClan] == -1)
		{
			format(string, _, "%s - %s", GetRankName(playerid), GetClass(playerid));
			if(PlayerInfo[playerid][dRank] > 0) if(!isnull(VIPLabel[playerid])) format(string, _, "%s\n"cyellow"%s", string, VIPLabel[playerid]);
		}
		else
		{
			format(string, _, "[%s] - %s \n %s - %s",cTag[playerid],cName[playerid],GetRankName(playerid), GetClass(playerid));
			if(PlayerInfo[playerid][dRank] > 0) if(!isnull(VIPLabel[playerid])) format(string, _, "%s\n"cyellow"%s", string, VIPLabel[playerid]);
		}
		if(WhiteLevel[playerid]> 0) format(string, _, "FLASHED\n%s", string);
	}
	if(gTeam[playerid] == TEAM_MERC)
	{

		if(!isnull(VIPLabel[playerid])) format(string, _, "Mercenary\n"cyellow"%s", VIPLabel[playerid]);
		UpdateDynamic3DTextLabelText(RankLabel[playerid],-1 ,"Mercenary");
		return 1;
	}
	switch(GetPlayerTeam(playerid))
	{

		case TEAM_EURASIA:	UpdateDynamic3DTextLabelText(RankLabel[playerid],TEAM_EURASIA_COLOR,string);
		case TEAM_ARAB:	UpdateDynamic3DTextLabelText(RankLabel[playerid],TEAM_ARAB_COLOR,string);
		case TEAM_SOVIET:	UpdateDynamic3DTextLabelText(RankLabel[playerid],TEAM_SOVIET_COLOR,string);
		case TEAM_USA:	UpdateDynamic3DTextLabelText(RankLabel[playerid],TEAM_USA_COLOR,string);
		case TEAM_AUS:	UpdateDynamic3DTextLabelText(RankLabel[playerid],TEAM_AUS_COLOR,string);
		case TEAM_FRANCE:	UpdateDynamic3DTextLabelText(RankLabel[playerid],TEAM_FR_COLOR,string);
		case TEAM_CH: UpdateDynamic3DTextLabelText(RankLabel[playerid],TEAM_CH_COLOR,string);
		case TEAM_ID: UpdateDynamic3DTextLabelText(RankLabel[playerid],TEAM_ID_COLOR,string);
		default: UpdateDynamic3DTextLabelText(RankLabel[playerid],TEAM_ID_COLOR,".");
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(playerid == MAX_PLAYERS) return 1;
	++ rCheck[playerid];
	if(IsABOT[playerid]) return 1;
    if(Iter_Contains(Lottery, playerid)) Iter_Remove(Lottery, playerid);
    new bet = Inviter[playerid] , alp = Invited[playerid];
    new bbb = RQOb[playerid];
    if(IsValidPlayerObject(playerid, bbb)) DestroyPlayerObject(playerid, bbb);
    if(alp != INVALID_PLAYER_ID)
    {
        KillTimer(FriendTimer[playerid]);
        Inviter[alp] = Invited[playerid] = INVALID_PLAYER_ID;
    }
	else if(bet != INVALID_PLAYER_ID)
    {
        KillTimer(FriendTimer[bet]);
        Inviter[playerid] = Invited[bet] = INVALID_PLAYER_ID;
    }
    if(inclantd[playerid])
	{
	    TextDrawHideForPlayer(playerid, ClanBar1);
		TextDrawHideForPlayer(playerid, ClanBar2);
		TextDrawHideForPlayer(playerid, ClanTitle2);
		TextDrawHideForPlayer(playerid, ClanTitle1);
		PlayerTextDrawHide(playerid, ClanName[playerid]);
		PlayerTextDrawHide(playerid, ClanOwners[playerid]);
		PlayerTextDrawHide(playerid, ClanLine1[playerid]);
		PlayerTextDrawHide(playerid, ClanLine2[playerid]);
		PlayerTextDrawHide(playerid, ClanCoOwners[playerid]);
		PlayerTextDrawHide(playerid, ClanSlogan[playerid]);
		PlayerTextDrawHide(playerid, ClanLeaders[playerid]);
		HideCRLogo(playerid);
		HidePlayerProgressBar(playerid, CRBar[playerid]);
		inclantd[playerid] = false;
	}
 	new tt = gTeam[playerid];
    if(InZeppelin[playerid] == tt)
	{
	    StopObject(BehemethObject[tt]);
	    KillTimer(ZPTimer[playerid]);
		ZeppelinDriver[tt] = -1;
		InZeppelin[playerid] = 0;
		BehemethHp[tt] = 2500;
		HidePlayerProgressBar(playerid, ZP_CooldownBar[playerid]);
		HidePlayerProgressBar(playerid, ZP_HPBar[playerid]);
		ZP_Heat[tt] = 0;
		OnZP_HeatTimer[tt] = 0;
		ZP_Usable[tt] = 1;
		MoveObject(BehemethObject[tt], BehemSpawn[tt][0], BehemSpawn[tt][1], 150.00, 20, 0.0000, 0.0000, 0.0000);
	}
	ZepDialog[playerid] = 0;
    if(PUBGLaunched)
	{
     	if(Iter_Contains(PUBGEvent, playerid))
		{
		    new Float:xxx,Float:yyy,Float:zz;
		    GetPlayerPos(playerid,xxx,yyy,zz);
		    gTeam[playerid] = TEAM_MERC;
	        new weapons[MAX_WEAPON_SLOTS][2];
			for(new WEAPON_SLOT:i = WEAPON_SLOT_PISTOL; i < MAX_WEAPON_SLOTS;i++)
			{
				GetPlayerWeaponData(playerid, i, WEAPON:weapons[i][0], weapons[i][1]);
				new WEAPON:weap = WEAPON:weapons[i][0];
				if(!(weap == WEAPON_SNIPER || weap == WEAPON_DEAGLE || weap == WEAPON_SHOTGUN || weap == WEAPON_MP5 || weap == WEAPON_M4 || weap == WEAPON_RIFLE || weap == WEAPON_GRENADE || weap == WEAPON_MOLTOV || weap == WEAPON_SILENCED)) continue;
			    if(weapons[i][1] > 0)
			    {
					new tag[86], type;
					new b = Iter_Free(PUBGIterator);
					Iter_Add(PUBGIterator, b);
					new Float:xx =  xxx + RandomFloat(-2.0, 2.0, 2), Float:yy =  yyy + RandomFloat(-2.0, 2.0, 2);
					PUBGLootObj[b][SpawnX] = xx;
					PUBGLootObj[b][SpawnY] = yy;
					PUBGLootObj[b][SpawnZ] = zz;
					format(tag, _, "%f %f %f", xx, yy, zz);
					SendClientMessage(playerid, COLOR_YELLOW,tag);

					switch(weap)
					{
					    case WEAPON_SNIPER: 	{ type = LOOT_SNIPER; 		tag = "Sniper"; 				}
					    case WEAPON_DEAGLE: 	{ type = LOOT_DEAGLE; 		tag = "Deagle"; 				}
					    case WEAPON_SHOTGUN: 	{ type = LOOT_SHOTGUN; 		tag = "Shotgun";			 	}
					    case WEAPON_MP5: 		{ type = LOOT_MP5;     	 	tag = "MP5"; 					}
					    case WEAPON_M4: 		{ type = LOOT_M4;    		tag = "M16A4"; 					}
					    case WEAPON_RIFLE: 		{ type = LOOT_RIFLE; 		tag = "KAR98K"; 				}
					    case WEAPON_GRENADE: 	{ type = LOOT_GRENADE; 		tag = "Grenade"; 				}
					    case WEAPON_MOLTOV: 	{ type = LOOT_MOLOTOV; 		tag = "Molotov"; 				}
					    case WEAPON_SILENCED: 	{ type = LOOT_SILENCED; 	tag = "Pistol w/ Suppressor"; 	}
					}
					strcat(tag, "\n\nF to pickup");
					PUBGLootObj[b][ObjType] = type;
			        PUBGLootObj[b][ObjID] = CreateDynamicObject(type,xx,yy,zz,0,0,0);
			        PUBGLootObj[b][ObjIDLabel] = CreateDynamic3DTextLabel(tag, 0xFFFF00AA, xx, yy, zz-0.1, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1,-1, 20.0 );
				}
			}
			Iter_Remove(PUBGEvent, playerid);
			TextDrawHideForPlayer(playerid, PubgSafeZoneTD);
			if(Iter_Count(PUBGEvent) == 1)
			{
			    new k = Iter_Random(PUBGEvent);
			  	TextDrawHideForPlayer(k, PUBGAliveTD);
			  	TextDrawHideForPlayer(k, PUBGStaticTD);
				SendClientMessageToAll(COLOR_PINK, "{FF0000}[PUBG] %s, Winner Winner Chicken Dinner! Earned 200XP, 100 Score & $100k as a reward.", PlayerInfo[k][Nick]);
				PlayerInfo[k][XP] += 200;
				SetPlayerScore(k, GetPlayerScore(k) + 100);
				GiveCash(k, 100000);
			    Iter_Clear(PUBGEvent);
			    PUBGLaunched = false;
			    TextDrawHideForPlayer(k, PubgSafeZoneTD);
			    ReloadPUBGLoot();
			    SetPlayerHealth(k, 0);
				ForceClassSelection(k);
			}
  		}
	}
	else if(Iter_Contains(PUBGEvent, playerid)) Iter_Remove(PUBGEvent, playerid);
	if(CLAN_WAR[CW_ON])
	{
		IsPlayerSpectating[playerid] = false;
		cmd_tspecoff(playerid);
		IsSpectator[playerid] = false;
		HideViewersTD(playerid);
		if(HasJoined(playerid))
		{
		    if(!CLAN_WAR[CW_STARTED]) goto there;
		    CW_R_KILLS[playerid] = CW_KILLS[playerid] = CW_DAMAGE[playerid] = CW_R_DAMAGE[playerid] = 0;
		    new maxx = CLAN_WAR[CW_MAX];
		    for(new i=0; i < maxx; i++)
			{
				HidePlayerProgressBar(playerid, CW_STAT_BAR[playerid][HPP][i]);
				HidePlayerProgressBar(playerid, CW_STAT_BAR[playerid][ARMOURR][i]);
				HidePlayerProgressBar(playerid, CW_STAT_BAR_2[playerid][HPP][i]);
				HidePlayerProgressBar(playerid, CW_STAT_BAR_2[playerid][ARMOURR][i]);
            }
			if(CLAN_WAR[CW_WARMUP]) RemoveBeforeWar(playerid);
			else
			{
				Iter_Remove(JOINED1, playerid);
				Iter_Remove(JOINED2, playerid);
				Iter_Remove(ALIVE1, playerid);
				Iter_Remove(ALIVE2, playerid);
				new str[96];
				format(str, _, PlayerInfo[playerid][Nick]);
				format(str, _, "[CLANWAR] %s disconnected and automatically left the war.", str);
				foreach(new i : JOINED1) SendClientMessage(i, red, str);
				foreach(new i : JOINED2) SendClientMessage(i, red, str);
				if(CLAN_WAR[CW_STARTED])
				{
					if(Iter_Count(JOINED1) == 0)
					{
						KillTimer(CWTimer5);
						mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
						mysql_tquery(mysql, str);
						mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
						mysql_tquery(mysql, str);
						foreach(new z : JOINED2)
						{
							str = cTag[z];
							CWWins[z] ++;
							if(QuestContent[4] == CONTENT_CWWIN)
							{
							    QuestProgress[z][4] ++;
							    if(CWWins[z] == 7)
								{
							    	if(!Bit_Get(QuestDone[z], 4))
							    	{
							    	    Bit_Let(QuestDone[z], 4);
							    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
							    	    TextDrawHideForPlayer(z,Quest[4]);
							    	    PlayerInfo[z][XP] += 100;
							    	    GiveCash(z, 50000);
							    	}
								}
							}
						}
						new bool:kk;
						if(CLAN_TOURNAMENT[CT_ON])
						{
							CLAN_TOURNAMENT[CT_PLAYING] = false;
							ct_available = false;
							switch(CLAN_TOURNAMENT[CT_PHASE])
							{
							    case QUARTER:
							    {
							        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
							        {
							            case 0:
							            {
							                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C2];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
							                strcopy(CT_SEMI_TAG[0], str);
									        TextDrawSetString(CT_SEMI[0], "%s - ?", str);
							            }
							            case 1:
							            {
							                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C2];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
							                strcopy(CT_SEMI_TAG[2], str);
									        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], str);
							            }
							            case 2:
							            {
							                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C2];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
							                strcopy(CT_SEMI_TAG[1], str);
									        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
							            }
							            case 3:
							            {
							                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C2];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                CLAN_TOURNAMENT[CT_PHASE] = SEMI;
							                strcopy(CT_SEMI_TAG[3], str);
									        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], str);
							            }
							        }
							    }
							    case SEMI:
							    {
									switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
							        {
							            case 0:
							            {
							                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C2];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
							                strcopy(CT_FINALS_TAG[0], str);
									        TextDrawSetString(CT_FINALS, "%s - ?", str);
							            }
							            case 1:
							            {
							                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C2];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                CLAN_TOURNAMENT[CT_PHASE] = FINALS;
							                strcopy(CT_FINALS_TAG[1], str);
									        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], str);
							            }
							        }
							    }
							    case FINALS:
								{
								    CLAN_TOURNAMENT[CT_ON] = false;
							        TextDrawSetString(CT_WINNER_TD, "Winner: %s", str);
							        kk = true;
							        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", str);
							        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C2];
							        WonTournament(CLAN_WAR[CW_C2]);
								}
							}
							if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", str, cTag[playerid]);
					    }
						else format(str, _, "(!) [%s] won the clan war against [%s].", str, cTag[playerid]);
						KillTimer(CWTimer5);
						SendClientMessageToAll(COLOR_PINK, str);
						foreach(new x: Player)
						{
						    if(IsSpectator[x])
						    {
						        cmd_tspecoff(x);
								for(new i=0; i < maxx; i++)
								{
									TextDrawHideForPlayer(x, CW_MEMBER[i]);
									TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
					            }
								TextDrawHideForPlayer(x, CW_ROUNDS);
								HideViewersTD(x);
								HideMVP(x);
						    }
						}
						new win, los;
						los = playerid; win = Iter_Random(JOINED2);
						DealCR(win, los);
						foreach(new x: JOINED1)
						{
							win = x;
							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++) {
								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							HideViewersTD(x);
							HideMVP(x);
							TextDrawHideForPlayer(x, CW_ROUNDS);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
						}
						foreach(new x: JOINED2)
						{

							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++) {
								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							TextDrawHideForPlayer(x, CW_ROUNDS);
							HideViewersTD(x);
							HideMVP(x);
							PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
						}
						foreach(new x: ALIVE2) SpawnPlayer(x);
						for(new i=0; i < maxx; i++) WAR_SLOT_T1[i] = WAR_SLOT_T2[i] = WAR_SLOT_T1_AID[i] = WAR_SLOT_T2_AID[i] = -1;
						CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
						Iter_Clear(JOINED1);
						Iter_Clear(JOINED2);
						Iter_Clear(ALIVE1);
						Iter_Clear(ALIVE2);
					}
					else if(Iter_Count(JOINED2) == 0)
					{
	                    KillTimer(CWTimer5);
						mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
						mysql_tquery(mysql, str);
						mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
						mysql_tquery(mysql, str);
						foreach(new z : JOINED1)
						{
							str = cTag[z];
							CWWins[z] ++;
							if(QuestContent[4] == CONTENT_CWWIN)
							{
								QuestProgress[z][4] ++;
							    if(CWWins[z] == 7)
							    {
							    	if(!Bit_Get(QuestDone[z], 4))
							    	{
							    	    Bit_Let(QuestDone[z], 4);
							    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
							    	    TextDrawHideForPlayer(z,Quest[4]);
							    	    PlayerInfo[z][XP] += 100;
							    	    GiveCash(z, 50000);
							    	}
								}
							}
						}
						if(CLAN_TOURNAMENT[CT_ON])
						{
							CLAN_TOURNAMENT[CT_PLAYING] = false;
							ct_available = false;
							new bool:kk;
							switch(CLAN_TOURNAMENT[CT_PHASE])
							{
							    case QUARTER:
							    {
							        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
							        {
							            case 0:
							            {
							                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C1];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
							                strcopy(CT_SEMI_TAG[0], str);
									        TextDrawSetString(CT_SEMI[0], "%s - ?", str);
							            }
							            case 1:
							            {
							                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C1];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
							                strcopy(CT_SEMI_TAG[2], str);
									        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], str);
							            }
							            case 2:
							            {
							                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C1];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
							                strcopy(CT_SEMI_TAG[1], str);
									        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
							            }
							            case 3:
							            {
							                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C1];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                CLAN_TOURNAMENT[CT_PHASE] = SEMI;
							                strcopy(CT_SEMI_TAG[3], str);
									        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], str);
							            }
							        }
							    }
							    case SEMI:
							    {
									switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
							        {
							            case 0:
							            {
							                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C1];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
							                strcopy(CT_FINALS_TAG[0], str);
									        TextDrawSetString(CT_FINALS, "%s - ?", str);
							            }
							            case 1:
							            {
							                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C1];
							                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                CLAN_TOURNAMENT[CT_PHASE] = FINALS;
							                strcopy(CT_FINALS_TAG[1], str);
									        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], str);
							            }
							        }
							    }
							    case FINALS:
								{
								    CLAN_TOURNAMENT[CT_ON] = false;
							        TextDrawSetString(CT_WINNER_TD, "Winner: %s", str);
							        kk = true;
							        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", str);
							        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C1];
							        WonTournament(CLAN_WAR[CW_C1]);
								}
							}
							if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", str, cTag[playerid]);
					    }
						else format(str, _, "(!) [%s] won the clan war against [%s].", str, cTag[playerid]);
						KillTimer(CWTimer5);
						SendClientMessageToAll(COLOR_PINK, str);

						new win, los;
						los = playerid; win = Iter_Random(JOINED1);
						DealCR(win, los);
						foreach(new x: Player)
						{
						    if(IsSpectator[x])
						    {
						        cmd_tspecoff(x);
								for(new i=0; i < maxx; i++)
								{
									TextDrawHideForPlayer(x, CW_MEMBER[i]);
									TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
					            }
								TextDrawHideForPlayer(x, CW_ROUNDS);
					            HideViewersTD(x);
					            HideMVP(x);
						    }
						}
						foreach(new x: JOINED1)
						{
							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++) {
								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							HideViewersTD(x);
							HideMVP(x);
							TextDrawHideForPlayer(x, CW_ROUNDS);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
							PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);
						}
						foreach(new x: ALIVE1) SpawnPlayer(x);
						foreach(new x: JOINED2)
						{

							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++) {
								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							HideViewersTD(x);
							HideMVP(x);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
							TextDrawHideForPlayer(x, CW_ROUNDS);
						}
						WAR_SLOT_T1 = WAR_SLOT_DEFAULT;
						WAR_SLOT_T2 = WAR_SLOT_DEFAULT;
						WAR_SLOT_T1_AID = WAR_SLOT_DEFAULT;
						WAR_SLOT_T2_AID = WAR_SLOT_DEFAULT;
						CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
						Iter_Clear(JOINED1);
						Iter_Clear(JOINED2);
						Iter_Clear(ALIVE1);
						Iter_Clear(ALIVE2);
					}
					else
					{
						for(new i=0; i < maxx; i++)
						{
							TextDrawHideForPlayer(playerid, CW_MEMBER[i]);
							TextDrawHideForPlayer(playerid, CW_MEMBER_2[i]);
							HidePlayerProgressBar(playerid, CW_STAT_BAR[playerid][HPP][i]);
							HidePlayerProgressBar(playerid, CW_STAT_BAR[playerid][ARMOURR][i]);
							HidePlayerProgressBar(playerid, CW_STAT_BAR_2[playerid][HPP][i]);
							HidePlayerProgressBar(playerid, CW_STAT_BAR_2[playerid][ARMOURR][i]);
						}
						Iter_Remove(ALIVE1, playerid);
						Iter_Remove(ALIVE2, playerid);
						for(new i=0; i < maxx; i++)
						{
							if(WAR_SLOT_T1[i] == playerid)
							{
								WAR_SLOT_T1[i] = WAR_SLOT_T1_AID[i] = -1;
								foreach(new l: JOINED1)
								{
								    TextDrawShowForPlayer(l, CW_DISCONNECT[i]);
									HidePlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									HidePlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								foreach(new l: JOINED2)
								{
								    TextDrawShowForPlayer(l, CW_DISCONNECT[i]);
									HidePlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									HidePlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								foreach(new l : Player)
								{
								    if(!IsSpectator[l]) continue;
								    TextDrawShowForPlayer(l, CW_DISCONNECT[i]);
									HidePlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									HidePlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								break;
							}
							if(WAR_SLOT_T2[i] == playerid)
							{
								WAR_SLOT_T2[i] = WAR_SLOT_T2_AID[i] = -1;
								foreach(new l: JOINED1)
								{
								    TextDrawShowForPlayer(l, CW_DISCONNECT_2[i]);
									HidePlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									HidePlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
								foreach(new l: JOINED2)
								{
								    TextDrawShowForPlayer(l, CW_DISCONNECT_2[i]);
									HidePlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									HidePlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
								foreach(new l : Player)
								{
								    if(!IsSpectator[l]) continue;
								    TextDrawShowForPlayer(l, CW_DISCONNECT_2[i]);
									HidePlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									HidePlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
								break;
							}
						}
						if(Iter_Count(ALIVE1) == 0)
						{

							CLAN_WAR[CW_ROUND2] ++;
							new rounds = CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2];
							if(CLAN_WAR[CW_ROUNDSS] == rounds)
							{
								if(CLAN_WAR[CW_ROUND1] > CLAN_WAR[CW_ROUND2])
								{
									mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
									mysql_tquery(mysql, str);
									mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
									mysql_tquery(mysql, str);
									foreach(new z : JOINED2)
									{
										str = cTag[z];
										CWWins[z] ++;
										if(QuestContent[4] == CONTENT_CWWIN)
										{
										    QuestProgress[z][4] ++;
										    if(CWWins[z] == 7)
										    {
										    	if(!Bit_Get(QuestDone[z], 4))
										    	{
										    	    Bit_Let(QuestDone[z], 4);
										    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
										    	    TextDrawHideForPlayer(z,Quest[4]);
										    	    PlayerInfo[z][XP] += 100;
										    	    GiveCash(z, 50000);
										    	}
											}
										}
									}
									if(CLAN_TOURNAMENT[CT_ON])
									{
										CLAN_TOURNAMENT[CT_PLAYING] = false;
										ct_available = false;
										new bool:kk;
										switch(CLAN_TOURNAMENT[CT_PHASE])
										{
										    case QUARTER:
										    {
										        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
										        {
										            case 0:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[0], cTag[playerid]);
												        TextDrawSetString(CT_SEMI[0], "%s - ?", cTag[playerid]);
										            }
										            case 1:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[2], cTag[playerid]);
												        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], cTag[playerid]);
										            }
										            case 2:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[1], cTag[playerid]);
												        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
										            }
										            case 3:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                			CLAN_TOURNAMENT[CT_PHASE] = SEMI;
										                strcopy(CT_SEMI_TAG[3], cTag[playerid]);
												        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], cTag[playerid]);
										            }
										        }
										    }
										    case SEMI:
										    {
												switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
										        {
										            case 0:
										            {
										                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_FINALS_TAG[0], cTag[playerid]);
												        TextDrawSetString(CT_FINALS, "%s - ?", cTag[playerid]);
										            }
										            case 1:
										            {
										                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                			CLAN_TOURNAMENT[CT_PHASE] = FINALS;
										                strcopy(CT_FINALS_TAG[1], cTag[playerid]);
												        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], cTag[playerid]);
										            }
										        }
										    }
										    case FINALS:
											{
											    CLAN_TOURNAMENT[CT_ON] = false;
										        TextDrawSetString(CT_WINNER_TD, "Winner: %s", cTag[playerid]);
										        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", cTag[playerid]);
										        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C1];
										        kk = true;
							        			WonTournament(CLAN_WAR[CW_C1]);
											}
										}
										if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", cTag[playerid], str);
								    }
									else format(str, _, "(!) [%s] won the clan war against [%s].", cTag[playerid], str);
									KillTimer(CWTimer5);
									foreach(new x: ALIVE1) { SpawnPlayer(x); PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);}
									foreach(new x: ALIVE2) SpawnPlayer(x);
									new win, los;
									win = playerid; los = Iter_Random(JOINED2);
									DealCR(win, los);
								}
								else
								{

									mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
									mysql_tquery(mysql, str);
									mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
									mysql_tquery(mysql, str);
									foreach(new x: ALIVE2) { SpawnPlayer(x); PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);}
									foreach(new x: ALIVE1) SpawnPlayer(x);
									foreach(new z : JOINED2)
									{
										str = cTag[z];
										CWWins[z] ++;
										if(QuestContent[4] == CONTENT_CWWIN)
										{
										    QuestProgress[z][4] ++;
											if(CWWins[z] == 7)
											{
										    	if(!Bit_Get(QuestDone[z], 4))
										    	{
										    	    Bit_Let(QuestDone[z], 4);
										    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
										    	    TextDrawHideForPlayer(z,Quest[4]);
										    	    PlayerInfo[z][XP] += 100;
										    	    GiveCash(z, 50000);
										    	}
											}
										}
									}
									if(CLAN_TOURNAMENT[CT_ON])
									{
										CLAN_TOURNAMENT[CT_PLAYING] = false;
										ct_available = false;
										new bool:kk;
										switch(CLAN_TOURNAMENT[CT_PHASE])
										{
										    case QUARTER:
										    {
										        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
										        {
										            case 0:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[0], str);
												        TextDrawSetString(CT_SEMI[0], "%s - ?", str);
										            }
										            case 1:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[2], str);
												        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], str);
										            }
										            case 2:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[1], str);
												        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
										            }
										            case 3:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                			CLAN_TOURNAMENT[CT_PHASE] = SEMI;
										                strcopy(CT_SEMI_TAG[3], str);
												        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], str);
										            }
										        }
										    }
										    case SEMI:
										    {
												switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
										        {
										            case 0:
										            {
										                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_FINALS_TAG[0], str);
												        TextDrawSetString(CT_FINALS, "%s - ?", str);
										            }
										            case 1:
										            {
										                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                			CLAN_TOURNAMENT[CT_PHASE] = FINALS;
										                strcopy(CT_FINALS_TAG[1], str);
												        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], str);
										            }
										        }
										    }
										    case FINALS:
											{
											    CLAN_TOURNAMENT[CT_ON] = false;
										        TextDrawSetString(CT_WINNER_TD, "Winner: %s", str);
										        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", str);
										        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C2];
							        			kk = true;
							        			WonTournament(CLAN_WAR[CW_C2]);
											}
										}
										if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", str, cTag[playerid]);
								    }
									else format(str, _, "(!) [%s] won the clan war against [%s].", str, cTag[playerid]);
									KillTimer(CWTimer5);
									foreach(new x: ALIVE2) { SpawnPlayer(x); PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);}
									foreach(new x: ALIVE1) SpawnPlayer(x);
									new win, los;
									los = playerid; win = Iter_Random(JOINED2);
									DealCR(win, los);
								}
								SendClientMessageToAll(COLOR_PINK, str);
								foreach(new x: Player)
								{
								    if(IsSpectator[x])
								    {
						        		cmd_tspecoff(x);
										for(new i=0; i < maxx; i++)
										{
											TextDrawHideForPlayer(x, CW_MEMBER[i]);
											TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
											TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
											TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
											HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
											HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
											HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
											HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							            }
							            TextDrawHideForPlayer(x, CW_ROUNDS);
							            HideViewersTD(x);
							            HideMVP(x);
								    }
								}
								foreach(new x: JOINED1)
								{

									IsPlayerSpectating[x] = false;
									TogglePlayerSpectating(x, false);
									for(new i=0; i < maxx; i++) {
										TextDrawHideForPlayer(x, CW_MEMBER[i]);
										TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
										TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
										TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
										HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
									}
									HideViewersTD(x);
									HideMVP(x);
									TextDrawHideForPlayer(x, CW_ROUNDS);
									CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
								}
								foreach(new x: JOINED2)
								{

									IsPlayerSpectating[x] = false;
									TogglePlayerSpectating(x, false);
									for(new i=0; i < maxx; i++) {
										TextDrawHideForPlayer(x, CW_MEMBER[i]);
										TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
										TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
										TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
										HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
									}
									HideViewersTD(x);
									HideMVP(x);
									TextDrawHideForPlayer(x, CW_ROUNDS);
									CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
								}
								WAR_SLOT_T1 = WAR_SLOT_DEFAULT;
								WAR_SLOT_T2 = WAR_SLOT_DEFAULT;
								WAR_SLOT_T1_AID = WAR_SLOT_DEFAULT;
								WAR_SLOT_T2_AID = WAR_SLOT_DEFAULT;
								CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
								Iter_Clear(JOINED1);
								Iter_Clear(JOINED2);
								Iter_Clear(ALIVE1);
								Iter_Clear(ALIVE2);
							}
							else
							{
								new tag1[7], tag2[7];
								foreach(new z : JOINED1)
								{
									strcat(tag1, cTag[z]);
									break;
								}
								foreach(new z : JOINED2)
								{
									strcat(tag2, cTag[z]);
									break;
								}
								CheckMVP(2);
								CWTimer5 = SetTimer("StartCW2", 10000, false);
								TextDrawSetString(CW_ROUNDS, "    Round: ~p~%d~w~/~g~%d~n~~b~~h~%s~w~: %d    ~r~~h~%s~w~: %d", CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2] + 1, CLAN_WAR[CW_ROUNDSS], tag2, CLAN_WAR[CW_ROUND2], tag1, CLAN_WAR[CW_ROUND1]);
								foreach(new c : JOINED1) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
								foreach(new c : JOINED2) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
								foreach(new c : Player) if(IsSpectator[c]) { TextDrawShowForPlayer(c, CW_ROUNDS); ShowMVP(c);}
								for(new i=0; i < maxx; i++)
								{
									if(IsPlayerConnected(WAR_SLOT_T1[i]))
									{
										SetPlayerHealth(WAR_SLOT_T1[i], 100.0, 100.0);
										foreach (new j : Player)
										{
											SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 100.00);
											SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 100.00);
										}
									}
									if(IsPlayerConnected(WAR_SLOT_T2[i]))
									{
										SetPlayerHealth(WAR_SLOT_T2[i], 100.0, 100.0);
										foreach (new j : Player)
										{
											SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 100.00);
											SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 100.00);
										}
									}

									foreach(new l: JOINED1)
									{
										if(IsPlayerConnected(WAR_SLOT_T1[i]))
										{
											ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
											ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
										}
										if(IsPlayerConnected(WAR_SLOT_T2[i]))
										{
											ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
											ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
										}
									}
									foreach(new l: JOINED2)
									{
										if(IsPlayerConnected(WAR_SLOT_T1[i]))
										{
											ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
											ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
										}
										if(IsPlayerConnected(WAR_SLOT_T2[i]))
										{
											ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
											ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
										}
									}
									foreach(new j: Player)
									{
									    if(IsSpectator[j])
									    {
									        if(IsPlayerConnected(WAR_SLOT_T1[i]))
											{
												ShowPlayerProgressBar(j, CW_STAT_BAR[j][HPP][i]);
												ShowPlayerProgressBar(j, CW_STAT_BAR[j][ARMOURR][i]);
										    }
										    if(IsPlayerConnected(WAR_SLOT_T2[i]))
											{
												ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][HPP][i]);
												ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][ARMOURR][i]);
										    }
											TextDrawShowForPlayer(j, CW_ROUNDS);
									    }
									}
								}
								// new showable = CLAN_TOURNAMENT[CT_ON];
								foreach(new w : JOINED1)
								{
									IsPlayerSpectating[w] = false;
									TogglePlayerSpectating(w, false);
									Iter_Add(ALIVE1, w);
									SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 1);
									PlayerPlaySound(w, 36205, 0.0, 0.0, 0.0);
									//if(showable)
									ShowViewersTD(w);
								}
								foreach(new w: JOINED2)
								{
									IsPlayerSpectating[w] = false;
									TogglePlayerSpectating(w, false);
									Iter_Add(ALIVE2, w);
									SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 2);
									PlayerPlaySound(w, 36205, 0.0, 0.0, 0.0);
									//if(showable)
									ShowViewersTD(w);
								}
								foreach(new w: Player)
								{
								    if(IsSpectator[w])
								    {
							        	foreach(new i : ALIVE1)
										{
											SpectatedPlayer2[w] = i;
											PlayerSpectatePlayer(w, i);
											break;
										}
										PlayerPlaySound(w, 36205, 0.0, 0.0, 0.0);
								    }
								}
							}
						}
						else if(Iter_Count(ALIVE2) == 0)
						{
							CLAN_WAR[CW_ROUND1] ++;
							new rounds = CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2];
							if(CLAN_WAR[CW_ROUNDSS] == rounds)
							{
								if(CLAN_WAR[CW_ROUND1] > CLAN_WAR[CW_ROUND2])
								{
									mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
									mysql_tquery(mysql, str);
									mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
									mysql_tquery(mysql, str);
									foreach(new x: ALIVE1) { SpawnPlayer(x); PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);}
									foreach(new x: ALIVE2) SpawnPlayer(x);
									foreach(new z : JOINED1)
									{
										str = cTag[z];
										CWWins[z] ++;
										if(QuestContent[4] == CONTENT_CWWIN)
										{
										    QuestProgress[z][4] ++;
										    if(CWWins[z] == 7)
										    {
										    	if(!Bit_Get(QuestDone[z], 4))
										    	{
										    	    Bit_Let(QuestDone[z], 4);
										    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
										    	    TextDrawHideForPlayer(z,Quest[4]);
										    	    PlayerInfo[z][XP] += 100;
										    	    GiveCash(z, 50000);
										    	}
											}
										}
									}
									new bool:kk;
									if(CLAN_TOURNAMENT[CT_ON])
									{
										CLAN_TOURNAMENT[CT_PLAYING] = false;
										ct_available = false;
										switch(CLAN_TOURNAMENT[CT_PHASE])
										{
										    case QUARTER:
										    {
										        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
										        {
										            case 0:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[0], str);
												        TextDrawSetString(CT_SEMI[0], "%s - ?", str);
										            }
										            case 1:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[2], str);
												        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], str);
										            }
										            case 2:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[1], str);
												        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
										            }
										            case 3:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                			CLAN_TOURNAMENT[CT_PHASE] = SEMI;
										                strcopy(CT_SEMI_TAG[3], str);
												        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], str);
										            }
										        }
										    }
										    case SEMI:
										    {
												switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
										        {
										            case 0:
										            {
										                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_FINALS_TAG[0], str);
												        TextDrawSetString(CT_FINALS, "%s - ?", str);
										            }
										            case 1:
										            {
										                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C1];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                			CLAN_TOURNAMENT[CT_PHASE] = FINALS;
										                strcopy(CT_FINALS_TAG[1], str);
												        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], str);
										            }
										        }
										    }
										    case FINALS:
											{
											    CLAN_TOURNAMENT[CT_ON] = false;
										        TextDrawSetString(CT_WINNER_TD, "Winner: %s", str);
										        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", str);
										        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C1];
							        			WonTournament(CLAN_WAR[CW_C1]);
							        			kk = true;
											}
										}
										if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", str, cTag[playerid]);
								    }
									else format(str, _, "(!) [%s] won the clan war against [%s].", str, cTag[playerid]);
									KillTimer(CWTimer5);
									foreach(new x: ALIVE1) { SpawnPlayer(x); PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);}
									foreach(new x: ALIVE2) SpawnPlayer(x);
									new win, los;
									los = playerid; win = Iter_Random(JOINED1);
									DealCR(win, los);
								}
								else
								{

									mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
									mysql_tquery(mysql, str);
									mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
									mysql_tquery(mysql, str);
									foreach(new x: ALIVE2) { SpawnPlayer(x); PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);}
									foreach(new x: ALIVE1) SpawnPlayer(x);
									foreach(new z : JOINED1)
									{
										str = cTag[z];
										CWWins[z] ++;
										if(QuestContent[4] == CONTENT_CWWIN)
										{
										    QuestProgress[z][4] ++;
										    if(CWWins[z] == 7)
										    {
										    	if(!Bit_Get(QuestDone[z], 4))
										    	{
										    	    Bit_Let(QuestDone[z], 4);
										    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
										    	    TextDrawHideForPlayer(z,Quest[4]);
										    	    PlayerInfo[z][XP] += 100;
										    	    GiveCash(z, 50000);
										    	}
											}
										}
									}
									new bool:kk;
									if(CLAN_TOURNAMENT[CT_ON])
									{
										CLAN_TOURNAMENT[CT_PLAYING] = false;
										ct_available = false;
										switch(CLAN_TOURNAMENT[CT_PHASE])
										{
										    case QUARTER:
										    {
										        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
										        {
										            case 0:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[0], cTag[playerid]);
												        TextDrawSetString(CT_SEMI[0], "%s - ?", cTag[playerid]);
										            }
										            case 1:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[2], cTag[playerid]);
												        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], cTag[playerid]);
										            }
										            case 2:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_SEMI_TAG[1], cTag[playerid]);
												        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
										            }
										            case 3:
										            {
										                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                			CLAN_TOURNAMENT[CT_PHASE] = SEMI;
										                strcopy(CT_SEMI_TAG[3], cTag[playerid]);
												        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], cTag[playerid]);
										            }
										        }
										    }
										    case SEMI:
										    {
												switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
										        {
										            case 0:
										            {
										                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
										                strcopy(CT_FINALS_TAG[0], cTag[playerid]);
												        TextDrawSetString(CT_FINALS, "%s - ?", cTag[playerid]);
										            }
										            case 1:
										            {
										                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C2];
										                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
							                			CLAN_TOURNAMENT[CT_PHASE] = FINALS;
										                strcopy(CT_FINALS_TAG[1], cTag[playerid]);
												        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], cTag[playerid]);
										            }
										        }
										    }
										    case FINALS:
											{
											    CLAN_TOURNAMENT[CT_ON] = false;
										        TextDrawSetString(CT_WINNER_TD, "Winner: %s", cTag[playerid]);
										        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", cTag[playerid]);
										        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C2];
							        			WonTournament(CLAN_WAR[CW_C2]);
							        			kk = true;
											}
										}
										if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", cTag[playerid], str);
								    }
									else format(str, _, "(!) [%s] won the clan war against [%s].", cTag[playerid], str);
									KillTimer(CWTimer5);
									foreach(new x: ALIVE2) { SpawnPlayer(x); PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);}
									foreach(new x: ALIVE1) SpawnPlayer(x);
									new win, los;
									win = playerid; los = Iter_Random(JOINED1);
									DealCR(win, los);
								}
								SendClientMessageToAll(COLOR_PINK, str);
								foreach(new x: Player)
								{
								    if(IsSpectator[x])
								    {
						        		cmd_tspecoff(x);
										for(new i=0; i < maxx; i++)
										{
											TextDrawHideForPlayer(x, CW_MEMBER[i]);
											TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
											TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
											TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
											HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
											HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
											HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
											HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							            }
							            TextDrawHideForPlayer(x, CW_ROUNDS);
							            HideViewersTD(x);
							            HideMVP(x);
								    }
								}
								foreach(new x: JOINED1)
								{

									IsPlayerSpectating[x] = false;
									TogglePlayerSpectating(x, false);
									for(new i=0; i < maxx; i++) {
										TextDrawHideForPlayer(x, CW_MEMBER[i]);
										TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
										TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
										TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
										HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
									}
									TextDrawHideForPlayer(x, CW_ROUNDS);
									HideViewersTD(x);
									HideMVP(x);
									CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
								}
								foreach(new x: JOINED2)
								{

									IsPlayerSpectating[x] = false;
									TogglePlayerSpectating(x, false);
									for(new i=0; i < maxx; i++) {
										TextDrawHideForPlayer(x, CW_MEMBER[i]);
										TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
										TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
										TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
										HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
										HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
									}
									TextDrawHideForPlayer(x, CW_ROUNDS);
									HideViewersTD(x);
									HideMVP(x);
									CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
								}
								WAR_SLOT_T1 = WAR_SLOT_DEFAULT;
								WAR_SLOT_T2 = WAR_SLOT_DEFAULT;
								WAR_SLOT_T1_AID = WAR_SLOT_DEFAULT;
								WAR_SLOT_T2_AID = WAR_SLOT_DEFAULT;
								CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
								Iter_Clear(JOINED1);
								Iter_Clear(JOINED2);
								Iter_Clear(ALIVE1);
								Iter_Clear(ALIVE2);
							}
							else
							{

								new tag1[7], tag2[7];
								foreach(new z : JOINED1)
								{
									strcat(tag1, cTag[z]);
									break;
								}
								foreach(new z : JOINED2)
								{

									strcat(tag2, cTag[z]);
									break;
								}
								CWTimer5 = SetTimer("StartCW2", 10000, false);
								CheckMVP(1);
								TextDrawSetString(CW_ROUNDS, "    Round: ~p~%d~w~/~g~%d~n~~b~~h~%s~w~: %d    ~r~~h~%s~w~: %d", CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2] + 1, CLAN_WAR[CW_ROUNDSS], tag2, CLAN_WAR[CW_ROUND2], tag1, CLAN_WAR[CW_ROUND1]);
								foreach(new c : JOINED1) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
								foreach(new c : JOINED2) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
								for(new i=0; i < maxx; i++)
								{

									if(IsPlayerConnected(WAR_SLOT_T1[i]))
									{
										SetPlayerHealth(WAR_SLOT_T1[i], 100.0, 100.0);
										foreach (new j : Player)
										{
											SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 100.00);
											SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 100.00);
										}
									}
									if(IsPlayerConnected(WAR_SLOT_T2[i]))
									{
										SetPlayerHealth(WAR_SLOT_T2[i], 100.0, 100.0);
										foreach (new j : Player)
										{
											SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 100.00);
											SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 100.00);
										}
									}

									foreach(new l: JOINED1)
									{
										if(IsPlayerConnected(WAR_SLOT_T1[i]))
										{
											ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
											ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
										}
										if(IsPlayerConnected(WAR_SLOT_T2[i]))
										{
											ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
											ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
										}
									}
									foreach(new l: JOINED2)
									{
										if(IsPlayerConnected(WAR_SLOT_T1[i]))
										{
											ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
											ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
										}
										if(IsPlayerConnected(WAR_SLOT_T2[i]))
										{
											ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
											ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
										}
									}
									foreach(new j: Player)
									{
									    if(IsSpectator[j])
									    {
									        if(IsPlayerConnected(WAR_SLOT_T1[i]))
											{
												ShowPlayerProgressBar(j, CW_STAT_BAR[j][HPP][i]);
												ShowPlayerProgressBar(j, CW_STAT_BAR[j][ARMOURR][i]);
										    }
										    if(IsPlayerConnected(WAR_SLOT_T2[i]))
											{
												ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][HPP][i]);
												ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][ARMOURR][i]);
										    }
											TextDrawShowForPlayer(j, CW_ROUNDS);
									    }
									}
								}
								foreach(new w : JOINED1)
								{

									IsPlayerSpectating[w] = false;
									TogglePlayerSpectating(w, false);
									Iter_Add(ALIVE1, w);
									SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 1);
								}
								foreach(new w: JOINED2)
								{

									IsPlayerSpectating[w] = false;
									TogglePlayerSpectating(w, false);
									Iter_Add(ALIVE2, w);
									SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 2);
								}
								foreach(new w: Player)
								{
								    if(IsSpectator[w])
								    {
								        ShowMVP(w);
							        	foreach(new i : ALIVE1)
										{
											SpectatedPlayer2[w] = i;
											PlayerSpectatePlayer(w, i);
											break;
										}
								    }
								}
							}
						}
						else
						{
							foreach(new i : Player) if(IsSpectator[i]) if(SpectatedPlayer2[i] == playerid) SpectateNext2(i);
							foreach(new i : JOINED1) if(SpectatedPlayer[i] == playerid) SpectateNext(i);
							foreach(new i : JOINED2) if(SpectatedPlayer[i] == playerid) SpectateNext(i);
						}
					}
				}
			}
		}
	}
	there: {}
	if(playerid == airvehdriver) FailAirstrikeDis(playerid);
    if(GetPVarInt(playerid,"roped") == 1) for(new destr=0;destr<ropelength;destr++) { DestroyDynamicObject(r0pes[playerid][destr]); r0pes[playerid][destr] = -1; }
	Bit_Set(isdspec, playerid, false);
	if(CBaseOwnershipCheck(playerid)) RemovePlayerMapIcon(playerid, 40);
	if(BonD == playerid) BonD = INVALID_PLAYER_ID;
	foreach(new i: PlacedMines)
	{
		if(Mine[i][m_player] == playerid)
		{
			if(Mine[i][m_used] == true)
			{
				new obj = Mine[i][m_object], obj2 = Mine[i][m_object2];
				Mine[i][m_object] = Mine[i][m_object2] = -1;
				IsAMine[obj] = false;
				IsAMine[obj2] = false;
				DestroyDynamicObject(obj);
				DestroyDynamicObject(obj2);
				DestroyDynamic3DTextLabel(Mine[i][m_label]);
				Mine[i][m_used] = false;
				Mine[i][m_player] = INVALID_PLAYER_ID;
				Iter_Remove(PlacedMines, i);
			}
		}
	}
	if(C4Planted[playerid])
	{
		C4Planted[playerid] = 0;
		new TotalVehicles = CreateVehicle(411, 0, 0, 0, 0, 0, 0, 1000);    DestroyVehicle(TotalVehicles);
		for(new i = 1; i < TotalVehicles; i++)
		{
			if(VehicleBomber[i] == playerid)
			{
				VehicleBomber[i] = -1;
				break;
			}
		}
		KillTimer(VehicleBombTimer[playerid]);
	}
	if(CurrentWinner == playerid)
	{

		new maxx, target;
		target = maxx = -1;
		foreach(new i : Player)
		{

			if(CurrentTOURCount[i] > maxx)
			{

				target = i;
				maxx = CurrentTOURCount[i];
			}
		}
		if(target != -1)
		{

			new msg[96];
			CurrentWinner = target;
			CurrentTOURValue = maxx;
			strcat(msg, PlayerInfo[target][Nick]);
			switch(CurrentTOUR)
			{

				case TOUR_KILLS: format(msg, _, "Hourly_Tournament:~b~_Top_Kills~n~~b~Current_Winner: ~w~%s_-_%d", msg, maxx);
				case TOUR_DEAG: format(msg, _, "Hourly_Tournament:~b~_Top_Deagle_Kills~n~~b~Current_Winner:_~w~%s_-_%d", msg, maxx);
				case TOUR_CAP: format(msg, _, "Hourly_Tournament:~b~_Top_Zone_Captures~n~~b~Current_Winner:_~w~%s_-_%d", msg, maxx);
				case TOUR_HEAD: format(msg, _, "Hourly_Tournament:~b~_Top_Headshots~n~~b~Current_Winner:_~w~%s_-_%d", msg, maxx);
			}
			TextDrawSetString(TournamentTD, msg);
			foreach(new i : Player) if(tournamentshown[i]) if(PlayerInfo[i][IsSpawned]) TextDrawShowForPlayer(i, TournamentTD);
		}
	}
	SPTimer[playerid] = Spectating[playerid] = toxicvar[playerid] = CurrentTOURCount[playerid] = FakekillData[playerid][DeathCount] = FakekillData[playerid][LastDeathTime] = 0;
	DestroyDynamicObject(toxicsmoke[playerid][0]); DestroyDynamicObject(toxicsmoke[playerid][1]); DestroyDynamicObject(toxicsmoke[playerid][2]); DestroyDynamicObject(toxicsmoke[playerid][3]);
	DestroyDynamicObject(toxicsmoke[playerid][4]); DestroyDynamicObject(toxicsmoke[playerid][5]); DestroyDynamicObject(toxicsmoke[playerid][6]); DestroyDynamicObject(toxicsmoke[playerid][7]);
	DestroyDynamicObject(toxicsmoke[playerid][8]); DestroyDynamicObject(toxicsmoke[playerid][9]); DestroyDynamicObject(toxicsmoke[playerid][10]); DestroyDynamicObject(toxicsmoke[playerid][11]);
	DestroyDynamicObject(toxicsmoke[playerid][12]); DestroyDynamicObject(toxicsmoke[playerid][13]); DestroyDynamicObject(toxicsmoke[playerid][14]); DestroyDynamicObject(toxicsmoke[playerid][15]);
	DestroyDynamicObject(toxicsmoke[playerid][16]); DestroyDynamicObject(toxicbomb[playerid]);
	toxicbomb[playerid] = toxicsmoke[playerid][0] = toxicsmoke[playerid][1] = toxicsmoke[playerid][2] = toxicsmoke[playerid][3] = toxicsmoke[playerid][4] = toxicsmoke[playerid][5] =
	toxicsmoke[playerid][6] = toxicsmoke[playerid][7] = toxicsmoke[playerid][8] = toxicsmoke[playerid][9] = toxicsmoke[playerid][10] = toxicsmoke[playerid][11] = toxicsmoke[playerid][12] =
	toxicsmoke[playerid][13] = toxicsmoke[playerid][14] = toxicsmoke[playerid][15] = toxicsmoke[playerid][16] = -1;
	KillTimer(toxicbombdeploytimer[playerid]);
	for(new i = 0; i < 10; i++)
	{
		if(REPORTS[i][R_target] == playerid)
		{
			REPORTS[i][R_target] = -1;
			REPORTS[i][R_active] = REPORTS[i][R_check] = false;
		}
	}
	if(Planted[playerid])
	{
		DestroyDynamicObject(Bombb[playerid]);
		Bombb[playerid] = -1;
		Planted[playerid] = 0;
	}
	new str[128], name[24];
	strcat(name, PlayerInfo[playerid][Nick]);
	if(reason == 0) str = "Timeout/Crash";
	else if(reason == 1) str = "Quit";
	else if(reason == 2) str = "Kick/Ban";
	format(str, _, "~w~~h~%s ~w~has ~r~left ~w~the server (%s)", name, str);
	BoxMSG(str);
	for(new i = 0; i < MAX_ZONES; ++i)
	{
		if(IsPlayerCapturing[playerid]{ i })
		{
			LeavingZONE(playerid, i);
			break;
		}
		else if(IsPlayerHelping[playerid]{ i })
		{
			IsPlayerHelping[playerid]{ i } = false;
			HidePlayerProgressBar(playerid, ZBar[playerid]);
			break;
		}
	}
	if(BombPlanted[playerid] == 1) {
		DestroyDynamicObject(Dynamit[playerid]);
		Dynamit[playerid] = -1;
		KillTimer(BombTime[playerid]);
		BombPlanted[playerid] = 0;
	}
	//-----------------------------------------------------
	SetPVarInt(playerid,"LastID",-1);
	if(PlayerInfo[playerid][pCar] != -1) CarDeleter(PlayerInfo[playerid][pCar]);
	PlayerInfo[playerid][pCar] = -1;
	if(PlayerInfo[playerid][Duel_P] != INVALID_PLAYER_ID)
	{
		new leaver = PlayerInfo[playerid][Duel_P];
	    if(PlayerInfo[playerid][InDuel] == 0)
	    {
			KillTimer(PlayerInfo[playerid][Duel_T]);
			PlayerInfo[leaver][Duel_I] = INVALID_PLAYER_ID;
			PlayerInfo[playerid][Duel_P] = INVALID_PLAYER_ID;
			SendClientMessage(leaver,-1,"Duel request canceled (invitor disonnected)");
			return 1;
	    }
	    else
	    {
			SendClientMessageToAll(0xC62509FF, "** %s(%d) has won the duel against %s(%d) [BET] : $%d", PlayerInfo[leaver][Nick], leaver, name, playerid, PlayerInfo[playerid][Duel_B]);
			GiveCash(playerid,-PlayerInfo[leaver][Duel_B]);
			GiveCash(leaver,PlayerInfo[leaver][Duel_B]);
			GameTextForPlayer(leaver,"~g~~w~winner",6000,5);
			SendDeathMessage(leaver,playerid,reason);
			PlayerInfo[playerid][InDuel] = 0;
			PlayerInfo[leaver][InDuel] = 0;
			PlayerInfo[playerid][Duel_P] = PlayerInfo[playerid][Duel_I] = PlayerInfo[leaver][Duel_P] = PlayerInfo[leaver][Duel_I] = INVALID_PLAYER_ID;
		}
	}
	if(PlayerInfo[playerid][Duel_I] != INVALID_PLAYER_ID)
	{
		new leaver = PlayerInfo[playerid][Duel_I];
		SendClientMessageToAll(0xC62509FF, "** %s(%d) has won the duel against %s(%d) [BET] : $%d", PlayerInfo[leaver][Nick], leaver, name, playerid, PlayerInfo[playerid][Duel_B]);
		GiveCash(playerid,-PlayerInfo[leaver][Duel_B]);
		GiveCash(leaver,PlayerInfo[leaver][Duel_B]);
		GameTextForPlayer(leaver,"~g~~w~winner",6000,5);
		SendDeathMessage(leaver,playerid,reason);
		PlayerInfo[playerid][InDuel] = 0;
		PlayerInfo[leaver][InDuel] = 0;
		PlayerInfo[playerid][Duel_P] = PlayerInfo[playerid][Duel_I] = PlayerInfo[leaver][Duel_P] = PlayerInfo[leaver][Duel_I] = INVALID_PLAYER_ID;
	}
	for(new i=0; i < MAX_ARENAS; i++)
	{
		if(InArena(playerid, i))
		{
			Iter_Remove(ARENA[i], playerid);
			break;
		}
	}
	new x = PlayerInfo[playerid][InClan];
	VIPLabel[playerid][0] = '\0';
	if( x != -1)
	{
		format(str, _, "CLAN: %s logged out.", name);
		ClanMSG(x, str);
		new ck = ConnectKills[playerid], cd = ConnectDeaths[playerid];
		if(ck > 0 || cd > 0)
		{
			mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `ckills`= `ckills`+'%d', `cdeaths`=`cdeaths`+'%d' WHERE `cID`='%d' LIMIT 1", ck, cd, x);
			mysql_tquery(mysql, str);
		}
	}
	foreach(new i : Player) ShowPlayerNameTagForPlayer(i, playerid, true);
	if(!PlayerInfo[playerid][is_undercover]) SavePlayer(playerid);
	return 1;
}

SpawnPR(playerid,time)
{
	SetPlayerHealth(playerid, 99999.0);
	SetPlayerAttachedObject(playerid, 9, 18700, 1, 1.081000, 0.000000, -1.595999, -0.699999, -4.800000, -92.500000, 1.000000, 0.000000, 1.000000);
	AntiSK[playerid] = true;
	ResetPlayerWeapons(playerid);
	KillTimer(PlayerInfo[playerid][SL]);
	PlayerInfo[playerid][SL] = SetTimerEx("SpawnProtection", time, false, "d", playerid);
}
AnimPreloadForPlayer(playerid, const animlib[])
{
	ApplyAnimation(playerid, animlib, "null", 0.0, false, false, false, false, 0);
	return true;
}

RandSpawn(playerid)
{
	switch(gTeam[playerid])
	{
  		case TEAM_EURASIA:
		{

			new rand = random(sizeof(EurasiaSpawn));
			SetPlayerPos(playerid, EurasiaSpawn[rand][0], EurasiaSpawn[rand][1], EurasiaSpawn[rand][2]);
			SetPlayerFacingAngle(playerid,EurasiaSpawn[rand][3]);
			SetPlayerSkin(playerid, 73);
		}
		case TEAM_SOVIET:
		{

			new rand = random(sizeof(RussiaSpawn));
			SetPlayerPos(playerid, RussiaSpawn[rand][0], RussiaSpawn[rand][1], RussiaSpawn[rand][2]);
			SetPlayerFacingAngle(playerid,RussiaSpawn[rand][3]);
			SetPlayerSkin(playerid, 285);
		}
		case TEAM_ARAB:
		{

			new rand = random(sizeof(ArabSpawn));
			SetPlayerPos(playerid, ArabSpawn[rand][0], ArabSpawn[rand][1], ArabSpawn[rand][2]);
			SetPlayerFacingAngle(playerid,ArabSpawn[rand][3]);
			SetPlayerSkin(playerid, 179);
		}
		case TEAM_AUS:
		{

			new rand = random(sizeof(AusSpawn));
			SetPlayerPos(playerid, AusSpawn[rand][0], AusSpawn[rand][1], AusSpawn[rand][2]);
			SetPlayerSkin(playerid,206);
		}
		case TEAM_USA:
		{

			new rand = random(sizeof(USSpawn));
			SetPlayerPos(playerid, USSpawn[rand][0], USSpawn[rand][1], USSpawn[rand][2]);
			SetPlayerFacingAngle(playerid,USSpawn[rand][3]);
			SetPlayerSkin(playerid, 287);
		}
		case TEAM_CH:
		{

			new rand = random(sizeof(CHspawn));
			SetPlayerPos(playerid, CHspawn[rand][0], CHspawn[rand][1], CHspawn[rand][2]);
			SetPlayerSkin(playerid, 112);
		}
		case TEAM_ID:
		{

			new rand = random(sizeof(IDspawn));
			SetPlayerPos(playerid, IDspawn[rand][0], IDspawn[rand][1], IDspawn[rand][2]);
			SetPlayerSkin(playerid, 161);
		}
		case TEAM_FRANCE:
		{

			new rand = random(sizeof(FranceSpawn));
			SetPlayerPos(playerid, FranceSpawn[rand][0], FranceSpawn[rand][1], FranceSpawn[rand][2]);
			SetPlayerFacingAngle(playerid,FranceSpawn[rand][3]);
			SetPlayerSkin(playerid, 108);
		}
		case TEAM_MERC:
		{

			switch(random(4))
			{

				case 0: SetPlayerPos(playerid,-1210.0946,1834.1309,41.9297);
				case 1: SetPlayerPos(playerid,-103.9869,1366.5730,10.2734);
				case 2: SetPlayerPos(playerid,-24.4023,2358.3901,24.1406);
				case 3: SetPlayerPos(playerid,693.6229,1964.0840,5.5391);
			}
			SetPlayerSkin(playerid, 127);
		}
	}
	SetCameraBehindPlayer(playerid);
	if(gTeam[playerid] != TEAM_MERC) SendClientMessage(playerid,cb,"* You can change your spawn location with /ss !");
}
new MMLKILL[MAX_PLAYERS],
SUIKILL[MAX_PLAYERS],
DEMOKILL[MAX_PLAYERS],
AIRKILL[MAX_PLAYERS];
HideBox(playerid)
{
	TextDrawHideForPlayer(playerid, ServerWeb);
	TextDrawHideForPlayer(playerid, BoxDraw0);
	TextDrawHideForPlayer(playerid, BoxDraw[0]);
	TextDrawHideForPlayer(playerid, BoxDraw[1]);
	TextDrawHideForPlayer(playerid, BoxDraw[2]);
	TextDrawHideForPlayer(playerid, BoxDraw[3]);
	TextDrawHideForPlayer(playerid, BoxDraw[4]);
}
ShowBoxPlayer(playerid)
{
	if(Bit_Get(ToggleState[playerid], TOGGLE_TEXTDRAWS))
	{
		TextDrawShowForPlayer(playerid, ServerWeb);
		TextDrawShowForPlayer(playerid, BoxDraw0);
		TextDrawShowForPlayer(playerid, BoxDraw[0]);
		TextDrawShowForPlayer(playerid, BoxDraw[1]);
		TextDrawShowForPlayer(playerid, BoxDraw[2]);
		TextDrawShowForPlayer(playerid, BoxDraw[3]);
		TextDrawShowForPlayer(playerid, BoxDraw[4]);
	}
}

forward LoadCBASE(playerid);
public LoadCBASE(playerid)
{
	SetPlayerPos(playerid,-1352.5239,1348.1554,4.80);
	TogglePlayerControllable(playerid, true);
	SendClientMessage(playerid, -1, "Clan Base loaded.");
}

public OnPlayerSpawn(playerid)
{
	if(IsPlayerSpectating[playerid]) return 1;
    PlayerInfo[playerid][IsSpawned] = true;
	if(PlayerInfo[playerid][FirstCon] == true)
	{
		StopAudioStreamForPlayer(playerid);
		if(ServerInfo[RENDER] == true)
		{
			SetPlayerWeather(playerid,8);
			GameTextForPlayer(playerid,"~g~~h~Please Wait...",3100,4);
			InterpolateCameraPos(playerid,177.3269, 1924.4594, 805.5732, 175.3836, 2008.8505, 1627.8164, 12000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid, 177.3058, 1923.4547, 795.7932,  175.3947, 2007.8457, 1617.9763, 12000, CAMERA_MOVE);
			SetPlayerPos(playerid, 538.4968,2892.0723,5.9221);
			SetPlayerVirtualWorld(playerid,playerid);
			SetTimerEx("CheckRemovealObjects",2000,false,"d",playerid);
			GangZoneShowForPlayer(playerid,GZ_ZONE1, TEAM_ZONE_USA_COLOR); //USA
			GangZoneShowForPlayer(playerid,GZ_ZONE3, TEAM_ZONE_AUS_COLOR); // Australian Armada
			GangZoneShowForPlayer(playerid,GZ_ZONE2, TEAM_ZONE_EURASIA_COLOR); //Eurasia
			GangZoneShowForPlayer(playerid,GZ_ZONE4, TEAM_ZONE_SOVIET_COLOR); //Soviet
			GangZoneShowForPlayer(playerid,GZ_ZONE5, TEAM_ZONE_ARAB_COLOR); //Arabia
			GangZoneShowForPlayer(playerid,GZ_ZONE6, TEAM_ZONE_CH_COLOR); //Brazil
			GangZoneShowForPlayer(playerid,GZ_ZONE7, TEAM_ZONE_ID_COLOR); //Taliban
			GangZoneShowForPlayer(playerid,GZ_ZONE8, TEAM_ZONE_FR_COLOR); //france
			PlayerInfo[playerid][FirstCon] = false;
			return 0;
		}
		else RemoveBaseOB(playerid);
	}
	if(Bit_Get(isdspec, playerid)) return 1;
	if(CLAN_WAR[CW_WARMUP])
	{
		new maxx = CLAN_WAR[CW_MAX];
		if(HasJoined1(playerid))
	    {
	        for(new i=0; i < maxx; i++)
			{
				if(WAR_SLOT_T1[i] == playerid)
				{
					foreach (new j : Player)
					{
						SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 100.00);
						SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 100.00);
					}
					foreach(new l: JOINED1)
					{
						ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
						ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
					}
					foreach(new l: JOINED2)
					{

						ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
						ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
					}
					foreach(new l : Player)
					{
					    if(IsSpectator[l])
					    {
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
					    }
					}
					break;
				}
			}
			if(!IsValidSkin(PlayerInfo[playerid][cSkin])) SetPlayerSkin(playerid,24);
			else SetPlayerSkin(playerid,PlayerInfo[playerid][cSkin]);
	        new R;
			switch(CLAN_WAR[CW_MAP])
			{
				case 1:
				{
					SetPlayerInterior(playerid,1);
					R = random(sizeof(de_dust_bspawn));
					SetPlayerPos(playerid,de_dust_bspawn[R][0],de_dust_bspawn[R][1],de_dust_bspawn[R][2]);
					SetPlayerFacingAngle(playerid,de_dust_bspawn[R][3]);
				}
				case 2:
				{
					SetPlayerInterior(playerid,1);
					R = random(sizeof(b_inferno));
					SetPlayerPos(playerid,b_inferno[R][0],b_inferno[R][1],b_inferno[R][2]);
					SetPlayerFacingAngle(playerid,b_inferno[R][3]);
				}
				case 3:
				{
					SetPlayerInterior(playerid, 10);
					R = random(sizeof(b_rc));
					SetPlayerPos(playerid,b_rc[R][0],b_rc[R][1],b_rc[R][2]);
					SetPlayerFacingAngle(playerid,b_rc[R][3]);
				}
			}
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 150);
			GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 250);
			GivePlayerWeapon(playerid, WEAPON_M4, 250);
			SetPlayerHealth(playerid, 100.0, 100.0);
			return 1;
		}
		else if(HasJoined2(playerid))
		{
	        for(new i=0; i < maxx; i++)
			{
				if(WAR_SLOT_T2[i] == playerid)
				{
					foreach (new j : Player)
					{
						SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 100.00);
						SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 100.00);
					}
					foreach(new l: JOINED1)
					{

						ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
						ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
					}
					foreach(new l: JOINED2)
					{

						ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
						ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
					}
					foreach(new l: Player)
					{
						if(!IsSpectator[l]) continue;
						ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
						ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
					}
					break;
				}
			}
		    if(!IsValidSkin(PlayerInfo[playerid][cSkin])) SetPlayerSkin(playerid,24);
			else SetPlayerSkin(playerid,PlayerInfo[playerid][cSkin]);
		    new R;
			switch(CLAN_WAR[CW_MAP])
			{
				case 1:
				{
					SetPlayerInterior(playerid,1);
					R = random(sizeof(de_dust_tspawn));
					SetPlayerPos(playerid,de_dust_tspawn[R][0],de_dust_tspawn[R][1],de_dust_tspawn[R][2]);
					SetPlayerFacingAngle(playerid,de_dust_tspawn[R][3]);
				}
				case 2:
				{
					SetPlayerInterior(playerid,1);
					R = random(sizeof(t_inferno));
					SetPlayerPos(playerid,t_inferno[R][0],t_inferno[R][1],t_inferno[R][2]);
					SetPlayerFacingAngle(playerid,t_inferno[R][3]);
				}
				case 3:
				{
					SetPlayerInterior(playerid, 10);
					R = random(sizeof(t_rc));
					SetPlayerPos(playerid,t_rc[R][0],t_rc[R][1],t_rc[R][2]);
					SetPlayerFacingAngle(playerid,t_rc[R][3]);
				}
			}
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 150);
			GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 250);
			GivePlayerWeapon(playerid, WEAPON_M4, 250);
			SetPlayerHealth(playerid, 100.0, 100.0);
			return 1;
		}
	}
	if(CLAN_WAR[CW_ON])
	{
	    if(HasJoined1(playerid) || HasJoined2(playerid))
		{
			return 1;
		}
	}
	if(issync[playerid])
	{
	    if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
		issync[playerid] = 0;
		SetPlayerPos(playerid, LastPos[0][playerid], LastPos[1][playerid], LastPos[2][playerid]);
		TogglePlayerControllable(playerid, false);
		SetTimerEx("UnfreezeMe", 1000, false, "d", playerid);
		SyncRank(playerid);
		SetPlayerHealth(playerid, LastHP[playerid], LastAR[playerid]);
		if(PlayerInfo[playerid][InClan] != -1) if(PlayerInfo[playerid][cSkin] != -1) SetPlayerSkin(playerid,PlayerInfo[playerid][cSkin]);
		for(new WEAPON_SLOT:slot; slot < MAX_WEAPON_SLOTS; slot ++) GivePlayerWeapon(playerid,sWeap[playerid][slot],sAmmo[playerid][slot]);
		return 1;
	}
	if(!InArena(playerid, NON)) return CheckDMPlayer(playerid);
	SetPlayerInterior(playerid,0);
	SetPlayerWeather(playerid,14);
	SetPlayerVirtualWorld(playerid,0);
	if(Planted[playerid] == 1)
	{
		DestroyDynamicObject(Bombb[playerid]);
		Bombb[playerid] = -1;
		Planted[playerid] = 0;
	}
    new bbb = RQOb[playerid];
    if(IsValidPlayerObject(playerid, bbb)) DestroyPlayerObject(playerid, bbb);
	new ct1 = cToy1[playerid];
	if(ct1 != -1)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,4)) RemovePlayerAttachedObject(playerid,4);
		SetPlayerAttachedObject(playerid,4,ct1,Toy1Info[playerid][tbone],Toy1Info[playerid][tx],Toy1Info[playerid][ty],Toy1Info[playerid][tz],Toy1Info[playerid][rtx], 	Toy1Info[playerid][rty],Toy1Info[playerid][rtz],Toy1Info[playerid][tsx],Toy1Info[playerid][tsy],Toy1Info[playerid][tsz]);
	}
	new ct2 = cToy2[playerid];
	if(ct2 != -1)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,5)) RemovePlayerAttachedObject(playerid,5);
		SetPlayerAttachedObject(playerid,5,ct2,Toy2Info[playerid][tbone],Toy2Info[playerid][tx],Toy2Info[playerid][ty],Toy2Info[playerid][tz],Toy2Info[playerid][rtx], 	Toy2Info[playerid][rty],Toy2Info[playerid][rtz],Toy2Info[playerid][tsx],Toy2Info[playerid][tsy],Toy2Info[playerid][tsz]);
	}
	dBoostRequest[playerid] = sttt[playerid] = toxicdead[playerid] = sccc[playerid] = armypackused[playerid] = false;
	Bit_Set(Suicided, playerid, false);
	MMLKILL[playerid] = SUIKILL[playerid] = DEMOKILL[playerid] = AIRKILL[playerid] = PlayerInfo[playerid][Dead] = SSLOG[playerid][s_kills] = SSLOG[playerid][s_headshot] = WhiteLevel[playerid] = 0;
	Drones[playerid] = 1;
	PlayerInfo[playerid][assist]  = -1;
	SyncCash(playerid);
	Dkits[playerid] = 3;
	AnimPreloadForPlayer(playerid, "BOMBER");
	AnimPreloadForPlayer(playerid, "PED");
	AnimPreloadForPlayer(playerid, "DILDO");
	AnimPreloadForPlayer(playerid, "CARRY");
	if(Bit_Get(ToggleState[playerid], TOGGLE_ANTISK))
	{
		UpdateDynamic3DTextLabelText(RankLabel[playerid], red, "[ANTI-SPAWN KILL PROTECTION]");
		if(GetPlayerScore(playerid) > 300)
		{
			SendClientMessage(playerid, -1, "*You are under spawn protection for {07DABA}10 seconds {FFFFFF}!");
	    	SpawnPR(playerid,10000);
		}
		else
		{
		    SendClientMessage(playerid, -1, "*You are under spawn protection for {07DABA}15 seconds {FFFFFF}!");
	    	SpawnPR(playerid,15000);
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "*You are not spawn protected {07DABA}(/toggle to turn it on){FFFFFF}!");
		SpawnPR(playerid,500);
	}
	ResetPlayerWeapons(playerid);
	UpdateLabelText(playerid);
	if(FirstSpawn[playerid] == 1)
	{

		SendClientMessage(playerid, -1,"Please select your class");
		FirstSpawn[playerid] = 0;
		if(gTeam[playerid] != TEAM_MERC)
		{
            GetTeamColor(playerid);
			ClassDialog(playerid);
		}
		else
		{

			gClass[playerid] = MERC;
			SetPlayerTeam(playerid,TEAM_MERC);
			SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}YOUR TEAM{FFFFFF}]: Mercenary");
			SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: You have got heavy weapons. You can use /stealth and be hidden in the mini-map for 50 seconds.");
		}

		if(Bit_Get(ToggleState[playerid], TOGGLE_TEXTDRAWS))
		{
		    ShowBoxPlayer(playerid);
			TextDrawShowForPlayer(playerid, TournamentTD);
			TextDrawShowForPlayer(playerid, TournamentTD2);
			PlayerTextDrawShow(playerid,Guit[playerid][0]);
			TextDrawShowForPlayer(playerid, BoxDraw1);
			PlayerTextDrawShow(playerid,Guit[playerid][1]);
			PlayerTextDrawShow(playerid,Guit[playerid][2]);
		}
	}else
	if(gTeam[playerid] != TEAM_MERC) if(gClass[playerid] == MERC) ClassDialog(playerid);
	SetPlayerTeam(playerid,gTeam[playerid]);
	if(SpawnP[playerid] != BASE)
	{
		if(SpawnP[playerid] == CLANBASE)
		{

			SetPlayerPos(playerid,-1352.5239,1348.1554,5.00);
			SendClientMessage(playerid, -1, "Loading Clan Base..");
			TogglePlayerControllable(playerid, false);
			SetTimerEx("LoadCBASE", 3000, false, "d", playerid);
		}
		else if(tCP[SpawnP[playerid]] != GetPlayerTeam(playerid) || UnderAttack{SpawnP[playerid]} == true)
		{

			SendClientMessage(playerid,red,"* %s is captured by another team or is under attack, you have been spawned at base",ZName(SpawnP[playerid]));
			SpawnP[playerid] = BASE;
			RandSpawn(playerid);
		}
		else
		{

			switch(SpawnP[playerid])
			{

				case BASE: RandSpawn(playerid);
				case TEST: { SetPlayerPos(playerid,714.1596,1945.0562,5.5391); SetPlayerFacingAngle(playerid,182.7966); }
				case CC  : { SetPlayerPos(playerid,810.6647,1686.4254,5.2870); SetPlayerFacingAngle(playerid,27.0684); }
				case DF  : { SetPlayerPos(playerid,596.1786,1219.5504,11.7188); SetPlayerFacingAngle(playerid,255.0832); }
				case CH  : { SetPlayerPos(playerid,-62.2938,44.9431,3.1103); SetPlayerFacingAngle(playerid,78.0716); }
				case AN  : { SetPlayerPos(playerid,-320.0384,833.6661,17.5454); SetPlayerFacingAngle(playerid,340.0208); }
				case MD  : { SetPlayerPos(playerid,-1211.6091,1823.3260,41.7188); SetPlayerFacingAngle(playerid,253.6101); }
				case GS  : { SetPlayerPos(playerid,-1454.0922,1865.7408,32.6328); SetPlayerFacingAngle(playerid,101.3053); }
				case FS  : { SetPlayerPos(playerid,-1353.7487,2063.4683,52.7001); SetPlayerFacingAngle(playerid,260.3095); }
				case JS  : { SetPlayerPos(playerid,-1934.6680,2402.7380,49.4922); SetPlayerFacingAngle(playerid,286.8225); }
				case SNAKE: { SetPlayerPos(playerid,-16.1509,2329.5574,24.1406); SetPlayerFacingAngle(playerid,54.6637); }
				case BAY : { SetPlayerPos(playerid,258.2060,2881.1865,13.4840); SetPlayerFacingAngle(playerid,184.2156); }
				case BIG : { SetPlayerPos(playerid,184.9173,1921.4255,17.7846); SetPlayerFacingAngle(playerid,200.6783); }
				case A52 : { SetPlayerPos(playerid,-2517.0032,2329.4856,16.7574); SetPlayerFacingAngle(playerid,200.6783); TogglePlayerControllable(playerid, false); SetTimerEx("UnfreezeMe", 2000, false, "d", playerid);  }
				case ARMY: { SetPlayerPos(playerid,-513.2162,2549.4568,53.4141); SetPlayerFacingAngle(playerid,36.5568); }
				case PETROL: { SetPlayerPos(playerid,641.5707,1704.8296,6.9922); SetPlayerFacingAngle(playerid,40.5869); }
				case OIL: { SetPlayerPos(playerid,256.2609,1359.7385,10.7075); SetPlayerFacingAngle(playerid,326.6396); }
				case QUARRY: { SetPlayerPos(playerid,588.3246,875.7402,-42.4973); SetPlayerFacingAngle(playerid,107.9309); }
				case GUEST: { SetPlayerPos(playerid,-321.2981,1745.5908,42.8691); SetPlayerFacingAngle(playerid,332.3030); }
				case EAR: { SetPlayerPos(playerid,-324.0383,1532.1846,75.3594); SetPlayerFacingAngle(playerid,211.7381); }
				case HOS: { SetPlayerPos(playerid,1017.5776,1053.8959,11.0000); SetPlayerFacingAngle(playerid,288.0993); }
				case BRD: { SetPlayerPos(playerid,-886.9355,2698.0396,42.3865); SetPlayerFacingAngle(playerid,53.7471); }
				case CMP: { SetPlayerPos(playerid,491.2700,2238.2927,34.2018); SetPlayerFacingAngle(playerid,89.0849); }
				case LVA: { SetPlayerPos(playerid,1617.8091,1171.5394,14.2188); }
				case MT:  { SetPlayerPos(playerid,-111,1861.5,17.799999237061); }
				case PH:  { SetPlayerPos(playerid,1048.5999755859,2909.3000488281,47.799999237061); }
				case CARGO: { SetPlayerPos(playerid,-2475.1000976563,1547.5,33.200000762939); }
				case SFPD: { SetPlayerPos(playerid,-1616.0999755859,685.79998779297,7.1999998092651); }
				case BST: { SetPlayerPos(playerid,1360.8000488281,2196.1000976563,9.8000001907349); }
				case CRAFT: { SetPlayerPos(playerid,-1348,494.29998779297,18.200000762939); }
				case SFDOCK: { SetPlayerPos(playerid,-1733.8000488281,190.80000305176,3.5999999046326); }
				case FSL: { SetPlayerPos(playerid,2162.3999023438,-103.09999847412,2.7999999523163); }
				case AO: { SetPlayerPos(playerid,-440.9412,612.4698,16.7188); }
				case SPS: { SetPlayerPos(playerid,-789.9104,2407.2756,156.8770); }
				case OPP: { SetPlayerPos(playerid,-2196.3289,1920.9115,3.400); TogglePlayerControllable(playerid, false); SetTimerEx("UnfreezeMe", 1000, false, "d", playerid);}
			}
			SetCameraBehindPlayer(playerid);
		}
	}else RandSpawn(playerid);
	GetRankScore(playerid);
	SyncRank(playerid);
	if(PlayerInfo[playerid][Frozen] == 1) {
		TogglePlayerControllable(playerid,false); return SendClientMessage(playerid,red,"You cant escape your punishment. You Are Still Frozen");
	}
	new kk = PlayerInfo[playerid][JailTime];
	if(kk > 0) {
		JailPlayer(playerid);
		SendClientMessage(playerid, red, "You cant escape your punishment. You Are Still In Jail for %d seconds", kk);
		return 1;
	}
	PlayerInfo[playerid][DRONECMD] = PlayerInfo[playerid][BOMBCMD]  = PlayerInfo[playerid][LOCATECMD] = PlayerInfo[playerid][SEARCHCMD] =
	PlayerInfo[playerid][VIPCMD] = PlayerInfo[playerid][VIPCMD2] = PlayerInfo[playerid][JP_CMD] = PlayerInfo[playerid][FIX_CMD] = PlayerInfo[playerid][SHEAL_CMD] = PlayerInfo[playerid][HEAL_CMD] = PlayerInfo[playerid][SVEST_CMD] =
	PlayerInfo[playerid][SAMMO_CMD] = PlayerInfo[playerid][SWEAPS_CMD] = PlayerInfo[playerid][SARMOUR_CMD] = PlayerInfo[playerid][FBCMD] = PlayerInfo[playerid][C4CMD] = PlayerInfo[playerid][APCMD] =
	PlayerInfo[playerid][dbikecmd] = PlayerInfo[playerid][MKCMD] = PlayerInfo[playerid][STEALTHCMD] = PlayerInfo[playerid][SHIDECMD] = 0;

	if(gClass[playerid] == RECON || gClass[playerid] == SNIPER || PlayerInfo[playerid][Camouflage] == true)
	{
		switch(gTeam[playerid])
		{
			case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
			case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
			case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
			case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
			case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
			case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
			case TEAM_ID: SetPlayerColor(playerid,0x00804000);
			case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
		}
	}else GetTeamColor(playerid);
	if(PlayerInfo[playerid][UseSkin] == true) if(PlayerInfo[playerid][OnDuty] == 1) SetPlayerSkin(playerid,PlayerInfo[playerid][Skin]);
	if(PlayerInfo[playerid][InClan] != -1) if(PlayerInfo[playerid][cSkin] != -1) SetPlayerSkin(playerid,PlayerInfo[playerid][cSkin]);
	DeletePVar(playerid,"VEHFIX");
	if(GetPVarInt(playerid,"SPEC") == 1)
	{

		SetPlayerHealth(playerid, LastHP[playerid], LastAR[playerid]);
		SetPlayerInterior(playerid,LasInterior[playerid]);
		SetPlayerVirtualWorld(playerid,LastWorld[playerid]);
		Streak[playerid] = LastSpree[playerid];
		SetPlayerPos(playerid,LastPos[0][playerid],LastPos[1][playerid],LastPos[2][playerid]);
		SetPVarInt(playerid,"SPEC",0);
		ResetPlayerWeapons(playerid);
		for(new WEAPON_SLOT:slot; slot < MAX_WEAPON_SLOTS; slot ++) GivePlayerWeapon(playerid,sWeap[playerid][slot],sAmmo[playerid][slot]);
	}else if(PlayerInfo[playerid][OnDuty] == 1)
	{

		SetPlayerInterior(playerid,LasInterior[playerid]);
		SetPlayerVirtualWorld(playerid,LastWorld[playerid]);
		Streak[playerid] = LastSpree[playerid];
		SetPlayerPos(playerid,LastPos[0][playerid],LastPos[1][playerid],LastPos[2][playerid]);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, WEAPON_MINIGUN, 80000);
		SetPlayerSkin(playerid,294);
		SetPlayerHealth(playerid,1000000);
		UpdateLabelText(playerid);
	}
	if (PlayerInfo[playerid][Rank] == 1 || PlayerInfo[playerid][dRank] > 0)
	{
		PlayerInfo[playerid][HELMET] = true;
		PlayerInfo[playerid][WEAR] = true;
		switch(gTeam[playerid])
		{

			case TEAM_AUS: SetPlayerAttachedObject(playerid,0,19104,2,0.152999,0.015000,-0.002000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
			case TEAM_EURASIA: SetPlayerAttachedObject(playerid,0,19104,2,0.142000,0.020000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
			case TEAM_ARAB: SetPlayerAttachedObject(playerid,0,19104,2,0.147999,0.000000,0.000000,0.000000,0.000000,0.000000,1.090000,1.000000,1.114000);
			case TEAM_USA: SetPlayerAttachedObject(playerid,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
			case TEAM_ID: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
			case TEAM_CH: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
			case TEAM_FRANCE: SetPlayerAttachedObject(playerid,0,19104,2,0.151000,0.004000,0.000000,-0.399999,-0.200000,-7.599999,1.123999,1.000000,1.058000);
			case TEAM_MERC: SetPlayerAttachedObject(playerid,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
		}
		SetPlayerArmour(playerid, 100.0);
		SendClientMessage(playerid,cb,"* You have been successfully spawned with an army helmet to avoid headshots.");
		SendClientMessage(playerid,cb,"* You can Remove the helmet by /togglehelmet");
	}
	return 1;
}
forward CheckRemovealObjects(playerid);
public CheckRemovealObjects(playerid)
{
    PlayerInfo[playerid][FirstCon] = false;
	SetPlayerVirtualWorld(playerid,0);
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	if(z > 5.10)
	{
		ApplyAnimation(playerid,"SWEET","Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
		ApplyAnimation(playerid,"DEALER", "DEALER_DEAL", 3.0, false, false, false, false, 0); // Deal Drugs
	    ApplyAnimation(playerid,"Freeweights","GYM_FREE_PICKUP",0.3,0,0,0,0,0);
		ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive",0.0,0,0,0,0,0);
		//RemoveBaseOB(playerid);
	}
	SpawnPlayer(playerid);
	if(SponsorGAOn > 0) TextDrawShowForPlayer(playerid, sponsorgatd);
	if(Bit_Get(ToggleState[playerid], TOGGLE_TEXTDRAWS))
	{
		TextDrawShowForPlayer(playerid, QuestTitle);
		for(new i; i < 3; i++)	if(!Bit_Get(QuestDone[playerid], i)) TextDrawShowForPlayer(playerid, Quest[i]);
		if(PlayerInfo[playerid][dRank] > 0) if(!Bit_Get(QuestDone[playerid], 3)) TextDrawShowForPlayer(playerid, Quest[3]);
		if(PlayerInfo[playerid][InClan] > -1) if(!Bit_Get(QuestDone[playerid], 4)) TextDrawShowForPlayer(playerid, Quest[4]);
	}
}
forward SpawnProtection(playerid);
public SpawnProtection(playerid)
{
	SetPlayerHealth(playerid,100);
	SendClientMessage(playerid,cb,"* Antispawn kill protection has ended");
	KillTimer(PlayerInfo[playerid][SL]);
	RemovePlayerAttachedObject(playerid, 9);
	AntiSK[playerid] = false;
	if(InArena(playerid, NON))
	{

		GiveWeapons(playerid);
		new Float:ARM; GetPlayerArmour(playerid,ARM);
		if(GetPlayerScore(playerid) < 100)
		{

			SetPlayerHealth( playerid, 80 );
			SendClientMessage(playerid,-1,"Rank Bonus | 80 HP | 0 Armour | Extra: None | Rank %s (%d) | Class: %s | Score: %d",GetRankName(playerid),PlayerInfo[playerid][Rank],GetClass(playerid),GetPlayerScore(playerid));
			SendClientMessage(playerid,cb,"* Check /Tutorial if you need help understanding our server");
		}
		switch(PlayerInfo[playerid][Rank])
		{
			case 2:
			{

				SendClientMessage(playerid,-1,"Rank Bonus | 95 HP | 0 Armour | Extra: None | Rank %s (%d) | Class: %s | Score: %d",GetRankName(playerid),PlayerInfo[playerid][Rank],GetClass(playerid),GetPlayerScore(playerid));
				SetPlayerHealth(playerid, 95);
			}
			case 3:
			{

				SendClientMessage(playerid,-1,"Rank Bonus | 100 HP | 0 Armour | Extra: None | Rank %s (%d) | Class: %s | Score: %d",GetRankName(playerid),PlayerInfo[playerid][Rank],GetClass(playerid),GetPlayerScore(playerid));
				SetPlayerHealth(playerid, 100);
			}
			case 4:
			{

				SendClientMessage(playerid,-1,"Rank Bonus | 100 HP | 5 Armour | Extra: None | Rank %s (%d) | Class: %s | Score: %d",GetRankName(playerid),PlayerInfo[playerid][Rank],GetClass(playerid),GetPlayerScore(playerid));
				SetPlayerHealth(playerid, 100.0);
				if(ARM < 5) SetPlayerArmour(playerid, 5.0);
			}
			case 5:
			{

				SendClientMessage(playerid,-1,"Rank Bonus | 100 HP | 15 Armour | Extra: None | Rank %s (%d) | Class: %s | Score: %d",GetRankName(playerid),PlayerInfo[playerid][Rank],GetClass(playerid),GetPlayerScore(playerid));
				SetPlayerHealth(playerid, 100.0);
				if(ARM < 15) SetPlayerArmour(playerid, 15.0);
			}
			case 6:
			{

				SendClientMessage(playerid,-1,"Rank Bonus | 100 HP | 30 Armour | Extra: None | Rank %s (%d) | Class: %s | Score: %d",GetRankName(playerid),PlayerInfo[playerid][Rank],GetClass(playerid),GetPlayerScore(playerid));
				SetPlayerHealth(playerid, 100.0);
				if(ARM < 30) SetPlayerArmour(playerid, 30.0);
			}
			case 7:
			{

				SendClientMessage(playerid,-1,"Rank Bonus | 100 HP | 40 Armour | Extra: None | Rank %s (%d) | Class: %s | Score: %d",GetRankName(playerid),PlayerInfo[playerid][Rank],GetClass(playerid),GetPlayerScore(playerid));
				SetPlayerHealth(playerid, 100.0);
				if(ARM < 40) SetPlayerArmour(playerid, 40.0);
			}
			case 8:
			{

				SendClientMessage(playerid,-1,"Rank Bonus | 100 HP | 50 Armour | Extra: None | Rank %s (%d) | Class: %s | Score: %d",GetRankName(playerid),PlayerInfo[playerid][Rank],GetClass(playerid),GetPlayerScore(playerid));
				SetPlayerHealth(playerid, 100.0);
				if(ARM < 50) SetPlayerArmour(playerid, 50.0);
			}
			case 9:
			{

				SendClientMessage(playerid,-1,"Rank Bonus | 100 HP | 75 Armour | Extra: 1 Medic Kit | Rank %s (%d) | Class: %s | Score: %d",GetRankName(playerid),PlayerInfo[playerid][Rank],GetClass(playerid),GetPlayerScore(playerid));
				SetPlayerHealth(playerid, 100.0);
				if(PlayerInfo[playerid][MedKit] < 3) PlayerInfo[playerid][MedKit] ++;
				if(ARM < 75) SetPlayerArmour(playerid, 75.0);
			}
			case 10..20:
			{

				SendClientMessage(playerid,-1,"Rank Bonus | 100 HP | 100 Armour | Extra: 1 Medic Kit & 1 Armour Pack | Rank %s (%d) | Class: %s | Score: %d",GetRankName(playerid),PlayerInfo[playerid][Rank],GetClass(playerid),GetPlayerScore(playerid));
				SetPlayerHealth(playerid, 100.0);
				if(PlayerInfo[playerid][MedKit] < 3) PlayerInfo[playerid][MedKit] ++;
				if(PlayerInfo[playerid][ArmourP] < 3)  PlayerInfo[playerid][ArmourP] ++;
				if(ARM < 100) SetPlayerArmour(playerid, 100.0);
			}
		}
		if(cPerk[playerid][P_ARMOUR] > 0)
		{

			SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got 100 ARMOUR.");
			SetPlayerArmour(playerid, 100.0);
		}
		if(cPerk[playerid][P_GAS] > 0)
		{

			SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got a gas mask.");
			PlayerInfo[playerid][Mask] = true;
			PlayerInfo[playerid][WEARMASK] = true;
			SetPlayerAttachedObject(playerid,1,19472,2,0.027000,0.138999,0.010000,95.200027,74.399917,2.100000,1.000000,1.000000,1.000000);
		}
		if(cPerk[playerid][P_HELMET] > 0)
		{

			PlayerInfo[playerid][HELMET] = true;
			PlayerInfo[playerid][WEAR] = true;
			switch(gTeam[playerid])
			{

				case TEAM_AUS: SetPlayerAttachedObject(playerid,0,19104,2,0.152999,0.015000,-0.002000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
				case TEAM_EURASIA: SetPlayerAttachedObject(playerid,0,19104,2,0.142000,0.020000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
				case TEAM_ARAB: SetPlayerAttachedObject(playerid,0,19104,2,0.147999,0.000000,0.000000,0.000000,0.000000,0.000000,1.090000,1.000000,1.114000);
				case TEAM_USA: SetPlayerAttachedObject(playerid,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
				case TEAM_ID: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
				case TEAM_CH: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
				case TEAM_FRANCE: SetPlayerAttachedObject(playerid,0,19104,2,0.151000,0.004000,0.000000,-0.399999,-0.200000,-7.599999,1.123999,1.000000,1.058000);
				case TEAM_MERC: SetPlayerAttachedObject(playerid,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
			}
			SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got a helmet.");
		}
		switch(gClass[playerid])
		{

			case Assault:
			{

				if(Bit_Get(ClassUpgrade[playerid], A_ASSAULT))
				{

					PlayerInfo[playerid][Mask] = true;
					PlayerInfo[playerid][WEARMASK] = true;
					SetPlayerAttachedObject(playerid,1,19472,2,0.027000,0.138999,0.010000,95.200027,74.399917,2.100000,1.000000,1.000000,1.000000);
				}
			}
			case SUICIDER:
			{
				SetPlayerAttachedObject(playerid, 2, 1654, 1, 0.174999, -0.162000, 0.000000, -1.299987, 87.499961, 4.500000);
				if(Bit_Get(ClassUpgrade[playerid], A_SUICIDER)) suiciderprotect[playerid] = true;
			}
			case ENGINEER,RIFLEMAN:
			{

				AvailableMines[playerid] = 1;
				if(Bit_Get(ClassUpgrade[playerid], A_ENGINEER)) AvailableMines[playerid]++;
			}
			case SCOUT:
			{

				if(Bit_Get(ClassUpgrade[playerid], A_SCOUT))
				{

					PlayerInfo[playerid][HELMET] = true;
					PlayerInfo[playerid][WEAR] = true;
					switch(gTeam[playerid])
					{

						case TEAM_AUS: SetPlayerAttachedObject(playerid,0,19104,2,0.152999,0.015000,-0.002000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
						case TEAM_EURASIA: SetPlayerAttachedObject(playerid,0,19104,2,0.142000,0.020000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
						case TEAM_ARAB: SetPlayerAttachedObject(playerid,0,19104,2,0.147999,0.000000,0.000000,0.000000,0.000000,0.000000,1.090000,1.000000,1.114000);
						case TEAM_USA: SetPlayerAttachedObject(playerid,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
						case TEAM_ID: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
						case TEAM_CH: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
						case TEAM_FRANCE: SetPlayerAttachedObject(playerid,0,19104,2,0.151000,0.004000,0.000000,-0.399999,-0.200000,-7.599999,1.123999,1.000000,1.058000);
						case TEAM_MERC: SetPlayerAttachedObject(playerid,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
					}
				}
			}
		}
		if(PlayerInfo[playerid][dRank] > 3) suiciderprotect[playerid] = true;
	}else
	{
		if(InArena(playerid, EDM))
		{

			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 500);
			GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 500);
			GivePlayerWeapon(playerid, WEAPON_M4, 500);
			GivePlayerWeapon(playerid, WEAPON_GRENADE, 1);
			GivePlayerWeapon(playerid, WEAPON_DILDO, 1);
			SetPlayerHealth(playerid, 100.0, 100.0);
			TextDrawHideForPlayer(playerid, DM_Top[0]);
			TextDrawHideForPlayer(playerid, DM_Top[1]);
			TextDrawHideForPlayer(playerid, DM_Top[2]);
			TextDrawHideForPlayer(playerid, DM_Top[3]);
		}
		else if(InArena(playerid, MDM))
		{

			SetPlayerHealth(playerid, 100.0, 100.0);
			GivePlayerWeapon(playerid, WEAPON_MINIGUN, 88888);
		}
		else if(InArena(playerid, CBDM))
		{

			SetPlayerHealth(playerid, 100.0, 100.0);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 500000);
			TextDrawHideForPlayer(playerid, CBDM_Top[0]);
			TextDrawHideForPlayer(playerid, CBDM_Top[1]);
			TextDrawHideForPlayer(playerid, CBDM_Top[2]);
			TextDrawHideForPlayer(playerid, CBDM_Top[3]);
		}
		else if(InArena(playerid, HSDM))
		{
			SetPlayerHealth(playerid, 5.0, 0.0);
			GivePlayerWeapon(playerid, WEAPON_RIFLE, 500000);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 500000);
		}
		else if(InArena(playerid, CHDM))
		{
			SetPlayerHealth(playerid, 100.0, 100.0);
			GivePlayerWeapon(playerid, WEAPON_CHAINSAW, 1);
		}
		else if(InArena(playerid, SDM))
		{

			SetPlayerHealth(playerid, 100.0, 100.0);
			GivePlayerWeapon(playerid, WEAPON_SNIPER, 545500);
			TextDrawHideForPlayer(playerid, DSDM_Top[0]);
			TextDrawHideForPlayer(playerid, DSDM_Top[1]);
			TextDrawHideForPlayer(playerid, DSDM_Top[2]);
			TextDrawHideForPlayer(playerid, DSDM_Top[3]);
		}
	}
	UpdateLabelText(playerid);
	if(PlayerInfo[playerid][OnDuty] == 1) SetPlayerHealth(playerid,100000);
	SyncRank(playerid);
	return 1;
}
CMD:end(playerid)
{
	if(!PlayerInfo[playerid][TUTS]) return SendClientMessage(playerid,Dred,"* you are not in tutorial");
	PlayerTextDrawHide(playerid,TUT[playerid][0]); PlayerTextDrawHide(playerid,TUT[playerid][1]); PlayerTextDrawHide(playerid,TUT[playerid][2]);
	ShowBoxPlayer(playerid);
	PlayerTextDrawShow(playerid,Guit[playerid][0]); TextDrawShowForPlayer(playerid, BoxDraw1); PlayerTextDrawShow(playerid,Guit[playerid][1]); PlayerTextDrawShow(playerid,Guit[playerid][2]);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid,true);
	PlayerInfo[playerid][TUTS] = false;
	StopAudioStreamForPlayer(playerid);
	SpawnPlayer(playerid);
	return 1;
}
CMD:tutorial(playerid)
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	new Float:hp;
	GetPlayerHealth(playerid, hp);
	if(hp < 90) return SendClientMessage(playerid, Dred, "You cannot use this cmd with under 90 HP");
	if(GetPlayerScore(playerid) > 50) return SendClientMessage(playerid, Dred, "You can use this cmd with under 50 score only.");
	if(PlayerInfo[playerid][TUTS]) return SendClientMessage(playerid,Dred,"* Please Wait until tutorial Ends");
	ShowPlayerDialog(playerid, 532, DIALOG_STYLE_LIST,"Language","English\nSpanish","Select","");
	return 1;
}
starttut(playerid)
{
	if(PlayerInfo[playerid][TUTS]) return SendClientMessage(playerid,Dred,"* Please Wait until tutorial Ends");
	PlayerInfo[playerid][TUTS] = true;
	GetPlayerPos(playerid,LastPos[0][playerid],LastPos[1][playerid],LastPos[2][playerid]);
	GetPlayerFacingAngle(playerid,LastAng[playerid]);
	SetPlayerVirtualWorld(playerid,playerid+1);
	SetPlayerPos(playerid,-30.4782,2346.3577,24.1406);
	SetPlayerFacingAngle(playerid,60.7988);
	HideBox(playerid);
	PlayerTextDrawHide(playerid,Guit[playerid][0]);
	TextDrawHideForPlayer(playerid, BoxDraw1);
	PlayerTextDrawHide(playerid,Guit[playerid][1]);
	PlayerTextDrawHide(playerid,Guit[playerid][2]);
	PlayerTextDrawShow(playerid,TUT[playerid][0]);
	PlayerTextDrawShow(playerid,TUT[playerid][1]);
	PlayerTextDrawShow(playerid,TUT[playerid][2]);
	if(PlayerInfo[playerid][LANG] == ENG)
	{

		PlayerTextDrawSetString(playerid,TUT[playerid][0],"Welcome To Modern Warfare 3 Server~n~~g~Tutorial 1/7~w~ : ~y~How To Capture Zones");
		PlayerTextDrawSetString(playerid,TUT[playerid][2],"To capture zones you need to stay in the red checkpoint for 25 seconds~n~your teammates can reduce the capturing time by helping you~n~~g~~h~Vip~w~ Players Can capture 60% Faster then normal players");
	}
	else
	{

		PlayerTextDrawSetString(playerid,TUT[playerid][0],"Bienvenido A Modern Warfare 3 Server~n~~g~Tutorial 1/7~w~ : ~y~CÃ³mo capturar las Zonas");
		PlayerTextDrawSetString(playerid,TUT[playerid][2],"Para capturar Zona que necesitas para estar~n~ en el puesto de control de color rojo durante 25 segundos~n~sus compaÃ±eros de equipo pueden reducir el tiempo de captura ayudÃ¡ndole~n~~g~~h~Vip~w~ Los jugadores pueden capturar 60% MÃ¡s rÃ¡pido que los jugadores normales");
	}
	PlayAudioStreamForPlayer(playerid,"http://codmw.eu5.org/Insertion.mp3",1,1,1,1);
	ClearChat(playerid);
	InterpolateCameraPos(playerid,-44.9497, 2340.5029, 24.6449, -31.8016, 2339.7354, 28.8312, 12000, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, -44.3058, 2341.2654, 24.6396,  -32.1502, 2340.6687, 28.3460, 12000, CAMERA_MOVE);
	SetTimerEx("NextTut",15000,false,"dd",playerid,1);
	return 1;
}


forward NextTut(playerid,tID);
public NextTut(playerid,tID)
{
	if(PlayerInfo[playerid][TUTS] == false) return 0;
	switch(tID)
	{

		case 1: // zones with features
		{

			switch(PlayerInfo[playerid][LANG])
			{

				case ENG:
				{

					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Welcome To Modern Warfare 3 Server~n~~g~Tutorial 2/6~w~ : ~y~Zones With Features");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Some Zones will let you use their Ability~n~ and gives you extra score and money when you capture them");
				}
				case SPANISH:
				{

					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Bienvenido A Modern Warfare 3 Server~n~~g~Tutorial 2/6~w~ : ~y~Las zonas con caracterÃ­sticas");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Algunas zonas se permitirÃ¡ utilizar sus caracterÃ­sticas~n~ y le da la puntuaciÃ³n extra y dinero cuando capturarlos");
				}
			}
			InterpolateCameraPos(playerid,-428.7461, 1464.5967, 127.8959, -208.9505, 1507.5049, 131.6625, 9000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,-428.1230, 1465.3744, 127.5456,  -209.8729, 1507.8821, 131.4422, 9000, CAMERA_MOVE);
			SetTimerEx("NextTut",8000,false,"dd",playerid,2);
			SetPlayerPos(playerid,-232.8712,1492.3202,75.5625);
			SetPlayerFacingAngle(playerid,183.7728);
			TogglePlayerControllable(playerid,false);
			SendClientMessage(playerid,-1,"* Use /end to end the tutorial");
		}
		case 2:
		{

			switch(PlayerInfo[playerid][LANG])
			{

				case ENG:
				{


					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Welcome To Modern Warfare 3 Server~n~~g~Tutorial 3/6~w~ : ~y~How To use the Airstrike");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"To use The Airstrike You need to be Lieutenant Rank (4)~n~and you need to have 40000$~n~\
					The airstrike will target your position when you use /airstrike or /as");
				}
				case SPANISH:
				{

					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Bienvenido A Modern Warfare 3 Server~n~~g~Tutorial 3/6~w~ : ~y~CÃ³mo utilizar el ataque aÃ©reo");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Para usar el ataque aÃ©reo Â¡Tienes que ser teniente Rango (4)~n~y hay que tener 40000$~n~\
					El ataque aÃ©reo se centrarÃ¡ en su posiciÃ³n cuando se utiliza /airstrike o /as");
				}
				case RUSS:
				{

					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Ð”Ð¾Ð±Ñ€Ð¾ ÐŸÐ¾Ð¶Ð°Ð»Ð¾Ð²Ð°Ñ‚ÑŒ Ð’ Modern Warfare 3 Server~n~~g~Ð ÑƒÐºÐ¾Ð²Ð¾Ð´ÑÑ‚Ð²Ð¾ 3/6~w~ : ~y~ÐšÐ°Ðº Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ Airstrike");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Ð§Ñ‚Ð¾Ð±Ñ‹ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ Ð°Ð²Ð¸Ð°ÑƒÐ´Ð°Ñ€ Ð’Ñ‹ Ð´Ð¾Ð»Ð¶Ð½Ñ‹ Ð±Ñ‹Ñ‚ÑŒ Ð»ÐµÐ¹Ñ‚ÐµÐ½Ð°Ð½Ñ‚ Ð Ð°Ð½Ð³ (4)~n~Ð¸ Ð²Ñ‹ Ð´Ð¾Ð»Ð¶Ð½Ñ‹ Ð¸Ð¼ÐµÑ‚ÑŒ 40000$~n~\
					ÐÐ²Ð¸Ð°ÑƒÐ´Ð°Ñ€ Ð±ÑƒÐ´ÐµÑ‚ Ð¾Ñ€Ð¸ÐµÐ½Ñ‚Ð¸Ñ€Ð¾Ð²Ð°Ñ‚ÑŒ Ð¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ, ÐºÐ¾Ð³Ð´Ð° Ð²Ñ‹ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐµÑ‚Ðµ /airstrike Ð¸Ð»Ð¸ /as");
				}
			}
			InterpolateCameraPos(playerid,-220.3927, 1482.2306, 79.8926, -192.0425, 1460.1920, 92.1380, 6000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,-221.1802, 1482.8428, 79.5525,  -192.8300, 1460.8042, 91.7978, 6000, CAMERA_MOVE);
			SetTimerEx("NextTut",20000,false,"dd",playerid,3);
			SetTimerEx("TestAirstrike",5000,false,"d",playerid);
			SendClientMessage(playerid,-1,"* Use /end to end the tutorial");
		}
		case 3:
		{

			SetPlayerPos(playerid,213.9341,1825.8647,6.4141);
			SetPlayerFacingAngle(playerid,236.1209);
			switch(PlayerInfo[playerid][LANG])
			{

				case ENG:
				{
					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Welcome To Modern Warfare 3 Server~n~~g~Tutorial 4/6~w~ : ~y~How To use the Nuclear bomb");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"To use The Nuclear Bomb You need to be Brigadier Rank (7)~n~and you need to have 200000$~n~\
					You can Open The Nuclear Menu And select a base by going to the Skull Icon");
				}
				case SPANISH:
				{

					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Bienvenido A Modern Warfare 3 Server~n~~g~Tutorial 4/6~w~ : ~y~CÃ³mo usar la bomba nuclear");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Para usar la bomba nuclear Necesitas ser brigadier Rango (7)~n~y hay que tener 200000$~n~\
					Puede abrir el menÃº nuclear y seleccione una base por ir a la Icon crÃ¡neo");
				}
				case RUSS:
				{

					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Ð”Ð¾Ð±Ñ€Ð¾ ÐŸÐ¾Ð¶Ð°Ð»Ð¾Ð²Ð°Ñ‚ÑŒ Ð’ Modern Warfare 3 Server~n~~g~Ð ÑƒÐºÐ¾Ð²Ð¾Ð´ÑÑ‚Ð²Ð¾ 4/6~w~ : ~y~ÐšÐ°Ðº Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ Ð°Ñ‚Ð¾Ð¼Ð½ÑƒÑŽ Ð±Ð¾Ð¼Ð±Ñƒ");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Ð”Ð»Ñ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ð½Ð¸Ñ Ð°Ñ‚Ð¾Ð¼Ð½Ð¾Ð¹ Ð±Ð¾Ð¼Ð±Ñ‹ Ð’Ñ‹ Ð´Ð¾Ð»Ð¶Ð½Ñ‹ Ð±Ñ‹Ñ‚ÑŒ Ð±Ñ€Ð¸Ð³Ð°Ð´Ð½Ñ‹Ð¹ Ð Ð°Ð½Ð³ (7)~n~Ð¸ Ð²Ñ‹ Ð´Ð¾Ð»Ð¶Ð½Ñ‹ Ð¸Ð¼ÐµÑ‚ÑŒ 200000$~n~\
					Ð’Ñ‹ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ Ð¾Ñ‚ÐºÑ€Ñ‹Ñ‚ÑŒ ÑÐ´ÐµÑ€Ð½Ð¾Ð³Ð¾ Ð¼ÐµÐ½ÑŽ Ð¸ Ð²Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð±Ð°Ð·Ñƒ ÑÐ¾Ð±Ð¸Ñ€Ð°ÐµÑ‚ÑÑ Ð§ÐµÑ€ÐµÐ¿Ð° Icon");
				}
			}
			InterpolateCameraPos(playerid, 238.4283, 1822.9692, 6.89956, 221.6156, 1822.4742, 8.8058, 10000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,237.4336, 1822.9047, 6.9913,  220.6198, 1822.5216, 8.5276, 10000, CAMERA_MOVE);
			SetTimerEx("NextTut",10000,false,"dd",playerid,4);
			SendClientMessage(playerid,-1,"* Use /end to end the tutorial");
		}
		case 4:
		{

			SetPlayerVirtualWorld(playerid,0);
			SetPlayerPos(playerid,0,0,0);
			switch(PlayerInfo[playerid][LANG])
			{

				case ENG:
				{


					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Welcome To Modern Warfare 3 Server~n~~g~Tutorial 5/6~w~ : ~y~My Objective");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"You need to capture zones and kill other players to earn score ! or participating in events~n~\
					see /ranks to check the required score to jump the next rank~n~\
					Higher Rank = More Classes to choose and  More Power to you!");
				}
				case SPANISH:
				{

					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Bienvenido A Modern Warfare 3 Server~n~~g~Tutorial 5/6~w~ : ~y~objetivo");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Usted necesita capturar y matar a zonas a otros jugadores para ganar puntuaciÃ³n ! o participar en eventos~n~\
					/ranks para comprobar la puntuaciÃ³n necesaria para saltar el siguiente rango~n~\
					Superior Rango = MÃ¡s clases de elegir y mÃ¡s poder para usted!");
				}
				case RUSS:
				{

					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Ð”Ð¾Ð±Ñ€Ð¾ ÐŸÐ¾Ð¶Ð°Ð»Ð¾Ð²Ð°Ñ‚ÑŒ Ð’ Modern Warfare 3 Server~n~~g~Ð ÑƒÐºÐ¾Ð²Ð¾Ð´ÑÑ‚Ð²Ð¾ 5/6~w~ : ~y~Ð·Ð°Ð´Ð°Ñ‡Ð°");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Ð’Ñ‹ Ð´Ð¾Ð»Ð¶Ð½Ñ‹ Ð·Ð°Ñ…Ð²Ð°Ñ‚Ð¸Ñ‚ÑŒ Ð·Ð¾Ð½ Ð¸ ÑƒÐ±Ð¸Ð²Ð°Ñ‚ÑŒ Ð´Ñ€ÑƒÐ³Ð¸Ñ… Ð¸Ð³Ñ€Ð¾ÐºÐ¾Ð², Ñ‡Ñ‚Ð¾Ð±Ñ‹ Ð·Ð°Ñ€Ð°Ð±Ð¾Ñ‚Ð°Ñ‚ÑŒ Ð±Ð°Ð»Ð» ! Ð¸Ð»Ð¸ ÑƒÑ‡Ð°ÑÑ‚Ð¸Ðµ Ð² Ð¼ÐµÑ€Ð¾Ð¿Ñ€Ð¸ÑÑ‚Ð¸ÑÑ…~n~\
					/ranks Ð¿Ñ€Ð¾Ð²ÐµÑ€Ð¸Ñ‚ÑŒ Ð½ÐµÐ¾Ð±Ñ…Ð¾Ð´Ð¸Ð¼Ñ‹Ð¹ Ð±Ð°Ð»Ð» Ð´Ð»Ñ Ð¿ÐµÑ€ÐµÑ…Ð¾Ð´Ð° Ð½Ð° ÑÐ»ÐµÐ´ÑƒÑŽÑ‰Ð¸Ð¹ Ñ€Ð°Ð½Ð³~n~");

				}
			}
			InterpolateCameraPos(playerid, 458.3289, 2495.1948, 67.9732, 672.9922, 2510.3208, 139.9624, 20000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,457.3336, 2495.1409, 67.2950,  672.0029, 2510.2021, 139.8441, 20000, CAMERA_MOVE);
			SetTimerEx("NextTut",16000,false,"dd",playerid,5);
			SendClientMessage(playerid,-1,"* Use /end to end the tutorial");
		}
		case 5:
		{

			SetPlayerPos(playerid,LastPos[0][playerid],LastPos[1][playerid],LastPos[2][playerid]);
			SetPlayerFacingAngle(playerid,LastAng[playerid]);
			switch(PlayerInfo[playerid][LANG])
			{

				case ENG:
				{

					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Welcome To Modern Warfare 3 Server~n~~g~Tutorial 6/6~w~ : ~y~How To Play");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Now You reach the end of the tutorial If you have Questions and need help Please Contact our admins~n~\
					/Admins To check online admins or /Moderators~n~\
					Play Fair and follow the rules if you cheat we will ban you Permanently From The Server~n~\
					We Hope You enjoy Your time playing Here. Good Bye Solidier");
				}
				case SPANISH:
				{

					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Bienvenido A Modern Warfare 3 Server~n~~g~Tutorial 6/6~w~ : ~y~CÃ³mo Jugar");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Ahora usted llegar a la final del tutorial Si tiene preguntas y necesita ayuda, comunÃ­quese con nuestro administradores~n~\
					/Admins Para comprobar los administradores en lÃ­nea o /Moderators~n~\
					Juega Limpio y seguir las reglas si haces trampa vamos a prohibir que permanentemente del servidor~n~\
					Esperamos que disfrute de su tiempo de juego aquÃ­. AdiÃ³s Soldado");
				}
				case RUSS:
				{


					PlayerTextDrawSetString(playerid,TUT[playerid][0],"Ð”Ð¾Ð±Ñ€Ð¾ ÐŸÐ¾Ð¶Ð°Ð»Ð¾Ð²Ð°Ñ‚ÑŒ Ð’ Modern Warfare 3 Server~n~~g~Ð ÑƒÐºÐ¾Ð²Ð¾Ð´ÑÑ‚Ð²Ð¾ 6/6~w~ : ~y~ÐšÐ°Ðº Ð˜Ð³Ñ€Ð°Ñ‚ÑŒ");
					PlayerTextDrawSetString(playerid,TUT[playerid][2],"Ð¢ÐµÐ¿ÐµÑ€ÑŒ Ð²Ñ‹ Ð´Ð¾Ð¹Ð´ÐµÑ‚Ðµ Ð´Ð¾ ÐºÐ¾Ð½Ñ†Ð° ÑƒÑ€Ð¾ÐºÐ° Ð•ÑÐ»Ð¸ Ñƒ Ð²Ð°Ñ ÐµÑÑ‚ÑŒ Ð²Ð¾Ð¿Ñ€Ð¾ÑÑ‹ Ð¸ Ð½ÑƒÐ¶Ð½Ð° Ð¿Ð¾Ð¼Ð¾Ñ‰ÑŒ, Ð¿Ð¾Ð¶Ð°Ð»ÑƒÐ¹ÑÑ‚Ð°~n~ ÑÐ²ÑÐ¶Ð¸Ñ‚ÐµÑÑŒ Ñ Ð½Ð°ÑˆÐ¸Ð¼Ð¸ Ð°Ð´Ð¼Ð¸Ð½Ð¸ÑÑ‚Ñ€Ð°Ñ‚Ð¾Ñ€Ð°Ð¼Ð¸~n~\
					/Admins Ð§Ñ‚Ð¾Ð±Ñ‹ Ð¿Ñ€Ð¾Ð²ÐµÑ€Ð¸Ñ‚ÑŒ Ð¾Ð½Ð»Ð°Ð¹Ð½ Ð°Ð´Ð¼Ð¸Ð½Ð¾Ð² Ð¸Ð»Ð¸ /Moderators~n~ ");


				}
			}

			SetTimerEx("NextTut",10000,false,"dd",playerid,6);
		}
		case 6:
		{

			PlayerTextDrawHide(playerid,TUT[playerid][0]);
			PlayerTextDrawHide(playerid,TUT[playerid][1]);
			PlayerTextDrawHide(playerid,TUT[playerid][2]);
			ShowBoxPlayer(playerid);
			PlayerTextDrawShow(playerid,Guit[playerid][0]);
			PlayerTextDrawShow(playerid,Guit[playerid][1]);
			TextDrawShowForPlayer(playerid, BoxDraw1);
			PlayerTextDrawShow(playerid,Guit[playerid][2]);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid,true);
			PlayerInfo[playerid][TUTS] = false;
			StopAudioStreamForPlayer(playerid);
		}
	}
	return 1;
}

forward ClanWarRoundSpawn(w, t);
public ClanWarRoundSpawn(w, t)
{
	new t1 = CLAN_WAR[CW_C1], t2 = CLAN_WAR[CW_C2], R;
	SendClientMessage(w, COLOR_GREEN, "[CLAN WAR] Next Round is starting.");
	if(t == 2)
	{
		if(!IsValidSkin(PlayerInfo[w][cSkin])) SetPlayerSkin(w,24);
		else SetPlayerSkin(w,PlayerInfo[w][cSkin]);
		SetPlayerColor(w,0x2F97FF00);
		switch(CLAN_WAR[CW_MAP])
		{
			case 1:
			{
				SetPlayerInterior(w,1);
				R = random(sizeof(de_dust_tspawn));
				SetPlayerPos(w,de_dust_tspawn[R][0],de_dust_tspawn[R][1],de_dust_tspawn[R][2]);
				SetPlayerFacingAngle(w,de_dust_tspawn[R][3]);
				SetPlayerCameraPos(w, 152.9509, 1580.1943, 62.0240);
				SetPlayerCameraLookAt(w, 151.9476, 1580.2219, 61.7489);
			}
			case 2:
			{

				SetPlayerInterior(w,1);
				R = random(sizeof(t_inferno));
				SetPlayerPos(w,t_inferno[R][0],t_inferno[R][1],t_inferno[R][2]);
				SetPlayerFacingAngle(w,t_inferno[R][3]);
				SetPlayerCameraPos(w, 9582.8320, -8746.6553, 25.5376);
				SetPlayerCameraLookAt(w, 9582.6172, -8747.6289, 25.3977);
			}
			case 3:
			{

				SetPlayerInterior(w, 10);
				R = random(sizeof(t_rc));
				SetPlayerPos(w,t_rc[R][0],t_rc[R][1],t_rc[R][2]);
				SetPlayerFacingAngle(w,t_rc[R][3]);
			}
		}
		UpdateDynamic3DTextLabelText(RankLabel[w],0x2F97FF66, cName[w]);
		TogglePlayerControllable(w,false);
		SetPlayerVirtualWorld(w,66);
		SetPlayerTeam(w,t2);
	}
	else
	{
		if(!IsValidSkin(PlayerInfo[w][cSkin])) SetPlayerSkin(w,24);
		else SetPlayerSkin(w,PlayerInfo[w][cSkin]);
		SetPlayerColor(w,0xEB055B00);
		switch(CLAN_WAR[CW_MAP])
		{
			case 1:
			{
				SetPlayerInterior(w,1);
				R = random(sizeof(de_dust_bspawn));
				SetPlayerPos(w,de_dust_bspawn[R][0],de_dust_bspawn[R][1],de_dust_bspawn[R][2]);
				SetPlayerFacingAngle(w,de_dust_bspawn[R][3]);
				SetPlayerCameraPos(w, 254.3212, 1790.3757, 60.7934);
				SetPlayerCameraLookAt(w, 253.5711, 1791.0426, 60.5784);
			}
			case 2:
			{

				SetPlayerInterior(w,1);
				R = random(sizeof(b_inferno));
				SetPlayerPos(w,b_inferno[R][0],b_inferno[R][1],b_inferno[R][2]);
				SetPlayerFacingAngle(w,b_inferno[R][3]);
				SetPlayerCameraPos(w, 9431.2178, -8805.7510, 34.6133);
				SetPlayerCameraLookAt(w, 9431.4111, -8804.7793, 34.2882);
			}
			case 3:
			{

				SetPlayerInterior(w, 10);
				R = random(sizeof(b_rc));
				SetPlayerPos(w,b_rc[R][0],b_rc[R][1],b_rc[R][2]);
				SetPlayerFacingAngle(w,b_rc[R][3]);
			}
		}
		UpdateDynamic3DTextLabelText(RankLabel[w], 0xEB055B66, cName[w]);
		TogglePlayerControllable(w,false);
		SetPlayerVirtualWorld(w,66);
		SetPlayerTeam(w,t1);
	}
    foreach(new i : Player)
    {
        if(IsSpectator[i])
        {
            SpectatedPlayer2[i] = w;
			PlayerSpectatePlayer(i, w);
        }
    }
	ResetPlayerWeapons(w);
	GivePlayerWeapon(w, WEAPON_DEAGLE, 150);
	GivePlayerWeapon(w, WEAPON_SHOTGSPA, 250);
	GivePlayerWeapon(w, WEAPON_M4, 250);
	SetPlayerHealth(w, 100.0, 100.0);
	GameTextForPlayer(w, "~n~~n~~p~Loading..", 3000, 3);
	foreach(new i : Player)
	{
	    if(IsSpectator[i])
	    {
	        SpectateNext2(i);
	    }
	}
	return 1;
}

forward TestAirstrike(playerid);
public TestAirstrike(playerid)
{
	new Float:xx,Float:yy,Float:zz;
	GetPlayerPos(playerid,xx,yy,zz);
	CreateExplosion(Float:xx+random(10), Float:yy+random(6), Float:zz+random(3), 0,10.0);
	CreateExplosion(Float:xx+random(10), Float:yy+random(6), Float:zz+random(3), 0,10.0);
	CreateExplosion(Float:xx+random(10), Float:yy+random(6), Float:zz+random(3), 0,10.0);
	CreateExplosion(Float:xx+random(10), Float:yy+random(6), Float:zz+random(3), 0,10.0);
	CreateExplosion(Float:xx+random(10), Float:yy+random(6), Float:zz+random(3), 0,10.0);
	CreateExplosion(Float:xx+random(10), Float:yy+random(6), Float:zz+random(3), 0,10.0);
	CreateExplosion(Float:xx+random(10), Float:yy+random(6), Float:zz+random(3), 0,10.0);
	CreateExplosion(Float:xx+random(10), Float:yy+random(6), Float:zz+random(3), 0,10.0);
	CreateExplosion(Float:xx+random(10), Float:yy+random(6), Float:zz+random(3), 0,10.0);
}

forward ZeppelinTimer(playerid);
public ZeppelinTimer(playerid)
{
	new Float:x,Float:tty,Float:ttx, Float:y, Float:z;
	new tt = gTeam[playerid];
	GetObjectPos(BehemethObject[tt], x, y, z);
	SetPlayerPos(playerid, x,y,z-3.9);
	if(BehemethRotating[tt]) return 1;
	new Float:ang = GetPlayerCameraFacingAngle(playerid);
	new Float:rx, Float:ry, Float:rz; GetObjectRot(BehemethObject[tt],rx,ry,rz);
	if(!HitView[playerid])
	{
		if(floatabs(floatabs(ang) - floatabs(rz)) > 1)
		{
		    BehemethRotating[tt] = 1;
			MoveObject(BehemethObject[tt], x,y+0.1,z, 0.05,0,0,ang);
		}
		else
		{
			Tryg3D::GetPointInFrontOfCamera2D(playerid, ttx,tty,20);
			new Float:zzz; MapAndreas_FindZ_For2DCoord(ttx,tty,zzz);
			MoveObject(BehemethObject[tt], ttx,tty,zzz+64.00, 8,0,0,ang);
		}
	}
	new Float:zAngle;
	Tryg3D::GetPlayerCameraZAngle(playerid, zAngle);
	SetPlayerFacingAngle(playerid, zAngle);
	ApplyAnimation(playerid, "ped", "IDLE_stance", 4.1, true, false, false, false, 0, SYNC_ALL);
	return 1;
}

forward Start(playerid);
public Start(playerid)
{
	TogglePlayerControllable(playerid, true);
	InZeppelin[playerid] = gTeam[playerid];
}

public OnPlayerDeath(playerid, killerid, WEAPON:reason)
{
    if(!PlayerInfo[playerid][IsSpawned]) return 1;
    PlayerInfo[playerid][IsSpawned] = false;
    if(GetPVarInt(playerid,"roped") == 1)
	{
	    for(new destr2=0;destr2<ropelength;destr2++) { DestroyDynamicObject(r0pes[playerid][destr2]); r0pes[playerid][destr2] = -1; }
		SetPVarInt(playerid,"roped",0);
		DestroyDynamicCP(RopeCP[playerid]);
	}
	if(airvehdriver == playerid) FailAirstrike(playerid);
	new tt = gTeam[playerid];
	if(InZeppelin[playerid] == tt)
	{
	    StopObject(BehemethObject[tt]);
	    KillTimer(ZPTimer[playerid]);
		ZeppelinDriver[tt] = -1;
		InZeppelin[playerid] = 0;
		BehemethHp[tt] = 2500;
		HidePlayerProgressBar(playerid, ZP_CooldownBar[playerid]);
		HidePlayerProgressBar(playerid, ZP_HPBar[playerid]);
		ZP_Heat[tt] = 0;
		OnZP_HeatTimer[tt] = 0;
		ZP_Usable[tt] = 1;
		MoveObject(BehemethObject[tt], BehemSpawn[tt][0], BehemSpawn[tt][1], 150.00, 20, 0.0000, 0.0000, 0.0000);
	}
	if(!PlayerInfo[playerid][InDuel])
	{
		if(PlayerInfo[playerid][Duel_I] != INVALID_PLAYER_ID)
		{
			new d = PlayerInfo[playerid][Duel_I];
			PlayerInfo[d][Duel_P] = INVALID_PLAYER_ID;
			PlayerInfo[playerid][Duel_I] = INVALID_PLAYER_ID;
			KillTimer(PlayerInfo[d][Duel_T]);
			SendClientMessage(playerid, Dred, "You have died and the duel request has been automatically rejected.");
			SendClientMessage(d, Dred, "The player whom you invited has died, your duel request has been automatically rejected.");
		}
	}
	new msg[200];
	new playername[24], killername[24];
	strcat(playername, PlayerInfo[playerid][Nick]);
	if(PUBGLaunched)
	{
	    if(Iter_Contains(PUBGEvent, playerid))
		{
		    TextDrawHideForPlayer(playerid, PUBGAliveTD);
		  	TextDrawHideForPlayer(playerid, PUBGStaticTD);
			new Float:xxx,Float:yyy,Float:zz;
            if(killerid != INVALID_PLAYER_ID)
			{
				strcat(killername, PlayerInfo[killerid][Nick]);
				format(msg, _, "~r~~h~%s ~w~ was killed by ~b~~h~%s", playername, killername);
			}
			else format(msg, _, "~r~~h~%s ~w~ was knocked out", playername);
			TextDrawSetString(PUBGKillTD, msg);
			PUBGKillExpiry = 5;
		    GetPlayerPos(playerid,xxx,yyy,zz);
	        new weapons[13][2];
			for(new WEAPON_SLOT:i = WEAPON_SLOT_PISTOL; i < MAX_WEAPON_SLOTS; i ++)
			{
				GetPlayerWeaponData(playerid, i, WEAPON:weapons[i][0], weapons[i][1]);
				new WEAPON:weap = WEAPON:weapons[i][0];
				if(!(weap == WEAPON_SNIPER || weap == WEAPON_DEAGLE || weap == WEAPON_SHOTGUN || weap == WEAPON_MP5 || weap == WEAPON_M4 || weap == WEAPON_RIFLE || weap == WEAPON_GRENADE || weap == WEAPON_MOLTOV || weap == WEAPON_SILENCED)) continue;
			    if(weapons[i][1] > 0)
			    {
					new tag[86], type;
					new b = Iter_Free(PUBGIterator);
					Iter_Add(PUBGIterator, b);
					new Float:xx =  xxx + RandomFloat(-2.0, 2.0, 2), Float:yy =  yyy + RandomFloat(-2.0, 2.0, 2);
					PUBGLootObj[b][SpawnX] = xx;
					PUBGLootObj[b][SpawnY] = yy;
					PUBGLootObj[b][SpawnZ] = zz;
					switch(weap)
					{
					    case WEAPON_SNIPER: 	{ type = LOOT_SNIPER; 		tag = "Sniper"; 				}
					    case WEAPON_DEAGLE: 	{ type = LOOT_DEAGLE; 		tag = "Deagle"; 				}
					    case WEAPON_SHOTGUN: 	{ type = LOOT_SHOTGUN; 		tag = "Shotgun";			 	}
					    case WEAPON_MP5: 		{ type = LOOT_MP5;     	 	tag = "MP5"; 					}
					    case WEAPON_M4: 		{ type = LOOT_M4;    		tag = "M16A4"; 					}
					    case WEAPON_RIFLE: 		{ type = LOOT_RIFLE; 		tag = "KAR98K"; 				}
					    case WEAPON_GRENADE: 	{ type = LOOT_GRENADE; 		tag = "Grenade"; 				}
					    case WEAPON_MOLTOV: 	{ type = LOOT_MOLOTOV; 		tag = "Molotov"; 				}
					    case WEAPON_SILENCED: 	{ type = LOOT_SILENCED; 	tag = "Pistol w/ Suppressor"; 	}
					}
					strcat(tag, "\n\nF to pickup");
					PUBGLootObj[b][ObjType] = type;
			        PUBGLootObj[b][ObjID] = CreateDynamicObject(type,xx,yy,zz,0,0,0);
			        PUBGLootObj[b][ObjIDLabel] = CreateDynamic3DTextLabel(tag, 0xFFFF00AA, xx, yy, zz-0.1, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1,-1, 20.0 );
				}
			}
			Iter_Remove(PUBGEvent, playerid);
			TextDrawHideForPlayer(playerid, PubgSafeZoneTD);
			gTeam[playerid] = TEAM_MERC;
			SetPlayerTeam(playerid, TEAM_MERC);
			ForceClassSelection(playerid);
			if(Iter_Count(PUBGEvent) == 1)
			{
			    new k = Iter_Random(PUBGEvent);
			  	TextDrawHideForPlayer(k, PUBGAliveTD);
			  	TextDrawHideForPlayer(k, PUBGStaticTD);
				SendClientMessageToAll(-1, "{FF0000}[PUBG] %s Winner Winner Chicken Dinner! Earned 200XP, 100 Score & $100k as a reward.", PlayerInfo[k][Nick]);
				PlayerInfo[k][XP] += 200;
				SetPlayerScore(k, GetPlayerScore(k) + 100);
				GiveCash(k, 100000);
			    Iter_Clear(PUBGEvent);
			    ReloadPUBGLoot();
			    PUBGLaunched = false;
			    SetPlayerHealth(k, 0);
			    TextDrawHideForPlayer(k, PubgSafeZoneTD);
				gTeam[k] = TEAM_MERC;
				SetPlayerTeam(k, TEAM_MERC);
				ForceClassSelection(k);
			}
		}
	}
	if(GetTickCount() - FakekillData[playerid][LastDeathTime] < FAKEKILL_DELAY)
	{
		FakekillData[playerid][DeathCount]++;
		if(FakekillData[playerid][DeathCount] == FAKEKILL_LIMIT)
		{
			format(msg, _, "Anticheat:: %s has been kicked for ( Fake Kills )", playername);
			MessageToTwice(grey,msg);
			Kick(playerid);
		}
	}
	else FakekillData[playerid][DeathCount] = 1;
	FakekillData[playerid][LastDeathTime] = GetTickCount();
	if(killerid == INVALID_PLAYER_ID)
	{

		if(killerid == playerid)
		{

			format(msg, _, "Anticheat:: %s has been kicked for ( Fake Kills )", playername);
			MessageToTwice(grey,msg);
			Kick(playerid);
		}
		if(PlayerInfo[playerid][InDuel])
		{

			new opponent;
			if(PlayerInfo[playerid][Duel_P] != INVALID_PLAYER_ID) opponent = PlayerInfo[playerid][Duel_P];
			else if(PlayerInfo[playerid][Duel_I] != INVALID_PLAYER_ID) opponent = PlayerInfo[playerid][Duel_I];
			new cash = PlayerInfo[playerid][Duel_B];
			SendClientMessageToAll(0xC62509FF,"** %s(%d) has suicided and lost the duel against %s(%d) [BET] : %d$",playername,playerid,PlayerInfo[opponent][Nick],opponent,cash);
			GiveCash(opponent,cash);
			GiveCash(playerid,-cash);
			GameTextForPlayer(opponent,"~g~~w~winner",6000,5);
			GameTextForPlayer(playerid,"~r~~w~loser",6000,5);
			SendDeathMessage(opponent,playerid,reason);
			PlayerInfo[playerid][InDuel] = PlayerInfo[opponent][InDuel]= 0;
			PlayerInfo[playerid][Duel_P] = PlayerInfo[playerid][Duel_I] = PlayerInfo[opponent][Duel_P] = PlayerInfo[opponent][Duel_I] = INVALID_PLAYER_ID;
			SpawnPlayer(opponent);
			return 1;
		}
		if(CLAN_WAR[CW_STARTED])
		{
			if(HasJoined(playerid))
			{
			    if(CLAN_WAR[CW_WARMUP]) return 1;
				new maxx = CLAN_WAR[CW_MAX];
				Iter_Remove(ALIVE1, playerid);
				Iter_Remove(ALIVE2, playerid);
				for(new i=0; i < maxx; i++)
				{
					if(WAR_SLOT_T1[i] == playerid)
					{
						foreach (new j : Player)
						{
							SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 0.00);
							SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 0.00);
						}
						foreach(new l: JOINED1)
						{
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
						}
						foreach(new l: JOINED2)
						{
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
						}
						foreach(new l : Player)
						{
						    if(!IsSpectator[l]) continue;
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
						}
						break;
					}
					if(WAR_SLOT_T2[i] == playerid)
					{
						foreach (new j : Player)
						{
							SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 0.00);
							SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 0.00);
						}
						foreach(new l: JOINED1)
						{
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
						}
						foreach(new l: JOINED2)
						{
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
						}
						foreach(new l : Player)
						{
						    if(!IsSpectator[l]) continue;
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
						}
						break;
					}
				}
				if(Iter_Count(ALIVE1) == 0)
				{
					new str[96];
					CLAN_WAR[CW_ROUND2] ++;
					new rounds = CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2];
					new tag1[7], tag2[7];
					foreach(new z : JOINED1)
					{
						strcat(tag1, cTag[z]);
						break;
					}
					foreach(new z : JOINED2)
					{
						strcat(tag2, cTag[z]);
						break;
					}
					if(CLAN_WAR[CW_ROUNDSS] == rounds)
					{
						if(CLAN_WAR[CW_ROUND1] > CLAN_WAR[CW_ROUND2])
						{
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
							mysql_tquery(mysql, str);
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
							mysql_tquery(mysql, str);
							new bool:kk;
							foreach(new z:JOINED1)
							{
								CWWins[z] ++;
								if(QuestContent[4] == CONTENT_CWWIN)
								{
								    QuestProgress[z][4] ++;
								    if(CWWins[z] == 7)
								    {
								    	if(!Bit_Get(QuestDone[z], 4))
								    	{
								    	    Bit_Let(QuestDone[z], 4);
								    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
								    	    TextDrawHideForPlayer(z,Quest[4]);
								    	    PlayerInfo[z][XP] += 100;
								    	    GiveCash(z, 50000);
								    	}
									}
								}
							}
							if(CLAN_TOURNAMENT[CT_ON])
							{
								CLAN_TOURNAMENT[CT_PLAYING] = false;
								ct_available = false;
								switch(CLAN_TOURNAMENT[CT_PHASE])
								{
								    case QUARTER:
								    {
								        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[0], tag1);
										        TextDrawSetString(CT_SEMI[0], "%s - ?", tag1);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[2], tag1);
										        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], tag1);
								            }
								            case 2:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[1], tag1);
										        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
								            }
								            case 3:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = SEMI;
								                strcopy(CT_SEMI_TAG[3], tag1);
										        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], tag1);
								            }
								        }
								    }
								    case SEMI:
								    {
										switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_FINALS_TAG[0], tag1);
										        TextDrawSetString(CT_FINALS, "%s - ?", tag1);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = FINALS;
								                strcopy(CT_FINALS_TAG[1], tag1);
										        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], tag1);
								            }
								        }
								    }
								    case FINALS:
									{
									    CLAN_TOURNAMENT[CT_ON] = false;
								        TextDrawSetString(CT_WINNER_TD, "Winner: %s", tag1);
								        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", tag1);
								        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C1];
						        		WonTournament(CLAN_WAR[CW_C1]);
						        		kk = true;
									}
								}
								if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", tag1, tag2);
						    }
							else format(str, _, "(!) [%s] won the clan war against [%s].", tag1, tag2);
							KillTimer(CWTimer5);
							foreach(new x: ALIVE1) { SpawnPlayer(x); PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);}
							foreach(new x: ALIVE2) SpawnPlayer(x);
							new win, los;
							los = Iter_Random(JOINED2); win = Iter_Random(JOINED1);
							DealCR(win, los);
						}
						else
						{
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
							mysql_tquery(mysql, str);
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
							mysql_tquery(mysql, str);
							new bool:kk;
							foreach(new z:JOINED2)
							{
								CWWins[z] ++;
								if(QuestContent[4] == CONTENT_CWWIN)
								{
								    QuestProgress[z][4] ++;
									if(CWWins[z] == 7)
									{
										if(!Bit_Get(QuestDone[z], 4))
								    	{
								    	    Bit_Let(QuestDone[z], 4);
								    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
								    	    TextDrawHideForPlayer(z,Quest[4]);
								    	    PlayerInfo[z][XP] += 100;
								    	    GiveCash(z, 50000);
								    	}
									}
								}
							}
							if(CLAN_TOURNAMENT[CT_ON])
							{
								CLAN_TOURNAMENT[CT_PLAYING] = false;
								ct_available = false;
								switch(CLAN_TOURNAMENT[CT_PHASE])
								{
								    case QUARTER:
								    {
								        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[0], tag2);
										        TextDrawSetString(CT_SEMI[0], "%s - ?", tag2);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[2], tag2);
										        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], tag2);
								            }
								            case 2:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[1], tag2);
										        TextDrawSetString(CT_SEMI[1], "%s - ?", tag2);
								            }
								            case 3:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = SEMI;
								                strcopy(CT_SEMI_TAG[3], tag2);
										        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], tag2);
								            }
								        }
								    }
								    case SEMI:
								    {
										switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_FINALS_TAG[0], tag2);
										        TextDrawSetString(CT_FINALS, "%s - ?", tag2);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = FINALS;
								                strcopy(CT_FINALS_TAG[1], tag2);
										        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], tag2);
								            }
								        }
								    }
								    case FINALS:
									{
									    CLAN_TOURNAMENT[CT_ON] = false;
								        TextDrawSetString(CT_WINNER_TD, "Winner: %s", tag2);
								        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", tag2);
								        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C2];
						        		WonTournament(CLAN_WAR[CW_C2]);
						        		kk = true;
									}
								}
								if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", tag2, cTag[playerid]);
						    }
							else format(str, _, "(!) [%s] won the clan war against [%s].", tag2, cTag[playerid]);
							KillTimer(CWTimer5);
							foreach(new x: ALIVE2) { SpawnPlayer(x); PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);}
							foreach(new x: ALIVE1) SpawnPlayer(x);
							new win, los;
							los = Iter_Random(JOINED1); win = Iter_Random(JOINED2);
							DealCR(win, los);
						}
						SendClientMessageToAll(COLOR_PINK, str);
						foreach(new x: Player)
						{
						    if(IsSpectator[x])
						    {
					        	cmd_tspecoff(x);
								for(new i=0; i < maxx; i++)
								{
									TextDrawHideForPlayer(x, CW_MEMBER[i]);
									TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
					            }
					            TextDrawHideForPlayer(x, CW_ROUNDS);
					            HideViewersTD(x);
					            HideMVP(x);
						    }
						}
						foreach(new x: JOINED1)
						{
							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++) {
								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							TextDrawHideForPlayer(x, CW_ROUNDS);
							HideViewersTD(x);
							HideMVP(x);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
						}
						foreach(new x: JOINED2)
						{
							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++)
							{
								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							TextDrawHideForPlayer(x, CW_ROUNDS);
							HideViewersTD(x);
							HideMVP(x);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
						}
						WAR_SLOT_T1 = WAR_SLOT_DEFAULT;
						WAR_SLOT_T2 = WAR_SLOT_DEFAULT;
						WAR_SLOT_T1_AID = WAR_SLOT_DEFAULT;
						WAR_SLOT_T2_AID = WAR_SLOT_DEFAULT;
						CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
						Iter_Clear(JOINED1);
						Iter_Clear(JOINED2);
						Iter_Clear(ALIVE1);
						Iter_Clear(ALIVE2);
					}
					else
					{
						foreach(new z : JOINED2)
						{
							strcopy(tag2, cTag[z]);
							break;
						}
						CWTimer5 = SetTimer("StartCW2", 10000, false);
						CheckMVP(2);
						TextDrawSetString(CW_ROUNDS, "    Round: ~p~%d~w~/~g~%d~n~~b~~h~%s~w~: %d    ~r~~h~%s~w~: %d", CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2] + 1, CLAN_WAR[CW_ROUNDSS], tag2, CLAN_WAR[CW_ROUND2], tag1, CLAN_WAR[CW_ROUND1]);
						foreach(new c : JOINED1) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
						foreach(new c : JOINED2) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
						for(new i=0; i < maxx; i++)
						{
							if(IsPlayerConnected(WAR_SLOT_T1[i]))
							{
								SetPlayerHealth(WAR_SLOT_T1[i], 100.0, 100.0);
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 100.00);
									SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 100.00);
								}
							}
							if(IsPlayerConnected(WAR_SLOT_T2[i]))
							{
								SetPlayerHealth(WAR_SLOT_T2[i], 100.0, 100.0);
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 100.00);
									SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 100.00);
								}
							}

							foreach(new l: JOINED1)
							{
								if(IsPlayerConnected(WAR_SLOT_T1[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								if(IsPlayerConnected(WAR_SLOT_T2[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
							}
							foreach(new l: JOINED2)
							{
								if(IsPlayerConnected(WAR_SLOT_T1[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								if(IsPlayerConnected(WAR_SLOT_T2[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
							}
							foreach(new j: Player)
							{
							    if(IsSpectator[j])
							    {
							        if(IsPlayerConnected(WAR_SLOT_T1[i]))
									{
										ShowPlayerProgressBar(j, CW_STAT_BAR[j][HPP][i]);
										ShowPlayerProgressBar(j, CW_STAT_BAR[j][ARMOURR][i]);
								    }
								    if(IsPlayerConnected(WAR_SLOT_T2[i]))
									{
										ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][HPP][i]);
										ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][ARMOURR][i]);
								    }
									TextDrawShowForPlayer(j, CW_ROUNDS);
							    }
							}
						}
						foreach(new w : JOINED1)
						{
							IsPlayerSpectating[w] = false;
							TogglePlayerSpectating(w, false);
							Iter_Add(ALIVE1, w);
							SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 1);
						}
						foreach(new w: Player)
						{
						    if(IsSpectator[w])
						    {
						        ShowMVP(w);
					        	foreach(new i : ALIVE1)
								{
									SpectatedPlayer2[w] = i;
									PlayerSpectatePlayer(w, i);
									break;
								}
						    }
						}
						foreach(new w: JOINED2)
						{
							IsPlayerSpectating[w] = false;
							TogglePlayerSpectating(w, false);
							Iter_Add(ALIVE2, w);
							SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 2);
						}
					}
				}
				else if(Iter_Count(ALIVE2) == 0)
				{
					new str[96];
					CLAN_WAR[CW_ROUND1] ++;
					new rounds = CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2];
					new tag1[7], tag2[7];
					foreach(new z : JOINED1)
					{
						strcat(tag1, cTag[z]);
						break;
					}
					if(CLAN_WAR[CW_ROUNDSS] == rounds)
					{
						if(CLAN_WAR[CW_ROUND1] > CLAN_WAR[CW_ROUND2])
						{
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
							mysql_tquery(mysql, str);
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
							mysql_tquery(mysql, str);
							foreach(new z:JOINED1)
							{
								CWWins[z] ++;
								if(QuestContent[4] == CONTENT_CWWIN)
								{
								    QuestProgress[z][4] ++;
                                    if(CWWins[z] == 7)
								    {
								    	if(!Bit_Get(QuestDone[z], 4))
								    	{
								    	    Bit_Let(QuestDone[z], 4);
								    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
								    	    TextDrawHideForPlayer(z,Quest[4]);
								    	    PlayerInfo[z][XP] += 100;
								    	    GiveCash(z, 50000);
								    	}
									}
								}
							}
							new bool:kk;
							if(CLAN_TOURNAMENT[CT_ON])
							{
								CLAN_TOURNAMENT[CT_PLAYING] = false;
								ct_available = false;
								switch(CLAN_TOURNAMENT[CT_PHASE])
								{
								    case QUARTER:
								    {
								        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[0], tag1);
										        TextDrawSetString(CT_SEMI[0], "%s - ?", tag1);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[2], tag1);
										        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], tag1);
								            }
								            case 2:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[1], tag1);
										        TextDrawSetString(CT_SEMI[1], "%s - ?", tag1);
								            }
								            case 3:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = SEMI;
								                strcopy(CT_SEMI_TAG[3], tag1);
										        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], tag1);
								            }
								        }
								    }
								    case SEMI:
								    {
										switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_FINALS_TAG[0], tag1);
										        TextDrawSetString(CT_FINALS, "%s - ?", tag1);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = FINALS;
								                strcopy(CT_FINALS_TAG[1], tag1);
										        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], tag1);
								            }
								        }
								    }
								    case FINALS:
									{
									    CLAN_TOURNAMENT[CT_ON] = false;
								        TextDrawSetString(CT_WINNER_TD, "Winner: %s", tag1);
								        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", tag1);
								        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C1];
						        		WonTournament(CLAN_WAR[CW_C1]);
						        		kk = true;
									}
								}
								if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", tag1, cTag[playerid]);
						    }
							else format(str, _, "(!) [%s] won the clan war against [%s].", tag1, cTag[playerid]);
							KillTimer(CWTimer5);
							foreach(new x: ALIVE1) SpawnPlayer(x);
							foreach(new x : JOINED1) PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);
							new win, los;
							los = Iter_Random(JOINED2); win = Iter_Random(JOINED1);
							DealCR(win, los);
						}else
						{
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
							mysql_tquery(mysql, str);
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
							mysql_tquery(mysql, str);
							new bool:kk;
							foreach(new z:JOINED2)
							{
								CWWins[z] ++;
								if(QuestContent[4] == CONTENT_CWWIN)
								{
									QuestProgress[z][4] ++;
								    if(CWWins[z] == 7)
								    {
								    	if(!Bit_Get(QuestDone[z], 4))
								    	{
								    	    Bit_Let(QuestDone[z], 4);
								    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
								    	    TextDrawHideForPlayer(z,Quest[4]);
								    	    PlayerInfo[z][XP] += 100;
								    	    GiveCash(z, 50000);
								    	}
									}
								}
							}
							if(CLAN_TOURNAMENT[CT_ON])
							{
								CLAN_TOURNAMENT[CT_PLAYING] = false;
								ct_available = false;
								switch(CLAN_TOURNAMENT[CT_PHASE])
								{
								    case QUARTER:
								    {
								        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[0], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[0], "%s - ?", cTag[playerid]);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[2], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], cTag[playerid]);
								            }
								            case 2:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[1], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
								            }
								            case 3:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = SEMI;
								                strcopy(CT_SEMI_TAG[3], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], cTag[playerid]);
								            }
								        }
								    }
								    case SEMI:
								    {
										switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_FINALS_TAG[0], cTag[playerid]);
										        TextDrawSetString(CT_FINALS, "%s - ?", cTag[playerid]);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = FINALS;
								                strcopy(CT_FINALS_TAG[1], cTag[playerid]);
										        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], cTag[playerid]);
								            }
								        }
								    }
								    case FINALS:
									{
									    CLAN_TOURNAMENT[CT_ON] = false;
								        TextDrawSetString(CT_WINNER_TD, "Winner: %s", cTag[playerid]);
								        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", cTag[playerid]);
								        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C2];
						       		 	WonTournament(CLAN_WAR[CW_C2]);
						        		kk = true;
									}
								}
								if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", cTag[playerid], tag1);
						    }
							else format(str, _, "(!) [%s] won the clan war against [%s].", cTag[playerid], tag1);
							KillTimer(CWTimer5);
							foreach(new x: ALIVE1) SpawnPlayer(x);
							foreach(new x : JOINED2) PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);
							new win, los;
							los = Iter_Random(JOINED1); win = Iter_Random(JOINED2);
							DealCR(win, los);
						}
						SendClientMessageToAll(COLOR_PINK, str);
						foreach(new x: Player)
						{
						    if(IsSpectator[x])
						    {
					       	 	cmd_tspecoff(x);
								for(new i=0; i < maxx; i++)
								{
									TextDrawHideForPlayer(x, CW_MEMBER[i]);
									TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);	
					            }
					            TextDrawHideForPlayer(x, CW_ROUNDS);
					            HideViewersTD(x);
					            HideMVP(x);
						    }
						}
						foreach(new x: JOINED1)
						{
							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++)
							{
								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							HideViewersTD(x);
							HideMVP(x);
							TextDrawHideForPlayer(x, CW_ROUNDS);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
						}
						foreach(new x: JOINED2)
						{
							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++)
							{
								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							HideViewersTD(x);
							HideMVP(x);
							TextDrawHideForPlayer(x, CW_ROUNDS);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
						}
						WAR_SLOT_T1 = WAR_SLOT_DEFAULT;
						WAR_SLOT_T2 = WAR_SLOT_DEFAULT;
						WAR_SLOT_T1_AID = WAR_SLOT_DEFAULT;
						WAR_SLOT_T2_AID = WAR_SLOT_DEFAULT;
						CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
						Iter_Clear(JOINED1);
						Iter_Clear(JOINED2);
						Iter_Clear(ALIVE1);
						Iter_Clear(ALIVE2);
					}
					else
					{
						foreach(new z : JOINED1)
						{
							strcopy(tag1, cTag[z]);
							break;
						}
						foreach(new z : JOINED2)
						{
							strcopy(tag2, cTag[z]);
							break;
						}
						CWTimer5 = SetTimer("StartCW2", 10000, false);
						CheckMVP(1);
						TextDrawSetString(CW_ROUNDS, "    Round: ~p~%d~w~/~g~%d~n~~b~~h~%s~w~: %d    ~r~~h~%s~w~: %d", CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2] + 1, CLAN_WAR[CW_ROUNDSS], tag2, CLAN_WAR[CW_ROUND2], tag1, CLAN_WAR[CW_ROUND1]);
						foreach(new c : JOINED1) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
						foreach(new c : JOINED2) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
						for(new i=0; i < maxx; i++)
						{
							if(IsPlayerConnected(WAR_SLOT_T1[i]))
							{
								SetPlayerHealth(WAR_SLOT_T1[i], 100.0, 100.0);
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 100.00);
									SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 100.00);
								}
							}
							if(IsPlayerConnected(WAR_SLOT_T2[i]))
							{
								SetPlayerHealth(WAR_SLOT_T2[i], 100.0, 100.0);
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 100.00);
									SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 100.00);
								}
							}

							foreach(new l: JOINED1)
							{
								if(IsPlayerConnected(WAR_SLOT_T1[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								if(IsPlayerConnected(WAR_SLOT_T2[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
							}
							foreach(new l: JOINED2)
							{
								if(IsPlayerConnected(WAR_SLOT_T1[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								if(IsPlayerConnected(WAR_SLOT_T2[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
							}
							foreach(new j: Player)
							{
							    if(IsSpectator[j])
							    {
							        ShowMVP(j);
							        if(IsPlayerConnected(WAR_SLOT_T1[i]))
									{
										ShowPlayerProgressBar(j, CW_STAT_BAR[j][HPP][i]);
										ShowPlayerProgressBar(j, CW_STAT_BAR[j][ARMOURR][i]);
								    }
								    if(IsPlayerConnected(WAR_SLOT_T2[i]))
									{
										ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][HPP][i]);
										ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][ARMOURR][i]);
								    }
									TextDrawShowForPlayer(j, CW_ROUNDS);
							    }
							}
						}
						foreach(new w : JOINED1)
						{

							IsPlayerSpectating[w] = false;
							TogglePlayerSpectating(w, false);
							Iter_Add(ALIVE1, w);
							SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 1);
						}
						foreach(new w: Player)
						{
						    if(IsSpectator[w])
						    {
					        	foreach(new i : ALIVE1)
								{
									SpectatedPlayer2[w] = i;
									PlayerSpectatePlayer(w, i);
									break;
								}
						    }
						}
						foreach(new w: JOINED2)
						{

							IsPlayerSpectating[w] = false;
							TogglePlayerSpectating(w, false);
							Iter_Add(ALIVE2, w);
							SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 2);
						}
					}
				}
				else
				{
					SpectateOn(playerid);
					new sound = random(3);
					foreach(new i : Player) if(IsSpectator[i]) if(SpectatedPlayer2[i] == playerid) SpectateNext2(i);
					foreach(new i : JOINED1)
					{
						if(SpectatedPlayer[i] == playerid) SpectateNext(i);
						switch(sound)
						{
							case 0: PlayerPlaySound(i ,36200, 0,0,0);
							case 1: PlayerPlaySound(i ,36201, 0,0,0);
							case 2: PlayerPlaySound(i ,36203, 0,0,0);
						}
				    }
					foreach(new i : JOINED2)
					{
						if(SpectatedPlayer[i] == playerid) SpectateNext(i);
						switch(sound)
						{
							case 0: PlayerPlaySound(i ,36200, 0,0,0);
							case 1: PlayerPlaySound(i ,36201, 0,0,0);
							case 2: PlayerPlaySound(i ,36203, 0,0,0);
						}
				    }
				}
			}
		}
	}
	else
	{
		if(CLAN_WAR[CW_STARTED])
		{
			if(HasJoined(playerid))
			{
			    if(CLAN_WAR[CW_WARMUP]) return 1;
				new maxx = CLAN_WAR[CW_MAX];
				Iter_Remove(ALIVE1, playerid);
				Iter_Remove(ALIVE2, playerid);
				CW_KILLS[killerid] ++;
				CW_R_KILLS[killerid] ++;
				for(new i=0; i < maxx; i++)
				{

					if(WAR_SLOT_T1[i] == playerid)
					{
						foreach (new j : Player)
						{
							SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 0.00);
							SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 0.00);
						}
						foreach(new l: JOINED1)
						{
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
						}
						foreach(new l: JOINED2)
						{
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
						}
						foreach(new l: Player)
						{
						    if(!IsSpectator[l]) continue;
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
						}
						break;
					}
					if(WAR_SLOT_T2[i] == playerid)
					{
						foreach (new j : Player)
						{
							SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 0.00);
							SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 0.00);
						}
						foreach(new l: JOINED1)
						{

							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
						}
						foreach(new l: JOINED2)
						{

							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
						}
						foreach(new l: Player)
						{
						    if(!IsSpectator[l]) continue;
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
						}
						break;
					}
				}
				if(Iter_Count(ALIVE1) == 0)
				{

					new str[96];
					CLAN_WAR[CW_ROUND2] ++;
					new rounds = CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2];
					if(CLAN_WAR[CW_ROUNDSS] == rounds)
					{

						if(CLAN_WAR[CW_ROUND1] > CLAN_WAR[CW_ROUND2])
						{

							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
							mysql_tquery(mysql, str);
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
							mysql_tquery(mysql, str);
							new bool:kk;
							foreach(new z:JOINED1)
							{
								CWWins[z] ++;
								if(CWWins[z] == 7)
								{
								    if(QuestContent[4] == CONTENT_CWWIN)
								    {
										QuestProgress[z][4] ++;
								    	if(!Bit_Get(QuestDone[z], 4))
								    	{
								    	    Bit_Let(QuestDone[z], 4);
								    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
								    	    TextDrawHideForPlayer(z,Quest[4]);
								    	    PlayerInfo[z][XP] += 100;
								    	    GiveCash(z, 50000);
								    	}
									}
								}
							}
							if(CLAN_TOURNAMENT[CT_ON])
							{
								CLAN_TOURNAMENT[CT_PLAYING] = false;
								ct_available = false;
								switch(CLAN_TOURNAMENT[CT_PHASE])
								{
								    case QUARTER:
								    {
								        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[0], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[0], "%s - ?", cTag[playerid]);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[2], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], cTag[playerid]);
								            }
								            case 2:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[1], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
								            }
								            case 3:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = SEMI;
								                strcopy(CT_SEMI_TAG[3], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], cTag[playerid]);
								            }
								        }
								    }
								    case SEMI:
								    {
										switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_FINALS_TAG[0], cTag[playerid]);
										        TextDrawSetString(CT_FINALS, "%s - ?", cTag[playerid]);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = FINALS;
								                strcopy(CT_FINALS_TAG[1], cTag[playerid]);
										        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], cTag[playerid]);
								            }
								        }
								    }
								    case FINALS:
									{
									    CLAN_TOURNAMENT[CT_ON] = false;
								        TextDrawSetString(CT_WINNER_TD, "Winner: %s", cTag[playerid]);
								        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", cTag[playerid]);
								        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C1];
						        		WonTournament(CLAN_WAR[CW_C1]);
						        		kk = true;
									}
								}
								if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", cTag[playerid], cTag[killerid]);
						    }
							else format(str, _, "(!) [%s] won the clan war against [%s].", cTag[playerid], cTag[killerid]);
							KillTimer(CWTimer5);
							foreach(new x: ALIVE2) SpawnPlayer(x);
							foreach(new x : JOINED1) PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);
							new win, los;
							los = Iter_Random(JOINED2); win = Iter_Random(JOINED1);
							DealCR(win, los);
						}
						else
						{

							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
							mysql_tquery(mysql, str);
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
							mysql_tquery(mysql, str);
							new bool:kk;
							foreach(new z:JOINED2)
							{
								CWWins[z] ++;
								if(QuestContent[4] == CONTENT_CWWIN)
								{
								    QuestProgress[z][4] ++;
                                    if(CWWins[z] == 7)
								    {
								    	if(!Bit_Get(QuestDone[z], 4))
								    	{
								    	    Bit_Let(QuestDone[z], 4);
								    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
								    	    TextDrawHideForPlayer(z,Quest[4]);
								    	    PlayerInfo[z][XP] += 100;
								    	    GiveCash(z, 50000);
								    	}
									}
								}
							}
							if(CLAN_TOURNAMENT[CT_ON])
							{
								CLAN_TOURNAMENT[CT_PLAYING] = false;
								ct_available = false;
								switch(CLAN_TOURNAMENT[CT_PHASE])
								{
								    case QUARTER:
								    {
								        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[0], cTag[killerid]);
										        TextDrawSetString(CT_SEMI[0], "%s - ?", cTag[killerid]);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[2], cTag[killerid]);
										        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], cTag[killerid]);
								            }
								            case 2:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[1], cTag[killerid]);
										        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
								            }
								            case 3:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = SEMI;
								                strcopy(CT_SEMI_TAG[3], cTag[killerid]);
										        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], cTag[killerid]);
								            }
								        }
								    }
								    case SEMI:
								    {
										switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_FINALS_TAG[0], cTag[killerid]);
										        TextDrawSetString(CT_FINALS, "%s - ?", cTag[killerid]);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = FINALS;
								                strcopy(CT_FINALS_TAG[1], cTag[killerid]);
										        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], cTag[killerid]);
								            }
								        }
								    }
								    case FINALS:
									{
									    CLAN_TOURNAMENT[CT_ON] = false;
								        TextDrawSetString(CT_WINNER_TD, "Winner: %s", cTag[killerid]);
								        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", cTag[killerid]);
								        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C2];
						        		WonTournament(CLAN_WAR[CW_C2]);
						        		kk = true;
									}
								}
								if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", cTag[killerid], cTag[playerid]);
						    }
							else format(str, _, "(!) [%s] won the clan war against [%s].", cTag[killerid], cTag[playerid]);
							KillTimer(CWTimer5);
							foreach(new x: ALIVE2) SpawnPlayer(x);
							foreach(new x : JOINED2) PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);
							new win, los;
							los = Iter_Random(JOINED1); win = Iter_Random(JOINED2);
							DealCR(win, los);
						}
						SendClientMessageToAll(COLOR_PINK, str);
						foreach(new x: Player)
						{
						    if(IsSpectator[x])
						    {
					        	cmd_tspecoff(x);
								for(new i=0; i < maxx; i++)
								{
									TextDrawHideForPlayer(x, CW_MEMBER[i]);
									TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
					            }
					            TextDrawHideForPlayer(x, CW_ROUNDS);
					            HideViewersTD(x);
					            HideMVP(x);
						    }
						}
						foreach(new x: JOINED1)
						{

							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++) {
								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							TextDrawHideForPlayer(x, CW_ROUNDS);
							HideViewersTD(x);
							HideMVP(x);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
						}
						foreach(new x: JOINED2)
						{

							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++)
							{

								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							TextDrawHideForPlayer(x, CW_ROUNDS);
							HideViewersTD(x);
							HideMVP(x);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
						}
						WAR_SLOT_T1 = WAR_SLOT_DEFAULT;
						WAR_SLOT_T2 = WAR_SLOT_DEFAULT;
						WAR_SLOT_T1_AID = WAR_SLOT_DEFAULT;
						WAR_SLOT_T2_AID = WAR_SLOT_DEFAULT;
						CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
						Iter_Clear(JOINED1);
						Iter_Clear(JOINED2);
						Iter_Clear(ALIVE1);
						Iter_Clear(ALIVE2);
					}
					else
					{
						new tag1[7], tag2[7];
						foreach(new z : JOINED1)
						{
							strcat(tag1, cTag[z]);
							break;
						}
						foreach(new z : JOINED2)
						{
							strcat(tag2, cTag[z]);
							break;
						}
						CWTimer5 = SetTimer("StartCW2", 10000, false);
						CheckMVP(2);
						TextDrawSetString(CW_ROUNDS, "    Round: ~p~%d~w~/~g~%d~n~~b~~h~%s~w~: %d    ~r~~h~%s~w~: %d", CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2] + 1, CLAN_WAR[CW_ROUNDSS], tag2, CLAN_WAR[CW_ROUND2], tag1, CLAN_WAR[CW_ROUND1]);
						foreach(new c : JOINED1) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
						foreach(new c : JOINED2) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
						for(new i=0; i < maxx; i++)
						{
							if(IsPlayerConnected(WAR_SLOT_T1[i]))
							{
								SetPlayerHealth(WAR_SLOT_T1[i], 100.0, 100.0);
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 100.00);
									SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 100.00);
								}
							}
							if(IsPlayerConnected(WAR_SLOT_T2[i]))
							{
								SetPlayerHealth(WAR_SLOT_T2[i], 100.0, 100.0);
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 100.00);
									SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 100.00);
								}
							}

							foreach(new l: JOINED1)
							{
								if(IsPlayerConnected(WAR_SLOT_T1[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								if(IsPlayerConnected(WAR_SLOT_T2[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
							}
							foreach(new l: JOINED2)
							{
								if(IsPlayerConnected(WAR_SLOT_T1[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								if(IsPlayerConnected(WAR_SLOT_T2[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
							}
							foreach(new j: Player)
							{
							    if(IsSpectator[j])
							    {
							        if(IsPlayerConnected(WAR_SLOT_T1[i]))
									{
										ShowPlayerProgressBar(j, CW_STAT_BAR[j][HPP][i]);
										ShowPlayerProgressBar(j, CW_STAT_BAR[j][ARMOURR][i]);
								    }
								    if(IsPlayerConnected(WAR_SLOT_T2[i]))
									{
										ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][HPP][i]);
										ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][ARMOURR][i]);
								    }
									TextDrawShowForPlayer(j, CW_ROUNDS);
							    }
							}
						}
						foreach(new w : JOINED1)
						{

							IsPlayerSpectating[w] = false;
							TogglePlayerSpectating(w, false);
							Iter_Add(ALIVE1, w);
							SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 1);
						}
						foreach(new w: Player)
						{
						    if(IsSpectator[w])
						    {
						        ShowMVP(w);
					        	foreach(new i : ALIVE1)
								{
									SpectatedPlayer2[w] = i;
									PlayerSpectatePlayer(w, i);
									break;
								}
						    }
						}
						foreach(new w: JOINED2)
						{

							IsPlayerSpectating[w] = false;
							TogglePlayerSpectating(w, false);
							Iter_Add(ALIVE2, w);
							SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 2);
						}
					}
				}
				else if(Iter_Count(ALIVE2) == 0)
				{

					new str[96];
					CLAN_WAR[CW_ROUND1] ++;
					new rounds = CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2];
					if(CLAN_WAR[CW_ROUNDSS] == rounds)
					{

						if(CLAN_WAR[CW_ROUND1] > CLAN_WAR[CW_ROUND2])
						{

							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
							mysql_tquery(mysql, str);
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
							mysql_tquery(mysql, str);
							new bool:kk;
							foreach(new z:JOINED1)
							{
								CWWins[z] ++;
								if(QuestContent[4] == CONTENT_CWWIN)
								{
								    QuestProgress[z][4] ++;
								    if(CWWins[z] == 7)
								    {
								    	if(!Bit_Get(QuestDone[z], 4))
								    	{
								    	    Bit_Let(QuestDone[z], 4);
								    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
								    	    TextDrawHideForPlayer(z,Quest[4]);
								    	    PlayerInfo[z][XP] += 100;
								    	    GiveCash(z, 50000);
								    	}
									}
								}
							}
							if(CLAN_TOURNAMENT[CT_ON])
							{
								CLAN_TOURNAMENT[CT_PLAYING] = false;
								ct_available = false;
								switch(CLAN_TOURNAMENT[CT_PHASE])
								{
								    case QUARTER:
								    {
								        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[0], cTag[killerid]);
										        TextDrawSetString(CT_SEMI[0], "%s - ?", cTag[killerid]);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[2], cTag[killerid]);
										        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], cTag[killerid]);
								            }
								            case 2:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[1], cTag[killerid]);
										        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
								            }
								            case 3:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = SEMI;
								                strcopy(CT_SEMI_TAG[3], cTag[killerid]);
										        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], cTag[killerid]);
								            }
								        }
								    }
								    case SEMI:
								    {
										switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_FINALS_TAG[0], cTag[killerid]);
										        TextDrawSetString(CT_FINALS, "%s - ?", cTag[killerid]);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C1];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = FINALS;
								                strcopy(CT_FINALS_TAG[1], cTag[killerid]);
										        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], cTag[killerid]);
								            }
								        }
								    }
								    case FINALS:
									{
									    CLAN_TOURNAMENT[CT_ON] = false;
								        TextDrawSetString(CT_WINNER_TD, "Winner: %s", cTag[killerid]);
								        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", cTag[killerid]);
								        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C1];
						        		WonTournament(CLAN_WAR[CW_C1]);
						        		kk = true;
									}
								}
								if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", cTag[killerid], cTag[playerid]);
						    }
							else format(str, _, "(!) [%s] won the clan war against [%s].", cTag[killerid], cTag[playerid]);
							KillTimer(CWTimer5);
							foreach(new x: ALIVE1) SpawnPlayer(x);
							foreach(new x : JOINED1) PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);
							new win, los;
							los = Iter_Random(JOINED2); win = Iter_Random(JOINED1);
							DealCR(win, los);
						}
						else
						{

							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cwins`= `cwins` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C2]);
							mysql_tquery(mysql, str);
							mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `close`= `close` + 1 WHERE `cID`='%d' LIMIT 1", CLAN_WAR[CW_C1]);
							mysql_tquery(mysql, str);
							new bool:kk;
							foreach(new z:JOINED2)
							{
								CWWins[z] ++;
								if(QuestContent[4] == CONTENT_CWWIN)
								{
								    QuestProgress[z][4] ++;
								    if(CWWins[z] == 7)
								    {
								    	if(!Bit_Get(QuestDone[z], 4))
								    	{
								    	    Bit_Let(QuestDone[z], 4);
								    	    SendClientMessage(z, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
								    	    TextDrawHideForPlayer(z,Quest[4]);
								    	    PlayerInfo[z][XP] += 100;
								    	    GiveCash(z, 50000);
								    	}
									}
								}
							}
							if(CLAN_TOURNAMENT[CT_ON])
							{
								CLAN_TOURNAMENT[CT_PLAYING] = false;
								ct_available = false;
								switch(CLAN_TOURNAMENT[CT_PHASE])
								{
								    case QUARTER:
								    {
								        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][0] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[0], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[0], "%s - ?", cTag[playerid]);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][0] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[2], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[0], "%s - %s", CT_SEMI_TAG[0], cTag[playerid]);
								            }
								            case 2:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM1][1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_SEMI_TAG[1], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[1], "%s - ?", CT_SEMI_TAG[1]);
								            }
								            case 3:
								            {
								                CLAN_TOURNAMENT[CT_SEMI_TEAM2][1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = SEMI;
								                strcopy(CT_SEMI_TAG[3], cTag[playerid]);
										        TextDrawSetString(CT_SEMI[1], "%s - %s", CT_SEMI_TAG[2], cTag[playerid]);
								            }
								        }
								    }
								    case SEMI:
								    {
										switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
								        {
								            case 0:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM1] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] ++;
								                strcopy(CT_FINALS_TAG[0], cTag[playerid]);
										        TextDrawSetString(CT_FINALS, "%s - ?", cTag[playerid]);
								            }
								            case 1:
								            {
								                CLAN_TOURNAMENT[CT_FINALS_TEAM2] = CLAN_WAR[CW_C2];
								                CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
						                		CLAN_TOURNAMENT[CT_PHASE] = FINALS;
								                strcopy(CT_FINALS_TAG[1], cTag[playerid]);
										        TextDrawSetString(CT_FINALS, "%s - %s", CT_FINALS_TAG[0], cTag[playerid]);
								            }
								        }
								    }
								    case FINALS:
									{
									    CLAN_TOURNAMENT[CT_ON] = false;
								        TextDrawSetString(CT_WINNER_TD, "Winner: %s", cTag[playerid]);
								        format(str, _, "(!) [%s] won the Clan Tournament and are now the Champions of this month.", cTag[playerid]);
								        CLAN_TOURNAMENT[CT_WINNER] = CLAN_WAR[CW_C2];
								        WonTournament(CLAN_WAR[CW_C2]);
						        		kk = true;
									}
								}
								if(!kk) format(str, _, "(!) [%s] won the Clan Tournament Match against [%s].", cTag[playerid], cTag[killerid]);
						    }
							else format(str, _, "(!) [%s] won the clan war against [%s].", cTag[playerid], cTag[killerid]);
							KillTimer(CWTimer5);
							foreach(new x: ALIVE1) SpawnPlayer(x);
							foreach(new x : JOINED2) PlayerPlaySound(x, 36204, 0.0, 0.0, 0.0);
							new win, los;
							los = Iter_Random(JOINED1); win = Iter_Random(JOINED2);
							DealCR(win, los);
						}
						SendClientMessageToAll(COLOR_PINK, str);
						foreach(new x: Player)
						{
						    if(IsSpectator[x])
						    {
					        	cmd_tspecoff(x);
								for(new i=0; i < maxx; i++)
								{
									TextDrawHideForPlayer(x, CW_MEMBER[i]);
									TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
									TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
									HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
					            }
					            TextDrawHideForPlayer(x, CW_ROUNDS);
					            HideViewersTD(x);
					            HideMVP(x);
						    }
						}
						foreach(new x: JOINED1)
						{
							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++)
							{

								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							TextDrawHideForPlayer(x, CW_ROUNDS);
							HideViewersTD(x);
							HideMVP(x);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
						}
						foreach(new x: JOINED2)
						{

							IsPlayerSpectating[x] = false;
							TogglePlayerSpectating(x, false);
							for(new i=0; i < maxx; i++)
							{

								TextDrawHideForPlayer(x, CW_MEMBER[i]);
								TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
								TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
								HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
							}
							TextDrawHideForPlayer(x, CW_ROUNDS);
							HideViewersTD(x);
							HideMVP(x);
							CW_R_KILLS[x] = CW_KILLS[x] = CW_R_DAMAGE[x] = CW_DAMAGE[x] = 0;
						}
						WAR_SLOT_T1 = WAR_SLOT_DEFAULT;
						WAR_SLOT_T2 = WAR_SLOT_DEFAULT;
						WAR_SLOT_T1_AID = WAR_SLOT_DEFAULT;
						WAR_SLOT_T2_AID = WAR_SLOT_DEFAULT;
						CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
						Iter_Clear(JOINED1);
						Iter_Clear(JOINED2);
						Iter_Clear(ALIVE1);
						Iter_Clear(ALIVE2);
					}
					else
					{

						new tag1[7], tag2[7];
						foreach(new z : JOINED1)
						{
							strcat(tag1, cTag[z]);
							break;
						}
						foreach(new z : JOINED2)
						{
							strcat(tag2, cTag[z]);
							break;
						}
						CWTimer5 = SetTimer("StartCW2", 10000, false);
						CheckMVP(1);
						TextDrawSetString(CW_ROUNDS, "    Round: ~p~%d~w~/~g~%d~n~~b~~h~%s~w~: %d    ~r~~h~%s~w~: %d", CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2] + 1, CLAN_WAR[CW_ROUNDSS], tag2, CLAN_WAR[CW_ROUND2], tag1, CLAN_WAR[CW_ROUND1]);
						foreach(new c : JOINED1) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
						foreach(new c : JOINED2) { TextDrawShowForPlayer(c, CW_ROUNDS); CW_R_KILLS[c] = CW_R_DAMAGE[c] = 0; ShowMVP(c);}
						for(new i=0; i < maxx; i++)
						{
							if(IsPlayerConnected(WAR_SLOT_T1[i]))
							{
								SetPlayerHealth(WAR_SLOT_T1[i], 100.0, 100.0);
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 100.00);
									SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 100.00);
								}
							}
							if(IsPlayerConnected(WAR_SLOT_T2[i]))
							{
								SetPlayerHealth(WAR_SLOT_T2[i], 100.0, 100.0);
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 100.00);
									SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 100.00);
								}
							}

							foreach(new l: JOINED1)
							{
								if(IsPlayerConnected(WAR_SLOT_T1[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								if(IsPlayerConnected(WAR_SLOT_T2[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
							}
							foreach(new l: JOINED2)
							{
								if(IsPlayerConnected(WAR_SLOT_T1[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
								}
								if(IsPlayerConnected(WAR_SLOT_T2[i]))
								{
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
									ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
								}
							}
							foreach(new j: Player)
							{
							    if(IsSpectator[j])
							    {
							        if(IsPlayerConnected(WAR_SLOT_T1[i]))
									{
										ShowPlayerProgressBar(j, CW_STAT_BAR[j][HPP][i]);
										ShowPlayerProgressBar(j, CW_STAT_BAR[j][ARMOURR][i]);
								    }
								    if(IsPlayerConnected(WAR_SLOT_T2[i]))
									{
										ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][HPP][i]);
										ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][ARMOURR][i]);
								    }
									TextDrawShowForPlayer(j, CW_ROUNDS);
							    }
							}
						}
						foreach(new w : JOINED1)
						{
							IsPlayerSpectating[w] = false;
							TogglePlayerSpectating(w, false);
							Iter_Add(ALIVE1, w);
							SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 1);
						}
						foreach(new w: Player)
						{
						    if(IsSpectator[w])
						    {
						        ShowMVP(w);
					        	foreach(new i : ALIVE1)
								{
									SpectatedPlayer2[w] = i;
									PlayerSpectatePlayer(w, i);
									break;
								}
						    }
						}
						foreach(new w: JOINED2)
						{
							IsPlayerSpectating[w] = false;
							TogglePlayerSpectating(w, false);
							Iter_Add(ALIVE2, w);
							SetTimerEx("ClanWarRoundSpawn", 4500, false, "di", w, 2);
						}
					}
				}
				else
				{
					SpectateOn(playerid);
					new sound = random(3);
					foreach(new i : Player) if(IsSpectator[i]) if(SpectatedPlayer2[i] == playerid) SpectateNext2(i);
					foreach(new i : JOINED1)
					{
						if(SpectatedPlayer[i] == playerid) SpectateNext(i);
						switch(sound)
						{
							case 0: PlayerPlaySound(i ,36200, 0,0,0);
							case 1: PlayerPlaySound(i ,36201, 0,0,0);
							case 2: PlayerPlaySound(i ,36203, 0,0,0);
						}
				    }
					foreach(new i : JOINED2)
					{
						if(SpectatedPlayer[i] == playerid) SpectateNext(i);
						switch(sound)
						{
							case 0: PlayerPlaySound(i ,36200, 0,0,0);
							case 1: PlayerPlaySound(i ,36201, 0,0,0);
							case 2: PlayerPlaySound(i ,36203, 0,0,0);
						}
				    }
				}
			}
		}
		if(PlayerInfo[playerid][OnDuty] == 1)
		{

			LasInterior[playerid] = GetPlayerInterior(playerid);
			LastWorld[playerid] = GetPlayerVirtualWorld(playerid);
			LastSpree[playerid] = Streak[playerid];
			GetPlayerPos(playerid,LastPos[0][playerid],LastPos[1][playerid],LastPos[2][playerid]);
			ResetPlayerWeapons(playerid);
			for(new WEAPON_SLOT:slot; slot < MAX_WEAPON_SLOTS; slot++) GetPlayerWeaponData(playerid,slot,sWeap[playerid][slot],sAmmo[playerid][slot]);
			SetPVarInt(playerid,"SPEC",1);
			return 1;
		}
		GiveAmmo2(killerid);
		strcopy(killername, PlayerInfo[killerid][Nick]);
		if(PlayerInfo[playerid][InDuel])
		{

			SendClientMessageToAll(0xC62509FF,"** %s(%d) has won the duel against %s(%d) [BET] : %d$",killername,killerid,playername,playerid,PlayerInfo[playerid][Duel_B]);
			GiveCash(killerid,PlayerInfo[playerid][Duel_B]);
			GiveCash(playerid,-PlayerInfo[playerid][Duel_B]);
			GameTextForPlayer(killerid,"~g~~w~winner",6000,5);
			GameTextForPlayer(playerid,"~r~~w~loser",6000,5);
			SendDeathMessage(killerid,playerid,reason);
			PlayerInfo[playerid][InDuel] = PlayerInfo[killerid][InDuel]= 0;
			PlayerInfo[playerid][Duel_P] = PlayerInfo[playerid][Duel_I] = PlayerInfo[killerid][Duel_P] = PlayerInfo[killerid][Duel_I] = INVALID_PLAYER_ID;
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerVirtualWorld(killerid, 0);
			SetPlayerInterior(killerid, 0);
			SetPlayerInterior(playerid, 0);
			SpawnPlayer(killerid);
			return 1;
		}
		if(Iter_Contains(ARENA[NON], playerid)) if(PlayerInfo[killerid][InClan] != -1) if(PlayerInfo[playerid][InClan] == PlayerInfo[killerid][InClan]) return SendClientMessage(killerid, red, "You have murdered a clan member and got nothing from the kill");
		if(IsPlayerInAnyVehicle(killerid))
		{

			if(GetPlayerState(killerid) == PLAYER_STATE_PASSENGER)
			{

				new vehicleid = GetPlayerVehicleID(killerid);
				foreach(new i : Player)
				{

					if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
					{

						if(IsPlayerInVehicle(i, vehicleid))
						{

							GiveCash(i, 2500);
							SetPlayerScore(i, GetPlayerScore(i)+1);
							SendClientMessage(i,-1, "{80FF00}[DRIVE-BY] {FFFFFF}You helped %s in killing {80FF00}%s(%d){FFFFFF} and earned 1 score and $2500.", killername, playername, playerid);
							break;
						}
					}
				}
			}
			else
			{

				new bb = GetVehicleModel(GetPlayerVehicleID(killerid));
				if(bb == 520 || bb == 425 || bb == 432 || bb == 447)
				{

					new sz = sizeof(BASERAPE);
					for(new zo = 1; zo< sz; zo++)
					{
						if(gTeam[playerid] == BASERAPE[zo][br_TEAM])
						{

							if(IsPlayerInArea(playerid, BASERAPE[zo][MinXX], BASERAPE[zo][MinYY], BASERAPE[zo][MaxXX], BASERAPE[zo][MaxYY]))
							{

								new Float:x,Float:y,Float:z;
								GetPlayerPos(killerid,x,y,z);
								CreateExplosion(x,y,z,7,10.0);
								SetPlayerHealth(killerid,0.0);
								SendClientMessage(killerid,Dred,"* Base rape is not allowed ! you lost -10 score ");
								SetPlayerScore(killerid,GetPlayerScore(killerid)-10);
								SendClientMessage(playerid,yellow,"* You have been killed unfairly , you didnt lose score nor money");
								return 1;
							}
						}
					}
				}
			}
		}
		if(gClass[killerid] == Assault)
		{
			AssaultKills[killerid] ++;
			if(QuestContent[2] == CONTENT_ASSAULT)
			{
			    QuestProgress[killerid][2] ++;
			    if(AssaultKills[killerid] == 36)
			    {
			    	if(!Bit_Get(QuestDone[killerid], 2))
			    	{
			    	    Bit_Let(QuestDone[killerid], 2);
			    	    SendClientMessage(killerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 3 and got $50k & 100XP.");
			    	    TextDrawHideForPlayer(killerid,Quest[2]);
			    	    PlayerInfo[killerid][XP] += 100;
			    	    GiveCash(killerid, 50000);
			    	}
				}
			}
		}
		new sz= sizeof(BASERAPE);
		for(new zo = 0; zo< sz; zo++)
		{
			if(gTeam[playerid] == BASERAPE[zo][br_TEAM])
			{
				if(IsPlayerInArea(playerid, BASERAPE[zo][MinXX], BASERAPE[zo][MinYY], BASERAPE[zo][MaxXX], BASERAPE[zo][MaxYY]))
				{
				    BaseKills[killerid] ++;
				    if(QuestContent[1] == CONTENT_BASEKILL)
					{
					    QuestProgress[killerid][1] ++;
					    if(BaseKills[killerid] == 23)
					    {
					    	if(!Bit_Get(QuestDone[killerid], 1))
					    	{
					    	    Bit_Let(QuestDone[killerid], 1);
					    	    SendClientMessage(killerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 2 and got $50k & 100XP.");
					    	    TextDrawHideForPlayer(killerid,Quest[1]);
					    	    PlayerInfo[killerid][XP] += 100;
					    	    GiveCash(killerid, 50000);
					    	}
						}
					}
				}
			}
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    DriverPassengerKill[killerid] ++;
		    if(QuestContent[1] == CONTENT_VKILL)
			{
			    QuestProgress[killerid][1] ++;
                if(DriverPassengerKill[killerid] == 15)
			    {
			    	if(!Bit_Get(QuestDone[killerid], 1))
			    	{
			    	    Bit_Let(QuestDone[killerid], 1);
			    	    SendClientMessage(killerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 2 and got $50k & 100XP.");
			    	    TextDrawHideForPlayer(killerid,Quest[1]);
			    	    PlayerInfo[killerid][XP] += 100;
			    	    GiveCash(killerid, 50000);
			    	}
				}
			}
			new vt = GetPlayerVehicleID(playerid);
			new mod = GetVehicleModel(vt);
			switch(mod)
			{
			    case 447,520,432,425,512,543,554,476:
			    {
			        HeavyEnemyKill[killerid] ++;
			        if(QuestContent[1] == CONTENT_VKILL)
					{
					    QuestProgress[killerid][1] ++;
					    if(HeavyEnemyKill[killerid] == 10)
					    {
					    	if(!Bit_Get(QuestDone[killerid], 1))
					    	{
					    	    Bit_Let(QuestDone[killerid], 1);
					    	    SendClientMessage(killerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 2 and got $50k & 100XP.");
					    	    TextDrawHideForPlayer(killerid,Quest[1]);
					    	    PlayerInfo[killerid][XP] += 100;
					    	    GiveCash(killerid, 50000);
					    	}
						}
					}
				}
			}
		}
		if(CurrentTOUR == TOUR_KILLS)
		{
			if(CurrentTOURValue == CurrentTOURCount[killerid])
			{
				CurrentTOURValue++;
				CurrentWinner = killerid;
				TextDrawSetString(TournamentTD, "Hourly_Tournament:~b~_Top_Kills~n~~b~Current_Winner:_~w~%s_-_%d", killername, CurrentTOURValue);
				foreach(new i : Player) if(tournamentshown[i]) if(PlayerInfo[i][IsSpawned]) TextDrawShowForPlayer(i, TournamentTD);
			}
			CurrentTOURCount[killerid]++;
		}
		else if(CurrentTOUR == TOUR_DEAG)
		{

			if(reason == WEAPON_DEAGLE)
			{

				if(CurrentTOURValue == CurrentTOURCount[killerid])
				{

					CurrentTOURValue++;
					CurrentWinner = killerid;
					TextDrawSetString(TournamentTD, "Hourly_Tournament:~b~_Top Deagle_Kills~n~~b~Current_Winner:_~w~%s_-_%d", killername, CurrentTOURValue);
					foreach(new i : Player) if(tournamentshown[i]) if(PlayerInfo[i][IsSpawned]) TextDrawShowForPlayer(i, TournamentTD);
				}
				CurrentTOURCount[killerid]++;
			}
		}
		new ammount = random(6000);
		if(Iter_Contains(ARENA[NON], playerid))
		{
			if(GetPlayerScore(playerid) < 50000) { SendClientMessage(playerid, red, "[DEATH] You lost 1 score for dying."); SetPlayerScore(playerid, GetPlayerScore(playerid)-1);}
			else { SendClientMessage(playerid, red, "[DEATH] You lost 3 score for dying."); SetPlayerScore(playerid, GetPlayerScore(playerid)-3); }
		}
		if(gClass[killerid] == AG) GameTextForPlayer(playerid,"~n~~w~killed by ~r~~h~spy",3000,3);
		format(msg, _, ".........\nKILLED BY\n%s\n.........\n\n\n\n", killername);
		UpdateDynamic3DTextLabelText(RankLabel[playerid], grey, msg);
		SendDeathMessage(killerid, playerid, reason);
		new amm;
		if(!InArena(playerid, NON)) amm = random(500);
		else amm = random(6000);
		if(PlayerInfo[killerid][dRank] == 0)
		{
			format(msg, _, "{80FF00}[KILL] {FFFFFF}You killed {80FF00}%s(%d){FFFFFF} and earned 1 score with $%d and some ammo. Well Done!", playername, playerid, ammount);
			SetPlayerScore(killerid, GetPlayerScore(killerid) +1);
		}
		else
		{

			format(msg, _, "{80FF00}[KILL] {FFFFFF}You killed {80FF00}%s(%d){FFFFFF} and earned 2 score with $%d and some ammo. Well Done!", playername, playerid, ammount);
			SetPlayerScore(killerid, GetPlayerScore(killerid) +2);
			if(PlayerInfo[killerid][dRank] > 2)
			{

				new dmu = dmusickit[killerid];
				if(InArena(playerid, NON) && !HasJoined(playerid))
				{
					if(dmu>0)
					{
						Bit_Let(isdspec, playerid);
						TogglePlayerSpectating(playerid, true);
						PlayerSpectatePlayer(playerid, killerid);
						Bit_Let(isdspec, playerid);
						TextDrawShowForPlayer(playerid, dmusicicon);
						switch(dmu)
						{

							case 1:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/22/roundmvpanthem.mp3", 0,0,0,0);
								TextDrawSetString(dmusicbox, "~n~I Am - AWOLNATION~n~~n~Special donor death music kit~n~~n~");
								SetTimerEx("GoSpec", 9000, false, "i", playerid);
							}
							case 2:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/27/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 8000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Disgusting - Beartooth~n~~n~Special donor death music kit~n~~n~");
							}
							case 3:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/28/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 9000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Java Havana Funkaloo - Lennie Moore~n~~n~Special donor death music kit~n~~n~");
							}
							case 4:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/29/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 8000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Moments CSGO - Darude~n~~n~Special donor death music kit~n~~n~");
							}
							case 5:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/23/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 12000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Diamonds - Mord Fustang~n~~n~Special donor death music kit~n~~n~");
							}
							case 6:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/24/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 11000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Invasion! - Michael Bross~n~~n~Special donor death music kit~n~~n~");
							}
							case 7:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/20/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 8000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~II-Headshot - Skog~n~~n~Special donor death music kit~n~~n~");
							}
							case 8:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/21/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 9000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~The 8-Bit Kit - Daniel Sadowski~n~~n~Special donor death music kit~n~~n~");
							}
							case 9:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/16/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 10000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Battlepack - Proxy~n~~n~Special donor death music kit~n~~n~");
							}
							case 10:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/17/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 9000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~MOLOTOV - Ki:Theory~n~~n~Special donor death music kit~n~~n~");
							}
							case 11:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/18/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 10000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Uber Blasto Phone - Troels Folmann~n~~n~Special donor death music kit~n~~n~");
							}
							case 12:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/13/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 8000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Hotline Miami - Various Artists~n~~n~Special donor death music kit~n~~n~");
							}
							case 13:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/14/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 7000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Total Domination - Daniel Sadowski~n~~n~Special donor death music kit~n~~n~");
							}
							case 14:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/10/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 7000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~All I Want for Christmas - Midnight Riders~n~~n~Special donor death music kit~n~~n~");
							}
							case 15:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/11/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 8000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~IsoRhythm - Matt Lange~n~~n~Special donor death music kit~n~~n~");
							}
							case 16:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/12/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 8000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~For No Mankind - Mateo Messina~n~~n~Special donor death music kit~n~~n~");
							}
							case 17:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/9/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 12000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Metal - Skog~n~~n~Special donor death music kit~n~~n~");
							}
							case 18:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/5/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 9000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Sharpened - Noisia~n~~n~Special donor death music kit~n~~n~");
							}
							case 19:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/4/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 10000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~High Noon - Feed Me~n~~n~Special donor death music kit~n~~n~");
							}
							case 20:
							{

								PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/1/roundmvpanthem.mp3", 0,0,0,0);
								SetTimerEx("GoSpec", 11000, false, "i", playerid);
								TextDrawSetString(dmusicbox, "~n~Desert Fire - Austin Wintory~n~~n~Special donor death music kit~n~~n~");
							}
						}
						SendClientMessage(playerid, -1,"");
						SendClientMessage(playerid, -1,"");
						SendClientMessage(playerid, -1,"");
						SendClientMessage(playerid, -1,"");
						SendClientMessage(playerid, -1,"");
						SendClientMessage(playerid, -1,"");
						SendClientMessage(playerid, -1,"");
						SendClientMessage(playerid, -1,"");
						SendClientMessage(playerid, -1,"");
						SendClientMessage(playerid, -1,"");
						TextDrawShowForPlayer(playerid, dmusicbox);
					}
				}
			}
		}
		SendClientMessage(killerid,-1,msg);
		GiveCash(killerid,ammount);
		if(cPerk[killerid][P_MONEY] > 0)
		{

			SendClientMessage(killerid, COLOR_YELLOW, "[Clan Perk]: You got double the kill money.");
			GiveCash(killerid,ammount);
		}
		if(cPerk[playerid][P_DEATH] == 0)
		{

			format(msg, _, "{FF8000}[DEATH] {FFFFFF}You got murdered by {FF8000}%s(%d){FFFFFF} and lost {FF8000}$%d.", killername, killerid, amm);
			if(GetCash(playerid) > amm) GiveCash(playerid,-amm);
		}else
		{

			format(msg, _, "{FF8000}[DEATH] {FFFFFF}You got murdered by {FF8000}%s(%d){FFFFFF}.", killername, killerid);
			SendClientMessage(playerid, COLOR_YELLOW,"[Clan Perk] You did not lose cash after your death.");
		}
		SendClientMessage(playerid,-1,msg);
		new WEAPON:weaponid = GetPlayerWeapon(killerid);
		switch(weaponid)
		{

			case WEAPON_GOLFCLUB..WEAPON_CANE: GivePlayerWeapon(killerid, GetPlayerWeapon(killerid), 1);
			case WEAPON_GRENADE..WEAPON_MOLTOV: GivePlayerWeapon(killerid, GetPlayerWeapon(killerid), 1);
			case WEAPON_COLT45..WEAPON_TEC9: GivePlayerWeapon(killerid, GetPlayerWeapon(killerid), 100);
			case WEAPON_ROCKETLAUNCHER..WEAPON_PARACHUTE: GivePlayerWeapon(killerid, GetPlayerWeapon(killerid), 1);
		}
		DStreak[killerid] = 0;
		if(BonD == playerid)
		{

			SendClientMessage(killerid,Lg,"* You have killed a bounty player '%s' recieved %d cash and %d score",playername,BonC,BonS);
			GiveCash(killerid,BonC);
			SendClientMessageToAll(-1,"{EF2548}[BOUNTY]:{E2E2E2} %s has killed %s and recieved %d$ & %d score",killername,playername,BonC,BonS);
			SetPlayerScore(killerid, GetPlayerScore(killerid) +BonS);
			BonD = INVALID_PLAYER_ID;
			GameTextForPlayer(killerid,"~g~~h~bounty player~n~Rewards recieved",6000,4);
		}
		Streak[killerid] ++;
		new xpp;
		xpp = 1;
		if(Streak[killerid] > 4)
		{
		    if(Streak[killerid] < 10) xpp = 2;
			else
			{
				if(Streak[killerid] < 20) xpp = 3;
				else
				{
				    if(Streak[killerid] < 50) xpp = 4;
				    else
					{
						if(Streak[killerid] < 100) xpp = 5;
						else xpp = 6;
					}
				}
			}
		}
		SendClientMessage(killerid, COLOR_ROYAL, "[EXTRA] You got %d XP for your kill.", xpp);
		PlayerInfo[killerid][XP] += xpp;
		switch(Streak[killerid])
		{
			case 2: { if(GetTickCount() - KillTDTick[killerid] > 1999) PlayerPlaySound(killerid, 19800, 0,0,0); ShowKillTD(killerid, "Double Kill");}
			case 3:
			{

				SendClientMessage(killerid, lightblue, "You get $1500 and +1 score! [KILLING SPREE BONUS]");
				GiveCash(killerid, 1500);
				GivePlayerScore(killerid, 1);
				if(GetTickCount() - KillTDTick[killerid] > 1999) PlayerPlaySound(killerid, 19800, 0,0,0);
			    ShowKillTD(killerid, "Triple Kill +1");
			}
			case 4: { if(GetTickCount() - KillTDTick[killerid] > 1999) PlayerPlaySound(killerid, 19800, 0,0,0);ShowKillTD(killerid, "Tetra Kill +1");}
			case 5:
			{
				SendClientMessage(killerid, lightblue, "You get $2500 and +2 score! [KILLING SPREE BONUS]");
				SendClientMessage(killerid,lightblue,"* You have recieved 1 Armour pack !");
				if(PlayerInfo[killerid][ArmourP] < 3) PlayerInfo[killerid][ArmourP] ++;
				GiveCash(killerid, 2500);
				GivePlayerScore(killerid, 2);
				if(GetTickCount() - KillTDTick[killerid] > 1999) PlayerPlaySound(killerid, 19800, 0,0,0);
			    ShowKillTD(killerid, "Mega Kill +2");
			}
			case 10:
			{
				SendClientMessage(killerid, lightblue, "You get $5000 and +4 score! [KILLING SPREE BONUS]");
				GiveCash(killerid, 5000);
				GivePlayerScore(killerid, 4);
				if(PlayerInfo[killerid][MedKit] < 3)
				{

					PlayerInfo[killerid][MedKit] ++;
					SendClientMessage(killerid,lightblue,"* You have recieved 1 Medic Kit");
				}
				if(InArena(playerid, NON))
				{
					SendClientMessageToAll(orange, "** %s(%d) on %d killing spree", killername, killerid, 10);
				}
				if(PlayerInfo[killerid][InClan] > -1)  AddClanPoints(killerid, 4);
				ShowKillTD(killerid, "Ultra Kill +4");
				if(GetTickCount() - KillTDTick[killerid] > 1999) PlayerPlaySound(killerid, 19800, 0,0,0);
			}
			case 15:
			{

				SendClientMessage(killerid, lightblue, "You get $7 500 and +6 score! [KILLING SPREE BONUS]");
				GiveCash(killerid, 7500);
				GivePlayerScore(playerid, 6);
				ShowKillTD(killerid, "Godlike +6");
				if(GetTickCount() - KillTDTick[killerid] > 1999) PlayerPlaySound(killerid, 19800, 0,0,0);
				if(PlayerInfo[killerid][ArmourP] < 3)
				{

					PlayerInfo[killerid][ArmourP] ++;
					SendClientMessage(killerid,lightblue,"* You have recieved 1 Armour pack & 1 Grenade");
					if(inevent[killerid] == 0 && InArena(killerid, NON) && !Iter_Contains(PUBGEvent, killerid)) GivePlayerWeapon(killerid, WEAPON_GRENADE, 1);
				}
				if(InArena(playerid, NON))
				{
					SendClientMessageToAll(orange, "** %s(%d) on %d killing spree", killername, killerid, 15);
				}
			}
			case 20:
			{

				SendClientMessage(killerid, lightblue, "You get $12 500 and +10 score! [KILLING SPREE BONUS]");
				GiveCash(killerid, 12500);
				GivePlayerScore(killerid, 10);
				if(PlayerInfo[killerid][ArmourP] < 3)
				{

					PlayerInfo[killerid][ArmourP] ++;
					SendClientMessage(killerid,lightblue,"* You have recieved 1 Armour pack ! use /ap to use it");
				}
				if(PlayerInfo[killerid][MedKit] < 3)
				{

					PlayerInfo[killerid][MedKit] ++;
					SendClientMessage(killerid,lightblue,"* You have recieved 1 Medic Kit ! use /MK to use it");
				}
				if(InArena(playerid, NON))
				{
					SendClientMessageToAll(orange, "** %s(%d) on %d killing spree", killername, killerid, 20);
				}
			}
			case 25:
			{

				SendClientMessage(killerid, lightblue, "You get $20 000 and +15 score! [KILLING SPREE BONUS]");
				GiveCash(killerid, 20000);
				GivePlayerScore(killerid, 15);
				if(PlayerInfo[killerid][Mask] == false)
				{

					SendClientMessage(killerid,lightblue,"* You have recieved Gas mask !");
					PlayerInfo[killerid][Mask] = true;
					PlayerInfo[killerid][WEARMASK] = true;
					SetPlayerAttachedObject(killerid,1,19472,2,0.027000,0.138999,0.010000,95.200027,74.399917,2.100000,1.000000,1.000000,1.000000);
				}
				if(InArena(playerid, NON))
				{
					SendClientMessageToAll(orange, "** %s(%d) on %d killing spree", killername, killerid, 25);
				}
			}
			case 50:
			{

				SendClientMessage(killerid, lightblue, "You get $50 000 and +20 score! [KILLING SPREE BONUS]");
				GiveCash(killerid, 50000);
				GivePlayerScore(killerid, 20);
				if(PlayerInfo[killerid][ArmourP] < 2)
				{

					PlayerInfo[killerid][ArmourP] +=2;
					SendClientMessage(killerid,lightblue,"* You have recieved 2 Armour pack ! use /ap to use it");
				}
				if(PlayerInfo[killerid][MedKit] < 2)
				{

					PlayerInfo[killerid][MedKit] +=2;
					SendClientMessage(killerid,lightblue,"* You have recieved 2 Medic Kit ! use /MK to use it");
				}
				if(InArena(playerid, NON))
				{
					SendClientMessageToAll(orange, "** %s(%d) on %d killing spree",killername,killerid,50);
				}
				if(PlayerInfo[killerid][InClan] > -1) AddClanPoints(killerid, 4);
			}
			case 100:
			{

				SendClientMessage(killerid, lightblue, "You get $1 00 000 and +20 score! [KILLING SPREE BONUS]");
				GiveCash(playerid, 100000);
				GivePlayerScore(playerid, 20);
				if(InArena(playerid, NON))
				{
					SendClientMessageToAll(orange, "** %s(%d) on %d killing spree", killername, killerid, 100);
				}
			}
		}
		if(Iter_Contains(ARENA[NON], killerid)) if(!PlayerInfo[killerid][InDuel]) PlayerInfo[killerid][Kills] ++;
		SSLOG[killerid][s_kills] ++;
		new kkk = PlayerInfo[killerid][InClan];
		if(PlayerInfo[playerid][InClan] != -1) ConnectDeaths[playerid] ++;
		if(kkk != -1)
		{

			new rnn;
			rnn = random(1500);
			format(msg, _, "* Clan has recieved %d$ from %s's kill !", rnn, killername);
			ConnectKills[killerid] ++;
			ClanMSG(kkk,msg);
			foreach(new i : Player) if(kkk == PlayerInfo[i][InClan]) GiveCash(i,rnn);
		}
		if(PlayerInfo[playerid][Kills] == 100) NewAchievement(playerid, 0, "Bronze Achievement Unlocked: Bad Boy", "Collect 100 Kills");
		else if(PlayerInfo[playerid][Kills] == 500) NewAchievement(playerid, 1, "Silver Achievement Unlocked: Legendary Player", "Collect 500 Kills");
		else if(PlayerInfo[playerid][Kills] == 2000) NewAchievement(playerid, 2, "Gold Achievement Unlocked: Elite Player", "Collect 2000 Kills");
		switch(reason)
		{

			case WEAPON_COLT45:
			{

				PlayerKills[killerid][m9]++;
				if(PlayerKills[killerid][m9] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Pistol Rookie", "Get 10 kills with a pistol");
				if(PlayerKills[killerid][m9] == 50) NewAchievement(killerid, 1, "Silver Achievement Unlocked: Pistol Man", "Get 50 kills with a pistol");
				if(PlayerKills[killerid][m9] == 100) NewAchievement(killerid, 2, "Gold Achievement Unlocked: Pistol Handed Man", "Get 100 kills with a pistol");
			}
			case WEAPON_FIST:
			{

				PlayerKills[killerid][fist]++;
				if(PlayerKills[killerid][fist] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Easy Fist", "Get 10 kills with your fist");
				if(PlayerKills[killerid][fist] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Boxer Soldier", "Get 50 kills with your fist");
				if(PlayerKills[killerid][fist] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Born to be Clay", "Get 100 kills with your fist");
			}
			case WEAPON_SILENCED:
			{

				PlayerKills[killerid][sm9]++;
				if(PlayerKills[killerid][sm9] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: The Quite Guy", "Get 10 kills with a silenced m9");
				if(PlayerKills[killerid][sm9] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Silent Spy", "Get 50 kills with a silenced m9");
				if(PlayerKills[killerid][sm9] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Sneaker Peaker", "Get 100 kills with a silenced m9");
			}
			case WEAPON_AK47:
			{

				PlayerKills[killerid][ak47]++;
				if(PlayerKills[killerid][ak47] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: No AK No Life", "Get 10 kills with an ak47");
				if(PlayerKills[killerid][ak47] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: AK Lover", "Get 50 kills with an ak47");
				if(PlayerKills[killerid][ak47] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: AK Master", "Get 100 kills with an ak47");
			}
			case WEAPON_M4:
			{
				SSLOG[killerid][s_m4k] ++;

				if(QuestContent[1] == CONTENT_M4KILLS)
				{
				    QuestProgress[killerid][1] ++;
				    if(SSLOG[killerid][s_m4k] == 35)
				    {
				    	if(!Bit_Get(QuestDone[killerid], 1))
				    	{
				    	    Bit_Let(QuestDone[killerid], 1);
				    	    SendClientMessage(killerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 2 and got $50k & 100XP.");
				    	    TextDrawHideForPlayer(killerid,Quest[1]);
				    	    PlayerInfo[killerid][XP] += 100;
				    	    GiveCash(killerid, 50000);
				    	}
					}
				}
				PlayerKills[killerid][m4]++;
				if(PlayerKills[killerid][m4] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: No M4 No Life", "Get 10 kills with an m4");
				if(PlayerKills[killerid][m4] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: M4 Lover", "Get 50 kills with an m4");
				if(PlayerKills[killerid][m4] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: M4 Master", "Get 100 kills with an m4");
			}
			case WEAPON_ROCKETLAUNCHER:
			{

				PlayerKills[killerid][rpg]++;
				if(PlayerKills[killerid][ak47] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: RPG Rookie", "Get 10 kills with an rpg");
				if(PlayerKills[killerid][ak47] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: No GunFire", "Get 50 kills with an rpg");
				if(PlayerKills[killerid][ak47] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Bomb' Em", "Get 100 kills with an rpg");
			}
			case WEAPON_SATCHEL..WEAPON_BOMB:
			{

				PlayerKills[killerid][satchel]++;
				if(PlayerKills[killerid][satchel] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Satchel Rookie", "Get 10 kills with a satchel");
				if(PlayerKills[killerid][satchel] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Trap Man", "Get 50 kills with a satchel");
				if(PlayerKills[killerid][satchel] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Silent Bomber", "Get 100 kills with a satchel");
			}
			case WEAPON_GRENADE:
			{

				PlayerKills[killerid][grenade]++;
				if(PlayerKills[killerid][grenade] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Grenade Rookie", "Get 10 kills with a grenade");
				if(PlayerKills[killerid][grenade] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Grenade Man", "Get 50 kills with a grenade");
				if(PlayerKills[killerid][grenade] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Grenade Master", "Get 100 kills with a grenade");
			}
			case WEAPON_KNIFE:
			{

				PlayerKills[killerid][knife]++;
				if(PlayerKills[killerid][knife] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Knife Rookie", "Get 10 kills with a knife");
				if(PlayerKills[killerid][knife] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Smart Knifer", "Get 50 kills with a knife");
				if(PlayerKills[killerid][knife] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Right in the Heart", "Get 100 kills with a knife");
			}
			case WEAPON_CHAINSAW:
			{

				PlayerKills[killerid][chainsaw]++;
				if(PlayerKills[killerid][chainsaw] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Dig His Body", "Get 10 kills with a chainsaw");
				if(PlayerKills[killerid][chainsaw] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Cut Them to Pieces", "Get 50 kills with a chainsaw");
				if(PlayerKills[killerid][chainsaw] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Cut the Head", "Get 100 kills with a chainsaw");
			}
			case WEAPON_MOLTOV:
			{

				PlayerKills[killerid][molotov]++;
				if(PlayerKills[killerid][molotov] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Burn'em", "Get 10 kills with a molotov");
				if(PlayerKills[killerid][molotov] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Fried Victims", "Get 50 kills with a molotov");
				if(PlayerKills[killerid][molotov] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Born in Hell", "Get 100 kills with a molotov");
			}
			case WEAPON_DEAGLE:
			{

				PlayerKills[killerid][deagle]++;
				if(PlayerKills[killerid][deagle] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Deagle Rookie", "Get 10 kills with a deagle");
				if(PlayerKills[killerid][deagle] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Deagle Lover", "Get 50 kills with a deagle");
				if(PlayerKills[killerid][deagle] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: No Deagle No Party", "Get 100 kills with a deagle");
			}
			case WEAPON_SHOTGUN:
			{

				PlayerKills[killerid][shotgun]++;
				if(PlayerKills[killerid][shotgun] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Shotgun Rookie", "Get 10 kills with a shotgun");
				if(PlayerKills[killerid][shotgun] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Shotgun Chief", "Get 50 kills with a shotgun");
				if(PlayerKills[killerid][shotgun] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Shoot the Gun", "Get 100 kills with a shotgun");
			}
			case WEAPON_SAWEDOFF:
			{

				PlayerKills[killerid][sawnoff]++;
				if(PlayerKills[killerid][sawnoff] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Sawn-Off Noob", "Get 10 kills with a sawnoff");
				if(PlayerKills[killerid][sawnoff] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Fast Murderer", "Get 50 kills with a sawnoff");
				if(PlayerKills[killerid][sawnoff] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Sawn'em", "Get 100 kills with a sawnoff");
			}
			case WEAPON_SHOTGSPA:
			{
				SSLOG[killerid][s_spazk] ++;
				if(QuestContent[1] == CONTENT_SPAZKILLS)
				{
				    QuestProgress[killerid][1] ++;
				    if(SSLOG[killerid][s_spazk] == 35)
				    {
				    	if(!Bit_Get(QuestDone[killerid], 1))
				    	{
				    	    Bit_Let(QuestDone[killerid], 1);
				    	    SendClientMessage(killerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 2 and got $50k & 100XP.");
				    	    TextDrawHideForPlayer(killerid,Quest[1]);
				    	    PlayerInfo[killerid][XP] += 100;
				    	    GiveCash(killerid, 50000);
				    	}
					}
				}
				PlayerKills[killerid][combat]++;
				if(PlayerKills[killerid][combat] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Combat Man", "Get 10 kills with a spaz");
				if(PlayerKills[killerid][combat] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Come and Fight", "Get 50 kills with a spaz");
				if(PlayerKills[killerid][combat] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Combats Godfather", "Get 100 kills with a spaz");
			}
			case WEAPON_UZI:
			{

				PlayerKills[killerid][smg]++;
				if(PlayerKills[killerid][smg] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: SMG Rookie", "Get 10 kills with an smg");
				if(PlayerKills[killerid][smg] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Spray Dem All", "Get 50 kills with an smg");
				if(PlayerKills[killerid][smg] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: SMG Professional", "Get 100 kills with an smg");
			}
			case WEAPON_TEC9:
			{

				PlayerKills[killerid][tec9]++;
				if(PlayerKills[killerid][tec9] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: TEC9 Rookie", "Get 10 kills with a tec9");
				if(PlayerKills[killerid][tec9] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Wise Sprayer", "Get 50 kills with a tec9");
				if(PlayerKills[killerid][tec9] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: TEC9 Professional", "Get 100 kills with a tec9");
			}
			case WEAPON_MP5:
			{

				PlayerKills[killerid][mp5]++;
				if(PlayerKills[killerid][mp5] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: MP5 Rookie", "Get 10 kills with an mp5");
				if(PlayerKills[killerid][mp5] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: MP5 Lover", "Get 50 kills with an mp5");
				if(PlayerKills[killerid][mp5] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: MP5 Elite", "Get 100 kills with an mp5");
			}
			case WEAPON_RIFLE:
			{

				PlayerKills[killerid][rifle]++;
				if(PlayerKills[killerid][rifle] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Am a Cowboy", "Get 10 kills with a rifle");
				if(PlayerKills[killerid][rifle] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Rifle Boy", "Get 50 kills with a rifle");
				if(PlayerKills[killerid][rifle] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Watchout the Rifle", "Get 100 kills with a rifle");
			}
			case WEAPON_SNIPER:
			{

				PlayerKills[killerid][sniper]++;
				if(PlayerKills[killerid][sniper] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Sniper Beginner", "Get 10 kills with a sniper");
				if(PlayerKills[killerid][sniper] == 50) NewAchievement(killerid, 0, "Silver Achievement Unlocked: Shoot in da Head", "Get 50 kills with a sniper");
				if(PlayerKills[killerid][sniper] == 100) NewAchievement(killerid, 0, "Gold Achievement Unlocked: Watch the Roofs", "Get 100 kills with a sniper");
			}
		}
		if(Streak[killerid] > PlayerInfo[killerid][MKSpree])
		{
			PlayerInfo[killerid][MKSpree] = Streak[killerid];
			if(PlayerInfo[killerid][MKSpree] == 10) NewAchievement(killerid, 0, "Bronze Achievement Unlocked: Getting There", "Get a 10 kills spree");
			else if(PlayerInfo[killerid][MKSpree] == 50) NewAchievement(killerid, 1, "Silver Achievement Unlocked: Hitman", "Get a 50 kills spree");
			else if(PlayerInfo[killerid][MKSpree] == 100) NewAchievement(killerid, 2, "Gold Achievement Unlocked: International Agent", "Get a 100 kills spree");
		}
		if(Streak[playerid]>10)
		{
            new str[128],rnn;
			rnn = random(1500);
			new x = PlayerInfo[killerid][InClan];
			if(x != -1)
			{
				format(str, _, "* Clan has recieved %d$ from %s (stopped a kill spree)!", rnn, killername);
				ClanMSG(x,str);
				foreach(new j : Player) if(x == PlayerInfo[j][InClan]) GiveCash(j,rnn);
			}
			SendClientMessage(killerid, COLOR_PINK, "You got +2 score for stopping %s's killing spree.", playername);
			SetPlayerScore(killerid, GetPlayerScore(killerid) +2);
		}
		if(InArena(killerid, EDM)) PlayerInfo[killerid][ddm]++;
		else if(InArena(killerid, CBDM)) PlayerInfo[killerid][dcbdm]++;
		else if(InArena(killerid, MDM)) PlayerInfo[killerid][dsdm]++;
		if(PlayerInfo[playerid][dRank] > 0)
		{
	        VIPSKilled[killerid] ++;
	       	if(QuestContent[3] == CONTENT_KVIPS)
			{
			    QuestProgress[killerid][3] ++;
			    if(DBoosts[killerid] == 15)
				{
			    	if(!Bit_Get(QuestDone[killerid], 3))
			    	{
			    	    Bit_Let(QuestDone[killerid], 3);
			    	    SendClientMessage(killerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 4 and got $50k & 100XP.");
			    	    TextDrawHideForPlayer(killerid,Quest[3]);
			    	    PlayerInfo[killerid][XP] += 100;
			    	    GiveCash(killerid, 50000);
			    	}
				}
			}
		}
		PlayerInfo[killerid][assist] = -1;
		if(!AnormalDeath[playerid]) if(Iter_Contains(ARENA[NON], killerid)) if(!PlayerInfo[killerid][InDuel])
		{
			PlayerInfo[playerid][Deaths] ++;
			if(PlayerInfo[playerid][Deaths] == 50) NewAchievement(playerid, 0, "Bronze Achievement Unlocked: Pwned", "Collect 50 Deaths");
			if(PlayerInfo[playerid][Deaths] == 100) NewAchievement(playerid, 1, "Silver Achievement Unlocked: Get Rekt", "Collect 100 Deaths");
			if(PlayerInfo[playerid][Deaths] == 500) NewAchievement(playerid, 2, "Gold Achievement Unlocked: Game Over", "Collect 500 Deaths");
		}
	}
	for(new i = 0; i < MAX_ZONES; ++i)
	{

		if(IsPlayerCapturing[playerid]{ i })
		{

			if(killerid != INVALID_PLAYER_ID)
			{
				CapturePrevents[killerid] ++;
				if(QuestContent[0] == CONTENT_ZPREVENT)
				{
				    QuestProgress[killerid][0] ++;
				    if(CapturePrevents[killerid] == 10)
				    {
				    	if(!Bit_Get(QuestDone[killerid], 0))
				    	{
				    	    Bit_Let(QuestDone[killerid], 0);
				    	    SendClientMessage(killerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 1 and got $50k & 100XP.");
				    	    TextDrawHideForPlayer(killerid,Quest[0]);
				    	    PlayerInfo[killerid][XP] += 100;
				    	    GiveCash(killerid, 50000);
				    	}
					}
				}
				SendClientMessage(killerid, Lg, "* You have prevented the enemy from capturing this zone, +1 score!");
				SetPlayerScore(killerid, GetPlayerScore(killerid) +1);
			}
			LeavingZONE(playerid, i);
			break;
		}
		if(IsPlayerHelping[playerid]{ i })
		{
			HidePlayerProgressBar(playerid, ZBar[playerid]);
			IsPlayerHelping[playerid]{ i } = false;
			break;
		}
	}
	ZonesSpree[playerid] = 0;
	ZonesASpree[playerid] = 0;
	if(AnormalDeath[playerid]) AnormalDeath[playerid] = false;
	switch(event)
	{

		case 1:
		{

			if(inevent[playerid] == 1)
			{

				inevent[playerid] = 0;
				SetPlayerTeam(playerid,gTeam[playerid]);
				if(GetTeamPlayersAlive(TEAM_A) == 0)
				{
					SendClientMessageToAll(-1, "{FF0000}[EVENT] '%s' team is the event winner | Reward: $%d and %d score", TeamName[1], reward[0], reward[1]);
					foreach(new i : Player)
					{

						if(GetPlayerTeam(i) == TEAM_B)
						{

							GiveCash(i,reward[0]);
							SetPlayerScore(i, GetPlayerScore(i)+reward[1]);
						}
						if(inevent[i] == 1)
						{

							inevent[i] = 0;
							SetPlayerTeam(i,gTeam[i]);
							SpawnPlayer(i);
						}
					}
					event = 0;
					eventlock = 0;
				}
				else if(GetTeamPlayersAlive(TEAM_B) == 0)
				{
					SendClientMessageToAll(-1, "{FF0000}[EVENT] '%s' team is the event winner | Reward: $%d and %d score", TeamName[1], reward[0], reward[1]);
					foreach(new i : Player)
					{

						if(GetPlayerTeam(i) == TEAM_A)
						{

							GiveCash(i,reward[0]);
							SetPlayerScore(i, GetPlayerScore(i)+reward[1]);
						}
						if(inevent[i] == 1)
						{

							inevent[i] = 0;
							SetPlayerTeam(i,gTeam[i]);
							SpawnPlayer(i);
						}
					}
					event = 0;
					eventlock = 0;
				}
			}
		}
		case 2:
		{
			if(inevent[playerid] == 2)
			{
				if(GetTeamPlayersAlive(NO_TEAM) == 1)
				{
					foreach(new i : Player)
					{
						if(inevent[i] == 2)
						{

							format(msg, _, "{FF0000}[EVENT] '%s' team is the DM event winner | Reward: $%d and %d score", TeamName[1], reward[0], reward[1]);
							GiveCash(i,reward[0]);
							SetPlayerScore(i, GetPlayerScore(i)+reward[1]);
							inevent[i] = 0;
							SetPlayerTeam(i,gTeam[i]);
							SpawnPlayer(i);
						}
					}
					SendClientMessageToAll(-1,msg);
					event = 0;
					eventlock = 0;
				}
			}
		}
	}
	PlayerInfo[playerid][GPS] = pGPS[playerid] = PlayerInfo[playerid][Camouflage] = pCamouflage[playerid] = false;
	DStreak[playerid]++;
	if(DStreak[playerid] > PlayerInfo[playerid][MDSpree])
	{
		PlayerInfo[playerid][MDSpree] = DStreak[playerid];
		if(PlayerInfo[playerid][MDSpree] == 10) NewAchievement(playerid, 0, "Bronze Achievement Unlocked: Mad Boy", "Get a 10 deaths spree");
		else if(PlayerInfo[playerid][MDSpree] == 15) NewAchievement(playerid, 1, "Silver Achievement Unlocked: Domination Rage", "Get a 15 deaths spree");
		else if(PlayerInfo[playerid][MDSpree] == 20) NewAchievement(playerid, 2, "Gold Achievement Unlocked: Total Humliliation", "Get a 20 deaths spree");
	}
	Streak[playerid] = 0;
	PlayerInfo[playerid][Dead] = 1;
	PlayerInfo[playerid][Mask] = PlayerInfo[playerid][WEARMASK] = PlayerInfo[playerid][HELMET] = PlayerInfo[playerid][WEAR] = false;
	inevent[playerid] = 0;
	foreach(new i : Player)
 	{
		if(i != killerid)
		{
			if(PlayerInfo[i][assist] == playerid)
			{
				ShowKillTD(i, "Assist +1");
				SendClientMessage(i,Lg,"You have helped killing %s you gained 2500$ + 1 score",playername);
				GiveCash(i,2500);
				SetPlayerScore(i,GetPlayerScore(i)+1);
				SSLOG[i][s_assist] ++;
				if(QuestContent[1] == CONTENT_KASSIST)
				{
				    QuestProgress[i][1] ++;
				    if(SSLOG[i][s_assist] == 30)
				    {
				    	if(!Bit_Get(QuestDone[i], 1))
				    	{
				    	    Bit_Let(QuestDone[i], 1);
				    	    SendClientMessage(i, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 2 and got $50k & 100XP.");
				    	    TextDrawHideForPlayer(i,Quest[1]);
				    	    PlayerInfo[i][XP] += 100;
				    	    GiveCash(i, 50000);
				    	}
					}
				}
				PlayerInfo[i][assist] = -1;
			}
		}
	}
	foreach(new i: PlacedMines)
	{
		if(Mine[i][m_player] == playerid)
		{
			if(Mine[i][m_used] == true)
			{
			    new ob = Mine[i][m_object], ob2 = Mine[i][m_object2];
				IsAMine[ob2] = IsAMine[ob] = false;
				DestroyDynamicObject(ob);
				DestroyDynamicObject(ob2);
				Mine[i][m_object2] = Mine[i][m_object] = -1;
				DestroyDynamic3DTextLabel(Mine[i][m_label]);
				Mine[i][m_used] = false;
				Mine[i][m_player] = INVALID_PLAYER_ID;
				Iter_Remove(PlacedMines, i);
			}
		}
	}
	return 1;
}

forward GoSpec(playerid);
public GoSpec(playerid)
{
	Bit_Set(isdspec, playerid, false);
	StopAudioStreamForPlayer(playerid);
	TogglePlayerSpectating(playerid, false);
	TextDrawHideForPlayer(playerid, dmusicicon);
	TextDrawHideForPlayer(playerid, dmusicbox);
	return 1;
}

ACMD_MSG(const text[])
{
	new line;
	for(line = 0; line < sizeof(AdminCMD_TD); line++)
	{
		if(line < sizeof(AdminCMD_TD)-1)
		{
			AdminCMD_STR[line] = AdminCMD_STR[line+1];
			TextDrawSetString(AdminCMD_TD[line], AdminCMD_STR[line]);
		}
	}
	AdminCMD_STR[3][0] = '\0';
	strcat(AdminCMD_STR[3], text, sizeof(AdminCMD_STR[]));
	TextDrawSetString(AdminCMD_TD[3], AdminCMD_STR[3]);
	return 1;
}

BoxMSG(const text[])
{
	new line;
	foreach(new i : Player)
	if(Bit_Get(ToggleState[i], TOGGLE_TEXTDRAWS))
	{

		new sz = sizeof(BoxDraw);
		for(line = 0; line < sz; line++) TextDrawShowForPlayer(i, BoxDraw[line]);
	}
	for(line = 0; line < sizeof(BoxDraw); line++)
	{

		TextDrawHideForAll(BoxDraw[line]);
		if(line < sizeof(BoxDraw)-1)
		{

			BoxDrawStr[line] = BoxDrawStr[line+1];
			TextDrawSetString(BoxDraw[line], BoxDrawStr[line]);
		}
	}
	BoxDrawStr[4][0] = '\0';
	strcat(BoxDrawStr[4], text, sizeof(BoxDrawStr[]));
	TextDrawSetString(BoxDraw[4], BoxDrawStr[4]);
	foreach(new i : Player) if(Bit_Get(ToggleState[i], TOGGLE_TEXTDRAWS)) for(line = 0; line < sizeof(BoxDraw); line++) TextDrawShowForPlayer(i, BoxDraw[line]);
	return 1;
}

GivePlayerScore(playerid, score)
{
	SetPlayerScore(playerid, GetPlayerScore(playerid)+score);
	return 1;
}

public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &WEAPON:weapon, &bodypart)
{
    if(AntiSK[playerid])
    {
        if(issuerid != INVALID_PLAYER_ID)
        {
            SendClientMessage(issuerid, Dred, "|ERROR:| That player is under spawn protection.");
        }
        return 0;
    }
	if(!PlayerInfo[playerid][IsSpawned])
	{
	    return 0;
	}
	if(weapon == WEAPON_CHAINSAW || weapon == WEAPON_SAWEDOFF) amount *= 0.8;
	if(CLAN_WAR[CW_ON])
	{
	    new bool:doit;
		if(!CLAN_WAR[CW_WARMUP]) doit = true;
		if(HasJoined1(playerid))
		{
		    if(doit) CW_DAMAGE[playerid] += CW_R_DAMAGE[playerid] += floatround(amount);
			new maxx = CLAN_WAR[CW_MAX];
			for(new i=0; i < maxx; i++)
			{
				if(WAR_SLOT_T1[i] == playerid)
				{
					new Float:hp, Float:Arm;
					GetPlayerHealth(playerid, hp);
					GetPlayerArmour(playerid, Arm);
					if(Arm > amount)
					{
						foreach (new j : Player)
						{
							SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], Arm - amount);
						}
					}
					else
					{
					    if(Arm > 0)
					    {
							new Float:rHp;
							rHp = hp - amount;
							foreach (new j : Player)
							{
								SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 0);
								SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], rHp );
							}
					    }
					    else
					    {
							if(amount > hp)
							{
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 0);
								}
							}
							else
							{
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], hp - amount );
								}
							}
						}
					}
					foreach(new l: JOINED1)
					{

						ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
						ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
					}
					foreach(new l: JOINED2)
					{

						ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
						ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
					}
					foreach(new l : Player)
					{
					    if(IsSpectator[l])
						{
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
						}
					}
					break;
				}
			}
		}
		else if(HasJoined2(playerid))
		{
		    if(doit) CW_DAMAGE[playerid] += CW_R_DAMAGE[playerid] += floatround(amount);
			new maxx = CLAN_WAR[CW_MAX];
			for(new i=0; i < maxx; i++)
			{

				if(WAR_SLOT_T2[i] == playerid)
				{
					new Float:hp, Float:Arm;
					GetPlayerHealth(playerid, hp);
					GetPlayerArmour(playerid, Arm);
					if(Arm > amount)
					{
						foreach (new j : Player)
						{
							SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], Arm - amount);
						}
					}
					else
					{
					    if(Arm > 0)
					    {
							new Float:rHp;
							rHp = hp - amount;
							foreach (new j : Player)
							{
								SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 0);
								SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], rHp );
							}
					    }
					    else
						{
							if(amount > hp)
							{
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 0);
								}
							}
							else
							{
								foreach (new j : Player)
								{
									SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], hp - amount );
								}
							}
				        }
					}
					foreach(new l: JOINED1)
					{

						ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
						ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
					}
					foreach(new l: JOINED2)
					{
						ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
						ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
					}
					foreach(new l : Player)
					{
					    if(IsSpectator[l])
						{
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
							ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
						}
					}
					break;
				}
			}
		}
	}
	new valid;
	if(issuerid != INVALID_PLAYER_ID)
	{
	    if(PlayerInfo[playerid][InClan] == PlayerInfo[issuerid][InClan])
		{
		    if( PlayerInfo[playerid][InClan] != -1)
		    {
			    if(!PlayerInfo[issuerid][InDuel])
			    {
					if(InArena(issuerid, NON))
					{
					    if(!Iter_Contains(PUBGEvent, issuerid))
					    {
					        if(!inevent[issuerid])
					        {
					            SendClientMessage(issuerid, Dred, "|ERROR:| You attacked a clan member, no damage dealt.");
					            return 0;
					        }
					    }
					}
				}
	 		}
		}
		if(Iter_Contains(ARENA[HSDM], issuerid))
		{
		    if(bodypart != 9) return 0;
		}

	    if(weapon == WEAPON_HELIBLADES)
	    {
			new Float:V[3]; GetPlayerPos(playerid,V[0],V[1],V[2]); SetPlayerPos(issuerid,V[0],V[1],V[2]+2);
			new Float:AHP; GetPlayerHealth(issuerid,AHP); SetPlayerHealth(issuerid,AHP-10);
			SendClientMessage(issuerid,Dred,"[WARNING] Heli-blade kill attempt is not allowed. -10 HP.");
	        return 0;
	    }
		if(weapon == WEAPON_CARPARK || weapon == WEAPON_VEHICLE)
		{
		    if(!PlayerInfo[issuerid][OnDuty])
		    {
				new Float:V[3]; GetPlayerPos(playerid,V[0],V[1],V[2]); SetPlayerPos(issuerid,V[0],V[1],V[2]+2);
				SetPlayerPos(playerid,V[0],V[1],V[2]+0.5);
				new Float:AHP; GetPlayerHealth(issuerid,AHP); SetPlayerHealth(issuerid,AHP-10);
				SendClientMessage(issuerid,Dred,"[WARNING] Car parking/ramming is not allowed. -10 HP.");
				return 0;
			}
		}
	    LastDamaged[playerid] = GetTickCount();
		if(GetPlayerTeam(playerid) != GetPlayerTeam(issuerid))
		{
			PlayerInfo[issuerid][assist] = playerid;
			SetPlayerChatBubble(playerid, "-%.0f", 0xFF0000FF, 100.0, 2000, amount);
			PlayerPlaySound(issuerid,17802,0.0,0.0,0.0);
			if(!PlayerInfo[playerid][OnDuty])
			{
				if(!AntiSK[playerid])
				{
					if(InArena(playerid, NON))
					{
						if(!HasJoined(playerid))
						{
							if(weapon == WEAPON_RIFLE)
							{
								if(gClass[issuerid] == BOMBER)
								{
									new Float:fOriginX, Float:fOriginY, Float:fOriginZ, Float:fHitPosX, Float:fHitPosY, Float:fHitPosZ;
									GetPlayerLastShotVectors(issuerid, fOriginX, fOriginY, fOriginZ, fHitPosX, fHitPosY, fHitPosZ);
									CreateExplosion(fHitPosX, fHitPosY, fHitPosZ, 12, 1);
								}
								if(gClass[issuerid] == RIFLEMAN)
								{
									if(!Bit_Get(ClassUpgrade[playerid], A_RIFLEMAN))
									{
										amount += 33.0;
									}
									else
									{
          								amount += 50.0;
									}
								}
							}
							if(weapon == WEAPON_SNIPER)
							{
								if(gClass[issuerid] == RECON)
								{
									amount += 20.0;
								}
							}
							if(weapon == WEAPON_SILENCED)
							{
								if(gClass[issuerid] == SNIPER)
								{

									if(Bit_Get(ClassUpgrade[issuerid], A_SNIPER))
									{
										amount += 12.0;
									}
								}
								if(gClass[issuerid] == AG)
								{
									if(Bit_Get(ClassUpgrade[issuerid], A_SPY))
									{
										amount += 10.0;
									}
								}
							}
							if(weapon == WEAPON_M4)
							{
								if(gClass[issuerid] == Assault)
								{
									if(Bit_Get(ClassUpgrade[issuerid], A_ASSAULT))
									{
                                        amount += 5.0;
									}
								}
							}
							if(weapon == WEAPON_MP5)
							{
								if(gClass[issuerid] == RECON)
								{
									if(Bit_Get(ClassUpgrade[issuerid], A_RECON))
									{
										amount += 5.0;
									}
								}
							}
							if(weapon == WEAPON_SHOTGUN)
							{
								if(gClass[issuerid] == ENGINEER)
								{
									if(Bit_Get(ClassUpgrade[issuerid], A_ENGINEER))
									{
										amount += 10.0;
									}
								}
							}
							if(weapon == WEAPON_COLT45)
							{
								if(gClass[issuerid] == JET)
								{
									if(Bit_Get(ClassUpgrade[issuerid], A_JET))
									{
										amount += 15.0;
									}
								}
							}
						}
					}
					if(bodypart == 9)
					{
						if(weapon == WEAPON_SNIPER || (weapon == WEAPON_RIFLE && gClass[issuerid] == RIFLEMAN))
						{
							if(IsPlayerAFK(playerid) == 0)
							{
								if(!PlayerInfo[playerid][HELMET])
								{
									new strz[111];
									ShowKillTD(issuerid, "HEADSHOT +1");
									PlayerPlaySound(issuerid, 6402, 0,0,0);
									ShowKillTD(playerid, "~r~HEADSHOT");
									PlayerPlaySound(playerid, 6003, 0,0,0);
									amount = 205.0;
									PlayerInfo[issuerid][Headshots] ++;
									SendClientMessage(issuerid, green, "You got +2 score for the headshot!");
									SetPlayerScore(issuerid, GetPlayerScore(issuerid) +2);
									format(strz, _, "~y~%s ~b~~h~headshot ~y~%s ~w~(~r~%0.2f meters~w~)", PlayerInfo[issuerid][Nick], PlayerInfo[playerid][Nick], Tryg3D::ItemGetDistance(issuerid, item_player, playerid, item_player));
									BoxMSG(strz);
									SSLOG[issuerid][s_headshot] ++;
									if(QuestContent[1] == CONTENT_HEADSHOT)
									{
									    QuestProgress[issuerid][1] ++;
									    if(SSLOG[issuerid][s_headshot] == 45)
										{
									    	if(!Bit_Get(QuestDone[issuerid], 1))
									    	{
									    	    Bit_Let(QuestDone[issuerid], 1);
									    	    SendClientMessage(issuerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 2 and got $50k & 100XP.");
									    	    TextDrawHideForPlayer(issuerid,Quest[1]);
									    	    PlayerInfo[issuerid][XP] += 100;
									    	    GiveCash(issuerid, 50000);
									    	}
										}
									}
									if(CurrentTOUR == TOUR_HEAD)
									{

										if(CurrentTOURValue == CurrentTOURCount[issuerid])
										{

											strz[0] = '\0';
											CurrentTOURValue++;
											CurrentWinner = issuerid;
											TextDrawSetString(TournamentTD, "Hourly Tournament:~b~Top_Headshots~n~~b~Current_Winner:_~w~%s_-_%d", PlayerInfo[issuerid][Nick], CurrentTOURValue);
											foreach(new i : Player) if(tournamentshown[i]) if(PlayerInfo[i][IsSpawned]) TextDrawShowForPlayer(i, TournamentTD);
										}
										CurrentTOURCount[issuerid]++;
									}
								}
								else
								{
									PlayerInfo[playerid][HELMET] = false;
									RemovePlayerAttachedObject(playerid,0);
									PlayerPlaySound(playerid, 1130, 0.0, 0.0, 10.0);
									ShowKillTD(playerid, "~r~HELMET BROKEN");
									ShowKillTD(issuerid, "HELMET BROKEN");
									SendClientMessage(issuerid, green, "You got $500 for breaking the helmet!");
									GiveCash(issuerid, 500);
								}
							}
							else
							{
								SendClientMessage(issuerid,Dred,"|ERROR:| That player is AFK.");
								return 0;
							}
						}
					}
				}
			}
			else valid = 1;
		}
	}
	if(PlayerInfo[playerid][OnDuty] || InZeppelin[playerid] > 0)
	{
		if(valid)
		{
			if(!PlayerInfo[issuerid][OnDuty])
			{
				new Float:gX, Float:gY, Float:gZ;
				GetPlayerPos(issuerid, gX, gY, gZ);
				if(IsPlayerInRangeOfPoint(playerid, 100, gX, gY, gZ))
				{
					GameTextForPlayer(issuerid,"~p~warning!~n~~w~do not attack~n~~w~on duty admins~n~~p~stop that!~n~~r~Lost -5 HP", 3000, 3);
					TogglePlayerControllable(issuerid,true);
					SetPlayerArmedWeapon(issuerid, WEAPON_FIST);
					new Float:HP;
					GetPlayerHealth(issuerid,HP);
					SetPlayerHealth(issuerid,HP-5);
				}
			}
		}
		return 0;
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) return 1;
	if(checkpointid == RopeCP[playerid])
	{
	    if(GetPVarInt(playerid,"roped") == 1)
	    {
	        SetPVarInt(playerid,"roped",0);
	        SetPVarInt(playerid,"chop_id",0);
	        ClearAnimations(playerid);
	        TogglePlayerControllable(playerid,false);
			SetPlayerHealth(playerid, LastHP[playerid], LastAR[playerid]);
	        TogglePlayerControllable(playerid,true);
	        DestroyDynamicCP(RopeCP[playerid]);
	        for(new destr4=0;destr4<ropelength;destr4++) { DestroyDynamicObject(r0pes[playerid][destr4]); r0pes[playerid][destr4] = -1; }
			return 1;
		}
	}
	if(gTeam[playerid] == TEAM_MERC) return SendClientMessage(playerid, Dred,"|!| Mercenaries cannot capture zones");
	new LoopID = -1;
	for(new i2 = 0; i2 < MAX_ZONES; ++i2)	{ if(checkpointid == CP[i2])	{LoopID = i2;	break;}}
	if(LoopID != -1)
	{
		if(PlayerInfo[playerid][OnDuty]) return 1;
		if(!UnderAttack{ LoopID })
		{

			if(tCP[LoopID] != GetPlayerTeam(playerid)) ActiveZONE(playerid, LoopID);
			else return SendClientMessage(playerid, Dred,"|!| This zone is already captured by your team.");
		}
		else
		{

			if(AttackingTeam[LoopID] == GetPlayerTeam(playerid))
			{
				if(!IsPlayerCapturing[playerid]{ LoopID })
				{
					SendClientMessage(playerid, 0x80FF00FF, "[CAPTURE-ASSIST] You are helping your team to capture this zone.");
					IsPlayerHelping[playerid]{ LoopID } = true;
					SetPlayerProgressBarColour(playerid, ZBar[playerid], ReturnTeamColor(tCP[LoopID]));
					ShowPlayerProgressBar(playerid, ZBar[playerid]);
					TextDrawSetString(Capture_PTD[LoopID], GetTeamZoneOwner(LoopID));
					TextDrawShowForPlayer(playerid, Capture_PTD[LoopID]);
				}
			}
		}
		return 1;
	}
	for(new i2 = 0; i2 < MAX_TEAMS; ++i2) { if(checkpointid == CMDCP[i2])	{LoopID = i2;	break;}}
	if(LoopID != -1)
	{

		if(gTeam[playerid] != LoopID) return ERR(playerid, "You cannot enter other teams command centers.");
		if(GetPlayerScore(playerid) < 10000) if(PlayerInfo[playerid][dRank] < 1) return ERR(playerid, "You have to be Rank 11 (10000 score) or VIP to enter command centers.");
		SetPlayerVirtualWorld(playerid, LoopID);
		SetPlayerPos(playerid, 2512.3455,-2656.2705,27.1025);
		SendClientMessage(playerid, grey, "<!> You have entered the command center.");
		return 1;
	}
	if(checkpointid == ExitCP)
	{
		switch(gTeam[playerid])
		{

			case TEAM_EURASIA: SetPlayerPos(playerid,1096.1252,1885.2096,10.8203);
			case TEAM_ARAB: SetPlayerPos(playerid,-756.8552,1594.9482,27.0084);
			case TEAM_SOVIET: SetPlayerPos(playerid,-107.0803,1142.7611,19.7422);
			case TEAM_USA: SetPlayerPos(playerid,-262.6237,2623.0950,62.8846);
			case TEAM_AUS: SetPlayerPos(playerid,412.8054,2488.8882,16.4844);
			case TEAM_CH: SetPlayerPos(playerid,-725.6337,987.4231,12.2841);
			case TEAM_ID: SetPlayerPos(playerid,968.3448,2625.4255,10.8203);
			case TEAM_FRANCE: SetPlayerPos(playerid,-1491.3632,2640.0693,55.6875);
		}
		SetPlayerVirtualWorld(playerid, 0);
	}
	else if(checkpointid == UpCP) SetPlayerPos(playerid, -2207.4404,1913.8485,-45.7510);
	else if(checkpointid == UnderCP) SetPlayerPos(playerid, -2203.7744,1908.2842,2.8909);
	else if(checkpointid == SUpCP)
	{
		SetPlayerInterior(playerid, 255);
	    SetPlayerVirtualWorld(playerid, 255);
	    SetTimerEx("UnfreezeMe2", 1000, false, "d", playerid);
	    SetPlayerTime(playerid, 0, 0);
		TogglePlayerControllable(playerid, false);
		IsPlayerInSpace[playerid] = 1;
		SetPlayerPos(playerid, -1813.1559,3200.0771,821.5206);
	}
	else if(checkpointid == SUnderCP)
	{
	    SetPlayerInterior(playerid, 0);
		IsPlayerInSpace[playerid] = 0;
	    SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid, -789.9104,2407.2756,156.8770);
	}
	return 1;
}
public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	for(new i = 0; i < MAX_ZONES; ++i)
	{
		if(IsPlayerCapturing[playerid]{ i }) { 	LeavingZONE(playerid, i); HidePlayerProgressBar(playerid, ZBar[playerid]); TextDrawHideForPlayer(playerid, Capture_PTD[i]); break; }
		if(IsPlayerHelping[playerid]{ i })
		{
			SendClientMessage(playerid, Dred,"[ZONE-EXIT] You are no longer helping to capture this zone.");
			IsPlayerHelping[playerid]{ i } = false;
			TextDrawHideForPlayer(playerid, Capture_PTD[i]);
			HidePlayerProgressBar(playerid, ZBar[playerid]);
   			break;
		}
	}
	return 1;
}

ShowZone(zoneid)
{
	new gz = Zone[zoneid];
	switch(tCP[zoneid])
	{
		case -1:	GangZoneShowForAll(gz, 0xFFFFFF4F);
		case TEAM_EURASIA:	GangZoneShowForAll(gz, TEAM_ZONE_EURASIA_COLOR);
		case TEAM_ARAB:	GangZoneShowForAll(gz, TEAM_ZONE_ARAB_COLOR);
		case TEAM_SOVIET:	GangZoneShowForAll(gz, TEAM_ZONE_SOVIET_COLOR);
		case TEAM_USA:	GangZoneShowForAll(gz, TEAM_ZONE_USA_COLOR);
		case TEAM_AUS:	GangZoneShowForAll(gz, TEAM_ZONE_AUS_COLOR);
		case TEAM_CH:	GangZoneShowForAll(gz, TEAM_ZONE_CH_COLOR);
		case TEAM_ID:	GangZoneShowForAll(gz, TEAM_ZONE_ID_COLOR);
		case TEAM_FRANCE:	GangZoneShowForAll(gz, TEAM_ZONE_FR_COLOR);
	}
}
GetTeamZoneOwner(Ow)
{
	new Ret[13];
	switch(tCP[Ow])
	{
		case TEAM_EURASIA: Ret = "Eurasia";
		case TEAM_ID: Ret = "Taliban";
		case TEAM_CH: Ret = "Brazil";
		case TEAM_AUS: Ret = "Australia";
		case TEAM_USA: Ret = "USA";
		case TEAM_SOVIET: Ret = "Soviet";
		case TEAM_ARAB: Ret = "Arabia";
		case TEAM_FRANCE: Ret = "France";
		case -1: Ret = "No team";
	}
	return Ret;
}
ActiveZONE(playerid, zoneid)
{
	if(!UnderAttack{ zoneid })
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
            SetPlayerProgressBarColour(playerid, ZBar[playerid], ReturnTeamColor(tCP[zoneid]));
			SetPlayerProgressBarValue(playerid, ZBar[playerid], 0);
			new team = GetPlayerTeam(playerid);
			AttackingTeam[zoneid] = team;
			if(zoneid == BIG || zoneid == MT || zoneid == A52 || zoneid == OPP)
			{

				if(cPerk[playerid][P_CAPTURE] > 0)
				{
					CountVar[zoneid] = 40;
					SetPlayerProgressBarMaxValue(playerid, ZBar[playerid], 40);
					SendClientMessage(playerid, 0x80FF00FF,"[Clan Perk]: Stay in this checkpoint for 40 seconds instead of 45 to capture it. (SPECIAL ZONE)");
				}else {
					CountVar[zoneid] = 45;
					SetPlayerProgressBarMaxValue(playerid, ZBar[playerid], 45);
					SendClientMessage(playerid, 0x80FF00FF,"Stay in this checkpoint for 45 to capture it. (SPECIAL ZONE)");
				}
			}
			else
			{
				if(cPerk[playerid][P_CAPTURE] > 0)
				{
					CountVar[zoneid] = 20;
					SetPlayerProgressBarMaxValue(playerid, ZBar[playerid], 20);
					SendClientMessage(playerid, 0x80FF00FF,"[Clan Perk]: Stay in this checkpoint for 20 seconds instead of 25 to capture it.");
				}else {
					CountVar[zoneid] = 25;
					SetPlayerProgressBarMaxValue(playerid, ZBar[playerid], 25);
					SendClientMessage(playerid, 0x80FF00FF,"Stay in this checkpoint for 25 to capture it.");
				}
			}
			switch(PlayerInfo[playerid][dRank])
			{
				case 0:
				{
					ZUpdateTimer[zoneid] = SetTimerEx("ZUpdate", 1000, true, "dii", playerid, zoneid, CountVar[zoneid]);
				}
				case 1:
				{
					ZUpdateTimer[zoneid] = SetTimerEx("ZUpdate", 800, true, "dii", playerid, zoneid, CountVar[zoneid]);
					SendClientMessage(playerid, 0x80FF00FF,"[VIP 1]: Your capture time has been reduced.");
				}
				case 2:
				{
					ZUpdateTimer[zoneid] = SetTimerEx("ZUpdate", 700, true, "dii", playerid, zoneid, CountVar[zoneid]);
					SendClientMessage(playerid, 0x80FF00FF,"[VIP 2]: Your capture time has been reduced.");
				}
				case 3:
				{

					ZUpdateTimer[zoneid] = SetTimerEx("ZUpdate", 600, true, "dii", playerid, zoneid, CountVar[zoneid]);
					SendClientMessage(playerid, 0x80FF00FF,"[VIP 3]: Your capture time has been reduced.");
				}
				case 4:
				{

					ZUpdateTimer[zoneid] = SetTimerEx("ZUpdate", 500, true, "dii", playerid, zoneid, CountVar[zoneid]);
					SendClientMessage(playerid, 0x80FF00FF,"[VIP 4]: Your capture time has been reduced.");
				}
				case 5..6:
				{

					ZUpdateTimer[zoneid] = SetTimerEx("ZUpdate", 435, true, "dii", playerid, zoneid, CountVar[zoneid]);
					SendClientMessage(playerid, 0x80FF00FF,"[VIP 5]: Your capture time has been reduced.");
				}
			}
			UnderAttack{ zoneid } = true;
			IsPlayerCapturing[playerid]{ zoneid } = true;
			SetPlayerProgressBarValue(playerid, ZBar[playerid], 0); //setting the progress bar to its initial value
			ShowPlayerProgressBar(playerid, ZBar[zoneid]);
			TextDrawSetString(Capture_PTD[zoneid], GetTeamZoneOwner(zoneid));
			TextDrawShowForPlayer(playerid, Capture_PTD[zoneid]);
			new zid = Zone[zoneid];
			if(tCP[A52] != gTeam[playerid])
			{
				switch(team)
				{
					case TEAM_EURASIA:	GangZoneFlashForAll(zid, TEAM_ZONE_EURASIA_COLOR);
					case TEAM_ARAB:	GangZoneFlashForAll(zid, TEAM_ZONE_ARAB_COLOR);
					case TEAM_SOVIET:	GangZoneFlashForAll(zid, TEAM_ZONE_SOVIET_COLOR);
					case TEAM_USA:	GangZoneFlashForAll(zid, TEAM_ZONE_USA_COLOR);
					case TEAM_AUS:	GangZoneFlashForAll(zid, TEAM_ZONE_AUS_COLOR);
					case TEAM_FRANCE:	GangZoneFlashForAll(zid, TEAM_ZONE_FR_COLOR);
					case TEAM_CH: GangZoneFlashForAll(zid, TEAM_ZONE_CH_COLOR);
					case TEAM_ID: GangZoneFlashForAll(zid, TEAM_ZONE_ID_COLOR);
				}
			}
			else SendClientMessage(playerid, COLOR_YELLOW,"[Area 52 UNDERCOVER] You are silently capturing this area.");
				//------Message-----
			switch(tCP[zoneid])
			{

				case TEAM_EURASIA:	SendClientMessage(playerid, 0xE87174FF,"|!| This Zone is controlled by {0049FF}(EURASIA)");
				case TEAM_ARAB:	SendClientMessage(playerid, 0xE87174FF,"|!| This Zone is controlled by {0049FF}(ARABIA)");
				case TEAM_SOVIET:	SendClientMessage(playerid,0xE87174FF,"|!| This Zone is controlled by {0049FF}(SOVIET)");
				case TEAM_USA:	SendClientMessage(playerid,0xE87174FF,"|!| This Zone is controlled by {0049FF}(USA)");
				case TEAM_AUS:	SendClientMessage(playerid,0xE87174FF,"|!| This Zone is controlled by {0049FF} (AUSTRALIA)");
				case TEAM_FRANCE:	SendClientMessage(playerid,0xE87174FF,"|!| This Zone is controlled by {0049FF} (FRANCE)");
				case TEAM_ID: SendClientMessage(playerid,0xE87174FF,"|!| This Zone is controlled by {0049FF} (Taliban)");
				case TEAM_CH: SendClientMessage(playerid,0xE87174FF,"|!| This Zone is controlled by {0049FF} (Brazil)");
				case -1:	SendClientMessage(playerid, 0xE87174FF,"|!| This Zone is not controlled by any team!");
			}
		}else return SendClientMessage(playerid, Dred,"|!| You cannot capture while in a vehicle!");
	}else return SendClientMessage(playerid, 0xE87174FF,"[WARNING]: This zone is already being taken over!");
	return 1;
}

forward HideCapTD(playerid);
public HideCapTD(playerid)
{
	TextDrawHideForPlayer(playerid, CapturedTD);
	return 1;
}

ZONECaptured(playerid, zoneid)
{
	KillTimer(ZUpdateTimer[zoneid]);
	PlayerInfo[playerid][ZCaptures] ++;
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	if(PlayerInfo[playerid][ZCaptures] == 50) NewAchievement(playerid, 0, "Bronze Achievement Unlocked: Territories Seeker", "Capture 50 zones");
	else if(PlayerInfo[playerid][ZCaptures] == 100) NewAchievement(playerid, 1, "Silver Achievement Unlocked: Nazi Mentality", "Capture 100 zones");
	else if(PlayerInfo[playerid][ZCaptures] == 500) NewAchievement(playerid, 2, "Gold Achievement Unlocked: The True Imperialist", "Capture 500 zones");
	UnderAttack{ zoneid } = false;
	SSLOG[playerid][s_capture] ++;
	if(QuestContent[0] == CONTENT_ZCAPTURE)
	{
	    QuestProgress[playerid][0] ++;
		if(SSLOG[playerid][s_capture] == 20)
	    {
	    	if(!Bit_Get(QuestDone[playerid], 0))
	    	{
	    	    Bit_Let(QuestDone[playerid], 0);
	    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 1 and got $50k & 100XP.");
	    	    TextDrawHideForPlayer(playerid,Quest[0]);
	    	    PlayerInfo[playerid][XP] += 100;
	    	    GiveCash(playerid, 50000);
	    	}
		}
	}
	ZonesSpree[playerid] ++;
	if(QuestContent[0] == CONTENT_ZSPREE)
	{
	    QuestProgress[playerid][0] ++;
	    if(ZonesSpree[playerid] == 15)
	    {
	    	if(!Bit_Get(QuestDone[playerid], 0))
	    	{
	    	    Bit_Let(QuestDone[playerid], 0);
	    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 1 and got $50k & 100XP.");
	    	    TextDrawHideForPlayer(playerid,Quest[0]);
	    	    PlayerInfo[playerid][XP] += 100;
	    	    GiveCash(playerid, 50000);
	    	}
		}
	}
	new msg[256];
	if(CurrentTOUR == TOUR_CAP)
	{

		if(CurrentTOURValue == CurrentTOURCount[playerid])
		{
			CurrentTOURValue++;
			CurrentWinner = playerid;
			TextDrawSetString(TournamentTD, "Hourly_Tournament:~b~_Top_Zone_Captures~n~~b~Current_Winner:_~w~%s_-_%d", nam, CurrentTOURValue);
			foreach(new i : Player) if(tournamentshown[i]) if(PlayerInfo[i][IsSpawned]) TextDrawShowForPlayer(i, TournamentTD);
		}
		CurrentTOURCount[playerid]++;
	}
	if(ZonesSpree[playerid] > PlayerInfo[playerid][MCSpree])
	{

		PlayerInfo[playerid][MCSpree] = ZonesSpree[playerid];
		if(ZonesSpree[playerid] == 10) NewAchievement(playerid, 0, "Bronze Achievement Unlocked: Quick Takeoverer", "Have a 10 zone captures spree");
		else if(ZonesSpree[playerid] == 25) NewAchievement(playerid, 1, "Silver Achievement Unlocked: Crazy Capturer", "Have a 50 zone captures spree");
		else if(ZonesSpree[playerid] == 50) NewAchievement(playerid, 2, "Gold Achievement Unlocked: Insane Capturer", "Have a 100 zone captures spree");
	}
	SetPlayerScore(playerid, GetPlayerScore(playerid)+5);
	GiveCash(playerid, 5000);
	new zz[24]; strcat(zz, ZName(zoneid));
	SendClientMessage(playerid,0x80FF00FF, "* You have captured %s. You earned +5 score & +$5000.", zz);
	TextDrawShowForPlayer(playerid, CapturedTD);
	SetTimerEx("HideCapTD", 4000, false, "d", playerid);
	if(cPerk[playerid][P_MONEY] >0)
	{

		SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the capture money.");
		GiveCash(playerid, 5000);
	}
	new as = GetPlayerTeam(playerid);
	if(zoneid == HOS)
	{
		foreach(new i : Player) if(as == GetPlayerTeam(i)) SendClientMessage(i,-1,"* The hospital will Heal you 8 HP every 30 Second");
	}
	if(ZoneD == zoneid)
	{
		GameTextForPlayer(playerid,"~g~~h~Bonus Zone Captured",6000,5);
		SendClientMessage(playerid,Lg,"You have captured a bonus zone and received %d cash & %d score.",ZoneC,ZoneS);
		SendClientMessageToAll(-1,"{EF2548}[ZoneBonus]{E2E2E2}: %s has Captured %s and recieved %d$ & %d score.",nam,zz,ZoneC,ZoneS);
		GiveCash(playerid,ZoneC);
		if(cPerk[playerid][P_MONEY] >0) GiveCash(playerid,ZoneC);
		SetPlayerScore(playerid,GetPlayerScore(playerid)+ZoneS);
		ZoneD = -1;
	}
	if(zoneid == BIG)
	{
		SendClientMessage(playerid,Lg,"* You have Recieved Extra Score +1 And Money +2000$ For Capturing Area 51");
		SendClientMessage(playerid,Lg,"* You can get 50 Honor points for securing this area, and +40 bonus honor points if your team owns Military Tent.");
		GiveCash(playerid,2000);
		SetPlayerScore(playerid, GetPlayerScore(playerid)+1);
		if(cPerk[playerid][P_MONEY] >0) GiveCash(playerid,2000);
		new x = PlayerInfo[playerid][InClan];
		if(x != -1) AreaClan = x;
		else AreaClan = -2;
	}
	if(zoneid == A52)
	{

		SendClientMessage(playerid,Lg,"* You have Recieved Extra Score +1 And Money +2000$ For Capturing Area 52");
		SendClientMessage(playerid,Lg,"* You can get 50 Honor points for securing this area.");
		GiveCash(playerid,2000);
		SetPlayerScore(playerid, GetPlayerScore(playerid)+1);
		if(cPerk[playerid][P_MONEY] >0) GiveCash(playerid,2000);
		new x = PlayerInfo[playerid][InClan];
		if(x != -1) AreaClan2 = x;
		else AreaClan2 = -2;
	}
	if(zoneid == MT)
	{

		SendClientMessage(playerid,Lg,"* You have Recieved Extra Score +5 And Money +8000$ For Capturing Military Tent");
		SendClientMessage(playerid,Lg,"* You can get 90 Honor Points if you secure Area51 and your team has Military Tent under control.");
		GiveCash(playerid,8000);
		SetPlayerScore(playerid, GetPlayerScore(playerid)+5);
		if(cPerk[playerid][P_MONEY] >0) GiveCash(playerid,8000);
	}
	if(zoneid == OPP)
	{
		SendClientMessage(playerid,Lg,"* You have Recieved Extra Score +5 And Money +8000$ For Capturing Oil Platform");
		SendClientMessage(playerid,Lg,"* You can get 90 Honor Points if you secure Area52 and your team has Oil Platform under control.");
		GiveCash(playerid,8000);
		SetPlayerScore(playerid, GetPlayerScore(playerid)+5);
		if(cPerk[playerid][P_MONEY] >0) GiveCash(playerid,8000);
	}
	switch(gTeam[playerid])
	{
		case TEAM_AUS: format(msg, _, "~p~%s~w~ has captured ~b~~h~%s~w~", "Australia",zz);
		case TEAM_USA: format(msg, _, "~b~%s~w~ has captured ~b~~h~%s~w~", "USA",zz);
		case TEAM_SOVIET: format(msg, _, "~r~%s~w~ has captured ~b~~h~%s~w~", "Soviet",zz);
		case TEAM_ARAB: format(msg, _, "~y~%s~w~ has captured ~b~~h~%s~w~", "Arabia",zz);
		case TEAM_FRANCE:  format(msg, _, "~p~~h~%s~w~ has captured ~b~~h~%s~w~", "France",zz);
		case TEAM_EURASIA: format(msg, _, "~g~%s~w~ has captured ~b~~h~%s~w~", "Eurasia",zz);
		case TEAM_CH: format(msg, _, "~b~~h~%s~w~ has captured ~b~~h~%s~w~", "Brazil",zz);
		case TEAM_ID: format(msg, _, "~g~%s~w~ has captured ~b~~h~%s~w~", "Taliban",zz);
	}
	BoxMSG(msg);
	IsPlayerCapturing[playerid]{ zoneid } = false;
	AttackingTeam[zoneid] = -1;
	//////////////////////////////////////
	switch(ZonesSpree[playerid])
	{
		case 2:
		{
			SendClientMessage(playerid, 0x4AC5FFFF, "* You are on a 2 capturing spree! +1 score");
			SetPlayerScore(playerid, GetPlayerScore(playerid) +1);
		}
		case 3:
		{
			SendClientMessage(playerid, 0x4AC5FFFF, "* You are on a 3 capturing spree! +2 score");
			SetPlayerScore(playerid, GetPlayerScore(playerid) +2);
		}
		case 5:
		{
			SendClientMessage(playerid, 0x4AC5FFFF, "* You are on a 5 capturing spree! +3 score");
			SetPlayerScore(playerid, GetPlayerScore(playerid) +3);
		}
		case 7:
		{

			SendClientMessage(playerid, 0x4AC5FFFF, "* You are on a 7 capturing spree! +4 score");
			SetPlayerScore(playerid, GetPlayerScore(playerid) +4);
		}
		case 10:
		{

			SendClientMessage(playerid, 0x4AC5FFFF, "* You are on a 10 capturing spree! +5 score");
			SetPlayerScore(playerid, GetPlayerScore(playerid) +5);
			if(PlayerInfo[playerid][InClan] > -1)  AddClanPoints(playerid, 5);
		}
		case 13:
		{

			SendClientMessage(playerid, 0x4AC5FFFF, "* You are on a 13 capturing spree! +6 score");
			SetPlayerScore(playerid, GetPlayerScore(playerid) +6);
		}
		case 16:
		{

			SendClientMessage(playerid, 0x4AC5FFFF, "* You are on a 16 capturing spree! +7 score");
			SetPlayerScore(playerid, GetPlayerScore(playerid) +7);
		}
		case 20:
		{

			SendClientMessage(playerid, 0x4AC5FFFF, "* You are on a 20 capturing spree! +8 score & 5000$");
			SetPlayerScore(playerid, GetPlayerScore(playerid) +8);
			GiveCash(playerid,5000);
		}
	}
	new str[100];
	format(str, _, "[CAPTURE] Your team has lost {AD1640}%s, {FFFFFF}-1 score", zz);
	new strr[100];
	format(strr, _, "[TEAM-CAPTURE] Your team has captured {AD1640}%s,{FFFFFF}+1 score", zz);
	new ab = tCP[zoneid];
	new x = PlayerInfo[playerid][InClan];
	foreach (new i : Player)
	{
	    if(PlayerInfo[i][IsSpawned])
		{
			new tt = GetPlayerTeam(i);
			if(ab == tt)
			{
				SetPlayerScore(i, GetPlayerScore(i)-1);
				SendClientMessage(i, 0xFFFFFFFF, str);
			}
			else if(tt == as)
			{
				if(i != playerid)
				{
					SetPlayerScore(i, GetPlayerScore(i)+1);
					SendClientMessage(i, COLOR_GREEN, strr);
				}
			}
		}
		if(IsPlayerHelping[i]{ zoneid })
		{
			HidePlayerProgressBar(i, ZBar[i]);
			TextDrawHideForPlayer(i, Capture_PTD[zoneid]);
			PlayerInfo[i][ZHelps] ++;
			if(PlayerInfo[i][ZHelps] == 50) NewAchievement(i, 0, "Bronze Achievement Unlocked: Helper Needed", "Help in zone capturing 50 times");
			else if(PlayerInfo[i][ZHelps] == 100) NewAchievement(i, 1, "Silver Achievement Unlocked: Gentle Soldier", "Help in zone capturing 100 times");
			else if(PlayerInfo[i][ZHelps] == 500) NewAchievement(i, 2, "Gold Achievement Unlocked: For Our Nation", "Help in zone capturing 500 times");
			SendClientMessage(i, COLOR_GREEN,"[CAPTURE-ASSIST] You have helped capturing this area! You received +3 score for it!");
			SetPlayerScore(i, GetPlayerScore(i)+3);
			ZoneAssists[i] ++;
			if(QuestContent[0] == CONTENT_ZASSIST)
			{
				QuestProgress[i][0] ++;
			    if(ZoneAssists[i] == 15)
			    {
			    	if(!Bit_Get(QuestDone[i], 0))
			    	{
			    	    Bit_Let(QuestDone[i], 0);
			    	    SendClientMessage(i, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 1 and got $50k & 100XP.");
			    	    TextDrawHideForPlayer(i,Quest[0]);
			    	    PlayerInfo[i][XP] += 100;
			    	    GiveCash(i, 50000);
			    	}
				}
			}
			IsPlayerHelping[i]{ zoneid } = false;
			ZonesASpree[i] ++;
			if(PlayerInfo[i][InClan] == x)
			{
			    ZCLANAssist[i] ++;
			    if(QuestContent[4] == CONTENT_ZCLANASSIST)
				{
				    QuestProgress[i][4] ++;
				    if(ZCLANAssist[i] == 10)
					{
				    	if(!Bit_Get(QuestDone[i], 4))
				    	{
				    	    Bit_Let(QuestDone[i], 4);
				    	    SendClientMessage(i, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
				    	    TextDrawHideForPlayer(i,Quest[4]);
				    	    PlayerInfo[i][XP] += 100;
				    	    GiveCash(i, 50000);
				    	}
					}
				}
			}
		}
	}
	tCP[zoneid] = as;
	new zid = Zone[zoneid];
	GangZoneStopFlashForAll(zid);
	switch(as)
	{

		case TEAM_EURASIA:	GangZoneShowForAll(zid, TEAM_ZONE_EURASIA_COLOR);
		case TEAM_ARAB:	GangZoneShowForAll(zid, TEAM_ZONE_ARAB_COLOR);
		case TEAM_SOVIET:	GangZoneShowForAll(zid, TEAM_ZONE_SOVIET_COLOR);
		case TEAM_USA:	GangZoneShowForAll(zid, TEAM_ZONE_USA_COLOR);
		case TEAM_AUS:	GangZoneShowForAll(zid, TEAM_ZONE_AUS_COLOR);
		case TEAM_CH:	GangZoneShowForAll(zid, TEAM_ZONE_CH_COLOR);
		case TEAM_ID:	GangZoneShowForAll(zid, TEAM_ZONE_ID_COLOR);
		case TEAM_FRANCE:	GangZoneShowForAll(zid, TEAM_ZONE_FR_COLOR);
	}
	HidePlayerProgressBar(playerid, ZBar[playerid]);
	TextDrawHideForPlayer(playerid, Capture_PTD[zoneid]);
	///////////////////////////////MOTW////////////////////////////////////
	new TMAX[MAX_TEAMS];
	for(new i = 0; i < MAX_ZONES; i++) { new ppp = tCP[i]; if(ppp!=-1) TMAX[ppp]++; }
	new maxx, oldMOTW;
	oldMOTW = MOTW;
	for(new i = 0; i < MAX_TEAMS; i++)
	{
	    new ppp = TMAX[i];
		if(ppp>maxx)
		{
		    if(i == 6) continue;
			maxx = ppp;
			MOTW = i;
		}
	}
	if(MOTW != oldMOTW)
	{

		SendClientMessageToAll(-1,"");
		switch(MOTW)
		{

			case TEAM_EURASIA: SendClientMessageToAll(COLOR_ORANGE, "MOTW: Eurasia is now the mother of the world (most zones captured). +2 Score and 2000$ for its players.");
			case TEAM_ARAB: SendClientMessageToAll(COLOR_ORANGE, "MOTW: Arabia is now the mother of the world (most zones captured). +2 Score and 2000$ for its players.");
			case TEAM_SOVIET: SendClientMessageToAll(COLOR_ORANGE, "MOTW: Soviet is now the mother of the world (most zones captured). +2 Score and 2000$ for its players.");
			case TEAM_ID: SendClientMessageToAll(COLOR_ORANGE, "MOTW: Taliban is now the mother of the world (most zones captured). +2 Score and 2000$ for its players.");
			case TEAM_AUS: SendClientMessageToAll(COLOR_ORANGE, "MOTW: Australia is now the mother of the world (most zones captured). +2 Score and 2000$ for its players.");
			case TEAM_USA: SendClientMessageToAll(COLOR_ORANGE, "MOTW: USA is now the mother of the world (most zones captured). +2 Score and 2000$ for its players.");
			case TEAM_FRANCE: SendClientMessageToAll(COLOR_ORANGE, "MOTW: France is now the mother of the world (most zones captured). +2 Score and 2000$ for its players.");
			case TEAM_CH: SendClientMessageToAll(COLOR_ORANGE, "MOTW: Brazil is now the mother of the world (most zones captured). +2 Score and 2000$ for its players.");
		}
		SendClientMessageToAll(-1,"");
		foreach(new i : Player)
		{
			if(gTeam[i] == MOTW)
			{
				GiveCash(i, 2000);
				SetPlayerScore(i, GetPlayerScore(i)+2);
			}
		}
	}
	return 1;
}

ZName(zoneidd)
{
	new zname[24];
	switch(zoneidd)
	{

		case TEST:	zname = "Bone County";
		case CC:	zname = "Training Zone";
		case DF:	zname = "Drugs Factory";
		case CH:	zname = "Farms";
		case AN:	zname = "Ammu Nation";
		case MD:	zname = "Mc Donald's";
		case GS:	zname = "Gas Station";
		case FS:	zname = "Fish Shop";
		case JS:	zname = "Jay's Shop";
		case SNAKE:  zname = "Snake farm";
		case BAY:    zname = "Bay side";
		case BIG:    zname = "Area 51";
		case A52:    zname = "Area 52";
		case SPS:    zname = "Space Station";
		case OPP:    zname = "Oil Platform";
		case ARMY:	zname = "Army Restaurant";
		case PETROL:  zname = "Petrol bunk";
		case OIL:	zname = "Oil Station";
		case QUARRY: zname = "Quarry";
		case GUEST:  zname = "Desert Guest house";
		case EAR: zname = "Big Ear";
		case HOS: zname = "Hospital";
		case CMP: zname = "Army camp";
		case BRD: zname = "Bridge";
		case LVA: zname = "LV Airport";
		case MT: zname = "Military Tent";
		case PH: zname = "Pump House";
		case CARGO: zname = "Cargo Ship";
		case SFPD: zname = "SFPD";
		case BST: zname = "Baseball Stadium";
		case CRAFT: zname = "Aircraft Carrier";
		case SFDOCK: zname = "SF Docks";
		case FSL: zname = "Fisher's Lagoon";
		case AO: zname = "Abondoned Outpost";
	}
	return zname;
}

LeavingZONE(playerid, zoneid)
{
	TextDrawHideForPlayer(playerid, Capture_PTD[zoneid]);
	AttackingTeam[zoneid] = -1;
	UnderAttack{ zoneid } = false;
	KillTimer(ZUpdateTimer[zoneid]);
	HidePlayerProgressBar(playerid, ZBar[playerid]);
	IsPlayerCapturing[playerid]{ zoneid } = false;
	CountVar[zoneid] = 25;
	foreach (new i : Player)
	{
		if(IsPlayerHelping[i]{ zoneid })
		{
			IsPlayerHelping[i]{ zoneid } = false;
			HidePlayerProgressBar(i, ZBar[i]);
			TextDrawHideForPlayer(i, Capture_PTD[zoneid]);
		}
	}
	GangZoneStopFlashForAll(Zone[zoneid]);
	SendClientMessage(playerid, RED,"[FAIL]: You have failed to capture this zone.");
	return 1;
}

forward ZUpdate(playerid, zoneid, originalcount);
public ZUpdate(playerid, zoneid, originalcount)
{
	if(!IsPlayerConnected(playerid)) return LeavingZONE(playerid,zoneid);
	if(CountVar[zoneid] > 0)
	{

		CountVar[zoneid] --;
		foreach (new i : Player)
		{
			if(IsPlayerHelping[i]{ zoneid } == true)
			{
				CountVar[zoneid] --;
			}
		}
		foreach (new i : Player)
		{
			if (IsPlayerHelping[i]{zoneid})
			{
				SetPlayerProgressBarValue(i, ZBar[i], originalcount - CountVar[zoneid]);
			}
		}
	}
	else if(CountVar[zoneid] < 1)
	{
		KillTimer(ZUpdateTimer[zoneid]);
		ZONECaptured(playerid, zoneid);
		CountVar[zoneid] = 25;
		HidePlayerProgressBar(playerid, ZBar[playerid]);
		TextDrawHideForPlayer(playerid, Capture_PTD[zoneid]);
	}
	return 1;
}

IsAdvertisement(const text[])
{
	new NuCnt,DotCnt;
	for (new i = 0, l = strlen(text); i < l; i++)
	{

		if ('0' <= text[i] <= '9') {NuCnt++; continue;}
		new j = i+1;
		if(text[i] == '.' || text[i] == ':' || text[i] == '_')
		if(text[j] != '.') if(text[j] != ':') if(text[j] != '_') DotCnt++;
		if (NuCnt > 6) if(DotCnt > 2) return 1;
	}
	return false;
}

new BadWords[][] = {
		{"/q"},{"/q "},{"/ q"},{"//q"},{"/.q"},{"/*q"},{"rww"},{"fuck"},{"fak"},{"bitch"},{"asshole"},{"faggot"},{"rape"},{"fuku"},{"suck"},{"dick"},{" ass "},{"motherfucker"},{"fucker"},{"madafaka"},{"mather"},{"mother"},{"omak"},{"puta"}
};
BadWord(text[])
{
	new sz = sizeof(BadWords);
	for(new s = 0; s < sz; s++)
	{
		new pos;
		while((pos = strfind(text,BadWords[s],true)) != -1) for(new teex = pos, j = pos + strlen(BadWords[s]); teex < j; teex++) {  text[teex] = '*'; }
	}
}
CMD:v(playerid,params[])
{
	if(PlayerInfo[playerid][dRank] == 0) return SendClientMessage(playerid,Dred,"|ERROR|: You are not a vip");
	new str[144];
	format(str, _, "{FFFF00}[VIP Chat: %s] %s", PlayerInfo[playerid][Nick], params);
	foreach(new i : Player) if(PlayerInfo[i][dRank] > 0) SendClientMessage(i,-1,str);
	return 1;
}


IsCharNumeric(c)
{
	if(c>='0'&&c<='9')return 1;
	return 0;
}
/*

TagScan(chat[])
{
	new
		text[256],
		length,
		a,
		tags;

	strcpy(text, chat, 256);
	length = strlen(chat);

	while(a < (length - 1) && tags < 3)
	{
		if(text[a]=='@')
		{
			if(IsCharNumeric(text[a+1]))
			{
				new
					id,
					tmp[3];

				strmid(tmp, text, a+1, a+3);
				id = strval(tmp);

				if(IsPlayerConnected(id))
				{
					new
						tmpName[33];
					GetPlayerName(id, tmpName, 24);
					new string[9];
					switch(gTeam[id])
					{

						case TEAM_USA: string = "{0080C0}";
						case TEAM_ARAB: string = "{FF8000}";
						case TEAM_AUS: string = "{972FFF}";
						case TEAM_SOVIET: string = "{FF3333}";
						case TEAM_EURASIA: string ="{49FE80}";
						case TEAM_CH: string = "{03FCFC}";
						case TEAM_ID: string = "{008040}";
						case TEAM_FRANCE: string ="{923E34}";
						case TEAM_MERC: string = "{FFFFFF}";
					}
					strins(tmpName[0], string, 0);
					if(id<10)
						strdel(text[a], 0, 2);

					else
						strdel(text[a], 0, 3);

					strins(text[a], tmpName, 0);

					length += strlen(tmpName);
					a += strlen(tmpName);
					tags++;
					continue;
				}
				else a++;
			}
			else a++;
		}
		else a++;
	}
	return text;
}*/
public OnPlayerText(playerid, text[])
{
	if(!PlayerInfo[playerid][LoggedIn]) return 0;
	/*format(text, 256, TagScan(text));*/
	if(GetTickCount() - chattick[playerid] < 1000) {  SendClientMessage(playerid, red, "Please don't spam the chat."); return 0;}
	chattick[playerid] = GetTickCount();
	new string[144],playername[32];
	strcat(playername, PlayerInfo[playerid][Nick]);
	if(IsAdvertisement(text))
	{
		SendClientMessageToAll(COLOR_YELLOW, "%s has been kicked for advertising a server.", playername);
		Kick(playerid);
		return 0;
	}
	new chat[256];
	strcpy(chat, text, 256);
	if(PlayerInfo[playerid][Level] == 0)
	{

		if(strfind(chat,"hack",true) != -1) { SendClientMessage(playerid,yellow,"<!> Please use /report [id] [reason] !"); return 0;}
		if(strfind(chat,"hacker",true) != -1) { SendClientMessage(playerid,yellow,"<!> Please use /report [id] [reason] !"); return 0;}
		if(strfind(chat,"hax",true) != -1) { SendClientMessage(playerid,yellow,"<!> Please use /report [id] [reason] !"); return 0;}
		if(strfind(chat,"cheat",true) != -1) { SendClientMessage(playerid,yellow,"<!> Please use /report [id] [reason] !"); return 0;}
		if(strfind(chat,"cheater",true) != -1) { SendClientMessage(playerid,yellow,"<!> Please use /report [id] [reason] !"); return 0;}
		if(ServerInfo[AntiSpam] == 1)
		{

			if(PlayerInfo[playerid][SpamCount] == 0) PlayerInfo[playerid][SpamTime] = TimeStamp();
			PlayerInfo[playerid][SpamCount]++;
			if(TimeStamp() - PlayerInfo[playerid][SpamTime] > SPAM_TIMELIMIT) {
				PlayerInfo[playerid][SpamCount] = 0;
				PlayerInfo[playerid][SpamTime] = TimeStamp();
			}
			else if(PlayerInfo[playerid][SpamCount] == SPAM_MAX_MSGS) {
				PlayerInfo[playerid][Muted] = true;
				PlayerInfo[playerid][MuteTime] = 50;
			}
			else if(PlayerInfo[playerid][SpamCount] == SPAM_MAX_MSGS-1) {
				SendClientMessage(playerid,Dred,"[WARNING] You are spamming, wait for few seconds before chatting again.");
				GameTextForPlayer(playerid,"~r~Spam Warning",5000,3);
				return 0;
			}
		}
		new sz = sizeof(BadWords);
		for(new s = 0; s < sz; s++)
		{
			new pos;
			while((pos = strfind(chat,BadWords[s],true)) != -1) for(new i = pos, j = pos + strlen(BadWords[s]); i < j; i++) { chat[i] = '*'; }
		}
	}
	new length,a,tags;
	length = strlen(chat);
	while(a < (length - 1) && tags < 3)
	{
		if(chat[a]=='@')
		{
			if(IsCharNumeric(chat[a+1]))
			{
				new
					id,
					tmp[3];

				strmid(tmp, chat, a+1, a+3);
				id = strval(tmp);

				if(IsPlayerConnected(id))
				{
					new
						tmpName[24];
					GetPlayerName(id, tmpName, 24);
					/*new stringg[9];
					switch(gTeam[id])
					{

						case TEAM_USA: stringg = "{0080C0}";
						case TEAM_ARAB: stringg = "{FF8000}";
						case TEAM_AUS: stringg = "{972FFF}";
						case TEAM_SOVIET: stringg = "{FF3333}";
						case TEAM_EURASIA: stringg ="{49FE80}";
						case TEAM_CH: stringg = "{03FCFC}";
						case TEAM_ID: string = "{008040}";
						case TEAM_FRANCE: stringg ="{923E34}";
						case TEAM_MERC: stringg = "{FFFFFF}";
					}
					strins(tmpName, stringg, 0);*/
					if(id<10)
						strdel(chat[a], 0, 2);

					else
						strdel(chat[a], 0, 3);

					strins(chat[a], tmpName, 0);
					

					length += strlen(tmpName);
					a += strlen(tmpName);
					tags++;
					continue;
				}
				else a++;
			}
			else a++;
		}
		else a++;
	}
	if(IsSpectator[playerid])
	{
	    format(string, _, "%s: %s", playername, chat[0]);
	    foreach(new i : Player) if(IsSpectator[i]) SendClientMessage(i, -1, string);
	    return 0;
	}
	if(Bit_Get(ToggleState[playerid], TOGGLE_CLANTAG))
	{
		if(PlayerInfo[playerid][InClan] != -1)
		{

			new ctagg[9];
			format(ctagg, 9, "[%s]", cTag[playerid]);
			if(strfind(playername, ctagg, true) == -1)
			{
				if(strcmp(playername, "[", false, 1)) format(playername, _, "%s%s", ctagg, playername);
				else format(playername, _, "%s%s", playername, ctagg);
			}
		}
	}
	if(chat[0] == '.')
	{

		if(PlayerInfo[playerid][Level] > 0)
		{

			format(string, _, "[A.Chat]:[%d] %s: %s", PlayerInfo[playerid][Level], playername, chat[1]);
			MessageToAdmins(0xFF80FFFF,string);
			return 0;
		}
	}
	else if(chat[0] == ',')
	{

		if(PlayerInfo[playerid][Level] > 4)
		{

			format(string, _, "[L5.Chat]: %s: %s", playername, chat[1]);
			MessageTo5(0x80FF80FF,string);
			return 0;
		}
	}
	else if(chat[0] == '$')
	{

		if(PlayerInfo[playerid][Level] > 5)
		{

			format(string, _, "[HR.Chat]: %s: %s", playername, chat[1]); MessageTo6(0x80FF80FF,string);
			return 0;
		}
	}
	else if(chat[0] == '!')
	{

		if(PlayerInfo[playerid][InClan] != -1)
		{
            if(PlayerInfo[playerid][CMuted])
            {
                ERR(playerid, "You are clan muted.");
                return 0;
            }
			format(string, _, "[Clan] %s %s: %s", cRankName[playerid], playername,chat[1]);
			ClanMSG(PlayerInfo[playerid][InClan],string);
			return 0;
		}
	}
	if(ServerInfo[DisableChat] == 1) {
		SendClientMessage(playerid,red,"Chat has been disabled");
		return 0;
	}
	if(PlayerInfo[playerid][Muted])
	{

		PlayerInfo[playerid][MuteWarnings]++;
		if(PlayerInfo[playerid][MuteWarnings] < ServerInfo[MaxMuteWarnings]) {
			SendClientMessage(playerid, red, "Server: You are muted, if you continue to speak you will be kicked. (%d/%d)", PlayerInfo[playerid][MuteWarnings], ServerInfo[MaxMuteWarnings]);
		} else {
			if(!AlreadyKicked[playerid])
			{
                AlreadyKicked[playerid] = true;
				SendClientMessage(playerid, red, "You have been warned ! Now you have been kicked");
				SendClientMessageToAll(grey, "Server has kicked %s (ID %d) (Exceed Mute Warnings)", playername, playerid);
				KickX(playerid);
			}
		} return 0;
	}
	if(ServerInfo[NoCaps]) UpperToLower(chat);

	format(string, _, "[lchat]%s: %s", playername, chat[0]);
	if(InArena(playerid, EDM))
	{
	    foreach(new i : Player)
	    {
	        if(!IsSpectator[i])
	        {
	            SendClientMessage(i, COLOR_ROYAL, "[DM][%i]%s: %s", playerid, playername, chat[0]);
	        }
	    }
		return 0;
	}
	else if(InArena(playerid, MDM))
	{
	    foreach(new i : Player)
	    {
	        if(!IsSpectator[i])
	        {
	            SendClientMessage(i, COLOR_ROYAL, "[MDM][%i]%s: %s", playerid, playername, chat[0]);
	        }
	    }
		return 0;
	}
	else if(InArena(playerid, CBDM))
	{
	    foreach(new i : Player)
	    {
	        if(!IsSpectator[i])
	        {
	            SendClientMessage(i, COLOR_ROYAL, "[CBDM][%i]%s: %s", playerid, playername, chat[0]);
	        }
	    }
		return 0;
	}
	else if(InArena(playerid, HSDM))
	{
	    foreach(new i : Player)
	    {
	        if(!IsSpectator[i])
	        {
	            SendClientMessage(i, COLOR_ROYAL, "[HSDM][%i]%s: %s", playerid, playername, chat[0]);
	        }
	    }
		return 0;
	}
	else if(InArena(playerid, CHDM))
	{
	    foreach(new i : Player)
	    {
	        if(!IsSpectator[i])
	        {
	            SendClientMessage(i, COLOR_ROYAL, "[CHDM][%i]%s: %s", playerid, playername, chat[0]);
	        }
	    }
		return 0;
	}
	else if(InArena(playerid, SDM))
	{
	    foreach(new i : Player)
	    {
	        if(!IsSpectator[i])
	        {
	            SendClientMessage(i, COLOR_ROYAL, "[SDM][%i]%s: %s", playerid, playername, chat[0]);
	        }
	    }
		return 0;
	}
	else if(Iter_Contains(PUBGEvent, playerid))
	{
	    foreach(new i : Player)
	    {
	        if(!IsSpectator[i])
	        {
	            SendClientMessage(i, COLOR_ROYAL, "[PUBG][%i]%s: %s", playerid, playername, chat[0]);
	        }
	    }
		return 0;
	}
	if(PlayerInfo[playerid][OnDuty])
	{

		SendClientMessageToAll(COLOR_PINK,"Admin %s: %s",playername,chat);
		return 0;
	}
	switch(gTeam[playerid])
	{

		case TEAM_USA: string = "{0080C0}";
		case TEAM_ARAB: string = "{FF8000}";
		case TEAM_AUS: string = "{972FFF}";
		case TEAM_SOVIET: string = "{FF3333}";
		case TEAM_EURASIA: string ="{49FE80}";
		case TEAM_CH: string = "{03FCFC}";
		case TEAM_ID: string = "{008040}";
		case TEAM_FRANCE: string ="{923E34}";
		case TEAM_MERC: string = "{FFFFFF}";
	}
    if(Iter_Contains(PUBGEvent, playerid)) string = "{FFFFFF}";
	new vrk = PlayerInfo[playerid][dRank];
	if(PlayerInfo[playerid][Streamer] == 1) format(string, _,"{FF3778}[STREAMER]%s%s[%d]: %s",string,playername,playerid,chat);
	else if(vrk < 1) format(string, _,"%s%s[%d]: {FFFFFF}%s",string,playername,playerid,chat);
	else if(vrk == 6) format(string, _,"{FFFF00}[SPONSOR]%s%s[%d]: %s",string,playername,playerid,chat);
	else format(string, _,"{FFFF00}[VIP]%s%s[%d]: %s",string,playername,playerid,chat);
	foreach(new i : Player)
	{
		if(IsSpectator[i]) continue;
		SendClientMessage(i, -1, string);
	}
	return 0;
}

forward StrikeEnd(playerid);
public StrikeEnd(playerid)
{
	strikingplayer = -1;
	SendClientMessage(playerid, -1, "Striking operation has been canceled as you did not choose the position within 15 seconds.");
	return 1;
}

forward StrikeCoolDown();
public StrikeCoolDown()
{
	StrikeCooled = false;
	strikingplayer = -1;
	SendClientMessageToAll(COLOR_BLUE, "Airstrike weapons are ready to launch again.");
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(LastPickid[playerid] != -1)
	{
		if(LastPickid[playerid] != pickupid)
		{
		    if((GetTickCount() - LastPickTime[playerid]) < 200)
		    {
				new str[150];
				format(str, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) was kicked for using pickup spam hacks (s0beit server lag).", PlayerInfo[playerid][Nick], playerid);
				AntiCheatNotification(-1, str);
				return Kick(playerid);
		    }
		}
	}
	LastPickid[playerid] = pickupid;
	LastPickTime[playerid] = GetTickCount();
	if(pickupid == AirstrikeP)
	{
		if(!CBaseOwnershipCheck(playerid)) return SendClientMessage(playerid, RED, "Your clan should own clan island to use clan base airstrike missles.");
		if(StrikeCooled) return SendClientMessage(playerid, RED, "Please wait 1 minute after the last Airstrike Attack.");
		if(GetPlayerMoney(playerid) < 300000) return SendClientMessage(playerid, RED, "Your need 300.000 $ to launch a Airstrike Attack.");
		if(strikingplayer != -1)  return SendClientMessage(playerid, RED, "A player is already attempting an Airstrike.");
		SendClientMessage(playerid, -1, "Open game options, go to your map and right click on the zone you want to nuke within 15 seconds.");
		SendClientMessage(playerid, -1, "NOTE: You will not get any kill if you airstrike players in their bases.");
		strikingplayer = playerid;
		StrikeWait = SetTimerEx("StrikeEnd", 15000, false, "i", playerid);
	}
	else if(pickupid == SP1 || pickupid == SP2 || pickupid == SP3 || pickupid == SP4 || pickupid == SP5 || pickupid == SP6) return ShowDialog(playerid), PlayerPlaySound(playerid, 1058, 0, 0,0);
	else if(pickupid == RP)
	{
		if(GetPlayerTeam(playerid) != TEAM_SOVIET) return SendClientMessage(playerid, 0xFF0000AA, "Only Soviet players can use this briefcase.");
		ShowDialog(playerid);
		return 1;
	}
	else if(pickupid == EP)
	{
		if(GetPlayerTeam(playerid) != TEAM_EURASIA) return SendClientMessage(playerid, 0xFF0000AA, "Only Eurasian players can use this briefcase.");
		ApplyActorAnimation(seller5, "DEALER", "DEALER_DEAL", 3.0, false, false, false, false, 0); // Deal Drugs
		ShowDialog(playerid);
		return 1;
	}
	else if(pickupid == AP)
	{
		if(GetPlayerTeam(playerid) != TEAM_ARAB) return SendClientMessage(playerid, 0xFF0000AA, "Only Arabian players can use this briefcase.");
		ApplyActorAnimation(seller4, "DEALER", "DEALER_DEAL", 3.0, false, false, false, false, 0); // Deal Drugs
		ShowDialog(playerid);
		return 1;
	}
	else if(pickupid == A2P)
	{
		if(GetPlayerTeam(playerid) != TEAM_AUS) return SendClientMessage(playerid, 0xFF0000AA, "Only Australian players can use this briefcase.");
		ApplyActorAnimation(seller2, "DEALER", "DEALER_DEAL", 3.0, false, false, false, false, 0); // Deal Drugs
		ShowDialog(playerid);
		return 1;
	}
	else if(pickupid == MP)
	{
		if(GetPlayerTeam(playerid) != TEAM_USA) return SendClientMessage(playerid, 0xFF0000AA, "Only USA players can use this briefcase.");
		ApplyActorAnimation(seller, "DEALER", "DEALER_DEAL", 3.0, false, false, false, false, 0); // Deal Drugs
		ShowDialog(playerid);
		return 1;
	}
	else if(pickupid == CHP)
	{
		if(GetPlayerTeam(playerid) != TEAM_CH) return SendClientMessage(playerid, 0xFF0000AA, "Only Brazil players can use this briefcase.");
		ApplyActorAnimation(seller6, "DEALER", "DEALER_DEAL", 3.0, false, false, false, false, 0); // Deal Drugs
		ShowDialog(playerid);
		return 1;
	}
	else if(pickupid == IDP)
	{
		if(GetPlayerTeam(playerid) != TEAM_ID) return SendClientMessage(playerid, 0xFF0000AA, "Only Taliban players can use this briefcase.");
		ApplyActorAnimation(seller7, "DEALER", "DEALER_DEAL", 3.0, false, false, false, false, 0); // Deal Drugs
		ShowDialog(playerid);
		return 1;
	}
	else if(pickupid == FRP)
	{
		if(GetPlayerTeam(playerid) != TEAM_FRANCE) return SendClientMessage(playerid, 0xFF0000AA, "Only France players can use this briefcase.");
		ApplyActorAnimation(seller3, "DEALER", "DEALER_DEAL", 3.0, false, false, false, false, 0); // Deal Drugs
		ShowDialog(playerid);
		return 1;
	}
	else if(pickupid == CBPick)
	{
		if(!CBaseOwnershipCheck(playerid)) return SendClientMessage(playerid, 0xFF0000AA, "Only Clan Base members can use this briefcase.");
		ShowDialog(playerid);
		return 1;
	}
	else if(pickupid == AirCPick)
	{
		ShowDialog(playerid);
		return 1;
	}
	else if(pickupid == AirPick) // Area 51 Nuclear bomb
	{
		if(gTeam[playerid] == TEAM_MERC) return SendClientMessage(playerid,Dred," Mercenaries can't launch nuclear bombs.");
		if(AirON == 1) return SendClientMessage(playerid,Dred," The Nuclear bomb has been recently used, please try again later.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,Dred,"You need to be onfoot to use NUKE.");
		if(tCP[BIG] != GetPlayerTeam(playerid)) return SendClientMessage(playerid,Dred,"Your team must own Area 51 To use the Nuclear bomb");
		if(GetPlayerScore(playerid) < 2500) return SendClientMessage(playerid,Dred,"You need to be atleast a Colonel (2500 score) to use the Nuclear bomb");
		if(GetCash(playerid) < 200000) return SendClientMessage(playerid,Dred," You need to have $200000 To use the Nuclear bomb");
		ShowPlayerDialog(playerid, 9374, DIALOG_STYLE_LIST, "{FFFFFF}Nuclear Bomb {FFFFFF}Cost :{45FF00} 200000$", "{FFFFFF}Usa\nArabia \nAustralia\nEurasia\nSoviet\nBrazil\nTaliban\nFrance", "Launch", "Cancel");
	}
	else if(pickupid == Air2Pick) // Area 51 Nuclear bomb
	{
		if(gTeam[playerid] == TEAM_MERC) return SendClientMessage(playerid,Dred," Mercenaries can't launch nuclear bombs.");
		if(Air2ON == 1) return SendClientMessage(playerid,Dred," The Space Nuclear bomb has been recently used, please try again later.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,Dred,"You need to be onfoot to use NUKE.");
		if(tCP[SPS] != GetPlayerTeam(playerid)) return SendClientMessage(playerid,Dred,"Your team must own Space Station To use the Space Nuclear bomb");
		if(GetPlayerScore(playerid) < 2500) return SendClientMessage(playerid,Dred,"You need to be atleast a Colonel (2500 score) to use the Nuclear bomb");
		if(GetCash(playerid) < 200000) return SendClientMessage(playerid,Dred," You need to have $200000 To use the Nuclear bomb");
		new Float:xx, Float:yy, Float:zz, Float:ww;
		new ZC[MAX_ZONES];
		new cat[1800];
		new x = PlayerInfo[playerid][InClan];
		strcat(cat, "Zone\tEnemies\n");
		for(new i = 0; i < MAX_ZONES; i++)
		{
		    xx = ZonesGangCoords[i][0]; zz = ZonesGangCoords[i][2]; yy = ZonesGangCoords[i][1]; ww = ZonesGangCoords[i][3];
		    foreach(new j: Player)
		    {
		        if(x != -1) if(PlayerInfo[j][InClan] == x) goto habibi;
		        if(gTeam[j] != gTeam[playerid])
		        {
		        	if(!PlayerInfo[j][OnDuty])
					{
						if(!sttt[j])
						{
							if(!PlayerInfo[j][FirstCon])
							{
							    if(GetPlayerState(j) != PLAYER_STATE_SPECTATING)
							    {
							    	if(IsPlayerInArea(j, xx,yy,zz,ww))
									{
									    ZC[i]++;
									}
								}
				            }
				        }
					}
				}
				habibi: {}
		    }
		    format(cat, _, "%s%s\t%d\n", cat, ZName(i), ZC[i]);
		}
		ShowPlayerDialog(playerid, NUKE2_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Space Nuclear Bomb {FFFFFF}Cost :{45FF00} 200000$", cat, "Launch", "Cancel");
	}
	else if(pickupid == LocatorPick) // Area 52 Nuclear bomb
	{
		if(gTeam[playerid] == TEAM_MERC) return SendClientMessage(playerid,Dred," Mercenaries can't use Locator.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,Dred,"You need to be onfoot to use Locator.");
		if(tCP[A52] != GetPlayerTeam(playerid)) return SendClientMessage(playerid,Dred,"Your team must own Area 52 To use the Locator");
		PlayerPlaySound(playerid, 41603, 0.0, 0.0, 0.0);
		new USAL, ARL, EURL, FRL, TALIBL, BRL, SOVL, AUSL;
		foreach(new i : Player)
		{
		    if(gTeam[i] != gTeam[playerid])
		    {
		        if(!PlayerInfo[i][OnDuty])
		        {
		            if(IsPlayerInArea(i, 994.1957, 1817.512, 1185.533, 2049.596)) EURL++;
		            if(IsPlayerInArea(i, -875.8406, 1389.667, -607.2495, 1623.225)) ARL++;
		            if(IsPlayerInArea(i, -309.375,1024.21875,103.125,1211.71875)) SOVL++;
		            if(IsPlayerInArea(i, -353.515625,2574.21875,-113.28125,2796.875)) USAL++;
		            if(IsPlayerInArea(i, 89.0625,2418.75,466.40625,2617.96875)) AUSL++;
		            if(IsPlayerInArea(i, -769.520507, 808.620483, -633.520507, 1056.620483)) BRL++;
		            if(IsPlayerInArea(i, 929.864990, 2536.129150, 1241.864990, 2720.129150)) TALIBL++;
		            if(IsPlayerInArea(i, -1658.203125, 2519.53125, -1341.796875, 2759.765)) FRL++;
		        }
		    }
		}
		ShowPlayerDialog(playerid, LOCATOR_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFD6}Area 52 {8000ED}Local", "\n{0084C0}USA: {FFFFD6}%d targets\n{FFC900}Arabia: {FFFFD6}%d targets\n{4FF54F}Eurasia: {FFFFD6}%d targets\n{9D4800}France: {FFFFD6}%d targets\n{00995A}Taliban: {FFFFD6}%d targets\n{2DF1FF}Brazil: {FFFFD6}%d targets\n{FF0000}Soviet: {FFFFD6}%d targets\n{8000ED}Australia: {FFFFD6}%d targets", "OK", "Refresh", USAL, ARL, EURL, FRL, TALIBL, BRL, SOVL, AUSL);
	}
	else if(pickupid == FlashPick)
	{
		if(gTeam[playerid] == TEAM_MERC) return SendClientMessage(playerid,Dred," Mercenaries can't use Locator.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,Dred,"You need to be onfoot to use the Flash Bomb.");
		if(FlashON == 1) return SendClientMessage(playerid,Dred," The Flash Bomb has been recently used, please try again later.");
		if(tCP[A52] != GetPlayerTeam(playerid)) return SendClientMessage(playerid,Dred,"Your team must own Area 52 To use the Flash Bomb.");
		if(GetPlayerMoney(playerid) < 30000) return ERR(playerid, "You need $30.000 to use the Flash Bomb.");
		ShowPlayerDialog(playerid, FLASH_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFD6}Area 52 {8000ED}Flash Bomb", "\n\nFlash all enemies in Area 52?\n\nCost: $100000", "Flash", "Cancel");
	}
	else if(pickupid == ParaPick)
	{
		if(gTeam[playerid] == TEAM_MERC) return SendClientMessage(playerid,Dred," Mercenaries can't Base Jump.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,Dred,"You need to be onfoot to use the Base Jump.");
		if(tCP[A52] != GetPlayerTeam(playerid)) return SendClientMessage(playerid,Dred,"Your team must own Area 52 to do a Base Jump.");
		if(GetPlayerMoney(playerid) < 10000) return ERR(playerid, "You need $10.000 to do a Base Jump.");
		ShowPlayerDialog(playerid, BASEJUMP_DIALOG, DIALOG_STYLE_LIST, "{FFFFD6}Area 52 {8000ED}Base Jump ($10.000)", "{FFFFFF}Usa\nArabia\nAustralia\nEurasia\nSoviet\nBrazil\nTaliban\nFrance", "Go", "Cancel");
	}
	else if(pickupid == CMDPickup)
	{
		if(playerid == airvehdriver) return 1;
		if(ZepDialog[playerid]) return 1;
		if((GetTickCount() - CMDPickuptick[playerid]) < 6000) return 1;
		CMDPickuptick[playerid] = GetTickCount();
		new cat[250], gt = gTeam[playerid];
		strcat(cat, "{FFFFFF}Remote AirStrike  Control System (RACS){FF0000}\t{FFFFFF}Cost :{45FF00} 50XP\n{FFFFFF}Base Defence (");
		new CMDBaseDeftic = CMDBaseDeftick[gt];
		if((GetTickCount() - CMDBaseDeftic) < 3600000)
		{
		    new rem = 3600 - ((GetTickCount() - CMDBaseDeftic)/1000);
			new seconds = rem % 60;
			new  minutes = (rem-seconds) /60;
		    format(cat, _, "%sAvailable in %d:%d", cat, minutes, seconds);
		} else strcat(cat, "Available Now");
		strcat(cat, ")\t{FFFFFF}Cost :{45FF00} 70XP\n");
		if(ZP_Available[gt]) strcat(cat, "{FFFFFF}Zeppelin (Available){FF0000}\t{FFFFFF}Cost :{45FF00} 250XP");
		else strcat(cat, "{FFFFFF}Zeppelin (In Use){FF0000}\t{FFFFFF}Cost :{45FF00} 250XP");
		ShowPlayerDialog(playerid, CMDCENTER_DIALOG, DIALOG_STYLE_LIST, "Command Center", cat, "Select", "Close");
	}
	return 1;
}

forward StopTheEffect(playerid);
public StopTheEffect(playerid)
{
	ClearAnimations(playerid, SYNC_ALL);
	return 1;
}

forward DecreaseFlash(playerid);
public DecreaseFlash(playerid)
{
	if(WhiteLevel[playerid]>0)
	{

		switch(WhiteLevel[playerid])
		{

			case 10:
			{

				PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFFE6);
				PlayerTextDrawShow(playerid, FlashTD[playerid]);
			}
			case 9:
			{

				PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFFCD);
				PlayerTextDrawShow(playerid, FlashTD[playerid]);
			}
			case 8:
			{

				PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFFB4);
				PlayerTextDrawShow(playerid, FlashTD[playerid]);
			}
			case 7:
			{

				PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFF9B);
				PlayerTextDrawShow(playerid, FlashTD[playerid]);
			}
			case 6:
			{

				PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFF82);
				PlayerTextDrawShow(playerid, FlashTD[playerid]);
			}
			case 5:
			{

				PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFF69);
				PlayerTextDrawShow(playerid, FlashTD[playerid]);
			}
			case 4:
			{

				PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFF50);
				PlayerTextDrawShow(playerid, FlashTD[playerid]);
			}
			case 3:
			{

				PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFF37);
				PlayerTextDrawShow(playerid, FlashTD[playerid]);
			}
			case 2:
			{

				PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFF1E);
				PlayerTextDrawShow(playerid, FlashTD[playerid]);
			}
			case 1:
			{

				PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFF05);
				PlayerTextDrawShow(playerid, FlashTD[playerid]);
			}
		}
		WhiteLevel[playerid]--;
		SetTimerEx("DecreaseFlash", 500, false, "d", playerid);
	}
	else
	{

		PlayerTextDrawHide(playerid, FlashTD[playerid]);
		PlayerTextDrawBoxColour(playerid, FlashTD[playerid], 0xFFFFFFFF);
		UpdateLabelText(playerid);
	}
	return 1;
}

SpectateOn(playerid)
{
	TogglePlayerSpectating(playerid, true);
	foreach(new i : ALIVE1)
	{
		SpectatedPlayer[playerid] = i;
		PlayerSpectatePlayer(playerid, i);
		break;
	}
	new spc = SpectatedPlayer[playerid];
	IsPlayerSpectating[playerid] = true;
	SendClientMessage(playerid, colorSPECTATE, "You are now spectating %s (ID:%d). Press fire button to spectate next player. Please Press Aim button if spectate is bugged.", PlayerInfo[spc][Nick], spc);
}

SpectateNext(playerid)
{
	new bool:canspec, team;
	if(Iter_Contains(JOINED1, SpectatedPlayer[playerid])) team = 1;
	else team = 2;
	if(team == 1)
	{
		foreach(new i: ALIVE1)
		{

			if(i>SpectatedPlayer[playerid])
			{

				PlayerSpectatePlayer(playerid, i);
				SpectatedPlayer[playerid] = i;
				canspec = true;
				break;
			}
		}
		if(!canspec)
		{
			foreach(new i : ALIVE2)
			{
				SpectatedPlayer[playerid] = i;
				PlayerSpectatePlayer(playerid, i);
				canspec = true;
				break;
			}
		}
		if(!canspec)
		{
			foreach(new i : ALIVE1)
			{
				SpectatedPlayer[playerid] = i;
				PlayerSpectatePlayer(playerid, i);
				break;
			}
		}
	}
	else
	{
		foreach(new i: ALIVE2)
		{
			if(i>SpectatedPlayer[playerid])
			{
				PlayerSpectatePlayer(playerid, i);
				SpectatedPlayer[playerid] = i;
				canspec = true;
				break;
			}
		}
		if(!canspec)
		{
			foreach(new i : ALIVE1)
			{
				SpectatedPlayer[playerid] = i;
				PlayerSpectatePlayer(playerid, i);
				canspec = true;
				break;
			}
		}
		if(!canspec)
		{
			foreach(new i : ALIVE2)
			{
				SpectatedPlayer[playerid] = i;
				PlayerSpectatePlayer(playerid, i);
				break;
			}
		}
	}
}

SpectateNext2(playerid)
{
	new bool:canspec, team;
	if(Iter_Contains(JOINED1, SpectatedPlayer2[playerid])) team = 1;
	else team = 2;
	if(team == 1)
	{
		foreach(new i: ALIVE1)
		{
			if(i>SpectatedPlayer2[playerid])
			{
				PlayerSpectatePlayer(playerid, i);
				SpectatedPlayer2[playerid] = i;
				canspec = true;
				break;
			}
		}
		if(!canspec)
		{
			foreach(new i : ALIVE2)
			{
				SpectatedPlayer2[playerid] = i;
				PlayerSpectatePlayer(playerid, i);
				canspec = true;
				break;
			}
		}
		if(!canspec)
		{
			foreach(new i : ALIVE1)
			{
				SpectatedPlayer2[playerid] = i;
				PlayerSpectatePlayer(playerid, i);
				break;
			}
		}
 	}
	else
	{
		foreach(new i: ALIVE2)
		{
			if(i>SpectatedPlayer2[playerid])
			{
				PlayerSpectatePlayer(playerid, i);
				SpectatedPlayer2[playerid] = i;
				canspec = true;
				break;
			}
		}
		if(!canspec)
		{
			foreach(new i : ALIVE1)
			{
				SpectatedPlayer2[playerid] = i;
				PlayerSpectatePlayer(playerid, i);
				canspec = true;
				break;
			}
		}
		if(!canspec)
		{
			foreach(new i : ALIVE2)
			{
				SpectatedPlayer2[playerid] = i;
				PlayerSpectatePlayer(playerid, i);
				break;
			}
		}
	}
}

forward syncanim(playerid);
public syncanim(playerid)
{
	if(GetPVarInt(playerid,"roped") == 0) return 0;
	if(Tryg3D::GetPlayerSpeed(playerid) == 0.0)
	{
	 	SetPVarInt(playerid,"roped",0);
        SetPVarInt(playerid,"chop_id",0);
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid,false);
        TogglePlayerControllable(playerid,true);
        DestroyDynamicCP(RopeCP[playerid]);
        SetPlayerHealth(playerid, LastHP[playerid], LastAR[playerid]);
        for(new destr4=0;destr4<ropelength;destr4++) { DestroyDynamicObject(r0pes[playerid][destr4]); r0pes[playerid][destr4] = -1; }
        return 0;
	}
	SetTimerEx("syncanim",dur,false,"i",playerid);
	ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
	return 1;
}

public OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys)
{
    new tt = gTeam[playerid];
    if(SeeingCT[playerid])
	{
        SeeingCT[playerid] = false;
		TextDrawHideForPlayer(playerid, CT_BOX);
		TextDrawHideForPlayer(playerid, CT_PRIZE);
		TextDrawHideForPlayer(playerid, CT_WINNER_TD);
		TextDrawHideForPlayer(playerid, CT_INFO_TD);
		TextDrawHideForPlayer(playerid, CT_QUARTER[0]);
		TextDrawHideForPlayer(playerid, CT_QUARTER[1]);
		TextDrawHideForPlayer(playerid, CT_QUARTER[2]);
		TextDrawHideForPlayer(playerid, CT_QUARTER[3]);
		TextDrawHideForPlayer(playerid, CT_SEMI[0]);
		TextDrawHideForPlayer(playerid, CT_SEMI[1]);
		TextDrawHideForPlayer(playerid, CT_FINALS);
		TextDrawHideForPlayer(playerid, CT_INFO_TD_2);
	}
	if(newkeys & KEY_NO)
	{
	    if(PlayerInfo[playerid][Level] >= 3 && PlayerInfo[playerid][namekey])
	    {
	        cmd_namerequests(playerid);
	    }
	}
	if(newkeys & KEY_FIRE)
	{
		if(inclantd[playerid])
		{
		    TextDrawHideForPlayer(playerid, ClanBar1);
			TextDrawHideForPlayer(playerid, ClanBar2);
			TextDrawHideForPlayer(playerid, ClanTitle2);
			TextDrawHideForPlayer(playerid, ClanTitle1);
			PlayerTextDrawHide(playerid, ClanName[playerid]);
			PlayerTextDrawHide(playerid, ClanOwners[playerid]);
			PlayerTextDrawHide(playerid, ClanLine1[playerid]);
			PlayerTextDrawHide(playerid, ClanLine2[playerid]);
			PlayerTextDrawHide(playerid, ClanCoOwners[playerid]);
			PlayerTextDrawHide(playerid, ClanSlogan[playerid]);
			PlayerTextDrawHide(playerid, ClanLeaders[playerid]);
			HideCRLogo(playerid);
			HidePlayerProgressBar(playerid, CRBar[playerid]);
			inclantd[playerid] = false;
		}
	}
    if (newkeys & KEY_WALK)
    {
        if(GetPlayerWeapon(playerid) == WEAPON_M4 && IsPlayerAiming(playerid) && !UsingLauncher[playerid] && LauncherAmmo[playerid] > 0)
        {
            new
				Float:af = 0,
				Float:lz = 0,
				Float:pi = 0,
				Float:dz = 0,
				Float:ze = 0,
				Float:pw = 0,
				Float:wp = 0;

			UsingLauncher[playerid] = true;

			LauncherAmmo[playerid]--;

        	GetPlayerPos(playerid, GrenadeInfo[playerid][StartPointX], GrenadeInfo[playerid][StartPointY], GrenadeInfo[playerid][StartPointZ]);

			GetPlayerFacingAngle(playerid, af);

			GrenadeInfo[playerid][FinalPointX] = GrenadeInfo[playerid][StartPointX];

			GrenadeInfo[playerid][FinalPointY] = GrenadeInfo[playerid][StartPointY];

        	GrenadeInfo[playerid][StartPointX] += (PLAYER_DISTANCE * floatsin(-af, degrees));

            GrenadeInfo[playerid][StartPointY] += (PLAYER_DISTANCE * floatcos(-af, degrees));

            GrenadeInfo[playerid][FinalPointX] += (LAUNCH_DISTANCE * floatsin(-af, degrees));

            GrenadeInfo[playerid][FinalPointY] += (LAUNCH_DISTANCE * floatcos(-af, degrees));

			MapAndreas_FindZ_For2DCoord(GrenadeInfo[playerid][FinalPointX], GrenadeInfo[playerid][FinalPointY], GrenadeInfo[playerid][FinalPointZ]);

			if((0x5 - 0x3) + GrenadeInfo[playerid][StartPointZ] < GrenadeInfo[playerid][FinalPointZ])
			{
				GrenadeInfo[playerid][FinalPointZ] = GrenadeInfo[playerid][StartPointZ];
			}

	        GrenadeInfo[playerid][GrenadeID] = CreateObject(342, GrenadeInfo[playerid][FinalPointX]+1, GrenadeInfo[playerid][FinalPointY], GrenadeInfo[playerid][FinalPointZ], 0.0, 0.0, 0.0);

			GrenadeInfo[playerid][IsValidGrenade] = true;

			GrenadeInfo[playerid][Trajectory] = 0;

  			SetObjectPos(GrenadeInfo[playerid][GrenadeID], GrenadeInfo[playerid][StartPointX], GrenadeInfo[playerid][StartPointY], GrenadeInfo[playerid][StartPointZ]);

	        pi = VectorSize(GrenadeInfo[playerid][FinalPointX] - GrenadeInfo[playerid][StartPointX], GrenadeInfo[playerid][FinalPointY] - GrenadeInfo[playerid][StartPointY], 0x0);

	        dz = 0x2 * pi / (floatsqroot(0x2- (GrenadeInfo[playerid][FinalPointZ] - GrenadeInfo[playerid][StartPointZ])) / floatsqroot(0x2) + 1.0);

            lz = atan2(GrenadeInfo[playerid][FinalPointY] - GrenadeInfo[playerid][StartPointY], GrenadeInfo[playerid][FinalPointX] - GrenadeInfo[playerid][StartPointX]);

			GrenadeInfo[playerid][Trajectory] *= pi;

            wp = GrenadeInfo[playerid][Trajectory] * floatsin(lz, degrees);

			ze = 0x2 - floatpower(floatsqroot(0x2) * ((0x2 * GrenadeInfo[playerid][Trajectory] / dz) - 0x1), 0x2);

	        pw = GrenadeInfo[playerid][Trajectory] * floatcos(lz, degrees);

	        GrenadeInfo[playerid][Trajectory] /= pi;

			MoveObject(GrenadeInfo[playerid][GrenadeID], pw + GrenadeInfo[playerid][StartPointX], wp + GrenadeInfo[playerid][StartPointY], ze + GrenadeInfo[playerid][StartPointZ], 0x11);

	        GrenadeInfo[playerid][Trajectory] += (floatpower(0x11, 0x0) / 0xA);
        }
    }
    if(GetPVarInt(playerid,"roped") == 0 && GetPlayerVehicleSeat(playerid) != 0 && IsPlayerInAnyVehicle(playerid) && (newkeys & KEY_FIRE || newkeys == KEY_FIRE))
	{
		new vt = GetPlayerVehicleID(playerid);
		new mod = GetVehicleModel(vt);
		if(mod == chopperid || mod == chopperid2)
		{
		    new Float:XX,Float:YY, Float:ZZ, Float:WW,Float:RR;
			GetPlayerPos(playerid,XX,YY,ZZ);
			MapAndreas_FindZ_For2DCoord(XX, YY, WW);
		    RR = floatsub(ZZ,WW);
		    if(RR >= ropelength-40) return SendClientMessage(playerid,0xAA3333AA,"You are too scared to slide from this height");
		    if(RR <= 2) return RemovePlayerFromVehicle(playerid);
		    SetPVarInt(playerid,"roped",1);
			GetPlayerHealth(playerid, LastHP[playerid]);
			GetPlayerArmour(playerid, LastAR[playerid]);
			RopeCP[playerid] = CreateDynamicCP(XX,YY,floatsub(ZZ,offsetz),3.0, -1, -1, playerid, 50);
	        SetPlayerPos(playerid,XX,YY,floatsub(ZZ,2));
	        SetPlayerHealth(playerid, 9999999.999);
	        SetPlayerVelocity(playerid,0,0,0);
			for(new rep=0;rep!=10;rep++) ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
			for(new cre=0;cre<=RR;cre++) r0pes[playerid][cre] = CreateDynamicObject(3004,XX,YY,floatadd(WW,cre),87.640026855469,342.13500976563, 350.07507324219);
			SetTimerEx("syncanim",dur,false,"i",playerid);
		}
	}
	if(GetPlayerWeapon(playerid) == WEAPON_DEAGLE)
	{
	    new amm = GetPlayerAmmo(playerid);
		if((newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) || (oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
			if(Ammo[playerid] > amm) OnPlayerCBug(playerid);
		}
		if(CheckCrouch[playerid] == 1) {
			if((newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK )
			{
				if(Ammo[playerid] > amm) OnPlayerCBug(playerid);
			}
		}
		else if(((newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP))) ||
		(newkeys & KEY_FIRE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP)) ||
		(NotMoving[playerid] && (newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE)) ||
		(NotMoving[playerid] && (newkeys & KEY_FIRE)) ||
		(newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ||
		(oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
			SetTimerEx("CrouchCheck", 3000, false, "d", playerid);
			CheckCrouch[playerid] = 1;
			Ammo[playerid] = amm;
			return 1;
		}
	}
	if(newkeys == KEY_FIRE)//Num6
	{
	    if(IsPlayerSpectating[playerid]) SpectateNext(playerid);
	    else if(IsSpectator[playerid]) SpectateNext2(playerid);
	}
	if(newkeys == KEY_AIM)//Num6
	{
		if(playerid == airvehdriver) SetPlayerArmedWeapon(playerid, WEAPON_FIST);
		if(IsPlayerSpectating[playerid])
		{
			SpectatedPlayer[playerid] = -1;
			IsPlayerSpectating[playerid] = false;
			TogglePlayerSpectating(playerid, false);
			SpectateOn(playerid);
		}
	}
	if(PRESSED(KEY_NO))
	{
	    if(tt < MAX_TEAMS-1)
		{
			if(ZeppelinDriver[tt] == playerid)
		    {
			    StopObject(BehemethObject[tt]);
				ZeppelinDriver[tt] = -1;
				InZeppelin[playerid] = 0;
				BehemethHp[tt] = 2500;
				KillTimer(ZPTimer[playerid]);
				HidePlayerProgressBar(playerid, ZP_CooldownBar[playerid]);
				HidePlayerProgressBar(playerid, ZP_HPBar[playerid]);
				ZP_Heat[tt] = 0;
				OnZP_HeatTimer[tt] = 0;
				ZP_Usable[tt] = 1;
				MoveObject(BehemethObject[tt], BehemSpawn[tt][0], BehemSpawn[tt][1], 150.00, 20, 0.0000, 0.0000, 0.0000);
				new Float:x, Float:y, Float:z; GetPlayerPos(playerid,x,y,z);
				SetPlayerPos(playerid,x,y,z-10);
				SetPlayerHealth(playerid, 100.00);
				ClearAnimations(playerid, SYNC_ALL);
				SetCameraBehindPlayer(playerid);
				GivePlayerWeapon(playerid, WEAPON_PARACHUTE, 1);
				SendClientMessage(playerid, -1, "Ejected from the Zeppelin.");
			}
		}
	}
	if(PRESSED(KEY_FIRE))
	{
	    if(Spectating[playerid] == 1) ReverseSpectate(playerid);
	    else if(InZeppelin[playerid] == tt)
	    {
	        if(IsValidObject(Missile[tt])) return 1;
	        if(!ZP_Usable[tt]) return 1;
	        new sz = sizeof(BASERAPE);
			for(new zo = 0; zo< sz; zo++) if(gTeam[playerid] == zo) if(IsPlayerInArea(playerid, BASERAPE[zo][MinXX], BASERAPE[zo][MinYY], BASERAPE[zo][MaxXX], BASERAPE[zo][MaxYY])) return GameTextForPlayer(playerid,"~r~Do not attack your own base!", 1000, 3);
	        new Float:x,Float:y,Float:z;
			PlayerPlaySound(playerid, 32600, 0,0,0);
			GetObjectPos(BehemethObject[tt],x,y,z);
			if(ZP_Heat[tt] < 90) ZP_Heat[tt] += 10;
			else
			{
			    ZP_Heat[tt] = 100;
			    SetPlayerProgressBarColour(playerid, ZP_CooldownBar[playerid], 0xFF0000FF);
			    ZP_Usable[tt] = 0;
			    PlayerPlaySound(playerid, 6402,0.0,0.0,0.0);
			}
			if(!OnZP_HeatTimer[tt]) { SetTimerEx("ZP_Unheat", 200, false, "i", tt); OnZP_HeatTimer[tt] = 1;}
			SetPlayerProgressBarValue(playerid, ZP_CooldownBar[playerid], ZP_Heat[tt]);
			Missile[tt] = CreateObject(3786,x,y,z-5,0,-90,264.1345,300);
			MapAndreas_FindZ_For2DCoord(x,y,z);
			MoveObject(Missile[tt], x,y,z, 150);
		}
		else if(playerid == airvehdriver)
		{
			if(explodewait) return 1;
			if(IsValidObject(testbomb)) return 1;
			if(!airused) return 1;
			new Float:x,Float:y,Float:z,Float:fx,Float:fy,Float:fz;
			GetObjectPos(aircraft,x,y,z);
			testbomb = CreateObject(1636,x,y,z,11.9,0,264.1345,300);
			Tryg3D::GetPointInFrontOfCamera3D(playerid,fx,fy,fz,1000,x,y);
			explodewait = true;
			explodetimer = SetTimer("WaitForExplod", 100, true);
			explodetolerance = SetTimer("TolerateExplode", 6000, false);
			MoveObject(testbomb, fx,fy,fz, 60);
			PlayerPlaySound(playerid, 1135,0,0,0);
		}
		else if(GetPlayerWeapon(playerid) == WEAPON_TEARGAS)
		{

			new gt = GetPlayerTeam(playerid);
			if(gClass[playerid] == SCOUT)
			{

				if(Tryg3D::GetPlayerSpeed(playerid) > 15.0) return 1;
				new Float:Mz[3];
				GetPlayerPos(playerid,Mz[0],Mz[1],Mz[2]);
				foreach(new i : Player)
				{

					if(gt != GetPlayerTeam(i))
					{

						if(IsPlayerInRangeOfPoint(i,30.0,Mz[0],Mz[1],Mz[2]))
						{
							Flashes[playerid] ++;
							if(QuestContent[2] == CONTENT_FBANG)
							{
							    QuestProgress[playerid][2] ++;
								if(Flashes[playerid] == 25)
							    {
							    	if(!Bit_Get(QuestDone[playerid], 2))
							    	{
							    	    Bit_Let(QuestDone[playerid], 2);
							    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 3 and got $50k & 100XP.");
							    	    TextDrawHideForPlayer(playerid,Quest[2]);
							    	    PlayerInfo[playerid][XP] += 100;
							    	    GiveCash(playerid, 50000);
							    	}
								}
							}
							PlayerTextDrawShow(i, FlashTD[i]);
							WhiteLevel[i] = 10;
							PlayAudioStreamForPlayer(i,"http://bit.ly/2tdhfWw");
							UpdateLabelText(i);
							SetPlayerDrunkLevel(i, 2500);
							SetTimerEx("DecreaseFlash", 600, false, "d", i);
						}
					}
				}
				return 1;
			}
			else
			{
				if(Tryg3D::GetPlayerSpeed(playerid) > 12.0) return 1;
				new tck = GetTickCount();
				if((tck - ready[playerid]) < 2000) return 1;
				new Float:Mz[3];
				GetPlayerPos(playerid,Mz[0],Mz[1],Mz[2]);
				ready[playerid] = tck;
				foreach(new i : Player)
				{
					if(gt != GetPlayerTeam(i))
					{
						if(PlayerInfo[i][Mask] == false)
						{
							if(HasJoined(i)) continue;
							if(IsPlayerInRangeOfPoint(i,6.0,Mz[0],Mz[1],Mz[2]))
							{
								ApplyAnimation(i, "ped", "gas_cwr", 4.1, false, true, true, false, 4000, SYNC_ALL);
							}
						}
					}
				}
			}
		}
	}
	if(PRESSED(KEY_HANDBRAKE))
	{
		if(Spectating[playerid] == 1) return AdvanceSpectate(playerid);
		if(InDrone[playerid])
		{
			for(new i=0; i< sizeof ZonesCapturePos; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 40.00,ZonesCapturePos[i][0],ZonesCapturePos[i][1],ZonesCapturePos[i][2])) return ERR(playerid,"You cannot explode drones inside/near zones checkpoints.");
			}
			new Float:Ten[3];
			GetPlayerPos(playerid,Ten[0],Ten[1],Ten[2]);
			SetPlayerPos(playerid, LastPos[0][playerid], LastPos[1][playerid], LastPos[2][playerid]);
			SyncRank(playerid);
			SetPlayerHealth(playerid, LastHP[playerid], LastAR[playerid]);
			ResetPlayerWeapons(playerid);
			InDrone[playerid] = false;
			if(PlayerInfo[playerid][InClan] != -1) if(PlayerInfo[playerid][cSkin] != -1) SetPlayerSkin(playerid,PlayerInfo[playerid][cSkin]);
			for(new WEAPON_SLOT:slot; slot < MAX_WEAPON_SLOTS; slot ++) GivePlayerWeapon(playerid,sWeap[playerid][slot],sAmmo[playerid][slot]);
			CreateExplosion(Ten[0],Ten[1],Ten[2], 0,8.0);
			new gt = GetPlayerTeam(playerid), pp = cPerk[playerid][P_MONEY], x = PlayerInfo[playerid][InClan];
			foreach(new i : Player)
			{

				if(GetPlayerTeam(i) != gt)
				{

					if(!PlayerInfo[i][OnDuty])
					{

						if(!PlayerInfo[i][Dead])
						{

							if(!IsPlayerInAnyVehicle(i))
							{

								if(IsPlayerInRangeOfPoint(i,7.0,Ten[0],Ten[1],Ten[2]))
								{

									SendClientMessage(playerid,green," Good job you killed %s(%d) + 2 score & 3000",PlayerInfo[i][Nick],i);
									if(pp > 0)
									{

										SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the kill money.");
										GiveCash(playerid,3000);
									}
									if(cPerk[i][P_DEATH] == 0)
									{

										SendClientMessage(i,Dred,"[DEATH] You have been killed by a drone you lost $500.");
										if(GetCash(i) > 600) GiveCash(i,-500);
									}else SendClientMessage(i, COLOR_YELLOW,"[Clan Perk] You did not lose cash after your death.");

									SetPlayerScore(playerid,GetPlayerScore(playerid)+2);
									GiveCash(playerid,3000);
									SetPlayerHealth(i,0);
									SendDeathMessage(playerid,i,51);
									Streak[i] = 0;
									PlayerInfo[playerid][Kills] ++;
									if(x != -1)
									{
										if(PlayerInfo[i][InClan] != x)
										{

											new str[128],rnn;
											rnn = random(1500);
											format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, PlayerInfo[playerid][Nick]);
											ConnectKills[playerid] ++;
											ClanMSG(PlayerInfo[playerid][InClan],str);
											foreach(new j : Player)
											{

												if(x == PlayerInfo[j][InClan])
												{

													GiveCash(j,rnn);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if(PRESSED(KEY_SECONDARY_ATTACK))
	{
	    new bool:isfirst;
		for(new val = 0; val < MAX_CRATES; val++)
		{
			if(crateexists[val])
			{
			    new obb = ArmyCrate[val];
				if(IsValidDynamicObject(obb))
				{
					new Float:oX, Float:oY, Float:oZ;
					GetDynamicObjectPos(obb,oX, oY, oZ);
					if(IsPlayerInRangeOfPoint(playerid, 5, oX, oY, oZ))
					{
						DestroyDynamicObject(obb);
						Delete3DTextLabel(armylabel[val]);
						SendClientMessage(playerid, COLOR_BLUE, "You have picked up a weapon from the package");
						new rand = random(8);
						switch(rand)
						{
							case 0: GivePlayerWeapon(playerid, WEAPON_GRENADE, 2);
							case 1: GivePlayerWeapon(playerid, WEAPON_MOLTOV, 2);
							case 2: GivePlayerWeapon(playerid, WEAPON_SAWEDOFF, 300);
							case 3: GivePlayerWeapon(playerid, WEAPON_UZI, 300);
							case 4: GivePlayerWeapon(playerid, WEAPON_MP5, 300);
							case 5: GivePlayerWeapon(playerid, WEAPON_TEC9, 300);
							case 6: GivePlayerWeapon(playerid, WEAPON_FLAMETHROWER, 400);
							case 7: GivePlayerWeapon(playerid, WEAPON_ROCKETLAUNCHER, 1);
						}
						crateexists[val] = false;
						KillTimer(CrateDespawnTimer[val]);
						isfirst = true;
						ArmyCrate[val] = -1;
						break;
					}
				}
			}
		}
		if(!isfirst)
		{
		    foreach(new i:PUBGIterator)
		    {
				new Float:xx,Float:yy,Float:zz;
				xx = PUBGLootObj[i][SpawnX]; yy = PUBGLootObj[i][SpawnY]; zz = PUBGLootObj[i][SpawnZ];
				if(IsPlayerInRangeOfPoint(playerid, 0.9, xx, yy, zz))
				{
				    switch(PUBGLootObj[i][ObjType])
				    {
				        case LOOT_ARMOUR:
				        {
				            new Float:Arm;
							GetPlayerArmour(playerid, Arm);
							if(Arm>0.1) { ERR(playerid, "You already have some Armour."); continue;}
						    SetPlayerArmour(playerid, 100.0);
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
						    break;
				        }
				        case LOOT_MEDKIT:
				        {
				            new Float:HP;
							GetPlayerHealth(playerid, HP);
							if(HP> 99.00) { ERR(playerid, "You already have full HP."); continue;}
							SetPlayerHealth(playerid, 100.00);
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
							break;
				        }
				        case LOOT_SNIPER:
				        {
							GivePlayerWeapon(playerid, WEAPON_SNIPER, random(100));
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
							break;
				        }
				        case LOOT_DEAGLE:
				        {
							GivePlayerWeapon(playerid, WEAPON_DEAGLE, random(150));
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
							break;
				        }
				        case LOOT_SHOTGUN:
				        {
							GivePlayerWeapon(playerid, WEAPON_SHOTGUN, random(300));
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
							break;
				        }
				        case LOOT_MP5:
				        {
							GivePlayerWeapon(playerid, WEAPON_MP5, random(200));
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
							break;
				        }
				        case LOOT_M4:
				        {
							GivePlayerWeapon(playerid, WEAPON_M4, random(100));
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
							break;
				        }
				        case LOOT_RIFLE:
				        {
							GivePlayerWeapon(playerid, WEAPON_RIFLE, random(60));
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
							break;
				        }
				        case LOOT_GRENADE:
				        {
							GivePlayerWeapon(playerid, WEAPON_GRENADE, random(7));
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
							break;
				        }
				        case LOOT_MOLOTOV:
				        {
							GivePlayerWeapon(playerid, WEAPON_MOLTOV, random(7));
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
							break;
				        }
				        case LOOT_SILENCED:
				        {
							GivePlayerWeapon(playerid, WEAPON_SILENCED, random(400));
							DestroyDynamicObject(PUBGLootObj[i][ObjID]);
        					DestroyDynamic3DTextLabel(PUBGLootObj[i][ObjIDLabel]);
        					Iter_Remove(PUBGIterator, i);
        					ApplyAnimation(playerid,"CARRY","liftup05", 4.1, false, false, false, false, 500, SYNC_ALL);
							break;
				        }
				    }
					PUBGLootObj[i][ObjID] = -1;
				}
		    }
		}
	}
	if(IsPlayerUsingAnims[playerid]) StopAnimLoopPlayer(playerid);
	if(PRESSED(KEY_SUBMISSION))
	{
	    new vid = GetPlayerVehicleID(playerid);
		if(vid != 0)
		{
			if(gClass[playerid] == AG)
			{
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
					cmd_backstab(playerid);
				}
			}
			if(GetVehicleModel(vid) == 543 || GetVehicleModel(vid) == 554) cmd_fire(playerid);
		}
		else
		{
			if(gClass[playerid] == MEDIC)
			{
				new gtp = GetPlayerTargetPlayer(playerid);
				if(gtp == INVALID_PLAYER_ID) return SendClientMessage(playerid,-1,"(Invalid Aim)");
				new str[4];
				valstr(str, gtp);
				cmd_heal(playerid,str);
			}
		}
	}
	if(PRESSED(KEY_YES))
	{
	    if(InZeppelin[playerid] == tt)
	    {
		    new kk = HitView[playerid];
		    if(kk) { SetCameraBehindPlayer(playerid); AttachCameraToObject(playerid, BehemethObject[tt]); }
		    else
		    {
		        BehemethRotating[tt] = 0;
				new Float:x, Float:y, Float:z; GetObjectPos(BehemethObject[tt], x, y, z);
				SetPlayerCameraPos(playerid, x, y, z-10);
				SetPlayerCameraLookAt(playerid, x, y, z - 50.0, CAMERA_MOVE);
				StopObject(BehemethObject[tt]);
		    }
		    HitView[playerid] = !kk;
		}
		else
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid != 0)
			{
				new mod = GetVehicleModel(vehicleid);
				switch(mod)
				{
					case 520, 425, 447:
					{
						new Float:HP;
						GetVehicleHealth(vehicleid,HP);
						if(HP < 600.0)
						{

							new Float:X,Float:Y,Float:Z;
							GetPlayerPos(playerid,X,Y,Z);
							cmd_ep(playerid);
							SetPlayerPos(playerid,X,Y,Z+50);
							GameTextForPlayer(playerid,"~r~Ejected",6000,5);
						}
						else SendClientMessage(playerid,Dred,"|ERROR:| Your vehicle must receive some damage in order to be able to eject from it.");
					}
					case 476: cmd_firenevada(playerid);
					case 512: cmd_toxicnevada(playerid);
					default: if(gClass[playerid] == SUICIDER) cmd_suicide(playerid);
				}
			}
			else  if(gClass[playerid] == SUICIDER) cmd_suicide(playerid);
		}
	}
	if(GetPlayerWeapon(playerid) == WEAPON_SNIPER)
	if(PRESSED(KEY_AIM))
	{
		if(PlayerInfo[playerid][WEAR])
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
			if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
		}
		if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid, 4);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
		Removeit[playerid] = 1;
	}
	else if(RELEASED(KEY_AIM))
	{
	    if(Removeit[playerid])
	    {
		    if(PlayerInfo[playerid][WEAR])
		    {
				switch(gTeam[playerid])
				{
					case TEAM_AUS: SetPlayerAttachedObject(playerid,0,19104,2,0.152999,0.015000,-0.002000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
					case TEAM_EURASIA: SetPlayerAttachedObject(playerid,0,19104,2,0.142000,0.020000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
					case TEAM_ARAB: SetPlayerAttachedObject(playerid,0,19104,2,0.147999,0.000000,0.000000,0.000000,0.000000,0.000000,1.090000,1.000000,1.114000);
					case TEAM_USA: SetPlayerAttachedObject(playerid,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
					case TEAM_ID: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
					case TEAM_CH: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
					case TEAM_FRANCE: SetPlayerAttachedObject(playerid,0,19104,2,0.151000,0.004000,0.000000,-0.399999,-0.200000,-7.599999,1.123999,1.000000,1.058000);
					case TEAM_MERC: SetPlayerAttachedObject(playerid,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
				}
			}
			if(PlayerInfo[playerid][WEARMASK]) SetPlayerAttachedObject(playerid,1,19472,2,0.027000,0.138999,0.010000,95.200027,74.399917,2.100000,1.000000,1.000000,1.000000);
			new ct1 = cToy1[playerid];
			if(ct1 != -1)
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid,4)) RemovePlayerAttachedObject(playerid,4);
				SetPlayerAttachedObject(playerid,4,ct1,Toy1Info[playerid][tbone],Toy1Info[playerid][tx],Toy1Info[playerid][ty],Toy1Info[playerid][tz],Toy1Info[playerid][rtx], 	Toy1Info[playerid][rty],Toy1Info[playerid][rtz],Toy1Info[playerid][tsx],Toy1Info[playerid][tsy],Toy1Info[playerid][tsz]);
			}
			new ct2 = cToy2[playerid];
			if(ct2 != -1)
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid,5)) RemovePlayerAttachedObject(playerid,5);
				SetPlayerAttachedObject(playerid,5,ct2,Toy2Info[playerid][tbone],Toy2Info[playerid][tx],Toy2Info[playerid][ty],Toy2Info[playerid][tz],Toy2Info[playerid][rtx], 	Toy2Info[playerid][rty],Toy2Info[playerid][rtz],Toy2Info[playerid][tsx],Toy2Info[playerid][tsy],Toy2Info[playerid][tsz]);
			}
        	Removeit[playerid] = 0;
		}
	}
	return 1;
}


forward ZP_Unheat(ZP);
public ZP_Unheat(ZP)
{
    ZP_Heat[ZP] --;
	new const DRIVER = ZeppelinDriver[ZP];
	SetPlayerProgressBarValue(DRIVER, ZP_CooldownBar[DRIVER], ZP_Heat[ZP]);
	OnZP_HeatTimer[ZP] = 0;
    if(ZP_Heat[ZP] > 0) { SetTimerEx("ZP_Unheat", 200, false, "i", ZP); OnZP_HeatTimer[ZP] = 1; }
    else if(!ZP_Usable[ZP])
    {
    	ZP_Usable[ZP] = 1;
    	SetPlayerProgressBarColour(DRIVER, ZP_CooldownBar[DRIVER], 8453973);
		ShowPlayerProgressBar(DRIVER, ZP_CooldownBar[DRIVER]);
    }
	return 1;
}

SyncRank(playerid)
{
	GetRankScore(playerid);
	new string[114];
	new x = GetPlayerScore(playerid);
	if(x > 99)
	{

		if(x < 150) string = "__]]";
		else
		{

			if(x < 500) string = "__]]]";
			else
			{

				if(x < 1000) string = "__]]]]";
				else
				{

					if(x < 1900) string = "__]]]]]";
					else
					{

						if(x < 2500) string = "__]]]]]]";
						else
						{

							if(x < 3400) string = "__]]]]]]]";
							else
							{

								if(x < 5000) string = "__]]]]]]]]";
								else
								{

									if(x < 7500) string = "__]]]]]]]]]";
									else
									{

										if(x < 10000) string = "~r~__]";
										else
										{

											if(x < 12000) string = "~r~__]]";
											else
											{

												if(x < 15000) string = "~r~__]]]";
												else
												{

													if(x < 17000) string = "~r~__]]]]";
													else
													{

														if(x < 19000) string = "~r~__]]]]]";
														else
														{

															if(x < 22000) string = "~r~__]]]]]]";
															else
															{

																if(x < 26000) string = "~r~__]]]]]]]";
																else
																{
																	if(x < 30000) string = "~r~__]]]]]]]]";
																	else
																	{
																		if(x < 100000) string = "~b~__]";
																		else
																		{
																		    if(x < 500000) string = "~b~__]]";
																			else string = "~b~__]]]";
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	} else string = "__]";
	if(GetPlayerScore(playerid) < 500000) format(string, _, "%s~n~~n~~w~SCORE: ~g~~h~%d~w~/~r~~h~%d", string, x, GetNextRank(playerid));
	else  format(string, _, "%s~n~~n~~w~SCORE: ~g~~h~%d", string, x);
	PlayerTextDrawSetString(playerid,Guit[playerid][0],string);
	if(Bit_Get(ToggleState[playerid], TOGGLE_TEXTDRAWS))
	{
		PlayerTextDrawShow(playerid,Guit[playerid][0]);
		PlayerTextDrawShow(playerid,Guit[playerid][1]);
	}
	if(PlayerInfo[playerid][InClan] != -1) strcopy(string, cTag[playerid]);
	else string = "N/A";
	PlayerTextDrawSetString(playerid,Guit[playerid][2], "XP:_~g~%d___~w~Kills:_~g~%d___~w~Deaths:_~g~%d___~w~Clan:_~g~%s",
		PlayerInfo[playerid][XP], PlayerInfo[playerid][Kills], PlayerInfo[playerid][Deaths], string);
}

CMD:ranks(playerid, params[])
{
	new Cat[1200];
	strcat(Cat,"\n{F3F400}Rank\t\tName\t\t\tScore Required\n\n");
	strcat(Cat,"{FFFFFF}Rank 1\t\tPrivate\t\t\t{00FF00}50 Score\n{FFFFFF}Rank 2\t\tCorporal\t\t{00FF00}100 Score\n{FFFFFF}Rank 3\t\tSergeant\t\t{00FF00}150 Score\n{FFFFFF}Rank 4\t\tLieutenant\t\t{00FF00}500 Score\n");
	strcat(Cat,"{FFFFFF}Rank 5\t\tCaptain\t\t\t{00FF00}1000 Score\n{FFFFFF}Rank 6\t\tMajor\t\t\t{00FF00}1900 Score\n{FFFFFF}Rank 7\t\tColonel\t\t\t{00FF00}2500 Score\n{FFFFFF}Rank 8\t\tBrigadier\t\t{00FF00}3400 Score\n");
	strcat(Cat,"{FFFFFF}Rank 9\t\tGeneral\t\t{00FF00}5000 Score\n{FFFFFF}Rank 10\tField Marshall\t\t{00FF00}7500 Score\n{FFFFFF}Rank 11\t\tCommander\t\t{00FF00}10000 Score\n{FFFFFF}Rank 12\tHead Commander\t{00FF00}12000 Score\n");
	strcat(Cat,"{FFFFFF}Rank 13\tKing's Advisor\t\t{00FF00}15000 Score\n{FFFFFF}Rank 14\tHigh Sentinel\t\t{00FF00}17000 Score\n{FFFFFF}Rank 15\tKnight Slayer\t\t{00FF00}19000 Score\n{FFFFFF}Rank 16\tLegend Warrior\t\t{00FF00}22000 Score\n{FFFFFF}Rank 17\tMajor Veteran\t\t{00FF00}26000 Score\n{FFFFFF}Rank 18\tVeteran\t\t\t{00FF00}30000 Score\n{FFFFFF}Rank 19\tGod Of War\t\t{00FF00}100000 Score\n{FFFFFF}Rank 20\tTerminator\t\t{00FF00}500000 Score\n");
	ShowPlayerDialog(playerid, 12516, DIALOG_STYLE_MSGBOX,"Rank List",Cat,"Ok","");
	return 1;
}

GetRankScore(playerid)
{
	new x = GetPlayerScore(playerid);
	if(x > 99)
	{

		if(x < 150) return PlayerInfo[playerid][Rank] = 2;
		else
		{

			if(x < 500) return PlayerInfo[playerid][Rank] = 3;
			else
			{

				if(x < 1000) return PlayerInfo[playerid][Rank] = 4;
				else
				{

					if(x < 1900) return PlayerInfo[playerid][Rank] = 5;
					else
					{

						if(x < 2500) return PlayerInfo[playerid][Rank] = 6;
						else
						{

							if(x < 3400) return PlayerInfo[playerid][Rank] = 7;
							else
							{

								if(x < 5000) return PlayerInfo[playerid][Rank] = 8;
								else
								{

									if(x < 7500) return PlayerInfo[playerid][Rank] = 9;
									else
									{

										if(x < 10000) return PlayerInfo[playerid][Rank] = 10;
										else
										{

											if(x < 12000) return PlayerInfo[playerid][Rank] = 11;
											else
											{

												if(x < 15000) return PlayerInfo[playerid][Rank] = 12;
												else
												{

													if(x < 17000) return PlayerInfo[playerid][Rank] = 13;
													else
													{

														if(x < 19000) return PlayerInfo[playerid][Rank] = 14;
														else
														{

															if(x < 22000) return PlayerInfo[playerid][Rank] = 15;
															else
															{

																if(x < 26000) return PlayerInfo[playerid][Rank] = 16;
																else
																{

																	if(x < 30000) return PlayerInfo[playerid][Rank] = 17;
																	else
																	{

																		if(x < 100000) return PlayerInfo[playerid][Rank] = 18;
																		else
																		{
																		    if(x < 500000) return PlayerInfo[playerid][Rank] = 19;
																			else return PlayerInfo[playerid][Rank] = 20;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	else return PlayerInfo[playerid][Rank] = 1;
}
GetNextRank(playerid)
{
	new next;
	switch(PlayerInfo[playerid][Rank])
	{

		case 1: next = 100;     case 7: next = 3400;  case 13: next = 17000;
		case 2: next = 150;    case 8: next = 5000;  case 14: next = 19000;
		case 3: next = 500;    case 9: next = 7501;  case 15: next = 22000;
		case 4: next = 1000;    case 10:next = 10000;  case 16: next = 26000;
		case 5: next = 1900;   case 11:next = 12000; case 17: next = 30000;
		case 6: next = 2500;   case 12:next = 15000; case 18: next = 100000;
		case 19: next = 500000;
	}
	return next;
}
ClassDialog(playerid)
{
	GetRankScore(playerid);
	new C[1200];
	new prank = PlayerInfo[playerid][Rank], vrank = PlayerInfo[playerid][dRank];
	strcat(C,"{FFFFFF}Class\tRank\tStatus\n");
	strcat(C,"{FF8000}Assault\t{80FF00}[{FFFFFF}0{80FF00}]\t{00FF00}Unlocked\n");
	if(prank > 1) strcat(C,"{FF8000}Sniper\t{80FF00}[{FFFFFF}2{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Sniper\t{80FF00}[{FFFFFF}2{80FF00}]\t{FF0000}Locked\n");
	if(prank > 3) strcat(C,"{FF8000}Demolisher\t{80FF00}[{FFFFFF}4{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Demolisher\t{80FF00}[{FFFFFF}4{80FF00}]\t{FF0000}Locked\n");
	if(prank > 2)
	{
		strcat(C,"{FF8000}Suicider\t{80FF00}[{FFFFFF}3{80FF00}]\t{00FF00}Unlocked\n");
		strcat(C,"{FF8000}Medic\t{80FF00}[{FFFFFF}3{80FF00}]\t{00FF00}Unlocked\n");
	}
	else
	{
		strcat(C,"{FF8000}Suicider\t{80FF00}[{FFFFFF}3{80FF00}]\t{FF0000}Locked\n");
		strcat(C,"{FF8000}Medic\t{80FF00}[{FFFFFF}3{80FF00}]\t{FF0000}Locked\n");
	}
	if(prank > 9) strcat(C,"{FF8000}Pilot\t{80FF00}[{FFFFFF}10{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Pilot\t{80FF00}[{FFFFFF}10{80FF00}]\t{FF0000}Locked\n");
	if(prank > 4) strcat(C,"{FF8000}Engineer\t{80FF00}[{FFFFFF}5{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Engineer\t{80FF00}[{FFFFFF}5{80FF00}]\t{FF0000}Locked\n");
	if(prank > 6) strcat(C,"{FF8000}JetTrooper\t{80FF00}[{FFFFFF}7{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}JetTrooper\t{80FF00}[{FFFFFF}7{80FF00}]\t{FF0000}Locked\n");
	if(prank > 6) strcat(C,"{FF8000}Spotter\t{80FF00}[{FFFFFF}7{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Spotter\t{80FF00}[{FFFFFF}7{80FF00}]\t{FF0000}Locked\n");
	if(prank > 7) strcat(C,"{FF8000}Support\t{80FF00}[{FFFFFF}8{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Support\t{80FF00}[{FFFFFF}8{80FF00}]\t{FF0000}Locked\n");
	if(prank > 4) strcat(C,"{FF8000}Scout\t{80FF00}[{FFFFFF}5{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Scout\t{80FF00}[{FFFFFF}5{80FF00}]\t{FF0000}Locked\n");
	if(prank > 8) strcat(C,"{FF8000}Spy\t{80FF00}[{FFFFFF}9{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Spy\t{80FF00}[{FFFFFF}9{80FF00}]\t{FF0000}Locked\n");
	if(prank > 9) strcat(C,"{FF8000}Rifleman\t{80FF00}[{FFFFFF}10{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Rifleman\t{80FF00}[{FFFFFF}10{80FF00}]\t{FF0000}Locked\n");
	if(prank > 14) strcat(C,"{FF8000}Recon\t{80FF00}[{FFFFFF}16{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Recon\t{80FF00}[{FFFFFF}16{80FF00}]\t{FF0000}Locked\n");
	if(prank > 17) strcat(C,"{FF8000}Bomber\t{80FF00}[{FFFFFF}18{80FF00}]\t{00FF00}Unlocked\n");
	else strcat(C,"{FF8000}Bomber\t{80FF00}[{FFFFFF}18{80FF00}]\t{FF0000}Locked\n");
	if(vrank > 0)
	{
	    if(vrank == 6) strcat(C,"{FF0000}Donor\t{FFFF00}[{FFFFFF}SPONSOR{FFFF00}]\t{00FF00}Unlocked");
		else strcat(C,"{FF0000}Donor\t{FFFF00}[{FFFFFF}VIP{FFFF00}]\t{00FF00}Unlocked");
	}
	else strcat(C,"{FF0000}Donor\t{FFFF00}[{FFFFFF}VIP{FFFF00}]\t{FF0000}Locked");
	ShowPlayerDialog(playerid, CLASS_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Class Selection",C,"Select", "Back");
}
GetRankName(playerid)
{
	new t[20];
	switch(PlayerInfo[playerid][Rank])
	{

		case 1: t =("Private");
		case 2: t =("Corporal");
		case 3: t =("Seargent");
		case 4: t =("Lieutenant");
		case 5: t =("Captain");
		case 6: t =("Major");
		case 7: t =("Colonel");
		case 8: t =("Brigadier");
		case 9: t =("General");
		case 10:t =("Field Marshall");
		case 11:t =("Commander");
		case 12:t =("Head Commander");
		case 13:t =("King's Advisor");
		case 14:t =("High Sentinel");
		case 15:t =("Knight Slayer");
		case 16:t =("Legend Warrior");
		case 17:t =("Major Veteran");
		case 18:t =("Veteran");
		case 19:t =("God Of War");
		case 20:t =("Terminator");
	}
	return t;
}

GetClass(playerid)
{
	new str[13];
	switch(gClass[playerid])
	{

		case Assault: str = ("Assault");
		case SNIPER: str = ("Sniper");
		case DEMOLISHER: str = ("Demolisher");
		case SUICIDER: str = ("Suicider");
		case ENGINEER: str = ("Engineer");
		case PILOT: str = ("Pilot");
		case JET: str = ("JetTrooper");
		case SP: str = ("Support");
		case SCOUT: str = ("Scout");
		case DONOR: str = ("Donor");
		case MEDIC: str = ("Medic");
		case AG: str = ("Spy");
		case RIFLEMAN: str = ("Rifleman");
		case BOMBER: str = ("Bomber");
		case RECON: str = ("Recon");
		case MERC: str = ("No Class");
		case SPOTTER: str = ("Spotter");
	} return str;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(vehicleid == INVALID_VEHICLE_ID) return DestroyVehicle(vehicleid);
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	if(vehicleid == INVALID_VEHICLE_ID) return DestroyVehicle(vehicleid);
	return 1;
}

GiveWeapons(playerid)
{
	if(Iter_Contains(PUBGEvent, playerid)) return 1;
	if(inevent[playerid] > 0) return 1;
	if(PlayerInfo[playerid][InDuel]) return 1;
	ResetPlayerWeapons(playerid);
	if(PlayerInfo[playerid][OnDuty])
	{

		SetPlayerHealth(playerid, 9999999);
		SetPlayerColor(playerid,0xF600F600);
		GivePlayerWeapon(playerid, WEAPON_MINIGUN, 9999999);
		SetPlayerSkin(playerid, 217);
		return 1;
	}
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
	new bool:givenot;
	LauncherAmmo[playerid] = 0;
	switch(gClass[playerid])
	{

		case Assault:
		{

			GivePlayerWeapon(playerid, WEAPON_TEARGAS, 5);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 100);
			GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 200);
			GivePlayerWeapon(playerid, WEAPON_M4, 200);
		}
		case SNIPER:
		{
			GivePlayerWeapon(playerid, WEAPON_TEARGAS, 3);
			GivePlayerWeapon(playerid, WEAPON_SNIPER, 200);
			GivePlayerWeapon(playerid, WEAPON_SILENCED, 200);
			GivePlayerWeapon(playerid, WEAPON_KNIFE, 1);
			GivePlayerWeapon(playerid, WEAPON_MP5, 342);
			if(Bit_Get(ClassUpgrade[playerid], A_SNIPER)) GivePlayerWeapon(playerid, WEAPON_NIGHT_VISION_GOGGLES, 1);
		}
		case MEDIC:
		{
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 100);
			GivePlayerWeapon(playerid, WEAPON_AK47, 200);
			GivePlayerWeapon(playerid, WEAPON_RIFLE, 100);
			GivePlayerWeapon(playerid, WEAPON_MOLTOV, 5);
		}
		case PILOT:
		{
			GivePlayerWeapon(playerid, WEAPON_M4, 200);
			GivePlayerWeapon(playerid, WEAPON_SHOTGUN, 100);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 50);
		}
		case ENGINEER:
		{

			GivePlayerWeapon(playerid, WEAPON_SHOVEL, 2);
			GivePlayerWeapon(playerid, WEAPON_SHOTGUN, 100);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 50);
			GivePlayerWeapon(playerid, WEAPON_GRENADE, 5);
			GivePlayerWeapon(playerid, WEAPON_ROCKETLAUNCHER, 2); // RPG
		}
		case JET:
		{

			GivePlayerWeapon(playerid, WEAPON_UZI, 600);
			GivePlayerWeapon(playerid, WEAPON_KATANA, 2);
			GivePlayerWeapon(playerid, WEAPON_SILENCED, 100);
			GivePlayerWeapon(playerid, WEAPON_GRENADE, 2);
			if(Bit_Get(ClassUpgrade[playerid], A_JET)) GivePlayerWeapon(playerid, WEAPON_COLT45, 150);
		}
		case SP:
		{

			GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 100);
			GivePlayerWeapon(playerid, WEAPON_GRENADE, 1);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 100);
			GivePlayerWeapon(playerid, WEAPON_SNIPER, 100);
			GivePlayerWeapon(playerid, WEAPON_M4, 100);
			if(Bit_Get(ClassUpgrade[playerid], A_SP)) GivePlayerWeapon(playerid, WEAPON_THERMAL_GOGGLES, 1);
		}
		case SCOUT:
		{

			GivePlayerWeapon(playerid, WEAPON_TEARGAS, 5);
			GivePlayerWeapon(playerid, WEAPON_MP5, 200);
			GivePlayerWeapon(playerid, WEAPON_SAWEDOFF, 200);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 200);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
		}
		case AG:
		{

			GivePlayerWeapon(playerid, WEAPON_MP5, 200);
			GivePlayerWeapon(playerid, WEAPON_KNIFE, 2);
			GivePlayerWeapon(playerid, WEAPON_SILENCED, 200);
			GivePlayerWeapon(playerid, WEAPON_SNIPER, 200);
		}
		case DONOR:
		{

			GivePlayerWeapon(playerid, WEAPON_SAWEDOFF, 200);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 100);
			GivePlayerWeapon(playerid, WEAPON_CHAINSAW, 2);
			GivePlayerWeapon(playerid, WEAPON_SNIPER, 200);
			GivePlayerWeapon(playerid, WEAPON_M4, 200);
			GivePlayerWeapon(playerid, WEAPON_ROCKETLAUNCHER, 2);
			GivePlayerWeapon(playerid, WEAPON_GRENADE, 5);
			GivePlayerWeapon(playerid, WEAPON_BRASSKNUCKLE, 1);
		}
		case SUICIDER:
		{

			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 100);
			GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 100);
			GivePlayerWeapon(playerid, WEAPON_GRENADE, 2);
			GivePlayerWeapon(playerid, WEAPON_AK47, 200);
		}
		case DEMOLISHER:
		{

			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 100);
			GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 100);
			GivePlayerWeapon(playerid, WEAPON_MOLTOV, 5);
			GivePlayerWeapon(playerid, WEAPON_RIFLE, 200);
		}
		case RIFLEMAN:
		{

			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 100);
			GivePlayerWeapon(playerid, WEAPON_SHOTGUN, 100);
			GivePlayerWeapon(playerid, WEAPON_GRENADE, 5);
			GivePlayerWeapon(playerid, WEAPON_RIFLE, 500);
			givenot = true;
		}
		case RECON:
		{
			GivePlayerWeapon(playerid, WEAPON_TEARGAS, 2);
			GivePlayerWeapon(playerid, WEAPON_SNIPER, 200);
			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 200);
			GivePlayerWeapon(playerid, WEAPON_MP5, 342);
			PlayerInfo[playerid][Mask] = true;
			PlayerInfo[playerid][WEARMASK] = true;
			SetPlayerAttachedObject(playerid,1,19472,2,0.027000,0.138999,0.010000,95.200027,74.399917,2.100000,1.000000,1.000000,1.000000);
			SetPlayerAttachedObject(playerid, 3, 358, 1, -0.109999, -0.169998, 0.010000, -1.900000, 32.400024, 6.500004);
		}
		case BOMBER:
		{

			GivePlayerWeapon(playerid, WEAPON_RIFLE, 900);
			GivePlayerWeapon(playerid, WEAPON_M4, 50);
			GivePlayerWeapon(playerid, WEAPON_ROCKETLAUNCHER, 5);
			GivePlayerWeapon(playerid, WEAPON_SATCHEL, 7);
			if(Bit_Get(ClassUpgrade[playerid], A_BOMBER)) { GivePlayerWeapon(playerid, WEAPON_CHAINSAW, 1); UsedBAS[playerid] = false; LauncherAmmo[playerid] = 5;}
			givenot = true;
		}
		case MERC:
		{

			GivePlayerWeapon(playerid, WEAPON_DEAGLE, 132);
			GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 238);
			GivePlayerWeapon(playerid, WEAPON_GRENADE, 5);
			GivePlayerWeapon(playerid, WEAPON_ROCKETLAUNCHER, 10);
			GivePlayerWeapon(playerid, WEAPON_AK47, 200);
			GivePlayerWeapon(playerid, WEAPON_MP5, 120);
		}
		case SPOTTER:
		{

			GivePlayerWeapon(playerid, WEAPON_TEARGAS, 8);
			GivePlayerWeapon(playerid, WEAPON_AK47, 200);
			GivePlayerWeapon(playerid, WEAPON_COLT45, 200);
			GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 200);
		}
	}
	if(!givenot) if(cPerk[playerid][PK_SNIPER] > 0)
	{

		SendClientMessage(playerid, COLOR_YELLOW, "[Clan]: You got a sniper rifle from your clan perks.");
		GivePlayerWeapon(playerid, WEAPON_SNIPER, 200);
	}
	if(PlayerInfo[playerid][dRank] > 0) SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
	if(Prest[playerid][0] != 0 || Prest[playerid][1] != 0 || Prest[playerid][2] != 0)
	{

		PrestigeWeapons(playerid);
		SendClientMessage(playerid, COLOR_PINK, "Spawned with prestige weapons");
	}
	if(IsPlayerInAnyVehicle(playerid)) SetPlayerArmedWeapon(playerid, WEAPON_FIST);
	return 1;
}

forward TopClans(playerid, typeee);
public TopClans(playerid, typeee)
{
	new cc =cache_num_rows();
	if(cc>0)
	{
		new cname[20], cid, cat[1500];
		switch(typeee)
		{
			case 0:
			{
				strcat(cat, "Clan Name\tID\tKills");
				for(new i=0; i < cc; i++)
				{
					cache_get_value_name(i, "cname", cname);
					cache_get_value_name_int(i, "cid", cid);
					new kills; cache_get_value_name_int(i, "ckills", kills);
					format(cat, _, "%s\n%s\t%d\t%d", cat,cname,cid,kills);
				}
			}
			case 1:
			{
				strcat(cat, "Clan Name\tID\tHonor Points");
				for(new i=0; i < cc; i++)
				{
					cache_get_value_name(i, "cname", cname);
					cache_get_value_name_int(i, "cid", cid);
					new kills; cache_get_value_name_int(i, "chpoints", kills);
					format(cat, _, "%s\n%s\t%d\t%d", cat,cname,cid,kills);
				}
			}
			case 2:
			{
				strcat(cat, "Clan Name\tID\tLevel");
				for(new i=0; i < cc; i++)
				{
					cache_get_value_name(i, "cname", cname);
					cache_get_value_name_int(i, "cid", cid);
					new kills; cache_get_value_name_int(i, "clevel", kills);
					format(cat, _, "%s\n%s\t%d\t%d", cat,cname,cid,kills);
				}

			}
			case 3:
			{

				strcat(cat, "Clan Name\tID\tWar Wins");
				for(new i=0; i < cc; i++)
				{

					cache_get_value_name(i, "cname", cname);
					cache_get_value_name_int(i, "cid", cid);
					new kills; cache_get_value_name_int(i, "cwins", kills);
					format(cat, _, "%s\n%s\t%d\t%d", cat,cname,cid,kills);
				}
			}
			case 4:
			{

				strcat(cat, "Clan Name\tID\tMembers");
				for(new i=0; i < cc; i++)
				{

					cache_get_value_name(i, "cname", cname);
					cache_get_value_name_int(i, "cid", cid);
					new kills; cache_get_value_name_int(i, "cmembers", kills);
					format(cat, _, "%s\n%s\t%d\t%d", cat,cname,cid,kills);
				}
			}
			case 5:
			{

				strcat(cat, "Clan Name\tID\tRatio");
				for(new i=0; i < cc; i++)
				{

					cache_get_value_name(i, "cname", cname);
					cache_get_value_name_int(i, "cid", cid);
					new Float:kills;
					new kkk; cache_get_value_name_int(i, "ckills", kkk); new ddd; cache_get_value_name_int(i, "cdeaths", ddd);
					kills = Float:kkk/Float:ddd;
					format(cat, _, "%s\n%s\t%d\t%0.2f", cat,cname,cid,kills);
				}
			}
			case 6:
			{
				strcat(cat, "Clan Name\tID\tAll-Time HP");
				for(new i=0; i < cc; i++)
				{
					cache_get_value_name(i, "cname", cname);
					cache_get_value_name_int(i, "cid", cid);
					new ddd; cache_get_value_name_int(i, "cathp", ddd);
					format(cat, _, "%s\n%s\t%d\t%d", cat,cname,cid,ddd);
				}
			}
			case 7:
			{
				strcat(cat, "Clan Name\tID\tRank");
				for(new i=0; i < cc; i++)
				{
					cache_get_value_name(i, "cname", cname);
					cache_get_value_name_int(i, "cid", cid);
					new ddd; cache_get_value_name_int(i, "rank", ddd);
					format(cat, _, "%s\n%s\t%d\t%s", cat,cname,cid,ReturnCR(ddd));
				}
			}
		}
		ShowPlayerDialog(playerid, TOPCLANSRESULTS, DIALOG_STYLE_TABLIST_HEADERS, "Top Clans", cat, "ok", "");
	} else SendClientMessage(playerid, Dred, "No clans in the database or could not establish DB connection");
	return 1;
}


forward Verify(playerid);
public Verify(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	AttachCameraToObject(playerid, aircraft);
	switch(random(2))
	{

		case 0: PlayerPlaySound(playerid, 2090,0,0,0);
		case 1: PlayerPlaySound(playerid, 2071,0,0,0);
	}
	return 1;
}

FailAirstrike(playerid)
{
	airused = false;
	DestroyObject(aircraft);
	DestroyObject(testbomb);
	aircraft = testbomb = -1;
	TogglePlayerControllable(playerid, true);
	explodewait = false;
	SetCameraBehindPlayer(playerid);
	SpawnPlayer(playerid);
	PlayerPlaySound(playerid, 1182, 0,0,0);
	KillTimer(pairwaittimer);
	KillTimer(explodetimer);
	SetPlayerVirtualWorld(playerid, 0);
	KillTimer(explodetolerance);
	airvehdriver = -1;
	TextDrawHideForPlayer(playerid, CMD0);
	TextDrawHideForPlayer(playerid, CMD1);
	TextDrawHideForPlayer(playerid, CMD2);
	TextDrawHideForPlayer(playerid, CMD3);
	TextDrawHideForPlayer(playerid, CMD4);
	TextDrawHideForPlayer(playerid, CMD5);
	TextDrawHideForPlayer(playerid, CMD6);
	TextDrawHideForPlayer(playerid, CMD7);
	TextDrawHideForPlayer(playerid, CMD8);
	TextDrawHideForPlayer(playerid, CMD9);
	cmd_toggletextdraws(playerid);
	return 1;
}

FailAirstrikeDis(playerid)
{
	airused = false;
	DestroyObject(aircraft);
	DestroyObject(testbomb);
	aircraft = testbomb = -1;
	explodewait = false;
	KillTimer(pairwaittimer);
	KillTimer(explodetimer);
	KillTimer(explodetolerance);
	airvehdriver = -1;
	TextDrawHideForPlayer(playerid, CMD0);
	TextDrawHideForPlayer(playerid, CMD1);
	TextDrawHideForPlayer(playerid, CMD2);
	TextDrawHideForPlayer(playerid, CMD3);
	TextDrawHideForPlayer(playerid, CMD4);
	TextDrawHideForPlayer(playerid, CMD5);
	TextDrawHideForPlayer(playerid, CMD6);
	TextDrawHideForPlayer(playerid, CMD7);
	TextDrawHideForPlayer(playerid, CMD8);
	TextDrawHideForPlayer(playerid, CMD9);
	cmd_toggletextdraws(playerid);
	return 1;
}

forward WaitInAir(playerid);
public WaitInAir(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	airused = false;
	DestroyObject(aircraft);
	DestroyObject(testbomb);
	aircraft = testbomb = -1;
	TogglePlayerControllable(playerid, true);
	explodewait = false;
	SetPlayerPos(playerid, 2512.3455,-2656.2705,27.1025);
	SetPlayerVirtualWorld(playerid, GetPlayerTeam(playerid));
	SetPlayerInterior(playerid, 0);
	SetCameraBehindPlayer(playerid);
	PlayerPlaySound(playerid, 1182, 0,0,0);
	KillTimer(pairwaittimer);
	KillTimer(explodetimer);
	KillTimer(explodetolerance);
	TextDrawHideForPlayer(airvehdriver, CMD0);
	TextDrawHideForPlayer(airvehdriver, CMD1);
	TextDrawHideForPlayer(airvehdriver, CMD2);
	TextDrawHideForPlayer(airvehdriver, CMD3);
	TextDrawHideForPlayer(airvehdriver, CMD4);
	TextDrawHideForPlayer(airvehdriver, CMD5);
	TextDrawHideForPlayer(airvehdriver, CMD6);
	TextDrawHideForPlayer(airvehdriver, CMD7);
	TextDrawHideForPlayer(airvehdriver, CMD8);
	TextDrawHideForPlayer(airvehdriver, CMD9);
	airvehdriver = -1;
	cmd_toggletextdraws(playerid);
	if(!aircount) SendClientMessage(playerid, COLOR_YELLOW, "You have not made any kill and you got your 50 XP back!");
	else PlayerInfo[playerid][XP] -= 50;
	aircount = 0;
	return 1;
}
forward WaitForExplod();
public WaitForExplod()
{
	if(!IsPlayerConnected(airvehdriver)) return 1;
	new Float:x,Float:y,Float:z,Float:z2;
	GetObjectPos(testbomb,x,y,z);
	MapAndreas_FindZ_For2DCoord(x, y, z2);
	if((z2+5) > z)
	{

		KillTimer(explodetimer);
		KillTimer(explodetolerance);
		CreateExplosion(x, y, z, 6, 100.0);
		DestroyObject(testbomb);
		testbomb = -1;
		explodewait = false;
		new xx = PlayerInfo[airvehdriver][InClan];
		new count;
		new tt = GetPlayerTeam(airvehdriver);
		new str[85], name[24];
		strcat(name, PlayerInfo[airvehdriver][Nick]);
		foreach(new i : ARENA[NON])
		{

			if(!PlayerInfo[i][OnDuty])
			{

				if(GetPlayerTeam(i) != tt)
				{
					if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
					if(!AntiSK[i])
					{
						if(IsPlayerInRangeOfPoint(i,15,x,y,z))
						{
							switch(GetPlayerState(i))
							{
								case PLAYER_STATE_ONFOOT, PLAYER_STATE_DRIVER, PLAYER_STATE_PASSENGER, PLAYER_STATE_SPAWNED:
								{
								    new vehicleid = GetPlayerVehicleID(i);
									SetPlayerHealth(i,0);
									SetVehicleHealth(vehicleid, 100);
									SendDeathMessage(airvehdriver, i, 40);
									format(str, _, "~w~~h~%s ~w~has killed ~w~%s with ~b~RACS", name, PlayerInfo[i][Nick]);
									BoxMSG(str);
									count++;
									RACSKills[airvehdriver] ++;
									if(QuestContent[3] == CONTENT_RACS)
									{
									    QuestProgress[airvehdriver][3] ++;
									    if(RACSKills[airvehdriver] == 12)
									    {
									    	if(!Bit_Get(QuestDone[airvehdriver], 3))
									    	{
									    	    Bit_Let(QuestDone[airvehdriver], 3);
									    	    SendClientMessage(airvehdriver, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 4 and got $50k & 100XP.");
									    	    TextDrawHideForPlayer(airvehdriver,Quest[3]);
									    	    PlayerInfo[airvehdriver][XP] += 100;
									    	    GiveCash(airvehdriver, 50000);
									    	}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if(!count) return 1;
		ConnectKills[airvehdriver] += aircount += count;
		PlayerInfo[airvehdriver][Kills] += count;
		Streak[airvehdriver] += count;
		if(cPerk[airvehdriver][P_MONEY] > 0)
		{

			SendClientMessage(airvehdriver, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
			GiveCash(airvehdriver,1500*count);
		}
		SetPlayerScore(airvehdriver, GetPlayerScore(airvehdriver)+count);
		SendClientMessage(airvehdriver, -1, "{80FF00}[RACS] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the drop, %d score and $%d", count, count, count*1500);
		if(xx != -1)
		{
			new rnn;
			rnn = random(1500)*count;
			new msg[96];
			format(msg, _, "* Clan has recieved %d$ from %s remote airstrike control kills!", rnn, name);
			ClanMSG(xx,msg);
			foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
		}
	}
	return 1;
}

forward TolerateExplode();
public TolerateExplode()
{
	if(!IsPlayerConnected(airvehdriver)) return 1;
	new Float:x,Float:y,Float:z;
	GetObjectPos(testbomb,x,y,z);
	KillTimer(explodetimer);
	CreateExplosion(x, y, z, 6, 100.0);
	DestroyObject(testbomb);
	testbomb = -1;
	explodewait = false;
	new xx = PlayerInfo[airvehdriver][InClan];
	new count;
	new tt = GetPlayerTeam(airvehdriver);
	new str[96], name[24];
	strcat(name, PlayerInfo[airvehdriver][Nick]);
	foreach(new i : ARENA[NON])
	{

		if(!PlayerInfo[i][OnDuty])
		{

			if(GetPlayerTeam(i) != tt)
			{
				if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
				if(IsPlayerInRangeOfPoint(i,15,x,y,z))
				{

					new vehicleid = GetPlayerVehicleID(i);
					SetPlayerHealth(i,0);
					SetVehicleHealth(vehicleid, 100);
					SendDeathMessage(airvehdriver, i, 40);
					format(str, _, "~w~~h~%s ~w~has killed ~w~%s with ~b~RACS", name, PlayerInfo[i][Nick]);
					RACSKills[airvehdriver] ++;
					if(QuestContent[3] == CONTENT_RACS)
					{
					    QuestProgress[airvehdriver][3] ++;
					    if(RACSKills[airvehdriver] == 12)
					    {
					    	if(!Bit_Get(QuestDone[airvehdriver], 3))
					    	{
					    	    Bit_Let(QuestDone[airvehdriver], 3);
					    	    SendClientMessage(airvehdriver, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 4 and got $50k & 100XP.");
					    	    TextDrawHideForPlayer(airvehdriver,Quest[3]);
					    	    PlayerInfo[airvehdriver][XP] += 100;
					    	    GiveCash(airvehdriver, 50000);
					    	}
						}
					}
					BoxMSG(str);
					count++;
				}
			}
		}
	}
	if(!count) return 1;
	ConnectKills[airvehdriver] += aircount += count;
	if(cPerk[airvehdriver][P_MONEY] > 0)
	{

		SendClientMessage(airvehdriver, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
		GiveCash(airvehdriver,1500*count);
	}
	SetPlayerScore(airvehdriver, GetPlayerScore(airvehdriver)+count);
	SendClientMessage(airvehdriver, -1, "{80FF00}[RACS] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the drop, %d score and $%d", count, count, count * 1500);
	if(xx != -1)
	{
		new rnn;
		rnn = random(1500)*count;
		format(str, _, "* Clan has recieved %d$ from %s remote airstrike control kills!", rnn, name);
		ClanMSG(xx,str);
		foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
	}
	return 1;
}

forward changenamequery(playerid, requester, iprange[]);
public changenamequery(playerid, requester, iprange[])
{
	new r, string[256], name[MAX_PLAYER_NAME], rcount;
	cache_get_row_count(r);

	for(new x; x < r; x ++)
	{
		cache_get_value_name(x, "name", name, MAX_PLAYER_NAME);
		format(string, _, "%s{FF0000}%s\n", string, name);
		rcount++;
	}

	if(rcount)
	{
		ShowPlayerDialog(playerid, DIALOG_NAMEREQUESTSTWO, DIALOG_STYLE_MSGBOX, "Approve this name change?", "{03FCFC}Account ID: {FF0000}%i\n{03FCFC}Current Name: {FF0000}%s\n{03FCFC}Name Requested: {FF0000}%s\n{03FCFC}IP Address: {FF0000}%s\n\n{03FCFC}Similar accounts under IP Range %s:\n%s", "Accept", "Refuse", PlayerInfo[requester][AID], PlayerInfo[requester][Nick], PlayerInfo[requester][n_newname], PlayerInfo[requester][lastip], iprange, string);
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_NAMEREQUESTSTWO, DIALOG_STYLE_MSGBOX, "Approve this name change?", "{03FCFC}Account ID: {FF0000}%i\n{03FCFC}Current Name: {FF0000}%s\n{03FCFC}Name Requested: {FF0000}%s\n{03FCFC}IP Address: {FF0000}%s\n\n{03FCFC}Similar accounts under IP Range %s:\n{FF0000}No accounts available under this IP Range.", "Accept", "Refuse", PlayerInfo[requester][AID], PlayerInfo[requester][Nick], PlayerInfo[requester][n_newname], PlayerInfo[requester][lastip], iprange);
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(strfind(inputtext,"%",true) != -1)
	{
		Kick(playerid);
		return 0;
	}
	switch(dialogid)
	{
	    case ZEPPELIN_DIALOG:
	    {
	        if(PlayerInfo[playerid][XP] < 250) return ERR(playerid, "You do not have enough XP to use the Zeppelin.");
		    new tt = gTeam[playerid];
		    ZepDialog[playerid] = 0;
			if(!ZP_Available[tt]) return ERR(playerid, "Someone is already using your team Zeppelin.");
		    PlayerInfo[playerid][XP] -= 250;
		 	AttachCameraToObject(playerid, BehemethObject[tt]);
			ZP_Available[tt] = 0;
			BehemethRotating[tt] = 0;
			ZeppelinDriver[tt] = playerid;
			SetPlayerProgressBarValue(playerid, ZP_HPBar[playerid], 2500.0);
		    ZP_Usable[tt] = 1;
		    SetPlayerVirtualWorld(playerid, 0);
		    HitView[playerid] = 0;
			ShowPlayerProgressBar(playerid, ZP_CooldownBar[playerid]);
			ShowPlayerProgressBar(playerid, ZP_HPBar[playerid]);
			new Float:x, Float:y, Float:z;
			new Float:rx, Float:ry, Float:rz;
			GetObjectPos(BehemethObject[tt], x, y, z);
			SetPlayerPos(playerid,x-2,y,z-3.8);
			GetObjectRot(BehemethObject[tt],rx,ry,rz);
			SetTimerEx("Start", 1000, false, "d", playerid);
			TogglePlayerControllable(playerid, false);
			ApplyAnimation(playerid, "ped", "IDLE_stance", 4.1, true, false, false, false, 0, SYNC_ALL);
			ApplyAnimation(playerid, "ped", "IDLE_stance", 4.1, true, false, false, false, 0, SYNC_ALL);
			ZPTimer[playerid] = SetTimerEx("ZeppelinTimer", 1000, true, "d", playerid);
	    }
        case DIALOG_ATTACH_BONE_SELECTION:
        {
            if(response)
            {
                new index = OnToy[playerid];
                SetPlayerAttachedObject(playerid, index, GetPVarInt(playerid, "AttachmentModelSel"), listitem+1);
                EditAttachedObject(playerid, index);
                SendClientMessage(playerid, 0xFFFFFFFF, "PLAYER: You can also hold SPAWN and use MOUSE to view from either sides.");
            }
            return 1;
        }
        case CHELP1_DIALOG:
        {
            if(response) CHelpp(playerid, listitem);
            return 1;
        }
        case CHELP2_DIALOG:
        {
            if(!response) ShowPlayerDialog(playerid, CHELP1_DIALOG, DIALOG_STYLE_LIST, "{FF00FB}MW3 Class Help", "Assault\n{FFE800}Sniper\nDemolisher\n{FFE800}Suicider\nMedic\n{FFE800}Pilot\nEngineer\n{FFE800}JetTrooper\nSpotter\n{FFE800}Support\nScout\n{FFE800}Spy\nRifleman\n{FFE800}Recon\nBomber\n", "info", "exit");
            return 1;
        }
	    case DIALOG_NAMEREQUESTSTWO:
	    {
	        new nrq0 = NAMEREQ[playerid][0];
	        new nam[24]; strcat(nam, PlayerInfo[nrq0][Nick]);
			if(response)
			{
			    if(!IsPlayerConnected(nrq0))
			    {
			        return SendClientMessage(playerid, Lb, "That player has disconnected.");
			    }

                PlayerInfo[NAMEREQ[playerid][0]][nameapp] = false;

				SendClientMessage(playerid,Lg,"You approved %s's name change request.", nam);
				Play(playerid);

                new Query[200];
				mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `name` ='%e' WHERE `id` = %d LIMIT 1", PlayerInfo[nrq0][n_newname], PlayerInfo[nrq0][AID]);
				mysql_tquery(mysql, Query);

				mysql_format(mysql, Query, sizeof(Query), "INSERT INTO `name_logs` (`accountid`,`approvedby`,`new_name`,`old_name`) VALUES ('%i','%i','%e','%e')", PlayerInfo[nrq0][AID], PlayerInfo[playerid][AID], PlayerInfo[nrq0][n_newname], nam);
				mysql_tquery(mysql, Query);

				SetPlayerName(nrq0, PlayerInfo[nrq0][n_newname]);
				strcopy(PlayerInfo[nrq0][Nick], PlayerInfo[nrq0][n_newname]);
			 	Play(nrq0);
				SendClientMessage(nrq0,Lg,"Your name change requested has been approved by an administrator. Your new name is %s, use it from now on.", PlayerInfo[nrq0][n_newname]);
				GiveCash(nrq0, -100000);
			}
			else
			{
			    if(!IsPlayerConnected(nrq0))
			    {
			        return SendClientMessage(playerid, Lb, "That player has disconnected.");
			    }

			    PlayerInfo[nrq0][nameapp] = false;

                SendClientMessage(nrq0,Lg,"Your name change requested has been rejected by an administrator.");
			    Play(nrq0);

			    SendClientMessage(playerid,Lg,"You rejected %s's name change request.", nam);
				Play(playerid);
			}
	    }
	    case DIALOG_NAMEREQUESTS:
	    {
	        if(response)
	        {
	            if(strcmp(inputtext, "No name change requests available."))
	            {
					new target = NAMEREQ[playerid][listitem];
       		      	if(IsPlayerConnected(target))
 		     		{
						new query[138], ipp[16];
						strcat(ipp, PlayerInfo[target][lastip]);
						mysql_format(mysql,query,sizeof(query),"SELECT * FROM `playerbase` WHERE `ip` LIKE '%e' OR `lastip` LIKE '%e' AND `lastip` != 'Not available' LIMIT 7", ipp, ipp);
						mysql_pquery(mysql,query,"changenamequery","dds", playerid, target, ipp);
						NAMEREQ[playerid][0] = target;
             		}
             		else SendClientMessage(playerid, Lb, "That player has disconnected.");
				}
	        }
	    }
	    case DIALOG_AKA:
	    {
			if(response)
			{
			    if(strfind(inputtext, "> Next", true) != -1)
			    {
			        if(!IsPlayerConnected(PlayerInfo[playerid][aka_targetid]))
			        {
			            SendClientMessage(playerid, Lb, "That player has disconnected.");
			            return 1;
			        }

			        if(PlayerInfo[playerid][CurrentPage] != PlayerInfo[playerid][TotalPages])
					{
					    PlayerInfo[playerid][CurrentPage]++;
					}
					akasearchdialog(playerid);
			    }
                if(strfind(inputtext, "< Previous", true) != -1)
			    {
			        if(!IsPlayerConnected(PlayerInfo[playerid][aka_targetid]))
			        {
			            SendClientMessage(playerid, Lb, "That player has disconnected.");
			            return 1;
			        }

					if(PlayerInfo[playerid][CurrentPage] != 1)
					{
					    PlayerInfo[playerid][CurrentPage]--;
					}
					akasearchdialog(playerid);
			    }
			}
	    }
	    case DIALOG_CLANLOG:
	    {
			if(response)
			{
			    if(strfind(inputtext, "> Next", true) != -1)
			    {
			        if(PlayerInfo[playerid][CCurrentPage] != PlayerInfo[playerid][CTotalPages]) PlayerInfo[playerid][CCurrentPage]++;
					logsearchdialog(playerid);
			    }
                if(strfind(inputtext, "< Previous", true) != -1)
			    {
					if(PlayerInfo[playerid][CCurrentPage] != 1) PlayerInfo[playerid][CCurrentPage]--;
					logsearchdialog(playerid);
			    }
			}
	    }
		case DIALOG_TOYS:
		{
		    if(!response) return 1;
			Ajusting[playerid] = 0;
			if(listitem == 0)
			{
			    OnToy[playerid] = 4;
			    if(cToy1[playerid] != -1)
			    {
			        ShowPlayerDialog(playerid, DIALOG_TOYS2, DIALOG_STYLE_TABLIST_HEADERS, "Clan Toy: Slot 1", "Options\nChange Toy (500HP)\nAjust Toy\nRemove Toy", "Select", "Cancel");
			    }
			    else SetTimerEx("ShowToyList", 500, false, "d", playerid);
			}
			else
			{
			    if(cLevel[playerid] == 5) {ERR(playerid, "Upgrade your clan to level 6 to unlock this slot."); ShowPlayerDialog(playerid, DIALOG_TOYS, DIALOG_STYLE_TABLIST_HEADERS, "Clan Toys", "Slot\tRequired Clan Level\nToy 1\tLevel 5\nToy 2\tLevel 6", "Select", "Cancel"); return 1; }
			    OnToy[playerid] = 5;
			    if(cToy2[playerid] != -1)
			    {
			        ShowPlayerDialog(playerid, DIALOG_TOYS2, DIALOG_STYLE_TABLIST_HEADERS, "Clan Toy: Slot 2", "Options\nChange Toy (500HP)\nAjust Toy\nRemove Toy", "Select", "Cancel");
			    }
			    else SetTimerEx("ShowToyList", 500, false, "d", playerid);
			}
			return 1;
		}
		case DIALOG_TOYS2:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			 	case 0:   SetTimerEx("ShowToyList", 500, false, "d", playerid);
			    case 1:
				{
				 	Ajusting[playerid] = 1;
				    new index = OnToy[playerid];
	                EditAttachedObject(playerid, index);
				}
				case 2:
				{
				    new slot = OnToy[playerid];
				    new xx = PlayerInfo[playerid][InClan];
				    new query[128];
				    if(slot == 4)
				    {
				        foreach(new i : Player)
				        {
				            if(PlayerInfo[i][InClan] == xx)
				            {
				        		cToy1[i] = -1;
				        		RemovePlayerAttachedObject(i, slot);
				            }
				        }
				        mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `ctoy1` = -1 WHERE `cid`=%d LIMIT 1", xx);
				    }
				    else
				    {
				        foreach(new i : Player)
				        {
				            if(PlayerInfo[i][InClan] == xx)
				            {
				        		cToy2[i] = -1;
				        		RemovePlayerAttachedObject(i, slot);
				            }
				        }
				        mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `ctoy2` = -1 WHERE `cid`=%d LIMIT 1", xx);
				    }

					mysql_tquery(mysql, query);
				}
			}
		}
		case DIALOG_ASETTINGS:
		{
			if(!response) return 1;

			if(listitem == 0)
			{
			    if(Bit_Get(ToggleState[playerid], TOGGLE_CMDTDS))
				{
				    TextDrawHideForPlayer(playerid, AdminCMD_TD[0]);
		    		TextDrawHideForPlayer(playerid, AdminCMD_TD[1]);
		    		TextDrawHideForPlayer(playerid, AdminCMD_TD[2]);
		    		TextDrawHideForPlayer(playerid, AdminCMD_TD[3]);
		            Bit_Set(ToggleState[playerid], TOGGLE_CMDTDS, false);
					SendClientMessage(playerid, COLOR_YELLOW, "[Admin Settings]: You have disabled command logs.");
				}
			    else
				{
				    TextDrawShowForPlayer(playerid, AdminCMD_TD[0]);
		    		TextDrawShowForPlayer(playerid, AdminCMD_TD[1]);
		    		TextDrawShowForPlayer(playerid, AdminCMD_TD[2]);
		    		TextDrawShowForPlayer(playerid, AdminCMD_TD[3]);
		            Bit_Set(ToggleState[playerid], TOGGLE_CMDTDS, true);
					SendClientMessage(playerid, COLOR_YELLOW, "[Admin Settings]: You have enabled command logs.");
				}
			}
			else if(listitem == 1)
			{
			    if(Bit_Get(ToggleState[playerid], TOGGLE_SPECTDS))
				{
				    if(Spectating[playerid] == 1)
				    {
				        PD_CONSOLE_HIDE(playerid);
						CancelSelectTextDraw(playerid);
				    }
				    Bit_Set(ToggleState[playerid], TOGGLE_SPECTDS, false);
				    SendClientMessage(playerid, COLOR_YELLOW, "[Admin Settings]: You have disabled spectator panel.");
				}
			    else
				{
				    if(Spectating[playerid] == 1)
				    {
				        PlayerTextDrawSetString(playerid, SpecPanel_PTD[playerid][0], "waiting...");
						PD_CONSOLE_SHOW(playerid);
						SelectTextDraw(playerid, 0xEA1540FF);

						RefrechCON(playerid, PlayerInfo[playerid][SpecID]);
				    }
				    Bit_Set(ToggleState[playerid], TOGGLE_SPECTDS, true);
				    SendClientMessage(playerid, COLOR_YELLOW, "[Admin Settings]: You have enabled spectator panel.");
				}
			}
			else if(listitem == 2)
			{
			    if(Bit_Get(ToggleState[playerid], TOGGLE_ACNOT))
				{
					Bit_Set(ToggleState[playerid], TOGGLE_ACNOT, false);
				    SendClientMessage(playerid, COLOR_YELLOW, "[Admin Settings]: You have disabled anti-cheat notifications.");
				}
			    else
				{
					Bit_Set(ToggleState[playerid], TOGGLE_ACNOT, true);
				    SendClientMessage(playerid, COLOR_YELLOW, "[Admin Settings]: You have enabled anti-cheat notifications.");
				}
			}
			else if(listitem == 3)
			{
			    if(PlayerInfo[playerid][namekey])
				{
					PlayerInfo[playerid][namekey] = false;
				    SendClientMessage(playerid, COLOR_YELLOW, "[Admin Settings]: You have disabled 'N' key to open name change requests.");
				}
			    else
				{
					PlayerInfo[playerid][namekey] = true;
				    SendClientMessage(playerid, COLOR_YELLOW, "[Admin Settings]: You have enabled 'N' key to open name change requests.");
				}
			}
		}
		case INTERIORS_DIALOG:
		{
		    if(response)
		    {
		        SetPlayerInterior(playerid, INTERIOR[listitem][iddd]);
		        SetPlayerPos(playerid, INTERIOR[listitem][xxxx], INTERIOR[listitem][yyyy], INTERIOR[listitem][zzzz]);
			}
		}
		case CLANSLIST_DIALOG:
		{
		    if(response)
		    {
		        new cc = ClanID[listitem], cat[1000], cname[20], bool:first;
		        first = true;
		        foreach(new i : Player)
		        {
		            if(PlayerInfo[i][InClan] == cc)
		            {
		                strcat(cat, PlayerInfo[i][Nick]);
		                strcat(cat, "\n");
						if(first) strcopy(cname, cName[i]);
						first = false;
		            }
		        }
				ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_LIST,cname,cat,"ok","");
		    }
		    return 1;
		}
		case TOGGLE_DIALOG:
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0: cmd_toggletextdraws(playerid);
				case 1: cmd_tm(playerid);
				case 2: cmd_th(playerid);
				case 3: cmd_dnd(playerid);
				case 4: Bit_Set(ToggleState[playerid], TOGGLE_ANTISK, !Bit_Get(ToggleState[playerid], TOGGLE_ANTISK));
				case 5: Bit_Set(ToggleState[playerid], TOGGLE_CLANTAG, !Bit_Get(ToggleState[playerid], TOGGLE_CLANTAG));
				case 6: Bit_Set(ToggleState[playerid], TOGGLE_VIPMSG, !Bit_Get(ToggleState[playerid], TOGGLE_VIPMSG));
			}
			cmd_toggle(playerid);
		}
		case PAUSED_DIALOG:
		{
			if(!response) cmd_paused(playerid);
		}
		case DESYNCED_DIALOG:
		{
			if(!response) cmd_desynced(playerid);
		}
		case CMDCENTER_DIALOG:
		{
			if(!response) return 1;
			switch(listitem)
			{
			    case 0:
			    {
					if(PlayerInfo[playerid][XP] < 50) return ERR(playerid, "You do not have enough XP (50 required).");
					if(airused) return ERR(playerid, "Please retry in few seconds, someone is already using the RACS.");
					airused = true;
					explodewait = false;
					SetPlayerPos(playerid,153.6151,1845.2551,17.6406);
					SetPlayerVirtualWorld(playerid, 0);
					pairwaittimer = SetTimerEx("WaitInAir", 32000, false, "d", playerid);
					aircraft = CreateObject(1681,-92.5210,1897.0782,18.1988+75,11.9,0,264.1345,500);
					MoveObject(aircraft, 406.7143,1858.7239,19.9961+75, 15);
					AttachCameraToObject(playerid, aircraft);
					airvehdriver = playerid;
					SetTimerEx("Verify", 500, false, "d", playerid);
					PlayerPlaySound(playerid, 1181,0,0,0);
					DestroyObject(testbomb);
					testbomb = -1;
					TextDrawShowForPlayer(airvehdriver, CMD0);
					TextDrawShowForPlayer(airvehdriver, CMD1);
					TextDrawShowForPlayer(airvehdriver, CMD2);
					TextDrawShowForPlayer(airvehdriver, CMD3);
					TextDrawShowForPlayer(airvehdriver, CMD4);
					TextDrawShowForPlayer(airvehdriver, CMD5);
					TextDrawShowForPlayer(airvehdriver, CMD6);
					TextDrawShowForPlayer(airvehdriver, CMD7);
					TextDrawShowForPlayer(airvehdriver, CMD8);
					TextDrawShowForPlayer(airvehdriver, CMD9);
					aircount = 0;
					cmd_toggletextdraws(playerid);
				}
				case 1:
				{
				    new CMDBaseDeftic = CMDBaseDeftick[gTeam[playerid]];
				    if((GetTickCount() - CMDBaseDeftic) < 3600000)
					{
					    new str[67],rem = 3600 - ((GetTickCount() - CMDBaseDeftic)/1000);
						new seconds = rem % 60;
						new  minutes = (rem-seconds) /60;
					    format(str, _, "Base defence will be available to use in %d minutes and %d seconds.", minutes, seconds);
					    return ERR(playerid, str);
					}
					if(PlayerInfo[playerid][XP] < 70) return ERR(playerid, "You do not have enough XP (70 required).");
					ShowPlayerDialog(playerid, CMDBASEDEF_DIALOG, DIALOG_STYLE_MSGBOX, "Confirmation", "** Base Defences will provide you the following features:\n\n->Make enemies using Camouflage visible in your base.\nBreak GPS of enemies in your base.\n->Expose spies in your base.\n\nAre you sure you want to activate base defences?","Yes","No");
				}
				case 2:
				{
				    if(PlayerInfo[playerid][XP] < 250) return ERR(playerid, "You do not have enough XP to use the Zeppelin.");
				    new tt = gTeam[playerid];
				    ZepDialog[playerid] = 1;
					if(!ZP_Available[tt]) return ERR(playerid, "Someone is already using your team Zeppelin.");
					new str[1000];
					strcat(str,"\n-- Zeppelin (Airship L30) --\n\n");
					strcat(str,"{15ADF7}Zeppelins{FFFFFF} were first introduced by Nazis on 2 July 1900.\n");
					strcat(str,"{FFFFFF}They are known for their resistance to heavy vehicles, each Zeppelin has 5000 HP and can be damaged by on foot weapons only.\n");
					strcat(str,"Each {15ADF7}Zeppelin{FFFFFF} can drop unlimited numbers of bombs. However, a cooldown can be triggered if you throw too many bombs in\n");
					strcat(str,"a small period of time.\n");
					strcat(str,"-> Press {15ADF7}Fire{FFFFFF} key to drop a bomb (CTRL or LMB).\n");
					strcat(str,"-> Press {15ADF7}N{FFFFFF} key to escape with an emergency parachute.\n");
					strcat(str,"-> Press {15ADF7}Y{FFFFFF} to toggle the {15ADF7}Zeppelin{FFFFFF}'s movement / camera view.\n");
					strcat(str,"-> To move the {15ADF7}Zeppelin{FFFFFF}, you have to stop moving the mouse and fix your camera in a specific direction.\n");
					strcat(str,"{15ADF7}Zeppelins{FFFFFF} are invincible in their bases.\n");
					strcat(str,"{15ADF7}250 XP{FFFFFF} are instantly deducted from your balance once you press 'Fly'.\n\n\n");
					ShowPlayerDialog(playerid,ZEPPELIN_DIALOG,DIALOG_STYLE_MSGBOX,"Use the Zeppelin?",str,"Fly","Cancel");
				}
			}
		}
		case DIALOG_FRIENDS:
		{
			if(response)
			{
			    FriendSelection[playerid] = listitem;
			    ShowPlayerDialog(playerid, DIALOG_FRIEND, DIALOG_STYLE_LIST, FriendLine[playerid][listitem], "Stats\nUnfriend", "Select", "Cancel");
			}
			return 1;
		}
		case DIALOG_FRIEND:
		{
			if(response)
			{
			    new sid = FriendSelection[playerid];
			    if(!listitem)
			    {
			        new query[156];
					mysql_format(mysql, query, sizeof(query), "SELECT `name`,`laston`,`vip`,`kills`,`deaths`,`XP`,`score` FROM `playerbase` WHERE `id` ='%d' LIMIT 1",FriendID[playerid][sid]);
					mysql_pquery(mysql,query,"FriendStats","d",playerid);
			    }
			    else
			    {
					new id1 = PlayerInfo[playerid][AID], id2 = FriendID[playerid][sid];
					new query[156];
					mysql_format(mysql,query,sizeof(query),"DELETE FROM `friends` WHERE (`alpha`=%d AND `beta`=%d) OR (`beta`=%d AND `alpha`=%d) LIMIT 1",id1,id2,id1,id2);
					mysql_tquery(mysql, query);
					foreach(new i : Player)
					{
					    if(FriendID[playerid][sid] == PlayerInfo[i][AID])
					    {
					        SendClientMessage(i, COLOR_YELLOW, "%s has unfriended you.", PlayerInfo[playerid][Nick]);
					        SendClientMessage(playerid, COLOR_YELLOW, "You have unfriended %s.", PlayerInfo[i][Nick]);
					        new start;
					        for(new j = 0; j < 50; j ++)
					        {
					            if(FriendID[i][j] == id1) start = 1;
					            if(j == 49)
					            {
					                FriendID[i][j] = -1;
					                FriendLine[i][j][0] = '\0';
					                break;
					            }
					            if(start)
					            {
					                strcopy(FriendLine[i][j], FriendLine[i][j+1]);
					                FriendID[i][j] = FriendID[i][j+1];
					            }
					        }
					        start = 0;
					        for(new j = 0; j < 50; j ++)
					        {
					            if(FriendID[playerid][j] == PlayerInfo[i][AID]) start = 1;
					            if(j == 49)
					            {
					                FriendID[playerid][j] = -1;
					                FriendLine[playerid][j][0] = '\0';
					                break;
					            }
					            if(start)
					            {
					                strcopy(FriendLine[playerid][j], FriendLine[playerid][j+1]);
					                FriendID[playerid][j] = FriendID[playerid][j+1];
					            }
					        }
					        return 1;
					    }
					}
			        for(new j = sid; j < 50; j ++)
			        {
			            if(j == 49)
			            {
			                FriendID[playerid][j] = -1;
			                FriendLine[playerid][j][0] = '\0';
			                break;
			            }
		                strcopy(FriendLine[playerid][j], FriendLine[playerid][j+1]);
		                FriendID[playerid][j] = FriendID[playerid][j+1];
			        }
			        SendClientMessage(playerid, -1, "Player unfriended.");
			    }
			}
			return 1;
		}
		case MAKECT_DIALOG:
		{
		    if(!response) return 1;
		    CLAN_TOURNAMENT[CT_ON] = true;
		    switch(listitem)
		    {
		        case 0:
				{
					CLAN_TOURNAMENT[CT_PHASE] = SEMI;
					CLAN_TOURNAMENT[CT_INITIAL_TEAMS] = 4;
					CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
					CLAN_TOURNAMENT[CT_PHASE_MAX_MATCHES] = 2;
				}
		        case 1:
				{
					CLAN_TOURNAMENT[CT_PHASE] = QUARTER;
					CLAN_TOURNAMENT[CT_INITIAL_TEAMS] = 8;
					CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH] = 0;
					CLAN_TOURNAMENT[CT_PHASE_MAX_MATCHES] = 4;
				}
		    }
		    ShowPlayerDialog(playerid, MAKECT2_DIALOG, DIALOG_STYLE_INPUT, "Clan Tournament Creator: Max Members", "Max Members for Each Team", "Next", "Cancel");
		}
		case MAKECT2_DIALOG:
		{
		    if(!response)
			{
			    CLAN_TOURNAMENT[CT_ON] = false;
				return 1;
			}
		    if(!IsNumeric(inputtext)) return ERR(playerid, "Invalid max members.");
		    new val = strval(inputtext);
		    if(val < 1 || val > 10) return ERR(playerid, "Max members from each team should be between 3 and 10");
		    CLAN_TOURNAMENT[CT_MAX] = val;
		    ShowPlayerDialog(playerid, MAKECT3_DIALOG, DIALOG_STYLE_LIST, "Clan Tournament Creator: Clan Adder", ">> Add a Clan", "Next", "Cancel");
		}
		case MAKECT3_DIALOG:
		{
		    if(!response)
			{
			    CLAN_TOURNAMENT[CT_ON] = false;
				foreach(new i : CT_TEAMS) CT_TEAM[i] = -1;
				Iter_Clear(CT_TEAMS);
				return 1;
			}
		    switch(listitem)
		    {
		        case 0:
		        {
		            if(Iter_Count(CT_TEAMS) == CLAN_TOURNAMENT[CT_INITIAL_TEAMS])
					{
					    new query[210];
						new maxteams = CLAN_TOURNAMENT[CT_INITIAL_TEAMS];
						if(maxteams == 4) mysql_format(mysql, query, sizeof(query), "SELECT `ctag`,`cid` FROM `clans` WHERE `cid` = '%d' OR `cid` = '%d' OR `cid` = '%d' OR `cid` = '%d' LIMIT 4", CT_TEAM[0],CT_TEAM[1],CT_TEAM[2],CT_TEAM[3]);
						else mysql_format(mysql, query, sizeof(query), "SELECT `ctag`,`cid` FROM `clans` WHERE `cid` = '%d' OR `cid` = '%d' OR `cid` = '%d' OR `cid` = '%d' OR `cid` = '%d' OR `cid` = '%d' OR `cid` = '%d' OR `cid` = '%d' LIMIT 8", CT_TEAM[0],CT_TEAM[1],CT_TEAM[2],CT_TEAM[3],CT_TEAM[4],CT_TEAM[5],CT_TEAM[6],CT_TEAM[7]);
						mysql_pquery(mysql, query, "GetCTTags", "d", playerid);
						return 1;
					}
					else ShowPlayerDialog(playerid, MAKECT4_DIALOG, DIALOG_STYLE_INPUT, "Clan Tournament Creator: Add a clan", "Please add a clan by its ID", "Next", "Back");
				}
				case 1..9:
				{
				    new slot = listitem - 1;
				    CTMaker_Slot = slot;
				    ShowPlayerDialog(playerid, MAKECT5_DIALOG, DIALOG_STYLE_LIST, "Clan Tournament Creator: Edit Clan", "Nevermind\nEdit Clan ID", "Next", "Back");
				}
		    }
		}
		case MAKECT4_DIALOG:
		{
		    if(!response) return ShowTournamentTeamDialog(playerid);
		    new val = strval(inputtext);
		    if(!IsNumeric(inputtext)) return ERR(playerid, "Invalid clan ID format.");
		    foreach(new i : CT_TEAMS)
		    {
		        if(CT_TEAM[i] == val)
				{
					ShowTournamentTeamDialog(playerid);
					ERR(playerid, "Clan ID Already added.");
					return 1;
				}
		    }
		    new slot = Iter_Free(CT_TEAMS);
		    Iter_Add(CT_TEAMS, slot);
		    CT_TEAM[slot] = val;
		    ShowTournamentTeamDialog(playerid);
		}
		case MAKECT5_DIALOG:
		{
		    if(!response) return ShowTournamentTeamDialog(playerid);
		    switch(listitem)
		    {
		        case 0: ShowTournamentTeamDialog(playerid);
		        case 1: ShowPlayerDialog(playerid, MAKECT6_DIALOG, DIALOG_STYLE_INPUT, "Clan Tournament Creator: Edit Clan ID", "Please enter the new clan ID", "Next", "Back");
			}
		}
		case MAKECT6_DIALOG:
		{
		    if(!response) return ShowTournamentTeamDialog(playerid);
		    new val = strval(inputtext);
		    if(!IsNumeric(inputtext)) return ERR(playerid, "Invalid clan ID format.");
		    foreach(new i : CT_TEAMS)
		    {
		        if(CT_TEAM[i] == val)
				{
					ShowTournamentTeamDialog(playerid);
					ERR(playerid, "Clan ID Already added.");
					return 1;
				}
		    }
		    CT_TEAM[CTMaker_Slot] = val;
		    ShowTournamentTeamDialog(playerid);
		}
		case VIPSHOP_DIALOG:
		{
		    playercheckin[playerid] = 0;
		}
		case CMDBASEDEF_DIALOG:
		{
			new tm = gTeam[playerid];
		    if(!response)
		    {
		        CMDPickuptick[playerid] = GetTickCount();
				new cat[160];
				strcat(cat, "{FFFFFF}Remote AirStrike  Control System (RACS){FF0000}\t{FFFFFF}Cost :{45FF00} 50XP\n{FFFFFF}Base Defence (");
				new CMDBaseDeftic = CMDBaseDeftick[tm];
				if((GetTickCount() - CMDBaseDeftic) < 3600000)
				{
				    new rem = 3600 - ((GetTickCount() - CMDBaseDeftic)/1000), minutes = rem /60, seconds = rem % 60;
				    format(cat, _, "%sAvailable in %d:%d", cat, minutes, seconds);
				} else strcat(cat, "Available Now");
				strcat(cat, ")\t{FFFFFF}Cost :{45FF00} 70XP");
				return ShowPlayerDialog(playerid, CMDCENTER_DIALOG, DIALOG_STYLE_LIST, "Command Center", cat, "Select", "Close");
		    }
		    new count;
			CMDBaseDeftick[gTeam[playerid]] = GetTickCount();
			PlayerInfo[playerid][XP] -= 70;
			SendClientMessage(playerid, Lg, "<!> Command Center Base Defences successfully activated.");
			foreach(new i : Player)
			{
			    if(i == playerid) continue;
			    if(InArena(i, NON))
			    {
			        new kk = gTeam[i];
				    if(kk == tm) SendClientMessage(i, COLOR_YELLOW, "<!> Base defences have been activated in your base.");
				    else
				    {
				        if(IsPlayerInArea(i, BASERAPE[tm][MinXX], BASERAPE[tm][MinYY], BASERAPE[tm][MaxXX], BASERAPE[tm][MaxYY]))
				        {
					        if(TEAMDATA[kk][skinid] != GetPlayerSkin(i))
					        {
					            if(!(kk == TEAM_MERC || kk == TEAM_NONE))
					            {
						            GameTextForPlayer(i,"~r~This Base Defences are activated~n~~r~You are exposed, run away!", 5000, 3);
						            SetPlayerSkin(i, TEAMDATA[kk][skinid]);
									SetPlayerColor(i, TEAMDATA[kk][Color]);
									UpdateLabelText(i);
									PlayerPlaySound(i, 6001, 0,0,0);
									count++;
					            }
					        }
					        if(pGPS[i] || pCamouflage[i])
					        {
					            pGPS[i] = PlayerInfo[i][GPS] =  pCamouflage[i] = PlayerInfo[i][Camouflage] = false;
								GameTextForPlayer(i,"~r~This base defences are activated!~n~~rGPS SCRAMBLER/Camouflage~n~~g~~h~DEACTIVATED",5000,5);
								SendClientMessage(i,Lg,"* Now you are visible in map and your GPS/Camouflage has been broken.");
								SetPlayerColor(i, TEAMDATA[kk][Color]);
								PlayerPlaySound(i, 6001, 0,0,0);
								SetTimerEx("StopAlarm", 4000, false, "d", i);
								count ++;
					        }
				        }
				    }
				}
			}
		}
		case VIP_DIALOG:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_MSGBOX, "{FFFFFF}Donor {F3FF02}Rank 1 {FFFFFF}Features", "{FFFFFF}Helmet on spawn\n2 score on each kill\n/v vip chat\nUnlocks donor class\n/dcolor (/dcc) changes vehicle color\n/dfix fixes any vehicle\n1.2x faster capture\n/dheal(/dh)\n/darmour(/da)\n/dnos adds nitro\nDual Sawn-Off\n30 Friends Slots","ok","");
				case 1: ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_MSGBOX, "{FFFFFF}Donor {F3FF02}Rank 2 {FFFFFF}Features", "{FFFFFF}Donor {F3FF02}Rank 1 {FFFFFF}Features +\n\n/dvehicle\n/dweather (/dw)\n/dboost: 1 RPG & 2 Grenades and 20HP & 20 Armor to teammates in range\nDrives all heavy vehicles\n/dweap: donor special weapons\n/dcar: donor sports car\n1.4x faster capture\n40 Friends Slots","ok","");
				case 2: ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_MSGBOX, "{FFFFFF}Donor {F3FF02}Rank 3 {FFFFFF}Features", "{FFFFFF}Donor {F3FF02}Rank 1/2 {FFFFFF}Features +\n\n/dbike: donor bike\n/dmk : donor music kit (check forums for tutorial)\n1.6x faster capture\n/dskin: donor skin\n/lock : lock - unlock your donor vehicle\nCan spawn in any team without team balance requirement.\n/dtext [text] to put a 3D Text label on your character's head.\n50 Friends Slots","ok","");
				case 3: ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_MSGBOX, "{FFFFFF}Donor {F3FF02}Rank 4 {FFFFFF}Features", "{FFFFFF}Donor {F3FF02}Rank 1/2/3 {FFFFFF}Features +\n\nCannot be hit by AMML\nCannot be nuked\n2x faster capture time\nCannot be hit by airstrike\n/inv to toggle donor vehicle only visibility\nAnti explosions vest on each spawn","ok","");
				case 4: ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_MSGBOX, "{FFFFFF}Donor {F3FF02}Rank 5 {FFFFFF}Features", "{FFFFFF}Donor {F3FF02}Rank 1/2/3/4 {FFFFFF}Features +\n\n2.3x faster capture time\n2x bigger rustler bombs range\n2x toxic bomb damage\n5 seconds only AAML cooldown\nUnlimited toxic plane bombs\nCannot be spotted or located by spotter.","ok","");
				case 5: ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_MSGBOX, "{FFFFFF}Sponsor {F3FF02} Rank{FFFFFF}Features", "{FFFFFF}All Donor{F3FF02} Ranks {FFFFFF}Features\n\nAbility to use event cmds (/eventhelp).\nAbility to spawn any non heavy vehicle (/sveh)\nAbility to make a *1-Day Level 1 VIP* giveaway once a week (/svipga)\nAbility to make a 500 score giveaway once a week (/scorega)","ok","");
			}
		}
		case BANUNDO_DIALOG:
		{
			if(!response) return 1;
			if(isnull(undo[playerid][listitem])) return 1;
			SendClientMessage(playerid, -1, "You have unbanned %s", undo[playerid][listitem]);
			cmd_unban(playerid, undo[playerid][listitem]);
			CMDMessageToAdmins(playerid,"UNDO");
			for(new i = listitem; i > 0; i--) undo[playerid][i] = undo[playerid][i-1];
			undo[playerid][0][0] = '\0';
			cmd_undo(playerid);
		}
		case ADDM_DIALOG:
		{
			if(!response) return 1;
			new id = ADDM[playerid][listitem];
			if(!IsPlayerConnected(id)) return ERR(playerid,"Player has disconnected and cannot be added.");
			if(!InArena(playerid, NON)) return ERR(playerid,"Player is in DM and cannot add them");
			if(!CLAN_WAR[CW_ON]) return ERR(playerid, "Clan war time expired");
			AddBeforeWar(id);
			new Cat[1200];
			if(CLAN_WAR[CW_STARTED]) return ERR(playerid,"Clan war already started you can't add more players");
			new maxx = CLAN_WAR[CW_MAX], c, x = PlayerInfo[playerid][InClan], count;
			if(CLAN_WAR[CW_STARTER] == playerid)
			{

				c = Iter_Count(JOINED1);
				if(c == maxx) return SendClientMessage(playerid, COLOR_YELLOW, "Your clan war members list is now full.");
				if(CLAN_WAR[CW_ON])
    			{
					foreach(new i : ARENA[NON])
					{
						if(!HasJoined1(i))
						{
							if(PlayerInfo[i][InClan] == x)
							{
							    if(PlayerInfo[i][IsSpawned])
							    {
									if(i != playerid)
									{
										ADDM[playerid][count] = i;
										format(Cat, _,"%s{C0C0C0}[ %s %s ]\n", Cat, cRankName[i] ,PlayerInfo[i][Nick]);
										count ++;
									}
								}
							}
						}
					}
				}
			}
			else if(CLAN_WAR[CW_ACCEPTER] == playerid)
			{

				c = Iter_Count(JOINED2);
				if(c == maxx) return SendClientMessage(playerid, COLOR_YELLOW, "Your clan war members list is now full.");
				if(CLAN_WAR[CW_ON])
				{
					foreach(new i : ARENA[NON])
					{
						if(!HasJoined2(i))
						{
							if(PlayerInfo[i][InClan] == x)
							{
								if(i != playerid)
								{
									ADDM[playerid][count] = i;
									format(Cat, _, "%s{C0C0C0}[ %s %s ]\n", Cat, cRankName[i] ,PlayerInfo[i][Nick]);
									count ++;
								}
							}
						}
					}
				}
			}
			ShowPlayerDialog(playerid,ADDM_DIALOG,DIALOG_STYLE_LIST,"Add Members",Cat,"Add","Close");
			return 1;
		}
		case STRIKE_DIALOG:
		{

			if(!response) return SendClientMessage(playerid, COLOR_WHITE, "You have canceled the attack.");
			if(StrikeCooled) return SendClientMessage(playerid, COLOR_WHITE, "Please wait 1 minute after the last striking operation.");
			if(strikingplayer != playerid) return SendClientMessage(playerid, COLOR_WHITE, "A player has already stricken or you waiting time is over. Try again later");
			KillTimer(StrikeWait);
			StrikeCooled = true;
			SetTimer("StrikeCoolDown", 1*60*1000, false);
			strikingplayer = -1;
			new count;
			new sz = sizeof(BASERAPE);
			new xx = PlayerInfo[playerid] [InClan];
			new tt = gTeam[playerid];
			foreach(new x : ARENA[NON])
			{
				if(!PlayerInfo[x][OnDuty])
				{
					if(GetPlayerTeam(x) != tt)
					{
						if(xx != -1) if(PlayerInfo[x][InClan] == xx) { goto skipit;}
						if(!AntiSK[x])
						{
							for(new zo = 0; zo< sz; zo++) { if(IsPlayerInArea(x, BASERAPE[zo][MinXX], BASERAPE[zo][MinYY], BASERAPE[zo][MaxXX], BASERAPE[zo][MaxYY])) continue;}
							new Float:xp,Float:y,Float:z;
							GetPlayerPos(x, xp,y,z);
							if(IsPlayerInRangeOfPoint(x, 30.0, strikex, strikey, z))
							{

								GameTextForPlayer(x, "~r~Clan Base Airstrike!~n~~b~You have been bombed", 5000, 6);
								count++;
								PlayerPlaySound(x, 1159, xp,y,z);
								SetPlayerHealth(x, 0);
								SendDeathMessage(playerid, x, 47);
							}
						}
						skipit:{}
					}
				}
			}
			new name[24]; strcat(name, PlayerInfo[playerid][Nick]);
			if(count > 0)
			{
				ConnectKills[playerid]  += count;
				PlayerInfo[playerid][Kills] += count;
				Streak[playerid] += count;
				GiveCash(playerid, 10000*count);
				if(cPerk[playerid][P_MONEY] > 0)
				{
					SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
					GiveCash(playerid,11500*count);
				}
				SetPlayerScore(playerid, GetPlayerScore(playerid)+count);
				SendClientMessage(playerid, -1, "{80FF00}[C-Base Airstrike] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the airstrike, %d score and $%d", count, count, count * 11500);
				if(xx != -1)
				{
					new rnn;
					rnn = random(1500)*count;
					new msg[96];
					format(msg, _, "* Clan has recieved %d$ from %s Clan Base airstrike kills!", rnn, name);
					ClanMSG(xx,msg);
					foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
				}
			}
		}
		case TOPCLANSDIALOG:
		{
			if(!response) return 1;
			switch(listitem)
			{

				case 0: mysql_pquery(mysql, "SELECT `cid`,`cname`,`ckills` FROM `clans` ORDER BY `ckills` DESC LIMIT 25", "TopClans", "id", playerid, 0);
				case 1: mysql_pquery(mysql, "SELECT `cid`,`cname`,`chpoints` FROM `clans` ORDER BY `chpoints` DESC LIMIT 25", "TopClans", "id", playerid, 1);
				case 2: mysql_pquery(mysql, "SELECT `cid`,`cname`,`clevel` FROM `clans` ORDER BY `clevel` DESC LIMIT 25", "TopClans", "id", playerid, 2);
				case 3: mysql_pquery(mysql, "SELECT `cid`,`cname`,`cwins` FROM `clans` ORDER BY `cwins` DESC LIMIT 25", "TopClans", "id", playerid, 3);
				case 4: mysql_pquery(mysql, "SELECT `cid`,`cname`,`cmembers` FROM `clans` ORDER BY `cmembers` DESC LIMIT 25", "TopClans", "id", playerid, 4);
				case 5: mysql_pquery(mysql, "SELECT `cid`,`cname`,`ckills`,`cdeaths` FROM `clans` ORDER BY (`ckills`/`cdeaths`) DESC LIMIT 25", "TopClans", "id", playerid, 5);
				case 6: mysql_pquery(mysql, "SELECT `cid`,`cname`,`cathp` FROM `clans` ORDER BY `cathp` DESC LIMIT 25", "TopClans", "id", playerid, 6);
				case 7: mysql_pquery(mysql, "SELECT `cid`,`cname`,`rank` FROM `clans` ORDER BY `rank` DESC LIMIT 25", "TopClans", "id", playerid, 7);
			}
		}
		case APROGRESS:
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, BACHIEVEMENT, DIALOG_STYLE_LIST, "Bronze Achievements", "Weapons Achievements\nMissions Achievements\nStats Achievements", "Select", "Back");
				case 1:	ShowPlayerDialog(playerid, SACHIEVEMENT, DIALOG_STYLE_LIST, "Silver Achievements", "Weapons Achievements\nMissions Achievements\nStats Achievements", "Select", "Back");
				case 2:	ShowPlayerDialog(playerid, GACHIEVEMENT, DIALOG_STYLE_LIST, "Gold Achievements", "Weapons Achievements\nMissions Achievements\nStats Achievements", "Select", "Back");
			}
		}

		case BACHIEVEMENT:
		{

			if(!response) return ShowPlayerDialog(playerid, APROGRESS, DIALOG_STYLE_LIST, "Achievements Progress", "{BB6600}Bronze Achievements\n{B9BABA}Silver Achievements\n{EDC200}Gold Achievements", "Select", "Cancel");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, BWEAPONSA, DIALOG_STYLE_TABLIST_HEADERS, "Bronze Weapons Achievements", WeaponStatus(playerid, 0), "Info", "Back");
				case 1: ShowPlayerDialog(playerid, BMISSIONSA, DIALOG_STYLE_TABLIST_HEADERS, "Bronze Missions Achievements", MissionStatus(playerid, 0), "Info", "Back");
				case 2: ShowPlayerDialog(playerid, BSTATSSA, DIALOG_STYLE_TABLIST_HEADERS, "Bronze Missions Achievements", StatsStatus(playerid, 0), "Info", "Back");
			}
		}
		case SACHIEVEMENT:
		{

			if(!response) return ShowPlayerDialog(playerid, APROGRESS, DIALOG_STYLE_LIST, "Achievements Progress", "{BB6600}Bronze Achievements\n{B9BABA}Silver Achievements\n{EDC200}Gold Achievements", "Select", "Cancel");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, SWEAPONSA, DIALOG_STYLE_TABLIST_HEADERS, "Silver Weapons Achievements", WeaponStatus(playerid, 1), "Info", "Back");
				case 1: ShowPlayerDialog(playerid, SMISSIONSA, DIALOG_STYLE_TABLIST_HEADERS, "Silver Missions Achievements", MissionStatus(playerid, 1), "Info", "Back");
				case 2: ShowPlayerDialog(playerid, SSTATSSA, DIALOG_STYLE_TABLIST_HEADERS, "Silver Missions Achievements", StatsStatus(playerid, 1), "Info", "Back");
			}
		}
		case GACHIEVEMENT:
		{

			if(!response) return ShowPlayerDialog(playerid, APROGRESS, DIALOG_STYLE_LIST, "Achievements Progress", "{BB6600}Bronze Achievements\n{B9BABA}Silver Achievements\n{EDC200}Gold Achievements", "Select", "Cancel");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, GWEAPONSA, DIALOG_STYLE_TABLIST_HEADERS, "Gold Weapons Achievements", WeaponStatus(playerid, 2), "Info", "Back");
				case 1: ShowPlayerDialog(playerid, GMISSIONSA, DIALOG_STYLE_TABLIST_HEADERS, "Gold Missions Achievements", MissionStatus(playerid, 2), "Info", "Back");
				case 2: ShowPlayerDialog(playerid, GSTATSSA, DIALOG_STYLE_TABLIST_HEADERS, "Gold Missions Achievements", StatsStatus(playerid, 2), "Info", "Back");
			}
		}

		case BSTATSSA:
		{

			if(!response) return ShowPlayerDialog(playerid, BACHIEVEMENT, DIALOG_STYLE_LIST, "Bronze Achievements", "Weapons Achievements\nMissions Achievements\nStats achievements", "Select", "Back");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, BSTATSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Stats Achievements", "Quick Takeoverer\nHave a 10 zone captures spree", "Back", "Exit");
				case 1:	ShowPlayerDialog(playerid, BSTATSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Stats Achievements", "Disabled", "Back", "Exit");
				case 2:	ShowPlayerDialog(playerid, BSTATSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Stats Achievements", "Getting There\nGet a 10 kills spree", "Back", "Exit");
				case 3:	ShowPlayerDialog(playerid, BSTATSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Stats Achievements", "Mad Boy\nGet a 10 deaths spree", "Back", "Exit");
				case 4:	ShowPlayerDialog(playerid, BSTATSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Stats Achievements", "Pwned\nCollect 50 Deaths", "Back", "Exit");
				case 5:	ShowPlayerDialog(playerid, BSTATSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Stats Achievements", "Bad Boy\nCollect 100 Kills", "Back", "Exit");
			}
		}
		case SSTATSSA:
		{

			if(!response) return ShowPlayerDialog(playerid, SACHIEVEMENT, DIALOG_STYLE_LIST, "Silver Achievements", "Weapons Achievements\nMissions Achievements\nStats achievements", "Select", "Back");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, SSTATSAINFO, DIALOG_STYLE_MSGBOX, "Silver Stats Achievements", "Crazy Capturer\nHave a 50 zone captures spree", "Back", "Exit");
				case 1:	ShowPlayerDialog(playerid, SSTATSAINFO, DIALOG_STYLE_MSGBOX, "Silver Stats Achievements", "Disabled", "Back", "Exit");
				case 2:	ShowPlayerDialog(playerid, SSTATSAINFO, DIALOG_STYLE_MSGBOX, "Silver Stats Achievements", "Hitman\nGet a 50 kills spree", "Back", "Exit");
				case 3:	ShowPlayerDialog(playerid, SSTATSAINFO, DIALOG_STYLE_MSGBOX, "Silver Stats Achievements", "Domination Rage\nGet a 15 deaths spree", "Back", "Exit");
				case 4:	ShowPlayerDialog(playerid, SSTATSAINFO, DIALOG_STYLE_MSGBOX, "Silver Stats Achievements", "Get Rekt\nCollect 100 Deaths", "Back", "Exit");
				case 5:	ShowPlayerDialog(playerid, SSTATSAINFO, DIALOG_STYLE_MSGBOX, "Silver Stats Achievements", "Legendary Player\nCollect 500 Kills", "Back", "Exit");
			}
		}
		case GSTATSSA:
		{

			if(!response) return ShowPlayerDialog(playerid, GACHIEVEMENT, DIALOG_STYLE_LIST, "Gold Achievements", "Weapons Achievements\nMissions Achievements\nStats achievements", "Select", "Back");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, GSTATSAINFO, DIALOG_STYLE_MSGBOX, "Gold Stats Achievements", "Insane Capturer\nHave a 100 zone captures spree", "Back", "Exit");
				case 1:	ShowPlayerDialog(playerid, GSTATSAINFO, DIALOG_STYLE_MSGBOX, "Gold Stats Achievements", "Disabled", "Back", "Exit");
				case 2:	ShowPlayerDialog(playerid, GSTATSAINFO, DIALOG_STYLE_MSGBOX, "Gold Stats Achievements", "International Agent\nGet a 100 kills spree", "Back", "Exit");
				case 3:	ShowPlayerDialog(playerid, GSTATSAINFO, DIALOG_STYLE_MSGBOX, "Gold Stats Achievements", "Total Humliliation\nGet a 20 deaths spree", "Back", "Exit");
				case 4:	ShowPlayerDialog(playerid, GSTATSAINFO, DIALOG_STYLE_MSGBOX, "Gold Stats Achievements", "Game Over\nCollect 500 Deaths", "Back", "Exit");
				case 5:	ShowPlayerDialog(playerid, GSTATSAINFO, DIALOG_STYLE_MSGBOX, "Gold Stats Achievements", "Elite Player\nCollect 2000 Kills", "Back", "Exit");
			}
		}
		case BMISSIONSA:
		{

			if(!response) return ShowPlayerDialog(playerid, BACHIEVEMENT, DIALOG_STYLE_LIST, "Bronze Achievements", "Weapons Achievements\nMissions Achievements\nStats achievements", "Select", "Back");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, BMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Missions Achievements", "Territories Seeker\nCapture 50 zones", "Back", "Exit");
				case 1:	ShowPlayerDialog(playerid, BMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Missions Achievements", "Helper Needed\nHelp in zones capturing 50 times", "Back", "Exit");
				case 2:	ShowPlayerDialog(playerid, BMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Missions Achievements", "Disabled", "Back", "Exit");
				case 3:	ShowPlayerDialog(playerid, BMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Missions Achievements", "Disabled", "Back", "Exit");
				case 4:	ShowPlayerDialog(playerid, BMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Missions Achievements", "Disabled", "Back", "Exit");
			}
		}
		case SMISSIONSA:
		{

			if(!response) return ShowPlayerDialog(playerid, SACHIEVEMENT, DIALOG_STYLE_LIST, "Silver Achievements", "Weapons Achievements\nMissions Achievements\nStats achievements", "Select", "Back");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, SMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Silver Missions Achievements", "Nazi Mentality\nCapture 100 zones", "Back", "Exit");
				case 1:	ShowPlayerDialog(playerid, SMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Silver Missions Achievements", "Gentle Soldier\nHelp in zones capturing 100 times", "Back", "Exit");
				case 2:	ShowPlayerDialog(playerid, SMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Silver Missions Achievements", "Disabled", "Back", "Exit");
				case 3:	ShowPlayerDialog(playerid, SMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Silver Missions Achievements", "Disabled", "Back", "Exit");
				case 4:	ShowPlayerDialog(playerid, SMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Silver Missions Achievements", "Disabled", "Back", "Exit");
			}
		}
		case GMISSIONSA:
		{

			if(!response) return ShowPlayerDialog(playerid, GACHIEVEMENT, DIALOG_STYLE_LIST, "Gold Achievements", "Weapons Achievements\nMissions Achievements\nStats achievements", "Select", "Back");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, GMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Missions Achievements", "The True Imperialist\nCapture 500 zones", "Back", "Exit");
				case 1:	ShowPlayerDialog(playerid, GMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Missions Achievements", "For Our Nation\nHelp in zones capturing 500 times", "Back", "Exit");
				case 2:	ShowPlayerDialog(playerid, GMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Missions Achievements", "Disabled", "Back", "Exit");
				case 3:	ShowPlayerDialog(playerid, GMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Missions Achievements", "Disabled", "Back", "Exit");
				case 4:	ShowPlayerDialog(playerid, GMISSIONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Missions Achievements", "Disabled", "Back", "Exit");
			}
		}
		case BMISSIONSAINFO:
		{

			if(response) ShowPlayerDialog(playerid, BMISSIONSA, DIALOG_STYLE_TABLIST_HEADERS, "Bronze Weapons Achievements", MissionStatus(playerid, 0), "Info", "Back");
		}
		case SMISSIONSAINFO:
		{

			if(response) ShowPlayerDialog(playerid, SMISSIONSA, DIALOG_STYLE_TABLIST_HEADERS, "Silver Weapons Achievements", MissionStatus(playerid, 1), "Info", "Back");
		}
		case GMISSIONSAINFO:
		{

			if(response) ShowPlayerDialog(playerid, GMISSIONSA, DIALOG_STYLE_TABLIST_HEADERS, "Gold Weapons Achievements", MissionStatus(playerid, 2), "Info", "Back");
		}
		case BWEAPONSA:
		{

			if(!response) return ShowPlayerDialog(playerid, BACHIEVEMENT, DIALOG_STYLE_LIST, "Bronze Achievements", "Weapons Achievements\nMissions Achievements\nStats achievements", "Select", "Back");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Pistol Rookie\nGet 10 kills with a pistol", "Back", "Exit");
				case 1:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Easy Fist\nGet 10 kills with your fist", "Back", "Exit");
				case 2:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "The Quite Guy\nGet 10 kills with a silenced m9", "Back", "Exit");
				case 3:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "No AK No Life\nGet 10 kills with an ak47", "Back", "Exit");
				case 4:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "No M4 No Life\nGet 10 kills with an m4", "Back", "Exit");
				case 5:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "RPG Rookie\nGet 10 kills with an rpg", "Back", "Exit");
				case 6:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Satchel Rookie\nGet 10 kills with a satchel", "Back", "Exit");
				case 7:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Grenade Rookie\nGet 10 kills with a grenade", "Back", "Exit");
				case 8:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Knife Rookie\nGet 10 kills with a knife", "Back", "Exit");
				case 9:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Dig His Body\nGet 10 kills with a chainsaw", "Back", "Exit");
				case 10:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Burn'em\nGet 10 kills with a molotov", "Back", "Exit");
				case 11:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Deagle Rookie\nGet 10 kills with a deagle", "Back", "Exit");
				case 12:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Shotgun Rookie\nGet 10 kills with a shotgun", "Back", "Exit");
				case 13:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Sawn-Off Noob\nGet 10 kills with a sawnoff", "Back", "Exit");
				case 14:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Combat Man\nGet 10 kills with a spaz", "Back", "Exit");
				case 15:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "SMG Rookie\nGet 10 kills with an smg", "Back", "Exit");
				case 16:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "TEC9 Rookie\nGet 10 kills with a tec9", "Back", "Exit");
				case 17:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "MP5 Rookie\nGet 10 kills with an mp5", "Back", "Exit");
				case 18:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Am a Cowboy\nGet 10 kills with a rifle", "Back", "Exit");
				case 19:	ShowPlayerDialog(playerid, BWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Sniper Beginner\nGet 10 kills with a sniper", "Back", "Exit");
			}
		}
		case BWEAPONSAINFO:
		{

			if(response) ShowPlayerDialog(playerid, BWEAPONSA, DIALOG_STYLE_TABLIST_HEADERS, "Bronze Weapons Achievements", WeaponStatus(playerid, 0), "Info", "Back");
		}
		case SWEAPONSA:
		{

			if(!response) return ShowPlayerDialog(playerid, SACHIEVEMENT, DIALOG_STYLE_LIST, "Silver Achievements", "Weapons Achievements\nMissions Achievements\nStats achievements", "Select", "Back");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Pistol Man\nGet 50 kills with a pistol", "Back", "Exit");
				case 1:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Boxer Soldier\nGet 50 kills with your fist", "Back", "Exit");
				case 2:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Silent Spy\nGet 50 kills with a silenced m9", "Back", "Exit");
				case 3:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "AK Lover\nGet 50 kills with an ak47", "Back", "Exit");
				case 4:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "M4 Lover\nGet 50 kills with an m4", "Back", "Exit");
				case 5:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "No GunFire\nGet 50 kills with an rpg", "Back", "Exit");
				case 6:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Trap Man\nGet 50 kills with a satchel", "Back", "Exit");
				case 7:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Grenade Man\nGet 50 kills with a grenade", "Back", "Exit");
				case 8:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Smart Knifer\nGet 50 kills with a knife", "Back", "Exit");
				case 9:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Cut Them to Pieces\nGet 50 kills with a chainsaw", "Back", "Exit");
				case 10:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Fried Victims\nGet 50 kills with a molotov", "Back", "Exit");
				case 11:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Deagle Lover\nGet 50 kills with a deagle", "Back", "Exit");
				case 12:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Shotgun Chief\nGet 50 kills with a shotgun", "Back", "Exit");
				case 13:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Fast Murderer\nGet 50 kills with a sawnoff", "Back", "Exit");
				case 14:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Come and Fight\nGet 50 kills with a spaz", "Back", "Exit");
				case 15:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Spray Dem All\nGet 50 kills with an smg", "Back", "Exit");
				case 16:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Wise Sprayer\nGet 50 kills with a tec9", "Back", "Exit");
				case 17:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "MP5 Lover\nGet 50 kills with an mp5", "Back", "Exit");
				case 18:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Rifle Boy\nGet 50 kills with a rifle", "Back", "Exit");
				case 19:	ShowPlayerDialog(playerid, SWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Bronze Weapons Achievements", "Shoot in da Head\nGet 50 kills with a sniper", "Back", "Exit");
			}
		}
		case SWEAPONSAINFO:
		{

			if(response) ShowPlayerDialog(playerid, SWEAPONSA, DIALOG_STYLE_TABLIST_HEADERS, "Silver Weapons Achievements", WeaponStatus(playerid, 1), "Info", "Back");
		}
		case GWEAPONSA:
		{

			if(!response) return ShowPlayerDialog(playerid, GACHIEVEMENT, DIALOG_STYLE_LIST, "Gold Achievements", "Weapons Achievements\nMissions Achievements\nStats achievements", "Select", "Back");
			switch(listitem)
			{

				case 0:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Pistol Handed Man\nGet 100 kills with a pistol", "Back", "Exit");
				case 1:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Born to be Clay\nGet 100 kills with your fist", "Back", "Exit");
				case 2:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Sneaker Peaker\nGet 100 kills with a silenced m9", "Back", "Exit");
				case 3:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "AK Master\nGet 100 kills with an ak47", "Back", "Exit");
				case 4:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "M4 Master\nGet 100 kills with an m4", "Back", "Exit");
				case 5:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Bomb' Em\nGet 100 kills with an rpg", "Back", "Exit");
				case 6:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Silent Bomber\nGet 100 kills with a satchel", "Back", "Exit");
				case 7:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Grenade Master\nGet 100 kills with a grenade", "Back", "Exit");
				case 8:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Right in the Heart\nGet 100 kills with a knife", "Back", "Exit");
				case 9:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Cut the Head\nGet 100 kills with a chainsaw", "Back", "Exit");
				case 10:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Born in Hell\nGet 100 kills with a molotov", "Back", "Exit");
				case 11:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "No Deagle No Party\nGet 100 kills with a deagle", "Back", "Exit");
				case 12:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Shoot the Gun\nGet 100 kills with a shotgun", "Back", "Exit");
				case 13:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Sawn'em\nGet 100 kills with a sawnoff", "Back", "Exit");
				case 14:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Combats Godfather\nGet 100 kills with a spaz", "Back", "Exit");
				case 15:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "SMG Professional\nGet 100 kills with an smg", "Back", "Exit");
				case 16:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "TEC9 Professional\nGet 100 kills with a tec9", "Back", "Exit");
				case 17:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "MP5 Elite\nGet 100 kills with an mp5", "Back", "Exit");
				case 18:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Watchout the Rifle\nGet 100 kills with a rifle", "Back", "Exit");
				case 19:	ShowPlayerDialog(playerid, GWEAPONSAINFO, DIALOG_STYLE_MSGBOX, "Gold Weapons Achievements", "Watch the Roofs\nGet 100 kills with a sniper", "Back", "Exit");
			}
		}
		case GWEAPONSAINFO:
		{

			if(response) ShowPlayerDialog(playerid, GWEAPONSA, DIALOG_STYLE_TABLIST_HEADERS, "Gold Weapons Achievements", WeaponStatus(playerid, 2), "Info", "Back");
		}
		case DMUSICD:
		{

			if(!response)
			{

				dmusickit[playerid] = listitem;
				SendClientMessage(playerid, COLOR_PURPLE, "[DONOR]: You have successfully changed your killing music kit");
				return 1;
			}
			switch(listitem)
			{

				case 0: return 1;
				case 1: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/22/roundmvpanthem.mp3", 0,0,0,0);
				case 2: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/27/roundmvpanthem.mp3", 0,0,0,0);
				case 3: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/28/roundmvpanthem.mp3", 0,0,0,0);
				case 4: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/29/roundmvpanthem.mp3", 0,0,0,0);
				case 5: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/23/roundmvpanthem.mp3", 0,0,0,0);
				case 6: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/24/roundmvpanthem.mp3", 0,0,0,0);
				case 7: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/20/roundmvpanthem.mp3", 0,0,0,0);
				case 8: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/21/roundmvpanthem.mp3", 0,0,0,0);
				case 9: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/16/roundmvpanthem.mp3", 0,0,0,0);
				case 10: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/17/roundmvpanthem.mp3", 0,0,0,0);
				case 11: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/18/roundmvpanthem.mp3", 0,0,0,0);
				case 12: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/13/roundmvpanthem.mp3", 0,0,0,0);
				case 13: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/14/roundmvpanthem.mp3", 0,0,0,0);
				case 14: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/10/roundmvpanthem.mp3", 0,0,0,0);
				case 15: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/11/roundmvpanthem.mp3", 0,0,0,0);
				case 16: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/12/roundmvpanthem.mp3", 0,0,0,0);
				case 17: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/9/roundmvpanthem.mp3", 0,0,0,0);
				case 18: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/5/roundmvpanthem.mp3", 0,0,0,0);
				case 19: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/4/roundmvpanthem.mp3", 0,0,0,0);
				case 20: PlayAudioStreamForPlayer(playerid, "https://csgostash.com/storage/mp3/1/roundmvpanthem.mp3", 0,0,0,0);
			}
			return 1;
		}
		case PERK_DIALOG:
		{
			if(!response) return 1;
			new ts = gettime();
			if((cPerk[playerid][listitem]+ 432000) >ts) return ERR(playerid,"Your clan already owns this perk.");
			new query[80];
			mysql_format(mysql, query, sizeof(query), "SELECT `chpoints` FROM `clans` WHERE `cid`= %d LIMIT 1", PlayerInfo[playerid][InClan]);
			mysql_pquery(mysql, query, "OnClanPerk", "id", playerid, listitem);
		}
		case DIALOG_RCMAP :
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0:
				{

					// rcmap = 1;
					SetPlayerPos(playerid,2376.724609375,-4267.478515625,3.4252536296844);
				}
			}
		}
		case DIALOG_RCPLATES:
		{

			if(!response) return 1;
			strcopy(rcplates, inputtext);
			SendClientMessage(playerid,-1,"Plate text set!");
		}
		case DIALOG_T1NAME:
		{

			if(!response) return 1;
			strcopy(TeamName[0], inputtext);
			SendClientMessage(playerid, -1, "Team 1's name set to %s", inputtext);
		}
		case DIALOG_T2NAME:
		{

			if(!response) return 1;
			strcopy(TeamName[1], inputtext);
			SendClientMessage(playerid, -1, "Team 2's name set to %s", inputtext);
		}
		case DIALOG_MAINONE:
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0: { ShowPlayerDialog(playerid, DIALOG_WEAPONST11, DIALOG_STYLE_INPUT,"{F81414}Team 1's {FFFFFF}Weapon 1","Below goes the weapon id","Done","Quit"); }
				case 1: { ShowPlayerDialog(playerid, DIALOG_WEAPONST11, DIALOG_STYLE_INPUT,"{F81414}Team 1's {FFFFFF}Weapon 2","Below goes the weapon id","Done","Quit");}
				case 2: { ShowPlayerDialog(playerid, DIALOG_WEAPONST11, DIALOG_STYLE_INPUT,"{F81414}Team 1's {FFFFFF}Weapon 3","Below goes the weapon id","Done","Quit");}
			}
		}
		case DIALOG_MAINTWO:
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0: { ShowPlayerDialog(playerid, DIALOG_WEAPONST21, DIALOG_STYLE_INPUT,"{F81414}Team 2's {FFFFFF}Weapon 1","Below goes the weapon id","Done","Quit"); }
				case 1: { ShowPlayerDialog(playerid, DIALOG_WEAPONST22, DIALOG_STYLE_INPUT,"{F81414}Team 2's {FFFFFF}Weapon 2","Below goes the weapon id","Done","Quit");}
				case 2: { ShowPlayerDialog(playerid, DIALOG_WEAPONST23, DIALOG_STYLE_INPUT,"{F81414}Team 2's {FFFFFF}Weapon 3","Below goes the weapon id","Done","Quit");}
			}
		}
		case DIALOG_RCMODELID:
		{

			if(!response) return 1;
			rcmodel = strval(inputtext);
			SendClientMessage(playerid, -1, "model set to %i", rcmodel);
		}
		case DIALOG_WEAPONST11:
		{

			if(!response) return 1;
			teamweap[0][0] = WEAPON:strval(inputtext);
			SendClientMessage(playerid, -1, "Team 1's weapon id 1 set to %i", teamweap[0][0]);
		}
		case DIALOG_WEAPONST12:
		{

			if(!response) return 1;
			teamweap[0][1] = WEAPON:strval(inputtext);
			SendClientMessage(playerid,-1, "Team 1's weapon id 2 set to %i", teamweap[0][1]);
		}
		case DIALOG_WEAPONST13:
		{

			if(!response) return 1;
			teamweap[0][2] = WEAPON:strval(inputtext);
			SendClientMessage(playerid,-1, "Team 1's weapon id 3 set to %i", teamweap[0][2]);
		}
		case DIALOG_WEAPONST21:
		{

			if(!response) return 1;
			teamweap[1][0] = WEAPON:strval(inputtext);
			SendClientMessage(playerid,-1, "Team 2's weapon id 1 set to %i", teamweap[1][0]);
		}
		case DIALOG_WEAPONST22:
		{

			if(!response) return 1;
			teamweap[1][1] = WEAPON:strval(inputtext);
			SendClientMessage(playerid,-1, "Team 2's weapon id 2 set to %i", teamweap[1][1]);
		}
		case DIALOG_WEAPONST23:
		{

			if(!response) return 1;
			teamweap[1][2] = WEAPON:strval(inputtext);
			SendClientMessage(playerid,-1, "Team 2's weapon id 3 set to %i", teamweap[1][0]);
		}
		case DIALOG_DMWEAP1:
		{

			if(!response) return 1;
			dmweap[0] = WEAPON:strval(inputtext);
			SendClientMessage(playerid,-1, "DM's weapon 1 id set to %i", dmweap[0]);
		}
		case DIALOG_DMWEAP2:
		{

			if(!response) return 1;
			dmweap[1] = WEAPON:strval(inputtext);
			SendClientMessage(playerid,-1, "DM's weapon 2 id set to %i",dmweap[1]);
		}
		case DIALOG_DMWEAP3:
		{

			if(!response) return 1;
			dmweap[2] = WEAPON:strval(inputtext);
			SendClientMessage(playerid,-1, "DM's weapon 2 id set to %i",dmweap[2]);
		}
		case DIALOG_DMWEAP4:
		{

			if(!response) return 1;
			dmweap[3] = WEAPON:strval(inputtext);
			SendClientMessage(playerid,-1, "DM's weapon 2 id set to %i",dmweap[3]);
		}
		case DIALOG_T1SKIN:
		{

			if(!response) return 1;
			teamskin[0] = strval(inputtext);
			SendClientMessage(playerid,-1, "Team 1's skin id set to %i", teamskin[0]);
		}
		case DIALOG_DMSKIN1:
		{

			if(!response) return 1;
			dmskin[0] = strval(inputtext);
			SendClientMessage(playerid,-1, "skin id set to %i", dmskin[0]);
		}
		case DIALOG_DMSKIN2:
		{

			if(!response) return 1;
			dmskin[1] = strval(inputtext);
			SendClientMessage(playerid,-1, "skin id set to %i", dmskin[1]);
		}
		case DIALOG_DMSKIN3:
		{

			if(!response) return 1;
			dmskin[2] = strval(inputtext);
			SendClientMessage(playerid,-1, "skin id set to %i", dmskin[2]);
		}
		case DIALOG_RCSKIN:
		{

			if(!response) return 1;
			rcskin = strval(inputtext);
			SendClientMessage(playerid, -1, "skin id set to %i", rcskin);
		}
		case DIALOG_T2SKIN:
		{

			if(!response) return 1;
			teamskin[1] = strval(inputtext);
			SendClientMessage(playerid,-1, "Team 2's skin id set to %i", teamskin[1]);
		}
		case DIALOG_RCCOLOR1:
		{

			if(!response) return 1;
			if(strcmp(inputtext,"1",true) == 0)
			{

				SendClientMessage(playerid,-1,"color set to blue");
				rccolor[0] = 0x0000BBAA;
			}
			else if(strcmp(inputtext,"2",true) == 0)
			{

				SendClientMessage(playerid,-1,"color set to green");
				rccolor[0] = 0x33AA33AA;
			}
			if(strcmp(inputtext,"3",true) == 0)
			{

				SendClientMessage(playerid,-1,"color set to red");
				rccolor[0] = 0xAA3333AA;
			}
		}
		case DIALOG_RCCOLOR2:
		{

			if(!response) return 1;
			rccolor[1] = strval(inputtext);
		}
		case DIALOG_T1COL:
		{

			if(!response) return 1;
			if(strcmp(inputtext,"1",true) == 0)
			{

				SendClientMessage(playerid,-1,"Team 1's color set to blue");
				teamcolor[0] = 0x0000BBAA;
			}
			else if(strcmp(inputtext,"2",true) == 0)
			{

				SendClientMessage(playerid,-1,"Team 1's color set to green");
				teamcolor[0] = 0x33AA33AA;
			}
			if(strcmp(inputtext,"3",true) == 0)
			{

				SendClientMessage(playerid,-1,"Team 1's color set to red");
				teamcolor[0] = 0xAA3333AA;
			}
		}
		case DIALOG_DMCOLOR:
		{

			if(!response) return 1;
			if(strcmp(inputtext,"1",true) == 0)
			{

				SendClientMessage(playerid,-1,"DM's color set to blue");
				dmcolor = 0x0000BBAA;
			}
			else if(strcmp(inputtext,"2",true) == 0)
			{

				SendClientMessage(playerid,-1,"DM's color set to green");
				dmcolor = 0x33AA33AA;
			}
			if(strcmp(inputtext,"3",true) == 0)
			{

				SendClientMessage(playerid,-1,"DM's color set to red");
				dmcolor = 0xAA3333AA;
			}
		}
		case DIALOG_T2COL:
		{

			if(!response) return 1;
			if(strcmp(inputtext,"1",true) == 0)
			{

				SendClientMessage(playerid,-1,"Team 2's color set to blue");
				teamcolor[1] = 0x0000BBAA;
			}
			else if(strcmp(inputtext,"2",true) == 0)
			{

				SendClientMessage(playerid,-1,"Team 2's color set to green");
				teamcolor[1] = 0x33AA33AA;
			}
			if(strcmp(inputtext,"3",true) == 0)
			{

				SendClientMessage(playerid,-1,"Team 2's color set to red");
				teamcolor[1] = 0xAA3333AA;
			}
		}
		case DIALOG_REWARD:
		{

			if(!response) return 1;
			reward[0] = strval(inputtext);
			SendClientMessage(playerid, -1, "reward set to $%i", reward[0]);
			ShowPlayerDialog(playerid, DIALOG_REWARD2, DIALOG_STYLE_INPUT,"{F81414}Score Reward {FFFFFF}Amount","Example: 1000 = 1000 score","Done","Quit");
		}
		case DIALOG_REWARD2:
		{

			if(!response) return 1;
			reward[1] = strval(inputtext);
			SendClientMessage(playerid, -1, "reward set to %i score", reward[1]);
		}
		case 231: // prestige Weapos
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0: // prestige 1
				{

					if(GetPlayerScore(playerid) >=15000){
						SetPVarInt(playerid,"PRES",0);
						PrestigeDialog(playerid); }else SendClientMessage(playerid,Dred,"15000 score required for this prestige level. level");
				}
				case 1:
				{

					if(GetPlayerScore(playerid) >=20000){
						SetPVarInt(playerid,"PRES",1);
						PrestigeDialog(playerid);  }else SendClientMessage(playerid,Dred,"* 20000 score required for this prestige level.");
				}
				case 2:
				{

					if(GetPlayerScore(playerid) >=25000){
						SetPVarInt(playerid,"PRES",2);
						PrestigeDialog(playerid); }else SendClientMessage(playerid,Dred,"* 25000 score required for this prestige level.");
				}
			}
		}
		case 233:
		{

			if(!response) return 1;
			switch(listitem)
			{
				case 0: // deagle
				{
					Prest[playerid][GetPVarInt(playerid,"PRES")] = P_DEAG;
					SendClientMessage(playerid,Lg,"Prestige slot: Desert Eagle");
				}
				case 1: // spaz
				{
					Prest[playerid][GetPVarInt(playerid,"PRES")] = P_SPAZ;
					SendClientMessage(playerid,Lg,"Prestige slot: Combat-Shotgun");
				}
				case 2: // uzi
				{
					Prest[playerid][GetPVarInt(playerid,"PRES")] = P_UZI;
					SendClientMessage(playerid,Lg,"Prestige slot: Uzi");
				}
				case 3: // tec
				{
					Prest[playerid][GetPVarInt(playerid,"PRES")] = P_TEC;
					SendClientMessage(playerid,Lg,"Prestige slot: Tec-9");
				}
				case 4: // ak
				{
					Prest[playerid][GetPVarInt(playerid,"PRES")] = P_AK;
					SendClientMessage(playerid,Lg,"Prestige slot: AK-47");
				}
				case 5: // m4
				{
					Prest[playerid][GetPVarInt(playerid,"PRES")] = P_M4;
					SendClientMessage(playerid,Lg,"Prestige slot: M4");
				}
				case 6: // rifle
				{
					Prest[playerid][GetPVarInt(playerid,"PRES")] = P_RIFLE;
					SendClientMessage(playerid,Lg,"Prestige slot: Country rifle");
				}
				case 7: // sniper
				{
					Prest[playerid][GetPVarInt(playerid,"PRES")] = P_SNIPER;
					SendClientMessage(playerid,Lg,"Prestige slot: Sniper");
				}
				case 8: // grenades
				{
					Prest[playerid][GetPVarInt(playerid,"PRES")] = P_GRENADE;
					SendClientMessage(playerid,Lg,"Prestige slot: Grenades");
				}
			}
		}
		case ASSAULT_DIALOG:
		{
			if(response)
			{
				if(!listitem)
				{
					gClass[playerid] = Assault;
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen the Assault class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /armypackage");
					UpdateLabelText(playerid);
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
				}
				else
				{
					if(Bit_Get(ClassUpgrade[playerid], A_ASSAULT))
					{
						gClass[playerid] = Assault;
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen the Commando Assault class.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /armypackage + Gas Mask on spawn + 10 damage with M4");
						UpdateLabelText(playerid);
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
					}
					else
					{
						if(PlayerInfo[playerid][XP] < AssaultXP)
						{
							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, ASSAULT_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Commando Assault class? (1750XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case ASSAULT_UNLOCK_DIALOG:
		{
			if(response)
			{
				PlayerInfo[playerid][XP] -= 1750;
				gClass[playerid] = Assault;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked the Commando Assault class.");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /armypackage + Gas Mask on spawn + 10 damage with M4");
				Bit_Let(ClassUpgrade[playerid], A_ASSAULT);
				UpdateLabelText(playerid);
				Play(playerid);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case SNIPER_DIALOG:
		{

			if(response)
			{

				if(!listitem)
				{

					gClass[playerid] = SNIPER;
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen the Sniper class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Invisible on map, can use /buch");
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					UpdateLabelText(playerid);
					switch(gTeam[playerid])
					{

						case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
						case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
						case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
						case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
						case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
						case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
						case TEAM_ID: SetPlayerColor(playerid,0x00804000);
						case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
					}
				}
				else
				{
					if(Bit_Get(ClassUpgrade[playerid], A_SNIPER))
					{

						gClass[playerid] = SNIPER;
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen the Hitman class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Invisible on map, can use /buch, Able to use night vision goggles");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: +15 damage with SD Pistol");
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						UpdateLabelText(playerid);
						switch(gTeam[playerid])
						{

							case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
							case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
							case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
							case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
							case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
							case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
							case TEAM_ID: SetPlayerColor(playerid,0x00804000);
							case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
						}
					}
					else
					{

						if(PlayerInfo[playerid][XP] < SNIPERXP)
						{

							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, SNIPER_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Hitman class? (3000XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case SNIPER_UNLOCK_DIALOG:
		{

			if(response)
			{

				PlayerInfo[playerid][XP] -= 3000;
				gClass[playerid] = SNIPER;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked the Hitman class.");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Invisible on map, can use /buch, able to use night vision goggles +");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: +15 damage with SD Pistol");
				Bit_Let(ClassUpgrade[playerid], A_SNIPER);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
				switch(gTeam[playerid])
				{

					case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
					case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
					case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
					case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
					case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
					case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
					case TEAM_ID: SetPlayerColor(playerid,0x00804000);
					case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case SUICIDER_DIALOG:
		{

			if(response)
			{

				if(!listitem)
				{

					gClass[playerid] = SUICIDER;
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Suicider class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /Suicide or 'Y' key.");
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					UpdateLabelText(playerid);
				}
				else
				{

					if(Bit_Get(ClassUpgrade[playerid], A_SUICIDER))
					{

						gClass[playerid] = SUICIDER;
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen the Terrorist class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /Suicide or 'Y' key.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: a one-time protection vest against explosions (only with this class)");
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						suiciderprotect[playerid] = true;
						UpdateLabelText(playerid);
					}
					else
					{

						if(PlayerInfo[playerid][XP] < SUICIDERXP)
						{

							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, SUICIDER_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Terrorist class? (2250XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case SUICIDER_UNLOCK_DIALOG:
		{

			if(response)
			{

				PlayerInfo[playerid][XP] -= 2250;
				gClass[playerid] = SUICIDER;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked the Terrorist class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /Suicide or 'Y' key.");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: a one-time protection vest against other explosions (mines-suicides) (only with this class)");
				Bit_Let(ClassUpgrade[playerid], A_SUICIDER);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
				suiciderprotect[playerid] = true;
			}
			else ClassDialog(playerid);
			return 1;
		}
		case DEMOLISHER_DIALOG:
		{

			if(response)
			{

				if(!listitem)
				{

					gClass[playerid] = DEMOLISHER;
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Demolisher class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /plantbomb (/pb)");
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					UpdateLabelText(playerid);
				}
				else
				{

					if(Bit_Get(ClassUpgrade[playerid], A_DEMOLISHER))
					{
						gClass[playerid] = DEMOLISHER;
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Demo Raze class");
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /plantbomb (/pb) - /c4 to plant vehicle bombs");
						UpdateLabelText(playerid);
					}
					else
					{
						if(PlayerInfo[playerid][XP] < DEMOLISHERXP)
						{
							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, DEMOLISHER_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Suicider Demo Raze class? (3500XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case DEMOLISHER_UNLOCK_DIALOG:
		{

			if(response)
			{

				PlayerInfo[playerid][XP] -= 3500;
				gClass[playerid] = DEMOLISHER;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked Demo Raze class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /plantbomb (/pb) - /c4 to plant vehicle bombs");
				Bit_Let(ClassUpgrade[playerid], A_DEMOLISHER);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case MEDIC_DIALOG:
		{

			if(response)
			{

				if(!listitem)
				{

					gClass[playerid] =  MEDIC;
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Medic class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can Heal teammates using /h [id] or aiming and using MMB(Midle mouse button)");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Auto-Restores 10 HP on self every 30 seconds.");
					UpdateLabelText(playerid);
				}
				else
				{

					if(Bit_Get(ClassUpgrade[playerid], A_MEDIC))
					{

						gClass[playerid] =  MEDIC;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Field Medic class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can Heal teammates using /h [id] or aiming and using MMB(Midle mouse button)");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Auto-Restores 10 HP on self every 30 seconds.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Ability to refill nearby teammates HP by heal and 15% more armour and HP while using /mk and /ap");
						UpdateLabelText(playerid);
					}
					else
					{

						if(PlayerInfo[playerid][XP] < MEDICXP)
						{

							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, MEDIC_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Field Medic class? (3250XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case MEDIC_UNLOCK_DIALOG:
		{

			if(response)
			{

				PlayerInfo[playerid][XP] -= 3250;
				gClass[playerid] = MEDIC;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked Field Medic class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can Heal teammates using /h [id] or aiming and using MMB(Midle mouse button)");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Auto-Restores 10 HP on self every 30 seconds.");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Ability to refill nearby teammates HP by heal and 15% more armour and HP while using /mk and /ap");
				Bit_Let(ClassUpgrade[playerid], A_MEDIC);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case PILOT_DIALOG:
		{
			if(response)
			{
				if(!listitem)
				{
					gClass[playerid] = PILOT;
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Pilot class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can fly heavy air vehicles");
					UpdateLabelText(playerid);
				}
				else
				{
					if(Bit_Get(ClassUpgrade[playerid], A_PILOT))
					{
						gClass[playerid] = PILOT;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Fighter Pilot class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can fly heavy air vehicles");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: +150 More HP on any air vehicle");
						UpdateLabelText(playerid);
					}
					else
					{
						if(PlayerInfo[playerid][XP] < PILOTXP)
						{
							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, PILOT_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Fighter Pilot class? (3000XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case PILOT_UNLOCK_DIALOG:
		{
			if(response)
			{
				PlayerInfo[playerid][XP] -= 3000;
				gClass[playerid] = PILOT;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked Fighter Pilot class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can fly heavy air vehicles");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: +150 More HP on any air vehicle");
				Bit_Let(ClassUpgrade[playerid], A_PILOT);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case ENGINEER_DIALOG:
		{
			if(response)
			{
				if(!listitem)
				{
					gClass[playerid] = ENGINEER;
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Engineer class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can drive rhino , /placemine , /removemine , /fix");
					UpdateLabelText(playerid);
				}
				else
				{

					if(Bit_Get(ClassUpgrade[playerid], A_ENGINEER))
					{

						gClass[playerid] = ENGINEER;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Engineer class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can drive rhino , /placemine , /removemine , /fix");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: +150 More HP on Tank and +10 damage with Standard Shotgun and one extra landmine");
						UpdateLabelText(playerid);
					}
					else
					{

						if(PlayerInfo[playerid][XP] < ENGINEERXP)
						{

							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, ENGINEER_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Combat Engineer class? (4000XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case ENGINEER_UNLOCK_DIALOG:
		{

			if(response)
			{

				PlayerInfo[playerid][XP] -= ENGINEERXP;
				gClass[playerid] = ENGINEER;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked Combat Engineer class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can drive rhino , /placemine , /removemine , /fix");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: +150 More HP on Tank and +10 damage with Standard Shotgun and one extra landmine");
				Bit_Let(ClassUpgrade[playerid], A_ENGINEER);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case JET_DIALOG:
		{

			if(response)
			{

				if(!listitem)
				{

					gClass[playerid] = JET;
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen JetTrooper class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can use /jp to spawn jetpack.");
					UpdateLabelText(playerid);
				}
				else
				{

					if(Bit_Get(ClassUpgrade[playerid], A_JET))
					{

						gClass[playerid] = JET;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen JetTrooper class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can use /jp to spawn jetpack.");
						UpdateLabelText(playerid);
					}
					else
					{

						if(PlayerInfo[playerid][XP] < JETXP)
						{

							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, JET_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Elite JetTrooper class? (5000XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case JET_UNLOCK_DIALOG:
		{

			if(response)
			{

				PlayerInfo[playerid][XP] -= JETXP;
				gClass[playerid] = JET;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen JetTrooper class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can use /jp to spawn jetpack.");
				Bit_Let(ClassUpgrade[playerid], A_JET);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case SP_DIALOG:
		{

			if(response)
			{

				if(!listitem)
				{

					gClass[playerid] = SP;
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Support class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Use /Shelp For Supporter Commands.");
					UpdateLabelText(playerid);
				}
				else
				{
					if(Bit_Get(ClassUpgrade[playerid], A_SP))
					{
						gClass[playerid] = SP;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Defender class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Use /Shelp For Defender Commands, spawns with thermal goggles");
						UpdateLabelText(playerid);
					}
					else
					{
						if(PlayerInfo[playerid][XP] < SPXP)
						{
							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, SP_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Defender class? (5500XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case SP_UNLOCK_DIALOG:
		{
			if(response)
			{
				PlayerInfo[playerid][XP] -= SPXP;
				gClass[playerid] = SP;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Defender class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Use /Shelp For Defender Commands, spawns with thermal goggles");
				Bit_Let(ClassUpgrade[playerid], A_SP);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case SCOUT_DIALOG:
		{
			if(response)
			{
				if(!listitem)
				{
					gClass[playerid] = SCOUT;
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Scout class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can Drive Sea Sparrow, can flash enemies with flashbang, dual sawn-offs.");
					UpdateLabelText(playerid);
				}
				else
				{
					if(Bit_Get(ClassUpgrade[playerid], A_SCOUT))
					{
						gClass[playerid] = SCOUT;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Military Scout class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can Drive Sea Sparrow, can flash enemies with flashbang, dual sawn-offs.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Spawn with a helmet and +100 HP on sea sparrow.");
						UpdateLabelText(playerid);
					}
					else
					{
						if(PlayerInfo[playerid][XP] < SCOUTXP)
						{
							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, SCOUT_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Military Scout class? (2500XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case SCOUT_UNLOCK_DIALOG:
		{

			if(response)
			{
				PlayerInfo[playerid][XP] -= SCOUTXP;
				gClass[playerid] = SCOUT;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Military Scout class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can Drive Sea Sparrow, can flash enemies with flashbang, dual sawn-offs.");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Spawn with a helmet and +100 HP on sea sparrow.");
				Bit_Let(ClassUpgrade[playerid], A_SCOUT);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case SPY_DIALOG:
		{
			if(response)
			{
				if(!listitem)
				{
					gClass[playerid] = AG;
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Spy class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /Dis to disguise and press Y or /backstab in vehicle as passenger to stab driver.");
					UpdateLabelText(playerid);
				}
				else
				{
					if(Bit_Get(ClassUpgrade[playerid], A_SPY))
					{
						gClass[playerid] = AG;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have chosen Assassin class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /Dis to disguise and press Y or /backstab in vehicle as passenger to stab driver.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Kills the driver with a single /backstab, +10 damage with SD Pistol.");
						UpdateLabelText(playerid);
					}
					else
					{
						if(PlayerInfo[playerid][XP] < SPYXP)
						{
							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, SPY_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Assassin class? (5000XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case SPY_UNLOCK_DIALOG:
		{

			if(response)
			{
				PlayerInfo[playerid][XP] -= SPYXP;
				gClass[playerid] = AG;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked Assassin class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /Dis to disguise and press Y or /backstab in vehicle as passenger to stab driver.");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Kills the driver with a single /backstab, +10 damage with SD Pistol.");
				Bit_Let(ClassUpgrade[playerid], A_SPY);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case RIFLEMAN_DIALOG:
		{
			if(response)
			{
				if(!listitem)
				{
					gClass[playerid] = RIFLEMAN;
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: Rifleman Class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can use /placemine, /removemine and deals +33 damage on county rifle.");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can make headshots with country rifle.");
					UpdateLabelText(playerid);
				}
				else
				{
					if(Bit_Get(ClassUpgrade[playerid], A_RIFLEMAN))
					{
						gClass[playerid] = RIFLEMAN;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: Elite Rifleman Class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can use /placemine, /removemine and deals +50 damage on county rifle.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can make headshots with country rifle.");
						UpdateLabelText(playerid);
					}
					else
					{
						if(PlayerInfo[playerid][XP] < RIFLEMANXP)
						{
							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, RIFLEMAN_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Elite Rifleman class? (6500XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case RIFLEMAN_UNLOCK_DIALOG:
		{
			if(response)
			{
				PlayerInfo[playerid][XP] -= RIFLEMANXP;
				gClass[playerid] = RIFLEMAN;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked Elite Rifleman Class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can use /placemine, /removemine and deals +50 damage on county rifle.");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can make headshots with country rifle.");
				UpdateLabelText(playerid);
				Bit_Let(ClassUpgrade[playerid], A_RIFLEMAN);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case RECON_DIALOG:
		{
			if(response)
			{
				if(!listitem)
				{
					gClass[playerid] = RECON;
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: Recon Class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Invisible on the map, +10 damage with the sniper rifle.");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Ability to spawn /drone which can explode using spacebar.");
					UpdateLabelText(playerid);
					switch(gTeam[playerid])
					{

						case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
						case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
						case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
						case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
						case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
						case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
						case TEAM_ID: SetPlayerColor(playerid,0x00804000);
						case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
					}
				}
				else
				{
					if(Bit_Get(ClassUpgrade[playerid], A_RECON))
					{
						gClass[playerid] = RECON;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: Silent Recon Class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Invisible on the map, +10 damage with sniper, Ability to purchase drones from shop.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Ability to spawn /drone and explode using spacebar, +15 damage mp5, +50 hp for drone.");
						UpdateLabelText(playerid);
						switch(gTeam[playerid])
						{

							case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
							case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
							case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
							case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
							case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
							case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
							case TEAM_ID: SetPlayerColor(playerid,0x00804000);
							case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
						}
					}
					else
					{
						if(PlayerInfo[playerid][XP] < RECONXP)
						{
							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, RECON_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Silent Recon class? (7000XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case RECON_UNLOCK_DIALOG:
		{
			if(response)
			{
				PlayerInfo[playerid][XP] -= RECONXP;
				gClass[playerid] = RECON;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked Silent Recon Class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Invisible on the map, +10 damage with sniper, Ability to purchase drones from shop.");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Ability to spawn /drone and explode using spacebar, +15 damage mp5, +50 hp for drone.");
				UpdateLabelText(playerid);
				switch(gTeam[playerid])
				{

					case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
					case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
					case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
					case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
					case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
					case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
					case TEAM_ID: SetPlayerColor(playerid,0x00804000);
					case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
				}
				UpdateLabelText(playerid);
				Bit_Let(ClassUpgrade[playerid], A_RECON);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case BOMBER_DIALOG:
		{
			if(response)
			{
				if(!listitem)
				{
					gClass[playerid] = BOMBER;
					if(!AntiSK[playerid]) SpawnPR(playerid,0);
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: Bomber Class");
					SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Powerful amongst weapons, can shoot explosive ammo using rifle.");
					UpdateLabelText(playerid);
				}
				else
				{
					if(Bit_Get(ClassUpgrade[playerid], A_BOMBER))
					{
						gClass[playerid] = BOMBER;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: Destroyer Class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Powerful amongst weapons, can shoot explosive ammo using rifle, has chainsaw.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can bomb all nearby air vehicles /bas if the kill spree is more than 24.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can shoot 5 grenades using Left ALT (LALT) with M4.");
						UpdateLabelText(playerid);
					}
					else
					{
						if(PlayerInfo[playerid][XP] < BOMBERXP)
						{
							ERR(playerid, "You do not have enough XP to unlock this class.");
							ClassDialog(playerid);
						}
						else ShowPlayerDialog(playerid, BOMBER_UNLOCK_DIALOG, DIALOG_STYLE_MSGBOX, "Class Unlock", "Do you want to unlock this Destroyer class? (12000XP)", "Yes","Back");
					}
				}
			}
			else ClassDialog(playerid);
			return 1;
		}
		case BOMBER_UNLOCK_DIALOG:
		{
			if(response)
			{
				PlayerInfo[playerid][XP] -= BOMBERXP;
				gClass[playerid] = BOMBER;
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: You have unlocked Destroyer Class");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Powerful amongst weapons, can shoot explosive ammo using rifle, has chainsaw.");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can bomb all nearby air vehicles /bas if the kill spree is more than 24.");
				SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can shoot 5 grenades using Left ALT (LALT) with M4.");
				Bit_Let(ClassUpgrade[playerid], A_BOMBER);
				if(!AntiSK[playerid]) SpawnPR(playerid,0);
				Play(playerid);
				UpdateLabelText(playerid);
			}
			else ClassDialog(playerid);
			return 1;
		}
		case CLASS_DIALOG:
		{
			if(!response)
			{
				SendClientMessage(playerid, red,"You have to choose the class!");
				ClassDialog(playerid);
				return 1;
			}
			switch(listitem)
			{

				case 0:
				{

					new kakao[120];
					strcat(kakao, "Assault Grade\tRequired XP\tStatus\nAssault\t0\t{00FF28}Unlocked\n");
					if(Bit_Get(ClassUpgrade[playerid], A_ASSAULT))
					{

						format(kakao, _, "%s{FFFFFF}Commando Assault\t%d\t{00FF28}Unlocked",kakao,AssaultXP);
					}
					else
					{

						if(PlayerInfo[playerid][XP] < AssaultXP)
						{

							format(kakao, _, "%s{FFFFFF}Commando Assault\t%d\t{E10000}Locked",kakao,AssaultXP);
						}
						else format(kakao, _, "%s{FFFFFF}Commando Assault\t%d\t{FF7E19}Unlockable",kakao,AssaultXP);
					}
					ShowPlayerDialog(playerid, ASSAULT_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Assault",kakao,"Select", "Back");
				}
				case 1:
				{

					if(PlayerInfo[playerid][Rank] > 1)
					{

						new kakao[106];
						strcat(kakao, "Sniper Grade\tRequired XP\tStatus\nSniper\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_SNIPER))
						{

							format(kakao, _, "%s{FFFFFF}Hitman\t%d\t{00FF28}Unlocked",kakao,SNIPERXP);
						}
						else
						{

							if(PlayerInfo[playerid][XP] < SNIPERXP)
							{

								format(kakao, _, "%s{FFFFFF}Hitman\t%d\t{E10000}Locked",kakao,SNIPERXP);
							}
							else format(kakao, _, "%s{FFFFFF}Hitman\t%d\t{FF7E19}Unlockable",kakao,SNIPERXP);
						}
						ShowPlayerDialog(playerid, SNIPER_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Sniper",kakao,"Select", "Back");
					}else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 2 to use this class! See /ranks");
					}
				}
				case 2:
				{

					if(PlayerInfo[playerid][Rank] > 3)
					{

						new kakao[118];
						strcat(kakao, "Demolisher Grade\tRequired XP\tStatus\nDemolisher\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_DEMOLISHER))
						{

							format(kakao, _, "%s{FFFFFF}Demo Raze\t%d\t{00FF28}Unlocked",kakao,DEMOLISHERXP);
						}
						else
						{

							if(PlayerInfo[playerid][XP] < DEMOLISHERXP)
							{

								format(kakao, _, "%s{FFFFFF}Demo Raze\t%d\t{E10000}Locked",kakao,DEMOLISHERXP);
							}
							else format(kakao, _, "%s{FFFFFF}Demo Raze\t%d\t{FF7E19}Unlockable",kakao,DEMOLISHERXP);
						}
						ShowPlayerDialog(playerid, DEMOLISHER_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Demolisher",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 4 to use this class! See /ranks");
					}
				}
				case 3:
				{

					if(PlayerInfo[playerid][Rank] > 2)
					{

						new kakao[116];
						strcat(kakao, "Suicider Grade\tRequired XP\tStatus\nSuicider\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_SUICIDER))
						{

							format(kakao, _, "%s{FFFFFF}Terrorist\t%d\t{00FF28}Unlocked",kakao,SUICIDERXP);
						}
						else
						{

							if(PlayerInfo[playerid][XP] < SUICIDERXP)
							{

								format(kakao, _, "%s{FFFFFF}Terrorist\t%d\t{E10000}Locked",kakao,SUICIDERXP);
							}
							else format(kakao, _, "%s{FFFFFF}Terrorist\t%d\t{FF7E19}Unlockable",kakao,SUICIDERXP);
						}
						ShowPlayerDialog(playerid, SUICIDER_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Suicider",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 3 to use this class! See /ranks");
					}
				}
				case 4:
				{

					if(PlayerInfo[playerid][Rank] > 2)
					{

						new kakao[108];
						strcat(kakao, "Medic Grade\tRequired XP\tStatus\nMedic\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_MEDIC))
						{

							format(kakao, _, "%s{FFFFFF}Field Medic\t%d\t{00FF28}Unlocked",kakao,MEDICXP);
						}
						else
						{

							if(PlayerInfo[playerid][XP] < MEDICXP)
							{

								format(kakao, _, "%s{FFFFFF}Field Medic\t%d\t{E10000}Locked",kakao,MEDICXP);
							}
							else format(kakao, _, "%s{FFFFFF}Field Medic\t%d\t{FF7E19}Unlockable",kakao,MEDICXP);
						}
						ShowPlayerDialog(playerid, MEDIC_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Medic",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 3 to use this class! See /ranks");
					}
				}
				case 5:
				{

					if(PlayerInfo[playerid][Rank] > 5)
					{

						new kakao[110];
						strcat(kakao, "Pilot Grade\tRequired XP\tStatus\nPilot\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_PILOT)) format(kakao, _, "%s{FFFFFF}Fighter Pilot\t%d\t{00FF28}Unlocked",kakao,PILOTXP);
						else
						{
							if(PlayerInfo[playerid][XP] < PILOTXP) format(kakao, _, "%s{FFFFFF}Fighter Pilot\t%d\t{E10000}Locked",kakao,PILOTXP);
							else format(kakao, _, "%s{FFFFFF}Fighter Pilot\t%d\t{FF7E19}Unlockable",kakao,PILOTXP);
						}
						ShowPlayerDialog(playerid, PILOT_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Pilot",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 6 to use this class! See /ranks");
					}
				}
				case 6:
				{

					if(PlayerInfo[playerid][Rank] > 4)
					{

						new kakao[118];
						strcat(kakao, "Engineer Grade\tRequired XP\tStatus\nEngineer\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_ENGINEER)) format(kakao, _, "%s{FFFFFF}Combat Engineer\t%d\t{00FF28}Unlocked",kakao,ENGINEERXP);
						else
						{

							if(PlayerInfo[playerid][XP] < ENGINEERXP) format(kakao, _, "%s{FFFFFF}Combat Engineer\t%d\t{E10000}Locked",kakao,ENGINEERXP);
							else format(kakao, _, "%s{FFFFFF}Combat Engineer\t%d\t{FF7E19}Unlockable",kakao,ENGINEERXP);
						}
						ShowPlayerDialog(playerid, ENGINEER_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Engineer",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 5 to use this class! See /ranks");
					}
				}
				case 7:
				{

					if(PlayerInfo[playerid][Rank] > 6)
					{

						new kakao[123];
						strcat(kakao, "JetTrooper Grade\tRequired XP\tStatus\nJetTrooper\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_JET)) format(kakao, _, "%s{FFFFFF}Elite JetTrooper\t%d\t{00FF28}Unlocked",kakao,JETXP);
						else
						{

							if(PlayerInfo[playerid][XP] < JETXP) format(kakao, _, "%s{FFFFFF}Elite JetTrooper\t%d\t{E10000}Locked",kakao,JETXP);
							else format(kakao, _, "%s{FFFFFF}Elite JetTrooper\t%d\t{FF7E19}Unlockable",kakao,JETXP);
						}
						ShowPlayerDialog(playerid, JET_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "JetTrooper",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 7 to use this class! See /ranks");
					}
				}
				case 8:
				{

					if(PlayerInfo[playerid][Rank] > 6)
					{

						gClass[playerid] = SPOTTER;
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: Spotter Class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Powerful amongst weapons, /locate (/lc) players.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: /search to disable all GPS/Camouflage in range.");
						UpdateLabelText(playerid);
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 7 to use this class! See /ranks");
					}
				}
				case 9:
				{

					if(PlayerInfo[playerid][Rank] > 7)
					{

						new kakao[109];
						strcat(kakao, "Support Grade\tRequired XP\tStatus\nSupport\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_SP)) format(kakao, _, "%s{FFFFFF}Defender\t%d\t{00FF28}Unlocked",kakao,SPXP);
						else
						{

							if(PlayerInfo[playerid][XP] < SPXP) format(kakao, _, "%s{FFFFFF}Defender\t%d\t{E10000}Locked",kakao,SPXP);
							else format(kakao, _, "%s{FFFFFF}Defender\t%d\t{FF7E19}Unlockable",kakao,SPXP);
						}
						ShowPlayerDialog(playerid, SP_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Support",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 8 to use this class! See /ranks");
					}
				}
				case 10:
				{

					if(PlayerInfo[playerid][Rank] > 4)
					{

						new kakao[111];
						strcat(kakao, "Scout Grade\tRequired XP\tStatus\nScout\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_SCOUT)) format(kakao, _, "%s{FFFFFF}Military Scout\t%d\t{00FF28}Unlocked",kakao,SCOUTXP);
						else
						{

							if(PlayerInfo[playerid][XP] < SCOUTXP) format(kakao, _, "%s{FFFFFF}Military Scout\t%d\t{E10000}Locked",kakao,SCOUTXP);
							else format(kakao, _, "%s{FFFFFF}Military Scout\t%d\t{FF7E19}Unlockable",kakao,SCOUTXP);
						}
						ShowPlayerDialog(playerid, SCOUT_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Scout",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 6 to use this class! See /ranks");
					}
				}
				case 11:
				{

					if(GetPlayerScore(playerid) > 4999)
					{

						new kakao[101];
						strcat(kakao, "Spy Grade\tRequired XP\tStatus\nSpy\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_SPY)) format(kakao, _, "%s{FFFFFF}Assassin\t%d\t{00FF28}Unlocked",kakao,SPYXP);
						else
						{

							if(PlayerInfo[playerid][XP] < SPYXP) format(kakao, _, "%s{FFFFFF}Assassin\t%d\t{E10000}Locked",kakao,SPYXP);
							else format(kakao, _, "%s{FFFFFF}Assassin\t%d\t{FF7E19}Unlockable",kakao,SPYXP);
						}
						ShowPlayerDialog(playerid, SPY_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Spy",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 9 to use this class! See /ranks");
					}
				}
				case 12:
				{

					if(GetPlayerScore(playerid) > 7499)
					{

						new kakao[101];
						strcat(kakao, "Rifleman Grade\tRequired XP\tStatus\nRifleman\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_RIFLEMAN)) format(kakao, _, "%s{FFFFFF}Elite Rifleman\t%d\t{00FF28}Unlocked",kakao,RIFLEMANXP);
						else
						{

							if(PlayerInfo[playerid][XP] < RIFLEMANXP) format(kakao, _, "%s{FFFFFF}Elite Rifleman\t%d\t{E10000}Locked",kakao,RIFLEMANXP);
							else format(kakao, _, "%s{FFFFFF}Elite Rifleman\t%d\t{FF7E19}Unlockable",kakao,RIFLEMANXP);
						}
						ShowPlayerDialog(playerid, RIFLEMAN_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Rifleman",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 10 to use this class! See /ranks!");
					}
				}
				case 13:
				{

					if(GetPlayerScore(playerid) > 21999)
					{

						new kakao[109];
						strcat(kakao, "Recon Grade\tRequired XP\tStatus\nRecon\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_RECON)) format(kakao, _, "%s{FFFFFF}Silent Recon\t%d\t{00FF28}Unlocked",kakao,RECONXP);
						else
						{

							if(PlayerInfo[playerid][XP] < RECONXP) format(kakao, _, "%s{FFFFFF}Silent Recon\t%d\t{E10000}Locked",kakao,RECONXP);
							else format(kakao, _, "%s{FFFFFF}Silent Recon\t%d\t{FF7E19}Unlockable",kakao,RECONXP);
						}
						ShowPlayerDialog(playerid, RECON_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Recon",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 16 to use this class! See /ranks!");
					}
				}
				case 14:
				{

					if(GetPlayerScore(playerid) > 29999)
					{

						new kakao[108];
						strcat(kakao, "Bomber Grade\tRequired XP\tStatus\nBomber\t0\t{00FF28}Unlocked\n");
						if(Bit_Get(ClassUpgrade[playerid], A_BOMBER)) format(kakao, _, "%s{FFFFFF}Destroyer\t%d\t{00FF28}Unlocked",kakao,BOMBERXP);
						else
						{

							if(PlayerInfo[playerid][XP] < BOMBERXP) format(kakao, _, "%s{FFFFFF}Destroyer\t%d\t{E10000}Locked",kakao,BOMBERXP);
							else format(kakao, _, "%s{FFFFFF}Destroyer\t%d\t{FF7E19}Unlockable",kakao,BOMBERXP);
						}
						ShowPlayerDialog(playerid, BOMBER_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Bomber",kakao,"Select", "Back");
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, Dred,"You need to have rank 18 to use this class! See /ranks!");
					}
				}
				case 15:
				{

					if(PlayerInfo[playerid][dRank] > 0)
					{

						gClass[playerid] = DONOR;
						if(!AntiSK[playerid]) SpawnPR(playerid,0);
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}CLASS{FFFFFF}]: Donor Class");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Can Drive All Vehicles.");
						SendClientMessage(playerid,-1,"{FFFFFF}[{FF8000}FEATURES{FFFFFF}]: Use /vip For Donor Commands.");
						UpdateLabelText(playerid);
					}
					else
					{

						ClassDialog(playerid);
						SendClientMessage(playerid, red,"This class is only for VIP Players. Donate now and become one!");
					}
				}
			}
		}
		case 1541:
		{
			if(!response) return SendClientMessage(playerid,red,"Canceled");
			Dkits[playerid] --;
			switch(listitem)
			{
				case 0:
				{
					SendClientMessage(playerid,TEAM_USA_COLOR,"Disguised as Usa Aussalt");
					SetPlayerSkin(playerid, 287);
					SetPlayerColor(playerid, TEAM_USA_COLOR);
				}
				case 1:
				{
					SendClientMessage(playerid,TEAM_EURASIA_COLOR,"Disguised as Eurasia Aussalt");
					SetPlayerSkin(playerid, 73);
					SetPlayerColor(playerid, TEAM_EURASIA_COLOR);
				}
				case 2:
				{
					SendClientMessage(playerid,TEAM_ARAB_COLOR,"Disguised as Arabic Aussalt");
					SetPlayerSkin(playerid, 179);
					SetPlayerColor(playerid, TEAM_ARAB_COLOR);
				}
				case 3:
				{
					SendClientMessage(playerid,TEAM_SOVIET_COLOR,"Disguised as Soviet Aussalt");
					SetPlayerSkin(playerid, 285);
					SetPlayerColor(playerid, TEAM_SOVIET_COLOR);
				}
				case 4:
				{
					SendClientMessage(playerid,TEAM_AUS_COLOR,"Disguised as Australia Aussalt");
					SetPlayerSkin(playerid, 206);
					SetPlayerColor(playerid, TEAM_AUS_COLOR);
				}
				case 5:
				{
					SendClientMessage(playerid,TEAM_FR_COLOR,"Disguised as France Aussalt");
					SetPlayerSkin(playerid, 108);
					SetPlayerColor(playerid, TEAM_FR_COLOR);
				}
				case 6:
				{

					SendClientMessage(playerid,TEAM_CH_COLOR,"Disguised as Brazilian Aussalt");
					SetPlayerSkin(playerid, 112);
					SetPlayerColor(playerid, TEAM_CH_COLOR);
				}
				case 7:
				{
					SendClientMessage(playerid,TEAM_ID_COLOR,"Disguised as Taliban Aussalt");
					SetPlayerSkin(playerid, 161);
					SetPlayerColor(playerid, TEAM_ID_COLOR);
				}
			}
			new string[35];
			SendClientMessage(playerid, -1, "You can use /undis (/undisguise) to undisguise yourself.");
			format(string, _, "%s\nAssault", GetRankName(playerid));
			UpdateDynamic3DTextLabelText(RankLabel[playerid], GetPlayerColor(playerid), string);
		}
		case DIALOG_CMEMBERSSTATS:
		{
		    switch(PlayerInfo[playerid][CMembersPage])
			{
				case 0:
				{
					ShowPlayerDialog(playerid, CMEMBERSDIALOGR, DIALOG_STYLE_TABLIST_HEADERS, "Clan Members", page0R[playerid], "Next", "Check Stats");
					return 1;
				}
				case 1:
				{
					ShowPlayerDialog(playerid, CMEMBERSDIALOGR, DIALOG_STYLE_TABLIST_HEADERS, "Clan Members", page1R[playerid], "Next", "Check Stats");
					return 1;
				}
				case 2:
				{
					ShowPlayerDialog(playerid, CMEMBERSDIALOGR, DIALOG_STYLE_TABLIST_HEADERS, "Clan Members", page2R[playerid], "Next", "Check Stats");
					return 1;
				}
			}

		}
		case DIALOG_FRIENDSTATS:
		{
			if(!response) { ShowPlayerDialog(playerid, DIALOG_FRIEND, DIALOG_STYLE_LIST, FriendLine[playerid][FriendSelection[playerid]], "Stats\nUnfriend", "Select", "Cancel"); }
			return 1;
		}
		case CMEMBERSDIALOGR:
		{
			new pg = PlayerInfo[playerid][CMembersPage];
			if(!response)
			{
			    new id;
			    switch(pg)
			    {
			        case 0: id = MemID[playerid][listitem];
			        case 1: id = MemID[playerid][listitem+25];
			        case 2: id = MemID[playerid][listitem+50];
			    }
			    new query[156];
				mysql_format(mysql, query, sizeof(query), "SELECT `name`,`crank`,`laston`,`vip`,`kills`,`deaths`,`XP`,`score` FROM `playerbase` WHERE `id` ='%d' LIMIT 1",id);
				mysql_pquery(mysql,query,"ClanMemberStats","d",playerid);
				return 1;
			}
			switch(pg)
			{

				case 0:
				{

					if(PlayerInfo[playerid][CMembers] < 25) return 1;
					ShowPlayerDialog(playerid, CMEMBERSDIALOGR, DIALOG_STYLE_TABLIST_HEADERS, "Clan Members", page1R[playerid], "Next", "Check Stats");
					PlayerInfo[playerid][CMembersPage] = 1;
					return 1;
				}
				case 1:
				{

					if(PlayerInfo[playerid][CMembers] < 50) return 1;
					ShowPlayerDialog(playerid, CMEMBERSDIALOGR, DIALOG_STYLE_TABLIST_HEADERS, "Clan Members", page2R[playerid], "Next", "Check Stats");
					PlayerInfo[playerid][CMembersPage] = 2;
					return 1;
				}
			}

		}
		case 245:
		{

			if(!response) return SendClientMessage(playerid, red,"You Canceled!");
			switch(listitem) // This is far more efficient than using an if-elseif-else structure
			{

				case 0: ChangeVehicleColours(GetPlayerVehicleID(playerid), 1, 1);
				case 1: ChangeVehicleColours(GetPlayerVehicleID(playerid), 236, 236);
				case 2: ChangeVehicleColours(GetPlayerVehicleID(playerid), 79, 79);
				case 3: ChangeVehicleColours(GetPlayerVehicleID(playerid), 6, 6);
				case 4: ChangeVehicleColours(GetPlayerVehicleID(playerid), 55, 55);
				case 5: ChangeVehicleColours(GetPlayerVehicleID(playerid), 147, 147);
				case 6: ChangeVehicleColours(GetPlayerVehicleID(playerid), 3, 3);
				case 7: ChangeVehicleColours(GetPlayerVehicleID(playerid), 183, 183);
				case 8: ChangeVehicleColours(GetPlayerVehicleID(playerid), 186, 186);
				case 9: ChangeVehicleColours(GetPlayerVehicleID(playerid), 91, 91);
				case 10: ChangeVehicleColours(GetPlayerVehicleID(playerid), 000, 000);
			}
		}
		case FINDZONE_DIALOG:
		{
		    if(response)
		    {
		        new i = listitem;
                SetPlayerRaceCheckpoint(playerid, CP_TYPE_GROUND_FINISH, ZonesCapturePos[i][0],ZonesCapturePos[i][1],ZonesCapturePos[i][2],0.0,0.0,0.0,8.0);
				GameTextForPlayer(playerid,"~b~~h~Zone marked on your map",3000,5);
		    }
		    return 1;
		}
		case LOCATOR_DIALOG:
		{
			if(tCP[A52] != GetPlayerTeam(playerid)) return SendClientMessage(playerid,Dred,"Your team must own Area 52 To use the Locator");
			if(!response)
			{
			    PlayerPlaySound(playerid, 41603, 0.0, 0.0, 0.0);
				new USAL, ARL, EURL, FRL, TALIBL, BRL, SOVL, AUSL;
				foreach(new i : Player)
				{
				    if(gTeam[i] != gTeam[playerid])
				    {
				        if(!PlayerInfo[i][OnDuty])
				        {
				            if(IsPlayerInArea(i, 994.1957, 1817.512, 1185.533, 2049.596)) EURL++;
				            if(IsPlayerInArea(i, -875.8406, 1389.667, -607.2495, 1623.225)) ARL++;
				            if(IsPlayerInArea(i, -309.375,1024.21875,103.125,1211.71875)) SOVL++;
				            if(IsPlayerInArea(i, -353.515625,2574.21875,-113.28125,2796.875)) USAL++;
				            if(IsPlayerInArea(i, 89.0625,2418.75,466.40625,2617.96875)) AUSL++;
				            if(IsPlayerInArea(i, -769.520507, 808.620483, -633.520507, 1056.620483)) BRL++;
				            if(IsPlayerInArea(i, 929.864990, 2536.129150, 1241.864990, 2720.129150)) TALIBL++;
				            if(IsPlayerInArea(i, -1658.203125, 2519.53125, -1341.796875, 2759.765)) FRL++;
				        }
				    }
				}
				ShowPlayerDialog(playerid, LOCATOR_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFD6}Area 52 {8000ED}Local", "\n{0084C0}USA: {FFFFD6}%d targets\n{FFC900}Arabia: {FFFFD6}%d targets\n{4FF54F}Eurasia: {FFFFD6}%d targets\n{9D4800}France: {FFFFD6}%d targets\n{00995A}Taliban: {FFFFD6}%d targets\n{2DF1FF}Brazil: {FFFFD6}%d targets\n{FF0000}Soviet: {FFFFD6}%d targets\n{8000ED}Australia: {FFFFD6}%d targets", "OK", "Refresh", USAL, ARL, EURL, FRL, TALIBL, BRL, SOVL, AUSL);
			}
		}
		case FLASH_DIALOG:
		{
		    if(!response) return 1;
			if(FlashON == 1) return SendClientMessage(playerid,Dred,"|ERROR|: Nice bug abuse attempt!");
			new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
			SendClientMessageToAll(0x00FF00FF,"Flash: %s has Ordered a Flash bomb on Area 52",nam);
			FlashON = 1;
			FlashSecs = 440 + (GetTickCount()/1000);
			SetTimer("FlashTimer", 1000, false);
			GiveCash(playerid,-30000);
			new count;
			new xx = PlayerInfo[playerid][InClan], pl = GetPlayerTeam(playerid);
			foreach(new i : ARENA[NON])
			{
				if(!PlayerInfo[i][OnDuty])
				{
					if(IsPlayerInArea(i, -2649.850, 2190.971, -2159.175, 2486.162))
					{
						if(GetPlayerTeam(i) != pl)
						{
						    if(GetPlayerState(i) != PLAYER_STATE_SPECTATING)
						    {
								if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
								count++;
								PlayerTextDrawShow(i, FlashTD[i]);
								WhiteLevel[i] = 10;
								PlayAudioStreamForPlayer(i,"http://bit.ly/2tdhfWw");
								UpdateLabelText(i);
								SetPlayerDrunkLevel(i, 2500);
								SetTimerEx("DecreaseFlash", 600, false, "d", i);
							}
						}
					}
				}
			}
			SendClientMessage(playerid, -1, "{80FF00}[FLASH] {FFFFFF}You flashed {80FF00}%d{FFFFFF} with the Bomb, you earned $%d", count, count * 1500);
			if(xx != -1)
			{
				new str[96],rnn;
				rnn = random(1500)*count;
				format(str, _, "* Clan has recieved %d$ from %s Flash Bomb!", rnn, nam);
				ClanMSG(xx,str);
				foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
			}
		}
		case BASEJUMP_DIALOG:
		{
		    if(!response) return 1;
		    GivePlayerWeapon(playerid, WEAPON_PARACHUTE, 1);
		    switch(listitem)
		    {
				case 0:
				{
					new rand = random(sizeof(USSpawn));
					SetPlayerPos(playerid, USSpawn[rand][0], USSpawn[rand][1], USSpawn[rand][2]+800.00);
				}
				case 1:
				{
					new rand = random(sizeof(ArabSpawn));
					SetPlayerPos(playerid, ArabSpawn[rand][0], ArabSpawn[rand][1], ArabSpawn[rand][2]+800.00);
				}
				case 2:
				{
					new rand = random(sizeof(AusSpawn));
					SetPlayerPos(playerid, AusSpawn[rand][0], AusSpawn[rand][1], AusSpawn[rand][2]+800.00);
				}
			  	case 3:
				{

					new rand = random(sizeof(EurasiaSpawn));
					SetPlayerPos(playerid, EurasiaSpawn[rand][0], EurasiaSpawn[rand][1], EurasiaSpawn[rand][2]+800.00);
				}
				case 4:
				{

					new rand = random(sizeof(RussiaSpawn));
					SetPlayerPos(playerid, RussiaSpawn[rand][0], RussiaSpawn[rand][1], RussiaSpawn[rand][2]+800.00);
				}
				case 5:
				{
					new rand = random(sizeof(CHspawn));
					SetPlayerPos(playerid, CHspawn[rand][0], CHspawn[rand][1], CHspawn[rand][2]+800.00);
				}
				case 6:
				{
					new rand = random(sizeof(IDspawn));
					SetPlayerPos(playerid, IDspawn[rand][0], IDspawn[rand][1], IDspawn[rand][2]+800.00);
				}
				case 7:
				{
					new rand = random(sizeof(FranceSpawn));
					SetPlayerPos(playerid, FranceSpawn[rand][0], FranceSpawn[rand][1], FranceSpawn[rand][2]+800.00);
				}
			}
			ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive",0.0,0,0,0,0,0);
		}
		case NUKE2_DIALOG:
		{
		    if(!response) return 1;
		    if(Air2ON) return ERR(playerid, "Nice bug abuse attempt!");
		    new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
			new x = PlayerInfo[playerid][InClan], count;
			new Float:xx = ZonesGangCoords[listitem][0], Float:zz = ZonesGangCoords[listitem][2], Float:yy = ZonesGangCoords[listitem][1], Float:ww = ZonesGangCoords[listitem][3];
			SendClientMessageToAll(0x00FF00FF,"Nuclear: %s has Ordered a Space Nuclear bomb on %s",nam, ZName(listitem));
			Air2ON = 1;
			Air2Secs = 440 + (GetTickCount()/1000);
			GiveCash(playerid,-200000);
		    foreach(new j: Player)
		    {
		        if(x != -1) if(PlayerInfo[j][InClan] == x) goto habibi;
		        if(gTeam[j] != gTeam[playerid])
		        {
		        	if(!PlayerInfo[j][OnDuty])
					{
						if(!sttt[j])
						{
							if(!PlayerInfo[j][FirstCon])
							{
							    if(GetPlayerState(j) != PLAYER_STATE_SPECTATING)
							    {
							    	if(IsPlayerInArea(j, xx,yy,zz,ww))
									{
				    					count++;
										Nuke2Kill(playerid,j);
									}
								}
				            }
				        }
					}
				}
				habibi: {}
			}
			ConnectKills[playerid] += count;
			if(cPerk[playerid][P_MONEY] > 0)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
				GiveCash(playerid,1500*count);
			}
			SendClientMessage(playerid, -1, "{80FF00}[NUKELEKILL] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the space nuke, %d score and $%d", count, count, count * 1500);
			if(x != -1)
			{
				new str[96],rnn;
				rnn = random(1500)*count;
				format(str, _, "* Clan has recieved %d$ from %s space nuke kills!", rnn, nam);
				ClanMSG(x,str);
				foreach(new j : Player) if(x == PlayerInfo[j][InClan]) GiveCash(j,rnn);
			}
			SetTimer("Air2Timer", 1000, false);
		}
		case 9374:
		{

			if(!response) return 1;
			if(AirON == 1) return SendClientMessage(playerid,Dred,"|ERROR|: Nice bug abuse attempt!");
            new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
			switch(listitem)
			{
				case 0:
				{
					if(gTeam[playerid] == TEAM_USA) return SendClientMessage(playerid,Dred,"* You can't Nuke your home base");
					SendClientMessageToAll(0x00FF00FF,"Nuclear: %s has Ordered a Nuclear bomb on USA base",nam);
					AirON = 1;
					AirSecs = 440 + (GetTickCount()/1000);
					SetTimer("NukeWeather",15000,false);
					GiveCash(playerid,-200000);
					new count;
					new xx = PlayerInfo[playerid][InClan], pl = GetPlayerTeam(playerid);
					foreach(new i : ARENA[NON])
					{
						if(!PlayerInfo[i][OnDuty])
						{
							SetPlayerWeather(i,32);
							if(IsPlayerInArea(i, -353.515625,2574.21875,-113.28125,2796.875))
							{
								if(GetPlayerTeam(i) != pl)
								{
									if(!sttt[i])
									{
										if(GetPlayerInterior(i) == 0)
						    			{
											if(!PlayerInfo[i][FirstCon])
											{
											    if(GetPlayerState(i) != PLAYER_STATE_SPECTATING)
											    {
										        	if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
													if(PlayerInfo[i][dRank] > 3) continue;
													count++;
													NukeKill(playerid,i);
									            }
											}
								        }
									}
								}
							}
						}
					}
					ConnectKills[playerid] += count;
					if(cPerk[playerid][P_MONEY] > 0)
					{

						SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
						GiveCash(playerid,1500*count);
					}
					SendClientMessage(playerid, -1, "{80FF00}[NUKELEKILL] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the nuke, %d score and $%d", count, count, count * 1500);
					if(xx != -1)
					{

						new str[96],rnn;
						rnn = random(1500)*count;
						format(str, _, "* Clan has recieved %d$ from %s nuke kills!", rnn, nam);
						ClanMSG(xx,str);
						foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
					}
				}
				case 1: // arabia
				{

					if(gTeam[playerid] == TEAM_ARAB) return SendClientMessage(playerid,Dred,"* You can't Nuke your home base");
					SendClientMessageToAll(0x00FF00FF,"Nuclear: %s has Ordered a Nuclear bomb on Arabia base",nam);
					AirON = 1;
					AirSecs = 440 + (GetTickCount()/1000);
					SetTimer("NukeWeather",15000,false);
					GiveCash(playerid,-200000);
					new count;
					new xx = PlayerInfo[playerid][InClan], pl = GetPlayerTeam(playerid);
					foreach(new i : ARENA[NON])
					{
						if(PlayerInfo[i][OnDuty]) continue;
						SetPlayerWeather(i,32);
						if(IsPlayerInArea(i, -914.0625, 1406.25, -679.6875, 1646.484375))
						{
							if(GetPlayerInterior(i) != 0) continue;
							if(GetPlayerTeam(i) != pl)
							{
                                if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
                                if(GetPlayerState(i) == PLAYER_STATE_SPECTATING) continue;
								if(PlayerInfo[i][dRank] > 3) continue;
								count++;
								NukeKill(playerid,i);
							}
						}
					}
					ConnectKills[playerid] += count;
					if(cPerk[playerid][P_MONEY] > 0)
					{

						SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
						GiveCash(playerid,1500*count);
					}
					SendClientMessage(playerid, -1, "{80FF00}[NUKELEKILL] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the nuke, %d score and $%d", count, count, count * 1500);
					if(xx != -1)
					{

						new str[96],rnn;
						rnn = random(1500)*count;
						format(str, _, "* Clan has recieved %d$ from %s nuke kills!", rnn, nam);
						ClanMSG(xx,str);
						foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
					}
				}
				case 2: // aus
				{

					if(gTeam[playerid] == TEAM_AUS) return SendClientMessage(playerid,Dred,"* You can't Nuke your home base");
					SendClientMessageToAll(0x00FF00FF,"Nuclear: %s has Ordered a Nuclear bomb on Australia base",nam);
					AirON = 1;
					AirSecs = 440 + (GetTickCount()/1000);
					SetTimer("NukeWeather",15000,false);
					GiveCash(playerid,-200000);
					new count;
					new xx = PlayerInfo[playerid][InClan], pl = GetPlayerTeam(playerid);
					foreach(new i : ARENA[NON])
					{
						if(PlayerInfo[i][OnDuty]) continue;
						SetPlayerWeather(i,32);
						if(IsPlayerInArea(i, 23.4375, 2390.625, 468.75, 2625))
						{
							if(GetPlayerInterior(i) != 0) continue;
							if(GetPlayerTeam(i) != pl)
							{
                            	if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
                                if(GetPlayerState(i) == PLAYER_STATE_SPECTATING) continue;
								if(PlayerInfo[i][dRank] > 3) continue;
								count++;
								NukeKill(playerid,i);
							}
						}
					}
					ConnectKills[playerid] += count;
					if(cPerk[playerid][P_MONEY] > 0)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
						GiveCash(playerid,1500*count);
					}
					SendClientMessage(playerid, -1, "{80FF00}[NUKELEKILL] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the nuke, %d score and $%d", count, count, count * 1500);
					if(xx != -1)
					{
						new str[96],rnn;
						rnn = random(1500)*count;
						format(str, _, "* Clan has recieved %d$ from %s nuke kills!", rnn, nam);
						ClanMSG(xx,str);
						foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
					}
				}
				case 3: // eur
				{

					if(gTeam[playerid] == TEAM_EURASIA) return SendClientMessage(playerid,Dred,"* You can't Nuke your home base");
					SendClientMessageToAll(0x00FF00FF,"Nuclear: %s has Ordered a Nuclear bomb on Eurasia base",nam);
					AirON = 1;
					AirSecs = 440 + (GetTickCount()/1000);
					SetTimer("NukeWeather",15000,false);
					GiveCash(playerid,-200000);
					new count;
					new xx = PlayerInfo[playerid][InClan], pl = GetPlayerTeam(playerid);
					foreach(new i : ARENA[NON])
					{
						if(PlayerInfo[i][OnDuty]) continue;
						SetPlayerWeather(i,32);
						if(IsPlayerInArea(i,994.1957, 1817.512, 1185.533, 2049.596))
						{
							if(GetPlayerInterior(i) != 0) continue;
							if(GetPlayerTeam(i) != pl)
							{
                            	if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
                                if(GetPlayerState(i) == PLAYER_STATE_SPECTATING) continue;
								if(PlayerInfo[i][dRank] > 3) continue;
								count++;
								NukeKill(playerid,i);
							}
						}
					}
					ConnectKills[playerid] += count;
					if(cPerk[playerid][P_MONEY] > 0)
					{

						SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
						GiveCash(playerid,1500*count);
					}
					SendClientMessage(playerid, -1, "{80FF00}[NUKELEKILL] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the nuke, %d score and $%d", count, count, count * 1500);
					if(xx != -1)
					{

						new str[96],rnn;
						rnn = random(1500)*count;
						format(str, _, "* Clan has recieved %d$ from %s nuke kills!", rnn, nam);
						ClanMSG(xx,str);
						foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
					}
				}
				case 4: // sov
				{

					if(gTeam[playerid] == TEAM_SOVIET) return SendClientMessage(playerid,Dred,"* You can't Nuke your home base");
					SendClientMessageToAll(0x00FF00FF,"Nuclear: %s has Ordered a Nuclear bomb on Soviet base",nam);
					AirON = 1;
					AirSecs = 440 + (GetTickCount()/1000);
					SetTimer("NukeWeather",15000,false);
					GiveCash(playerid,-200000);
					new count;
					new xx = PlayerInfo[playerid][InClan], pl = GetPlayerTeam(playerid);
					foreach(new i : ARENA[NON])
					{
						if(PlayerInfo[i][OnDuty]) continue;
						SetPlayerWeather(i,32);
						if(IsPlayerInArea(i, -309.375,1024.21875,103.125,1211.71875))
						{
							if(GetPlayerInterior(i) != 0) continue;
							if(GetPlayerTeam(i) != pl)
							{
                                if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
								if(GetPlayerState(i) == PLAYER_STATE_SPECTATING) continue;
								if(PlayerInfo[i][dRank] > 3) continue;
								count++;
								NukeKill(playerid,i);
							}
						}
					}
					ConnectKills[playerid] += count;
					if(cPerk[playerid][P_MONEY] > 0)
					{

						SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
						GiveCash(playerid,1500*count);
					}
					SendClientMessage(playerid, -1, "{80FF00}[NUKELEKILL] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the nuke, %d score and $%d", count, count, count * 1500);
					if(xx != -1)
					{

						new str[96],rnn;
						rnn = random(1500)*count;
						format(str, _, "* Clan has recieved %d$ from %s nuke kills!", rnn, nam);
						ClanMSG(xx,str);
						foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
					}
				}
				case 5: // Brazil
				{

					if(gTeam[playerid] == TEAM_CH) return SendClientMessage(playerid,Dred,"* You can't Nuke your home base");
					SendClientMessageToAll(0x00FF00FF,"Nuclear: %s has Ordered a Nuclear bomb on Brazil base",nam);
					AirON = 1;
					AirSecs = 440 + (GetTickCount()/1000);
					SetTimer("NukeWeather",15000,false);
					GiveCash(playerid,-200000);
					new count;
					new xx = PlayerInfo[playerid][InClan], pl = GetPlayerTeam(playerid);
					foreach(new i : ARENA[NON])
					{
						if(PlayerInfo[i][OnDuty]) continue;
						SetPlayerWeather(i,32);
						if(IsPlayerInArea(i, -769.520507, 808.620483, -633.520507, 1056.620483))
						{
							if(GetPlayerInterior(i) != 0) continue;
							if(GetPlayerTeam(i) != pl)
							{
                                if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
								if(PlayerInfo[i][dRank] > 3) continue;
								if(GetPlayerState(i) == PLAYER_STATE_SPECTATING) continue;
								count++;
								NukeKill(playerid,i);
							}
						}
					}
					ConnectKills[playerid] += count;
					if(cPerk[playerid][P_MONEY] > 0)
					{

						SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
						GiveCash(playerid,1500*count);
					}
					SendClientMessage(playerid, -1, "{80FF00}[NUKELEKILL] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the nuke, %d score and $%d", count, count, count * 1500);
					if(xx != -1)
					{

						new str[96],rnn;
						rnn = random(1500)*count;
						format(str, _, "* Clan has recieved %d$ from %s nuke kills!", rnn, nam);
						ClanMSG(xx,str);
						foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
					}
				}
				case 6:
				{

					if(gTeam[playerid] == TEAM_ID) return SendClientMessage(playerid,Dred,"* You can't Nuke your home base");
					SendClientMessageToAll(0x00FF00FF,"Nuclear: %s has Ordered a Nuclear bomb on Taliban base",nam);
					AirON = 1;
					AirSecs = 440 + (GetTickCount()/1000);
					SetTimer("NukeWeather",15000,false);
					GiveCash(playerid,-200000);
					new count;
					new xx = PlayerInfo[playerid][InClan], pl = GetPlayerTeam(playerid);
					foreach(new i : ARENA[NON])
					{
						if(PlayerInfo[i][OnDuty]) continue;
						SetPlayerWeather(i,32);
						if(IsPlayerInArea(i,929.864990, 2536.129150, 1241.864990, 2720.129150))
						{
							if(GetPlayerInterior(i) != 0) continue;
							if(GetPlayerTeam(i) != pl)
							{
                                if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
								if(PlayerInfo[i][dRank] > 3) continue;
								if(GetPlayerState(i) == PLAYER_STATE_SPECTATING) continue;
								count++;
								NukeKill(playerid,i);
							}
						}
					}
					ConnectKills[playerid] += count;
					if(cPerk[playerid][P_MONEY] > 0)
					{

						SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
						GiveCash(playerid,1500*count);
					}
					SendClientMessage(playerid, -1, "{80FF00}[NUKELEKILL] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the nuke, %d score and $%d", count, count, count * 1500);
					if(xx != -1)
					{

						new str[96],rnn;
						rnn = random(1500)*count;
						format(str, _, "* Clan has recieved %d$ from %s nuke kills!", rnn, nam);
						ClanMSG(xx,str);
						foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
					}
				}
				case 7: // France
				{

					if(gTeam[playerid] == TEAM_FRANCE) return SendClientMessage(playerid,Dred,"* You can't Nuke your home base");
					SendClientMessageToAll(0x00FF00FF,"Nuclear: %s has Ordered a Nuclear bomb on France base",nam);
					AirON = 1;
					AirSecs = 440 + (GetTickCount()/1000);
					SetTimer("NukeWeather",15000,false);
					GiveCash(playerid,-200000);
					new count;
					new xx = PlayerInfo[playerid][InClan], pl = GetPlayerTeam(playerid);
					foreach(new i : ARENA[NON])
					{
						if(PlayerInfo[i][OnDuty]) continue;
						SetPlayerWeather(i,32);
						if(IsPlayerInArea(i, -1667.324778, 2490.621915, -1276.406713, 2757.15696))
						{
							if(GetPlayerInterior(i) != 0) continue;
							if(GetPlayerTeam(i) != pl)
							{
                                if(xx != -1) if(PlayerInfo[i][InClan] == xx) continue;
								if(PlayerInfo[i][dRank] > 3) continue;
								if(GetPlayerState(i) == PLAYER_STATE_SPECTATING) continue;
								count++;
								NukeKill(playerid,i);
							}
						}
					}
					ConnectKills[playerid] += count;
					if(cPerk[playerid][P_MONEY] > 0)
					{

						SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
						GiveCash(playerid,1500*count);
					}
					SendClientMessage(playerid, -1, "{80FF00}[NUKELEKILL] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the nuke, %d score and $%d", count, count, count * 1500);
					if(xx != -1)
					{

						new str[96],rnn;
						rnn = random(1500)*count;
						format(str, _, "* Clan has recieved %d$ from %s nuke kills!", rnn, nam);
						ClanMSG(xx,str);
						foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
					}
				}
			}
			SetTimer("AirTimer", 1000, false);
		}
		case 2336:
		{

			if(!response) return 1;
			switch(listitem)
			{
				case 0: /// base
				{
					SpawnP[playerid] = BASE;
					SendClientMessage(playerid,-1,"Spawn Place: Base");
				}
				case 1..34:
				{
                    new listi = listitem - 1;
					if(tCP[listi] == GetPlayerTeam(playerid))
					{
						SpawnP[playerid] = listi;
						SendClientMessage(playerid,-1,"Spawn Place: %s",ZName(listi));
					} else SendClientMessage(playerid,red,"* %s is not captured by your team",ZName(listi));
				}
				case 35:
				{
					SpawnP[playerid] = CLANBASE;
					SendClientMessage(playerid,-1,"Spawn Place: Clan Base");
				}
			}
		}
		case 126:
		{
            new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
			if(!response)
			{

				return ShowPlayerDialog(playerid, 126, DIALOG_STYLE_INPUT, "Register", ""cwhite"Welcome {0080FF}%s "cwhite"you are already registered\nKindly enter password to {0080FF}login"cwhite" to your account\n"cred"Please Register", "Register", "", nam);
			}
			if (strlen(inputtext) < 4 || strlen(inputtext) > 20) {
				return ShowPlayerDialog(playerid, 126, DIALOG_STYLE_INPUT, "Register", ""cwhite"Welcome {0080FF}%s "cwhite"you are already registered\nKindly enter password to {0080FF}login"cwhite" to your account\n"cred"Too short or Too long Password", "Register", "", nam);
			}
			new query[505];
			WP_Hash(PlayerInfo[playerid][Pass], 129, inputtext);
			mysql_format(mysql, query, sizeof(query), "INSERT INTO `playerbase` (`name`, `pass`, `ip`, `adminlvl`, `vip`, `money`, `medkit` ,`armourpack`, `score`,`inclan`,`clanlead`,`clanown`,`ddm`,`dcbdm`,`dsdm`,`head`, `dmusickit`,`clancoown`,`classes`,`XP`,`VPB`) VALUES ('%e','%s', '%s', 0, 0, 0, 0, 0, 0,-1,-1,-1,0,0,0,0,0,-1,'00000000000000000000',0,0)", nam,PlayerInfo[playerid][Pass],PlayerInfo[playerid][lastip]);
			mysql_tquery(mysql, query, "OnAccountRegister", "di", playerid, rCheck[playerid]);
			PlayerInfo[playerid][LoggedIn] = true;
			GiveCash(playerid,100000);
			SetPlayerScore(playerid,15);
			SendClientMessage(playerid, -1, "*You are {0080FF}registered {FFFFFF}and logged in");
			PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		}
		case 130: // Mysql Login
		{

			if(response)
			{

				new hpass[129];
				new query[93];
				WP_Hash(hpass, 129, inputtext);
                new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
				if(!strcmp(hpass, PlayerInfo[playerid][Pass]))
				{

					mysql_format(mysql, query, sizeof(query), "SELECT * FROM `playerbase` WHERE `name` = '%e' LIMIT 1", nam);
					mysql_pquery(mysql, query, "OnAccountLoad", "ii", playerid, rCheck[playerid]);
				}else
				{

					PlayerInfo[playerid][FailLogin]++;
					if(PlayerInfo[playerid][FailLogin] == MAX_FAIL_LOGINS)
					{

						SendClientMessageToAll(Dred,"[FAIL LOGIN] '%s' has been kicked due to failing on logging on to the server  (3/3)",nam);
						KickX(playerid);
					}
					ShowPlayerDialog(playerid, 130, DIALOG_STYLE_PASSWORD, "Login", ""cwhite"Welcome {0080FF}%s "cwhite"you are already registered\nKindly enter password to {0080FF}login"cwhite" to your account\n{EA0075}Failed Login Attempts (%d/%d)", "Login", "", nam ,PlayerInfo[playerid][FailLogin], MAX_FAIL_LOGINS);
				}
			}else
			{

				SendClientMessage(playerid,Dred,"* You have Quit Login Dialog You are kicked");
				KickX(playerid);
			}
		}
		case 532:
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0: { PlayerInfo[playerid][LANG] = ENG; starttut(playerid); }
				case 1: { PlayerInfo[playerid][LANG] = SPANISH; starttut(playerid); }
				case 2: { PlayerInfo[playerid][LANG] = RUSS; starttut(playerid); }
			}
		}
		case 2: //shop()
		{
			if(!response) return 1;
			if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid,red,"ERROR: Cannot use the shop inside duel!");
			if(inevent[playerid] > 0 || Iter_Contains(PUBGEvent, playerid)) return SendClientMessage(playerid,red,"* Cannot buy in events.");
			if(!InArena(playerid, NON) || HasJoined(playerid)) return SendClientMessage(playerid,red,"* Cannot buy in DMs.");
			if(AntiSK[playerid]) return ShowDialog(playerid), ERR(playerid, "Please wait for anti spawn kill protection to end.");
			switch(listitem)
			{

				case 0:
				{
					if(GetPlayerMoney(playerid) < 5000) return SendClientMessage(playerid,Dred,"* You don't have enough cash");
					new Float:HP; GetPlayerHealth(playerid, HP);
					if(HP > 98)
					{
						ERR(playerid, "You already have full health");
						ShowDialog(playerid);
						return 1;
					}
					GiveCash(playerid,-5000);
					SetPlayerHealth(playerid, 100.0);
					SendClientMessage(playerid, Lg, "* Bought health for $5000");
					ShowDialog(playerid);
				}
				case 1:
				{

					if(GetPlayerMoney(playerid) < 5500) return SendClientMessage(playerid,Dred,"* You don't have enough cash");
					new Float:HP; GetPlayerArmour(playerid, HP);
					if(HP > 97)
					{
						ERR(playerid, "You already have full Armour");
						ShowDialog(playerid);
						return 1;
					}
					GiveCash(playerid,-5500);
					SetPlayerArmour(playerid, 100.0);
					SendClientMessage(playerid, Lg, "* Bought Armour for $5500.");
					ShowDialog(playerid);
				}
				case 2: WeaponShop(playerid);
				case 3:
				{

					if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant join now");
					if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
					if(!AntiSK[playerid])
					{

						if(PlayerInfo[playerid][OnDuty] == 1) cmd_adminduty(playerid);
						Iter_Add(ARENA[EDM], playerid);
						Iter_Remove(ARENA[NON], playerid);
						SendClientMessageToAll(0xA448FFFF,"[DM ARENA] %s(%d) has joined deathmatch stadium * Total players: %d",PlayerInfo[playerid][Nick],playerid,DmCount());
						CheckDMPlayer(playerid);
						TextDrawShowForPlayer(playerid, DM_Top[0]);
						TextDrawShowForPlayer(playerid, DM_Top[1]);
						TextDrawShowForPlayer(playerid, DM_Top[2]);
						TextDrawShowForPlayer(playerid, DM_Top[3]);
						return 1;
					}
					SendClientMessage(playerid, RED,"You cannot join DM while in antiSK protection! Try again later");
					ShowDialog(playerid);
					return 1;
				}
				case 4: // medit kit
				{

					if(PlayerInfo[playerid][MedKit] >2)
					{

						SendClientMessage(playerid,Dred,"* You can't Carry more Medic kits !");
						return  ShowDialog(playerid);
					}
					if(GetCash(playerid) < 3000) return SendClientMessage(playerid,Dred,"* You don't have enough cash");
					PlayerInfo[playerid][MedKit] ++;
					SendClientMessage(playerid,Lg,"* Bought Medic kit for 3000$  | Medic kits : %d",PlayerInfo[playerid][MedKit]);
					ShowDialog(playerid);
					GiveCash(playerid,-3000);
				}
				case 5: // armour pack
				{

					if(PlayerInfo[playerid][ArmourP] >=3)
					{

						SendClientMessage(playerid,Dred,"* You can't Carry more Armour packs !");
						return  ShowDialog(playerid);
					}
					if(GetCash(playerid) < 3000) return SendClientMessage(playerid,Dred,"* You don't have enough cash");
					PlayerInfo[playerid][ArmourP] ++;
					SendClientMessage(playerid,Lg,"* Bought Armour pack for 3000$  | Armour packs : %d",PlayerInfo[playerid][ArmourP]);
					ShowDialog(playerid);
					GiveCash(playerid,-3000);
				}
				case 6: // gas mask
				{

					if(PlayerInfo[playerid][Mask] == true)
					{

						SendClientMessage(playerid,Dred,"* You already have a gas mask !");
						return  ShowDialog(playerid);
					}
					if(GetCash(playerid) < 4000) return SendClientMessage(playerid,Dred,"* You don't have enough cash");
					PlayerInfo[playerid][Mask] = true;
					SendClientMessage(playerid,Lg,"* Bought Gas Mask for 4000$ ");
					PlayerInfo[playerid][WEARMASK] = true;
					SetPlayerAttachedObject(playerid,1,19472,2,0.027000,0.138999,0.010000,95.200027,74.399917,2.100000,1.000000,1.000000,1.000000);
					ShowDialog(playerid);
					GiveCash(playerid,-4000);
				}
				case 7: // helmet
				{

					if(PlayerInfo[playerid][HELMET] == true)
					{

						SendClientMessage(playerid,Dred,"* You already have a Helmet !");
						return  ShowDialog(playerid);
					}
					if(GetCash(playerid) < 2500) return SendClientMessage(playerid,Dred,"* You don't have enough cash");
					PlayerInfo[playerid][HELMET] = true;
					SendClientMessage(playerid,Lg,"* Bought Helmet for 2500$ ");
					PlayerInfo[playerid][WEAR] = true;
					switch(gTeam[playerid])
					{

						case TEAM_AUS: SetPlayerAttachedObject(playerid,0,19104,2,0.152999,0.015000,-0.002000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
						case TEAM_EURASIA: SetPlayerAttachedObject(playerid,0,19104,2,0.142000,0.020000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
						case TEAM_ARAB: SetPlayerAttachedObject(playerid,0,19104,2,0.147999,0.000000,0.000000,0.000000,0.000000,0.000000,1.090000,1.000000,1.114000);
						case TEAM_USA: SetPlayerAttachedObject(playerid,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
						case TEAM_ID: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
						case TEAM_CH: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
						case TEAM_FRANCE: SetPlayerAttachedObject(playerid,0,19104,2,0.151000,0.004000,0.000000,-0.399999,-0.200000,-7.599999,1.123999,1.000000,1.058000);
						case TEAM_MERC: SetPlayerAttachedObject(playerid,0,19104,2,0.151000,0.004000,0.000000,-0.399999,-0.200000,-7.599999,1.123999,1.000000,1.058000);
					}
					ShowDialog(playerid);
					GiveCash(playerid,-2500);
				}
				case 8: // gps
				{

					if(PlayerInfo[playerid][GPS] == true) {
						SendClientMessage(playerid,Dred,"* You already have Gps Scrambler !");
						return  ShowDialog(playerid); }
					if(GetCash(playerid) < 30000) return SendClientMessage(playerid,Dred,"* You don't have enough cash");
					PlayerInfo[playerid][GPS] = true;
					pGPS[playerid] = false;
					SendClientMessage(playerid,Lg,"* Bought Gps scrambler for 30000$ ");
					GiveCash(playerid,-30000);
					SendClientMessage(playerid,Lg,"* Use /gpshelp for info");
					ShowDialog(playerid);
				}
				case 9: // camouflage
				{

					if(PlayerInfo[playerid][Camouflage] == true) {
						SendClientMessage(playerid,Dred,"* You already have Camouflage !");
						return  ShowDialog(playerid); }
					if(GetCash(playerid) < 55000) return SendClientMessage(playerid,Dred,"* You don't have enough cash");
					PlayerInfo[playerid][Camouflage] = true;
					pCamouflage[playerid] = false;
					SendClientMessage(playerid,Lg,"* Bought Camouflage for 55000$ ");
					GiveCash(playerid,-55000);
					SendClientMessage(playerid,Lg,"* Use /cmhelp for info, /cm to toggle camouflage.");
					ShowDialog(playerid);
				}
				case 10:
				{
					if(gClass[playerid] != RECON || !Bit_Get(ClassUpgrade[playerid], A_RECON)) return ERR(playerid,"Only Silent Recon can buy drones from shop."),ShowDialog(playerid);
					if(Drones[playerid] == 3) return ERR(playerid,"You have too many drones, use them before buying more."),ShowDialog(playerid);
					if(GetCash(playerid) < 15000) return SendClientMessage(playerid,Dred,"* You don't have enough cash"),ShowDialog(playerid);
					SendClientMessage(playerid,Lg,"* Bought Drone for 15000$ ");
					GiveCash(playerid,-15000);
					ShowDialog(playerid);
					Drones[playerid] ++;
				}
				case 11:
				{
					if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant join now");
					if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
					if(!AntiSK[playerid])
					{

						if(PlayerInfo[playerid][OnDuty] == 1) cmd_adminduty(playerid);
						Iter_Add(ARENA[SDM], playerid);
						Iter_Remove(ARENA[NON], playerid);
                    	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
						SendClientMessageToAll(0xA448FFFF,"[DM ARENA] %s(%d) has joined Sniper deathmatch stadium * Total players: %d",nam,playerid,sDmCount());
						TextDrawShowForPlayer(playerid, DSDM_Top[0]);
						TextDrawShowForPlayer(playerid, DSDM_Top[1]);
						TextDrawShowForPlayer(playerid, DSDM_Top[2]);
						TextDrawShowForPlayer(playerid, DSDM_Top[3]);
						CheckDMPlayer(playerid);
						return 1;
					}
					SendClientMessage(playerid, RED,"You cannot join SDM while in AntiSK protection! Try again later");
					ShowDialog(playerid);
					return 1;
				}
				case 12:
				{

					if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant join now");
					if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
					if(!AntiSK[playerid])
					{

						if(PlayerInfo[playerid][OnDuty]) cmd_adminduty(playerid);
						Iter_Add(ARENA[CBDM], playerid);
                    	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
						Iter_Remove(ARENA[NON], playerid);
						SendClientMessageToAll(0xA448FFFF,"[DM ARENA] %s(%d) has joined C-Bug deathmatch stadium * Total players: %d",nam,playerid,CDmCount());
						TextDrawShowForPlayer(playerid, CBDM_Top[0]);
						TextDrawShowForPlayer(playerid, CBDM_Top[1]);
						TextDrawShowForPlayer(playerid, CBDM_Top[2]);
						TextDrawShowForPlayer(playerid, CBDM_Top[3]);
						CheckDMPlayer(playerid);
						return 1;
					}
					ShowDialog(playerid);
					SendClientMessage(playerid, RED,"You cannot join CBDM while in AntiSK protection! Try again later");
					return 1;
				}
				case 13:
				{

					if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant join now");
					if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
					if(AntiSK[playerid])
					{
						SendClientMessage(playerid, RED,"You cannot join MDM while in antiSK protection! try again later");
						ShowDialog(playerid);
						return 1;
					}
					if(PlayerInfo[playerid][OnDuty] == 1) cmd_adminduty(playerid);
					Iter_Add(ARENA[MDM], playerid);
					Iter_Remove(ARENA[NON], playerid);
                    new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
					SendClientMessageToAll(0xA448FFFF,"[DM ARENA] %s(%d) has joined minigun deathmatch stadium * total players: %d",nam,playerid,MDmCount());
					CheckDMPlayer(playerid);
					return 1;
				}
				case 14:
				{
					if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant join now");
					if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
					if(AntiSK[playerid])
					{
						SendClientMessage(playerid, RED,"You cannot join HSDM while in antiSK protection! try again later");
						ShowDialog(playerid);
						return 1;
					}
					if(PlayerInfo[playerid][OnDuty] == 1) cmd_adminduty(playerid);
					Iter_Add(ARENA[HSDM], playerid);
					Iter_Remove(ARENA[NON], playerid);
                    new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
					SendClientMessageToAll(0xA448FFFF,"[DM ARENA] %s(%d) has joined Headshot-Only deathmatch stadium * total players: %d",nam,playerid,HSDmCount());
					CheckDMPlayer(playerid);
					return 1;
				}
				case 15:
				{
					if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant join now");
					if((GetTickCount() - LastDamaged[playerid]) < 5000) return ERR(playerid,"You should not receive damage in the last 5 seconds to be able to join.");
					if(AntiSK[playerid])
					{
						SendClientMessage(playerid, RED,"You cannot join CHDM while in antiSK protection! try again later");
						ShowDialog(playerid);
						return 1;
					}
					if(PlayerInfo[playerid][OnDuty] == 1) cmd_adminduty(playerid);
					Iter_Add(ARENA[CHDM], playerid);
					Iter_Remove(ARENA[NON], playerid);
                    new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
					SendClientMessageToAll(0xA448FFFF,"[DM ARENA] %s(%d) has joined Chainsaw deathmatch stadium * total players: %d",nam,playerid,CHDmCount());
					CheckDMPlayer(playerid);
					return 1;
				}
			}
		}
		case 844: if(!response) return cmd_clanpoints(playerid);
		case 874:
		{

			if(!response) return 1;
			if(listitem == 0) // alternative
			{

				ShowPlayerDialog(playerid,875,DIALOG_STYLE_LIST,"Indie Rock/Heavy Rock/Metal\nCountry","idobi Anthm\n181.fm - Rock 181 (Active Rock)\nVW Classic Rock","Play","close");
			}
		}
		case 875:
		{

			if(!response) return 1;
			{

				switch(listitem)
				{

					case 0: PlayAudioStreamForPlayer(playerid,"http://yp.shoutcast.com/sbin/tunein-station.pls?id=44691");
					case 1: PlayAudioStreamForPlayer(playerid,"http://yp.shoutcast.com/sbin/tunein-station.pls?id=55402");
					case 2: PlayAudioStreamForPlayer(playerid,"http://yp.shoutcast.com/sbin/tunein-station.pls?id=100621");
				}
			}
			return 1;
		}
		case 30:
		{
			if(!response) return ShowDialog(playerid);
			if(inevent[playerid] > 0 || Iter_Contains(PUBGEvent, playerid)) return SendClientMessage(playerid,red,"* Cannot buy in events.");
			if(!InArena(playerid, NON) || HasJoined(playerid)) return SendClientMessage(playerid,red,"* Cannot buy in DMs.");
            if(PlayerInfo[playerid][InDuel]) return ERR(playerid, "You cannot buy weapons in duel.");
			switch(listitem)
			{

				case 0: // chainsaw
				{

					if(GetCash(playerid) < 15000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_CHAINSAW, 1);
					GiveCash(playerid,-5000);
					SendClientMessage(playerid,Lg,"* Bought Chainsaw For 15000$");
				}
				case 1: // tear gas
				{

					if(GetCash(playerid) < 6000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_TEARGAS, 5);
					GiveCash(playerid,-6000);
					if(gClass[playerid] == SCOUT)	SendClientMessage(playerid,Lg,"* Bought FlashBang For 6000$");
					else SendClientMessage(playerid,Lg,"* Bought Tear Gas For 6000$");
				}
				case 2: // deseret eagle
				{

					if(GetCash(playerid) < 10000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_DEAGLE, 250);
					GiveCash(playerid,-10000);
					SendClientMessage(playerid,Lg,"* Bought Desert Eagle For 10000$");
				}
				case 3: // shotgun
				{

					if(GetCash(playerid) < 9000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_SHOTGUN, 250);
					GiveCash(playerid,-9000);
					SendClientMessage(playerid,Lg,"* Bought Shotgun For 9000$");
				}
				case 4: // combat
				{

					if(GetCash(playerid) < 13000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 250);
					GiveCash(playerid,-13000);
					SendClientMessage(playerid,Lg,"* Bought Combat-Shotgun For 13000$");
				}
				case 5: // sawn
				{

					if(!ServerInfo[Sawn]) SendClientMessage(playerid,Dred,"* This weapon is currently out of stock.");
					else
					{

						if(GetCash(playerid) < 40000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
						GivePlayerWeapon(playerid, WEAPON_SAWEDOFF, 200);
						GiveCash(playerid,-40000);
						SendClientMessage(playerid,Lg,"* Bought Sawn-Off For 40000$");
					}
				}
				case 6: // uzi
				{

					if(GetCash(playerid) < 16000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_UZI, 250);
					GiveCash(playerid,-16000);
					SendClientMessage(playerid,Lg,"* Bought Uzi For 16000$");
				}
				case 7: // tec-9
				{

					if(GetCash(playerid) < 16000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_TEC9, 250);
					GiveCash(playerid,-16000);
					SendClientMessage(playerid,Lg,"* Bought Tec-9 For 16000$");
				}
				case 8: // MP5
				{

					if(GetCash(playerid) < 11000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_MP5, 250);
					GiveCash(playerid,-11000);
					SendClientMessage(playerid,Lg,"* Bought MP5 For 11000$");
				}
				case 9: // ak47
				{

					if(GetCash(playerid) < 12000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_AK47, 250);
					GiveCash(playerid,-12000);
					SendClientMessage(playerid,Lg,"* Bought AK-47 For 11000$");
				}
				case 10: // M4
				{

					if(GetCash(playerid) < 14000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_M4, 250);
					GiveCash(playerid,-14000);
					SendClientMessage(playerid,Lg,"* Bought M4 For 14000$");
				}
				case 11: //country rifle
				{

					if(GetCash(playerid) < 13000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_RIFLE, 250);
					GiveCash(playerid,-13000);
					SendClientMessage(playerid,Lg,"* Bought Country Rifle For 13000$");
				}
				case 12: // sniper rifle
				{
					if(GetCash(playerid) < 18000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_SNIPER, 250);
					GiveCash(playerid,-18000);
					SendClientMessage(playerid,Lg,"* Bought Sniper rifle For 18000$");
				}
				case 13: // rpg
				{
					if(GetCash(playerid) < 20000) { return SendClientMessage(playerid,Dred,"* You don't have enough cash") && WeaponShop(playerid); }
					new WEAPON:weaponid, ammo;
					GetPlayerWeaponData(playerid, WEAPON_SLOT_ARTILLERY, weaponid, ammo);
					if(weaponid == WEAPON_ROCKETLAUNCHER && ammo > 1) { return SendClientMessage(playerid,Dred,"* You already have 2 or more RPGs.") && WeaponShop(playerid); }
					GivePlayerWeapon(playerid, WEAPON_ROCKETLAUNCHER, 1);
					GiveCash(playerid,-20000);
					SendClientMessage(playerid,Lg,"* Bought Sniper rifle For 20000$");
				}
			}
			if(IsPlayerInAnyVehicle(playerid)) SetPlayerArmedWeapon(playerid, WEAPON_FIST);
			WeaponShop(playerid);
		}
		case DIALOGID3:
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0: ShowPlayerDialog(playerid, DIALOGID3+1, DIALOG_STYLE_LIST, "Select an Interior", "House 1\nHouse 2\nHouse 3\nHouse 4\nHouse 5\nHouse 6\nHouse 7\nHouse 8\nHouse 9\nHouse 10\nHouse 11\nHouse 12\nHouse 13\nHouse 14\nHouse 15\nHouse 16\nHouse 17\nHouse 18\nHouse 19\nHouse 20\nHouse 21\nHouse 22\nHouse 23\nHouse 24\nHouse 25\nHouse 26\nHouse 27\nHouse 28\nHouse 29\nHouse 30", "Select", "Cancel");
				case 1: ShowPlayerDialog(playerid, DIALOGID3+2, DIALOG_STYLE_LIST, "Select an Interior", "Budget Inn Motel room\nJefferson Motel\nOff Track Betting\nSex Shop\nSindacco Meat Factory/nZero's RC Shop/nGas Station(Dilimore)", "Select", "Cancel");
				case 2: ShowPlayerDialog(playerid, DIALOGID3+2, DIALOG_STYLE_LIST, "Select an Interior", "Alhambra\nPool Table Bar\nLil'Prob Inn", "Select", "Cancel");
				case 3: ShowPlayerDialog(playerid, DIALOGID3+4, DIALOG_STYLE_LIST, "Select an Interior", "Jay's Diner\nGant Bridge Res\nWorld of Coq\nWelcome Pump Dinner", "Select", "Cancel");
				case 4: ShowPlayerDialog(playerid, DIALOGID3+5, DIALOG_STYLE_LIST, "Select an Interior", "Denise Robinson\nKatie Zhan\nHelena Wankstein\nMichelle Cannes\nBarbara Schternvart\nMillie Perkins", "Select", "Cancel");
				case 5: ShowPlayerDialog(playerid, DIALOGID3+6, DIALOG_STYLE_LIST, "Select an Interior", "Ryder House\nSweet House\nBig Smoke CF\nBig Smoke CF2", "Select", "Cancel");
				case 6: ShowPlayerDialog(playerid, DIALOGID3+7, DIALOG_STYLE_LIST, "Select an Interior", "Stript Club\nWhore House\nTiger Skin Brothel\nJizzy Club", "Select", "Cancel");
				case 7: ShowPlayerDialog(playerid, DIALOGID3+8, DIALOG_STYLE_LIST, "Select an Interior", "Crack Lab\nColonel Furhberger\nDrug Den\nUnused Safe House\nRC Battlefield", "Select", "Cancel");
			}

		}
		case DIALOGID3+1: // Burglar Houses
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0:
				{

					SetPlayerPos(playerid,235.508994,1189.169897,1080.339966);
					SetPlayerInterior(playerid,3);
				}
				case 1:
				{

					SetPlayerPos(playerid,225.756989,1240.000000,1082.149902);
					SetPlayerInterior(playerid,2);
				}
				case 2:
				{

					SetPlayerPos(playerid,223.043991,1289.259888,1082.199951);
					SetPlayerInterior(playerid,1);
				}
				case 3:
				{

					SetPlayerPos(playerid,225.630997,1022.479980,1084.069946);
					SetPlayerInterior(playerid,7);
				}
				case 4:
				{

					SetPlayerPos(playerid,295.138977,1474.469971,1080.519897);
					SetPlayerInterior(playerid,15);
				}
				case 5:
				{

					SetPlayerPos(playerid,328.493988,1480.589966,1084.449951);
					SetPlayerInterior(playerid,15);
				}
				case 6:
				{

					SetPlayerPos(playerid,385.803986,1471.769897,1080.209961);
					SetPlayerInterior(playerid,15);
				}
				case 7:
				{

					SetPlayerPos(playerid,235.508994,1189.169897,1080.339966);
					SetPlayerInterior(playerid,3);
				}
				case 8:
				{

					SetPlayerPos(playerid,225.756989,1240.000000,1082.149902);
					SetPlayerInterior(playerid,2);
				}
				case 9:
				{

					SetPlayerPos(playerid,223.043991,1289.259888,1082.199951);
					SetPlayerInterior(playerid,1);
				}
				case 10:
				{

					SetPlayerPos(playerid,225.630997,1022.479980,1084.069946);
					SetPlayerInterior(playerid,7);
				}
				case 11:
				{

					SetPlayerPos(playerid,295.138977,1474.469971,1080.519897);
					SetPlayerInterior(playerid,15);
				}
				case 12:
				{

					SetPlayerPos(playerid,328.493988,1480.589966,1084.449951);
					SetPlayerInterior(playerid,15);
				}
				case 13:
				{

					SetPlayerPos(playerid,385.803986,1471.769897,1080.209961);
					SetPlayerInterior(playerid,15);
				}
				case 14:
				{

					SetPlayerPos(playerid,375.971985,1417.269897,1081.409912);
					SetPlayerInterior(playerid,15);
				}
				case 15:
				{

					SetPlayerPos(playerid,490.810974,1401.489990,1080.339966);
					SetPlayerInterior(playerid,2);
				}
				case 16:
				{

					SetPlayerPos(playerid,447.734985,1400.439941,1084.339966);
					SetPlayerInterior(playerid,2);
				}
				case 17:
				{

					SetPlayerPos(playerid,227.722992,1114.389893,1081.189941);
					SetPlayerInterior(playerid,2);
				}
				case 18:
				{

					SetPlayerPos(playerid,260.983978,1286.549927,1080.299927);
					SetPlayerInterior(playerid,4);
				}
				case 19:
				{

					SetPlayerPos(playerid,221.666992,1143.389893,1082.679932);
					SetPlayerInterior(playerid,4);
				}
				case 20:
				{

					SetPlayerPos(playerid,27.132700,1341.149902,1084.449951);
					SetPlayerInterior(playerid,10);
				}
				case 21:
				{

					SetPlayerPos(playerid,-262.601990,1456.619995,1084.449951);
					SetPlayerInterior(playerid,4);
				}
				case 22:
				{

					SetPlayerPos(playerid,22.778299,1404.959961,1084.449951);
					SetPlayerInterior(playerid,5);
				}
				case 23:
				{

					SetPlayerPos(playerid,140.278000,1368.979980,1083.969971);
					SetPlayerInterior(playerid,5);
				}
				case 24:
				{

					SetPlayerPos(playerid,234.045990,1064.879883,1084.309937);
					SetPlayerInterior(playerid,6);
				}
				case 25:
				{

					SetPlayerPos(playerid,-68.294098,1353.469971,1080.279907);
					SetPlayerInterior(playerid,6);
				}
				case 26:
				{

					SetPlayerPos(playerid,-285.548981,1470.979980,1084.449951);
					SetPlayerInterior(playerid,15);
				}
				case 27:
				{

					SetPlayerPos(playerid,-42.581997,1408.109985,1084.449951);
					SetPlayerInterior(playerid,8);
				}
				case 28:
				{

					SetPlayerPos(playerid,83.345093,1324.439941,1083.889893);
					SetPlayerInterior(playerid,9);
				}
				case 29:
				{

					SetPlayerPos(playerid,260.941986,1238.509888,1084.259888);
					SetPlayerInterior(playerid,9) 	;
				}
			}
			return 1;
		}
		case DIALOGID3+2: // Businesses
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0:
				{

					SetPlayerPos(playerid,446.622986,509.318970,1001.419983);
					SetPlayerInterior(playerid,12);
				}
				case 1:
				{

					SetPlayerPos(playerid,2216.339844,-1150.509888,1025.799927);
					SetPlayerInterior(playerid,15);
				}
				case 2:
				{

					SetPlayerPos(playerid,833.818970,7.418000,004.179993);
					SetPlayerInterior(playerid,3);
				}
				case 3:
				{

					SetPlayerPos(playerid,-100.325996,-22.816500,1000.741943);
					SetPlayerInterior(playerid,3);
				}
				case 4:
				{

					SetPlayerPos(playerid,964.376953,2157.329834,1011.019958);
					SetPlayerInterior(playerid,1);
				}
				case 5:
				{

					SetPlayerPos(playerid,-2239.569824,130.020996,1035.419922);
					SetPlayerInterior(playerid,6);
				}
				case 6:
				{

					SetPlayerPos(playerid,662.641601,-571.398803,16.343263);
					SetPlayerInterior(playerid,0);
				}
			}
			return 1;
		}
		case DIALOGID3+3: // Bars n' C;ubs
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0:
				{

					SetPlayerPos(playerid,493.390991,-22.722799,1000.686951);
					SetPlayerInterior(playerid,17);
				}
				case 1:
				{

					SetPlayerPos(playerid,501.980988,-69.150200,998.834961);
					SetPlayerInterior(playerid,11);
				}
				case 2:
				{

					SetPlayerPos(playerid,-227.028000,1401.229980,27.769798);
					SetPlayerInterior(playerid,18);
				}
			}
			return 1;
		}
		case DIALOGID3+4: // Restaurants
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0:
				{

					SetPlayerPos(playerid,460.099976,-88.428497,999.621948);
					SetPlayerInterior(playerid,4);
				}
				case 1:
				{

					SetPlayerPos(playerid,454.973950,-110.104996,999.717957);
					SetPlayerInterior(playerid,5);
				}
				case 2:
				{

					SetPlayerPos(playerid,452.489990,-18.179699,1001.179993);
					SetPlayerInterior(playerid,1);
				}
				case 3:
				{

					SetPlayerPos(playerid,681.474976,-451.150970,-25.616798);
					SetPlayerInterior(playerid,1);
				}
			}
			return 1;
		}
		case DIALOGID3+5: // Girlfriends Houses
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0:
				{

					SetPlayerPos(playerid,244.411987,305.032990,999.231995);
					SetPlayerInterior(playerid,1);
				}
				case 1:
				{

					SetPlayerPos(playerid,271.884979,306.631989,999.325989);
					SetPlayerInterior(playerid,2);
				}
				case 2:
				{

					SetPlayerPos(playerid,291.282990,310.031982,999.154968);
					SetPlayerInterior(playerid,3);
				}
				case 3:
				{

					SetPlayerPos(playerid,302.181000,300.722992,999.231995);
					SetPlayerInterior(playerid,4);
				}
				case 4:
				{

					SetPlayerPos(playerid,322.197998,302.497986,999.231995);
					SetPlayerInterior(playerid,5);
				}
				case 5:
				{

					SetPlayerPos(playerid,346.870025,309.259033,999.155700);
					SetPlayerInterior(playerid,6);
				}
			}
			return 1;
		}
		case DIALOGID3+6: // Hommies Houses
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0:
				{

					SetPlayerPos(playerid,2464.109863,-1698.659912,1013.509949);
					SetPlayerInterior(playerid,2);
				}
				case 1:
				{

					SetPlayerPos(playerid,2526.459961,-1679.089966,1015.500000);
					SetPlayerInterior(playerid,1);
				}
				case 2:
				{

					SetPlayerPos(playerid,2549.0225,-1294.5924,1060.9844);
					SetPlayerInterior(playerid,2);
				}
				case 3:
				{

					SetPlayerPos(playerid,2547.268310,-1295.931762,1054.640625);
					SetPlayerInterior(playerid,2);
				}
			}
			return 1;
		}
		case DIALOGID3+7: // P.I.M.P Clubs
		{

			if(!response) return 1;
			switch(listitem)
			{

				case 0:
				{

					SetPlayerPos(playerid,1212.019897,-28.663099,1001.089966);
					SetPlayerInterior(playerid,3);
				}
				case 1:
				{

					SetPlayerPos(playerid,744.542969,1437.669922,1102.739990);
					SetPlayerInterior(playerid,6);
				}
				case 2:
				{

					SetPlayerPos(playerid,964.106995,-53.205498,1001.179993);
					SetPlayerInterior(playerid,3);
				}
				case 3:
				{

					SetPlayerPos(playerid,-2661.009766,1415.739990,923.305969);
					SetPlayerInterior(playerid,3);
				}
			}
			return 1;
		}
		case DIALOGID3+8: // Misc
		{
			if(!response) return 1;
			switch(listitem)
			{

				case 0:
				{
					SetPlayerPos(playerid,2350.339844,-1181.649902,1028.000000);
					SetPlayerInterior(playerid,5);
				}
				case 1:
				{
					SetPlayerPos(playerid,2807.619873,-1171.899902,1025.579956);
					SetPlayerInterior(playerid,8);
				}
				case 2:
				{
					SetPlayerPos(playerid,318.564972,1118.209961,1083.979980);
					SetPlayerInterior(playerid,5);
				}
				case 3:
				{
					SetPlayerPos(playerid,2324.419922,-1147.539917,1050.719971);
					SetPlayerInterior(playerid,12);
				}
				case 4:
				{
					SetPlayerPos(playerid,-972.4957,1060.983,1345.669);
					SetPlayerInterior(playerid,10);
				}
			}
			return 1;
		}
	}
	return 1;
}

GetTeamName(playerid)
{
	new str[13];
	switch(gTeam[playerid])
	{
		case TEAM_EURASIA: str =  ("Eurasia");
		case TEAM_ARAB: str =  ("Arabia");
		case TEAM_SOVIET: str =  ("Soviet");
		case TEAM_USA: str =  ("USA");
		case TEAM_AUS: str =  ("Australia");
		case TEAM_CH: str =  ("Brazil");
		case TEAM_ID: str =  ("Taliban");
		case TEAM_FRANCE: str = ("France");
		case TEAM_MERC: str = ("Mercenaries");
	}
	return str;
}
GetTeamName2(id)
{
	new str[13];
	switch(id)
	{
		case TEAM_EURASIA: str =  ("Eurasia");
		case TEAM_ARAB: str =  ("Arabia");
		case TEAM_SOVIET: str =  ("Soviet");
		case TEAM_USA: str =  ("USA");
		case TEAM_AUS: str =  ("Australia");
		case TEAM_CH: str =  ("Brazil");
		case TEAM_ID: str =  ("Taliban");
		case TEAM_FRANCE: str = ("France");
		case TEAM_MERC: str = ("Mercenaries");
	}
	return str;
}

NukeKill(playerid,id)
{
	SetPlayerHealth(id,0);
	GameTextForPlayer(id,"~r~Nuked",3000,3);
	GiveCash(playerid,1500);
	SetPlayerScore(playerid,GetPlayerScore(playerid)+1);
	if(cPerk[id][P_DEATH] == 0)
	{
        new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
		SendClientMessage(id, -1, "{FF8000}[DEATH] {FFFFFF}You got killed by {FF8000}%s(%d)' Nuclear bomb{FFFFFF} You lost -2500$", nam, playerid);
		GiveCash(id,-2500);
	}else SendClientMessage(id, COLOR_YELLOW,"[Clan Perk] You did not lose cash after your death.");
	
	SendDeathMessage(playerid,id,53);
	new Float:x,Float:y,Float:z;
	GetPlayerPos(id,x,y,z);
	PlayerPlaySound(id,1159,x,y,z);
	CreateExplosion(x,y,z,0,1);
	PlayerInfo[playerid][Kills] ++;
	Streak[playerid] ++;
}
forward NukeWeather();
public NukeWeather() return SetWeather(14);


Nuke2Kill(playerid,id)
{
	SetPlayerHealth(id,0);
	GameTextForPlayer(id,"~r~Nuked",3000,3);
	GiveCash(playerid,1500);
	SetPlayerScore(playerid,GetPlayerScore(playerid)+1);
	if(cPerk[id][P_DEATH] == 0)
	{
        new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
		SendClientMessage(id, -1, "{FF8000}[DEATH] {FFFFFF}You got killed by {FF8000}%s(%d)' Space Nuclear bomb{FFFFFF} You lost -2500$", nam, playerid);
		GiveCash(id,-2500);
	}else SendClientMessage(id, COLOR_YELLOW,"[Clan Perk] You did not lose cash after your death.");
	SendDeathMessage(playerid,id,53);
	new Float:x,Float:y,Float:z;
	GetPlayerPos(id,x,y,z);
	PlayerPlaySound(id,1159,x,y,z);
	CreateExplosion(x,y,z,0,1);
	PlayerInfo[playerid][Kills] ++;
	Streak[playerid] ++;
}

GetTeamCount(teamid)
{
	new playercount = 0;//Set our count to 0 as we have not counted any players yet..
	foreach(new i : Player)//Loop through MAX_PLAYERS(I suggest you redefine MAX_PLAYERS to ensure max efficency)..
	{

		if(GetPlayerState(i) == PLAYER_STATE_NONE) continue;//If a player is in class selection continue..
		if(gTeam[i] != teamid) continue;//If a player is NOT in the specified teamid continue..
		playercount++;//else (there in the teamid) so count the player in the team..
	}
	return playercount;//Return the total players counted in the specified team..
}
////////////////////////////////////////////////////////////////////////

forward UnfreezeMe2(playerid);
public UnfreezeMe2(playerid)
{
	TogglePlayerControllable(playerid, true);
	ApplyActorAnimation(actor,"PED","SEAT_idle", 4.0, true, false, false, false, 0); ApplyActorAnimation(actor,"PED","SEAT_idle", 4.0, true, false, false, false, 0);
	return 1;
}

CMD:teams(playerid, params[])
{
	new team1count = GetTeamCount(TEAM_EURASIA);
	new team2count = GetTeamCount(TEAM_USA);
	new team3count = GetTeamCount(TEAM_ARAB);
	new team4count = GetTeamCount(TEAM_SOVIET);
	new team5count = GetTeamCount(TEAM_AUS);
	SendClientMessage(playerid, orange,"|_____| Teams |_____| ");
	SendClientMessage(playerid, lightblue, "Eurasia: %d Players", team1count);
	SendClientMessage(playerid, lightblue, "Arabia: %d Players", team3count);
	SendClientMessage(playerid, lightblue, "USA: %d Players", team2count);
	SendClientMessage(playerid, lightblue, "Russia: %d Players", team4count);
	SendClientMessage(playerid, lightblue, "Australia: %d Players", team5count);
	SendClientMessage(playerid, lightblue, "Brazil: %d Players", GetTeamCount(TEAM_CH));
	SendClientMessage(playerid, lightblue, "Taliban: %d Players", GetTeamCount(TEAM_ID));
	SendClientMessage(playerid, lightblue, "France: %d Players", GetTeamCount(TEAM_FRANCE));
	SendClientMessage(playerid, lightblue, "Mercenary: %d Players", GetTeamCount(TEAM_MERC));
	return 1;
}
CMD:vip(playerid)
{
	SendClientMessage(playerid,yellow,"* How To Donate ??");
	SendClientMessage(playerid,green,"* to donate visit our forum at  www.mw3-samp.org and check the Vip package");
	ShowPlayerDialog(playerid, VIP_DIALOG, DIALOG_STYLE_LIST, "{FF00FF}VIP {FFFFFF}Features", "{FFFFFF}Donor {F3FF02}¦ Rank 1 ¦\n{FFFFFF}Donor {F3FF02}¦ Rank 2 ¦\n{FFFFFF}Donor {F3FF02}¦ Rank 3 ¦\n{FFFFFF}Donor {F3FF02}¦ Rank 4 ¦\n{FFFFFF}Donor {F3FF02}¦ Rank 5 ¦\n{FFFFFF}Exclusive {F3FF02}¦ Sponsor Rank ¦", "Check", "Leave");
	return 1;
}
CMD:interiors(playerid)
{
	if(PlayerInfo[playerid][Level] > 3) return ShowPlayerDialog(playerid, DIALOGID3, DIALOG_STYLE_LIST, "Interior List", "Burglar Houses\nBusinesses\nBars n Clubs\nRestaurants\nGirlfriends Houses\nHomies Houses\nP.I.M.P Clubs\nMiscellaneous", "Select", "Cancel");
	else SendClientMessage(playerid, RED,"[ERROR]: You are not high enough level to use this command!");
	return 1;
}
CMD:interiors2(playerid)
{
	if(PlayerInfo[playerid][Level] < 3) return SendClientMessage(playerid, RED,"[ERROR]: You are not high enough level to use this command!");
	new cat[3000];
	for(new i = 0; i < sizeof INTERIOR; i++)
	{
	    strcat(cat, INTERIOR[i][nname]);
	    strcat(cat, "\n");
	}
	ShowPlayerDialog(playerid, INTERIORS_DIALOG, DIALOG_STYLE_LIST, "Interiors Bigger List", cat, "Select", "Cancel");
	return 1;
}

CMD:eventmenu(playerid)
{
	if(PlayerInfo[playerid][Level] < 4 && PlayerInfo[playerid][dRank] != 6) return ERR(playerid,"You must be a level 4 a sponsor to use this command!");
	if(event > 0) return SendClientMessage(playerid,-1,"Error: event already in creation or being run");
	SelectTextDraw(playerid, 0xA3B4C5FF);
	for (new i = 0; i < sizeof(Event_Menu); i++)
	{

		TextDrawShowForPlayer(playerid,Event_Menu[i]);
	}
	return 1;
}
CMD:done(playerid)
{
	if(PlayerInfo[playerid][Level] < 4) return ERR(playerid,"You must be a level 4 to use this command!");
	CancelSelectTextDraw(playerid);
	for (new i = 0; i < sizeof(TDM_Menu); i++) TextDrawHideForPlayer(playerid,TDM_Menu[i]);
	for (new i = 0; i < sizeof(RC_Menu); i++) TextDrawHideForPlayer(playerid,RC_Menu[i]);
	for (new i = 0; i < sizeof(DM_Menu); i++) TextDrawHideForPlayer(playerid,DM_Menu[i]);
	SendClientMessage(playerid,-1,"Settings saved!");
	return 1;
}
CMD:dmspawn(playerid)
{
	if(PlayerInfo[playerid][Level] < 4 && PlayerInfo[playerid][dRank] != 6) return ERR(playerid,"You must be a level 4 to use this command!");
	GetPlayerPos(playerid,dmx,dmy,dmz);
	dmint = GetPlayerInterior(playerid);
	dmworld = GetPlayerVirtualWorld(playerid);
	SendClientMessage(playerid,-1,"Spawn position for dm set!");
	return 1;
}
CMD:team1spawn(playerid)
{
	if(PlayerInfo[playerid][Level] < 4 && PlayerInfo[playerid][dRank] != 6) return ERR(playerid,"You must be a level 4 to use this command!");
	GetPlayerPos(playerid,teamx[0],teamy[0],teamz[0]);
	SendClientMessage(playerid,-1,"Spawn position for team 1 set!");
	return 1;
}
CMD:team2spawn(playerid)
{
	if(PlayerInfo[playerid][Level] < 4 && PlayerInfo[playerid][dRank] != 6) return ERR(playerid,"You must be a level 4 to use this command!");
	GetPlayerPos(playerid,teamx[1],teamy[1],teamz[1]);
	SendClientMessage(playerid,-1,"Spawn position for team 2 set!");
	return 1;
}

new evenint;
new evenworld;

CMD:join(playerid)
{
	if(PlayerInfo[playerid][JailTime] > 0) return ERR(playerid, "Cannot use this cmd while in jail.");
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(eventlock) return SendClientMessage(playerid,-1,"Error: event locked!");
	if(!event) return SendClientMessage(playerid,-1,"Error: no event being run at the moment.");
	ResetPlayerWeapons(playerid);
	switch(event)
	{

		case 1:
		{

			inevent[playerid] = 1;
			SetPlayerVirtualWorld(playerid,evenworld);
			SetPlayerInterior(playerid,evenint);
			TogglePlayerControllable(playerid, false);
			PlayerInfo[playerid][Frozen] = 1;
			new law[128];
			switch(random(2))
			{

				case 0:
				{

					SetPlayerTeam(playerid,TEAM_A);
					format(law, _, "You have been randomly assigned to '%s' team", TeamName[0]);
					SetPlayerSkin(playerid,teamskin[0]);
					SetPlayerColor(playerid,teamcolor[0]);
					SetPlayerPos(playerid,teamx[0],teamy[0],teamz[0]);
				}
				case 1:
				{

					SetPlayerTeam(playerid,TEAM_B);
					format(law, _, "You have been randomly assigned to '%s' team", TeamName[1]);
					SetPlayerSkin(playerid,teamskin[1]);
					SetPlayerColor(playerid,teamcolor[1]);
					SetPlayerPos(playerid,teamx[1],teamy[1],teamz[1]);
				}
			}
			SendClientMessage(playerid, -1, law);
			for (new i; i < sizeof(teamweap[]); i ++)
			{
				GivePlayerWeapon(playerid, teamweap[1][i], 500);
			}
		}
		case 2:
		{

			inevent[playerid] = 2;
			TogglePlayerControllable(playerid, false);
			SetPlayerPos(playerid,dmx,dmy,dmz);
			SetPlayerVirtualWorld(playerid, dmworld);
			SetPlayerInterior(playerid, dmint);
			SetPlayerTeam(playerid,NO_TEAM);
			SetPlayerColor(playerid,dmcolor);
			for (new i; i < sizeof(dmweap); i ++)
			{
				GivePlayerWeapon(playerid, dmweap[i], 500);
			}
			SetPlayerSkin(playerid, dmskin[random(3)]);
		}
		case 4:
		{

			racer[playerid] = 0;
			inevent[playerid] = 4;
			TogglePlayerControllable(playerid, false);
			SetPlayerTeam(playerid,NO_TEAM);
			SetPlayerColor(playerid,rccolor[0]);
			SetPlayerSkin(playerid,rcskin);
			SetPlayerCheckpoint(playerid, 2374.1999511719, -4053.3999023438, 1.2999999523163, 9.0);
			switch(random(9))
			{

				case 0: {SetPlayerPos(playerid,2360.4560546875,-4198.7563476563,3.3482663631439);}
				case 1: {SetPlayerPos(playerid,2371.1027832031,-4198.9946289063,3.3482663631439);}
				case 2: {SetPlayerPos(playerid,2381.6000976563,-4199.2294921875,3.3482663631439);}
				case 3: {SetPlayerPos(playerid,2361.0541992188,-4223.8608398438,2.4019873142242);}
				case 4: {SetPlayerPos(playerid,2373.5041503906,-4223.8203125,2.4019873142242);}
				case 5: {SetPlayerPos(playerid,2382.9541015625,-4223.7895507813,2.4019873142242);}
				case 6: {SetPlayerPos(playerid,2383.33203125,-4242.0859375,2.4019873142242);}
				case 7: {SetPlayerPos(playerid,2371.9460449219,-4241.5063476563,2.4019873142242);}
				case 8: {SetPlayerPos(playerid,2360.5471191406,2360.5471191406,2.4019873142242);}
			}
			SetTimerEx("Loltimer", 3000, false, "i", playerid);
		}
	}
	return 1;
}
forward Loltimer(playerid);
public Loltimer(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, Float:X, Float:Y, Float:Z);
	new lolman;
	lolman = CreateVehicle(rcmodel, X, Y, Z + 2.0, 0, -1, -1, 1);
	PutPlayerInVehicle(playerid, lolman, 0);
	SetVehicleNumberPlate(GetPlayerVehicleID(playerid),rcplates);
	ChangeVehicleColours(GetPlayerVehicleID(playerid), rccolor[1], rccolor[1]);
	if(!rcinvul) SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
	else SetVehicleHealth(GetPlayerVehicleID(playerid), 100000);
	return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
	if(inevent[playerid] > 0)
	{

		if(racer[playerid] == 0)
		{

			racer[playerid] = 1;
			SetPlayerCheckpoint(playerid, 2362.8000488281, -3908.5, 1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 1)
		{

			racer[playerid] = 2;
			SetPlayerCheckpoint(playerid,2372.5, -3800.6999511719, 1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 2)
		{

			racer[playerid] = 3;
			SetPlayerCheckpoint(playerid,2449.5,-3738,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 3)
		{

			racer[playerid] = 4;
			SetPlayerCheckpoint(playerid,2600.5,-3738,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 4)
		{

			racer[playerid] = 5;
			SetPlayerCheckpoint(playerid,2598,-4134.6000976563,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 5)
		{

			racer[playerid] = 6;
			SetPlayerCheckpoint(playerid,2593.3999023438,-4266,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 6)
		{

			racer[playerid] = 7;
			SetPlayerCheckpoint(playerid,2371.1999511719,-4268.1000976563,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 7)
		{

			racer[playerid] = 8;
			SetPlayerCheckpoint(playerid,2374,-4050.1999511719,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 8)
		{

			racer[playerid] = 9;
			SetPlayerCheckpoint(playerid,2381.3999023438,-3738.8000488281,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 9)
		{

			racer[playerid] = 10;
			SetPlayerCheckpoint(playerid,2593.1000976563,-3739.3000488281,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 10)
		{

			racer[playerid] = 11;
			SetPlayerCheckpoint(playerid,2598.6000976563,-4262.2998046875,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 11)
		{

			racer[playerid] = 12;
			SetPlayerCheckpoint(playerid,2371.3999023438,-4261.3999023438,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 12)
		{

			racer[playerid] = 13;
			SetPlayerCheckpoint(playerid,2373.900390625,-4084,1.2999999523163, 9.0);
		}
		else if(racer[playerid] == 13)
		{

			SetPlayerCheckpoint(playerid,2371.8999023438,-3680,1.2999999523163, 9.0);
			event  = 0;
			SendClientMessageToAll(-1,"{FF0000}[EVENT]{00FF00} %s has won the racing event! | Reward: $%d and %d score.", PlayerInfo[playerid][Nick],reward[0], reward[1]);
			DisablePlayerCheckpoint(playerid);
			GiveCash(playerid,reward[0]);
			foreach(new i : Player)
			{

				if(inevent[i] >= 1)
				{

					DestroyVehicle(GetPlayerVehicleID(i));
					inevent[i] = 0;
					racer[i] = 0;
					SetPlayerScore(i, GetPlayerScore(i)+reward[1]);
					SpawnPlayer(i);
				}
			}
		}
	}
	return 1;
}
CMD:lockevent(playerid)
{
	if(PlayerInfo[playerid][Level]< 3 && PlayerInfo[playerid][dRank] != 6) return 1;
	if(event == 0) return ERR(playerid, "No running events detected.");
	new ll = eventlock;
	if(ll == 0) SendClientMessageToAll(-1,"{FF0000}[EVENT] {00FF00}The event has been locked by an admin!");
	else SendClientMessageToAll(-1,"{FF0000}[EVENT] {00FF00}The event has been un-locked by an admin!");
	eventlock = !ll;
	return 1;
}

CMD:eventfrezeall(playerid)
{
	if(PlayerInfo[playerid][Level]< 4 && PlayerInfo[playerid][dRank] != 6) return 1;
	if(event == 0) return SendClientMessage(playerid, red, "No event is running");
	foreach(new i : Player) if(inevent[i]>0) TogglePlayerControllable(i, false);
	SendClientMessageToAll(-1,"{FF0000}[EVENT] {00FF00}Event players are now frozen by admins.");
	return 1;
}

CMD:eventheallall(playerid)
{
	if(PlayerInfo[playerid][Level]< 4 && PlayerInfo[playerid][dRank] != 6) return 1;
	if(event == 0) return SendClientMessage(playerid, red, "No event is running");
	foreach(new i : Player) if(inevent[i]>0) SetPlayerHealth(i,100);
	SendClientMessageToAll(-1,"{FF0000}[EVENT] {00FF00}Event players are now healed by admins.");
	return 1;
}

CMD:eventarmourall(playerid)
{
	if(PlayerInfo[playerid][Level]< 4 && PlayerInfo[playerid][dRank] != 6) return 1;
	if(event == 0) return SendClientMessage(playerid, red, "No event is running");
	foreach(new i : Player) if(inevent[i]>0) SetPlayerArmour(i, 100.0);
	SendClientMessageToAll(-1,"{FF0000}[EVENT] {00FF00}Event players are now armoured by admins.");
	return 1;
}

CMD:eventinvisinbleall(playerid)
{
	if(PlayerInfo[playerid][Level]< 4 && PlayerInfo[playerid][dRank] != 6) return 1;
	if(event == 0) return SendClientMessage(playerid, red, "No event is running");
	foreach(new i : Player) if(inevent[i]>0)
	{

		SetPlayerColor(i, GetPlayerColor(i) & 0xFFFFFF00);
		SetPlayerColor(i, GetPlayerColor(i) & ~0xFF);
	}
	SendClientMessageToAll(-1,"{FF0000}[EVENT] {00FF00}Event players are now made invisible on the map by admins.");
	return 1;
}

CMD:startevent(playerid)
{
	if(PlayerInfo[playerid][Level] < 3) return 0;
	evenint = GetPlayerInterior(playerid);
	evenworld = GetPlayerVirtualWorld(playerid);
	if(event == 1)
	{
		SendClientMessageToAll(-1, "{FFFF00}[EVENT] {00FF00}TDM Event started by an admin, use /join to join it!");
	}
	if(event == 2)
	{
		SendClientMessageToAll(-1, "{FFFF00}[EVENT] {00FF00}DM Event started by an admin, use /join to join it!");
	}
	if(event == 3)
	{
		SendClientMessageToAll(-1, "{FFFF00}[EVENT] {00FF00}Zombie Event started by an admin, use /join to join it!");
	}
	if(event == 4)
	{
		SendClientMessageToAll(-1, "{FFFF00}[EVENT] {00FF00}Racing Event started by an admin, use /join to join it!");
	}
	return 1;
}
CMD:endevent(playerid)
{
	if(PlayerInfo[playerid][Level] < 3 && PlayerInfo[playerid][dRank] != 6) return 0;
	if(event == 0) return ERR(playerid, "No running events detected.");
	event = 0;
	eventlock = 0;
	foreach(new i : Player)
	{

		SendClientMessage(i,-1,"{FFFF00} Event is over!");
		if(inevent[i] >= 1)
		{

			inevent[i] = 0;
			SpawnPlayer(i);
		}
	}
	return 1;
}

HideStats(playerid)
{
	PlayerTextDrawHide(playerid, StatsPart1[playerid]);
	PlayerTextDrawHide(playerid, StatsPart2[playerid]);
	PlayerTextDrawHide(playerid, StatsPart1Titles[playerid]);
	PlayerTextDrawHide(playerid, StatsPart2Titles[playerid]);
	PlayerTextDrawHide(playerid, StatsName[playerid]);
	TextDrawHideForPlayer(playerid, StatsBox);
	TextDrawHideForPlayer(playerid, StatsBoxLine);
	TextDrawHideForPlayer(playerid, StatsBoxL2);
	TextDrawHideForPlayer(playerid, StatsArrowLeft);
	TextDrawHideForPlayer(playerid, StatsExitButton);
	TextDrawHideForPlayer(playerid, StatsArrowRight);
	PlayerTextDrawHide(playerid, StatsWarning[playerid]);
    CancelSelectTextDraw(playerid);
	return 1;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{

	if(clickedid != INVALID_TEXT_DRAW)
	{
	    if(clickedid == StatsExitButton)
	    {
	        AtStats[playerid] = 0;
	    	PlayerTextDrawHide(playerid, StatsPart1[playerid]);
			PlayerTextDrawHide(playerid, StatsPart2[playerid]);
			PlayerTextDrawHide(playerid, StatsPart1Titles[playerid]);
			PlayerTextDrawHide(playerid, StatsPart2Titles[playerid]);
			PlayerTextDrawHide(playerid, StatsName[playerid]);
			TextDrawHideForPlayer(playerid, StatsBox);
			TextDrawHideForPlayer(playerid, StatsBoxLine);
			TextDrawHideForPlayer(playerid, StatsBoxL2);
			TextDrawHideForPlayer(playerid, StatsArrowLeft);
			TextDrawHideForPlayer(playerid, StatsExitButton);
			TextDrawHideForPlayer(playerid, StatsArrowRight);
			PlayerTextDrawHide(playerid, StatsWarning[playerid]);
            CancelSelectTextDraw(playerid);
		}
		if(clickedid == StatsArrowRight)
		{
		    AtStats[playerid] = 1;
		    TextDrawShowForPlayer(playerid, StatsArrowLeft);
			if(StatsPage[playerid] < 2) StatsPage[playerid] ++;
			new id = StatsTarget[playerid];
			if(!IsPlayerConnected(id)) return ERR(playerid, "Target player has disconnected.");
			if(StatsPage[playerid] == 1)
			{
			 	PlayerTextDrawSetString(playerid, StatsPart1[playerid], "%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~", PlayerInfo[id][MDSpree], PlayerInfo[id][ddm], PlayerInfo[id][dcbdm], PlayerInfo[id][dsdm], PlayerKills[id][fist], PlayerKills[id][m9], PlayerKills[id][sm9], PlayerKills[id][ak47], PlayerKills[id][m4]);
				PlayerTextDrawSetString(playerid, StatsPart1Titles[playerid], "Max Death Spree~n~DM Kills~n~CBDM Kills~n~SDM Kills~n~Fist~n~Pistol~n~Silenced~n~AK 47~n~M4~n~");
			 	PlayerTextDrawSetString(playerid, StatsPart2[playerid], "%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~", PlayerKills[id][rpg], PlayerKills[id][satchel], PlayerKills[id][grenade], PlayerKills[id][knife], PlayerKills[id][chainsaw], PlayerKills[id][molotov], PlayerKills[id][deagle], PlayerKills[id][shotgun], PlayerKills[id][sawnoff]);
				PlayerTextDrawSetString(playerid, StatsPart2Titles[playerid], "RPG~n~Satchel~n~Grenade~n~Knife~n~Chainsaw~n~Molotov~n~Deagle~n~Shotgun~n~Sawn-Off~n~");
			}
			else
			{
			    new tmp[46];
       			if(PlayerInfo[id][InClan] != -1) { format(tmp, sizeof(tmp), "%s~n~%s", cName[id], cTag[id]); }
				else tmp = "No Clan~n~No Clan";
			 	PlayerTextDrawSetString(playerid, StatsPart1[playerid], "%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%s~n~", PlayerKills[id][combat], PlayerKills[id][smg], PlayerKills[id][tec9], PlayerKills[id][mp5], PlayerKills[id][rifle], PlayerKills[id][sniper], PlayerInfo[id][XP], tmp);
				PlayerTextDrawSetString(playerid, StatsPart1Titles[playerid], "Combat~n~SMG~n~TEC9~n~MP5~n~Rifle~n~Sniper~n~XP~n~Clan~n~Clan Tag~n~");
				PlayerTextDrawSetString(playerid, StatsPart2[playerid], "");
				PlayerTextDrawSetString(playerid, StatsPart2Titles[playerid], "");
			    TextDrawHideForPlayer(playerid, StatsArrowRight);
			}
			PlayerTextDrawShow(playerid, StatsPart1[playerid]);
			PlayerTextDrawShow(playerid, StatsPart2[playerid]);
			PlayerTextDrawShow(playerid, StatsPart1Titles[playerid]);
			PlayerTextDrawShow(playerid, StatsPart2Titles[playerid]);
		}
	    if(!playercheckin[playerid])
	    {
			if(clickedid == VipShop[VS_EXIT])
			{
			    for(new i=0;i <8;i++) { PlayerTextDrawHide(playerid, PVipShop[playerid][i]); TextDrawHideForPlayer(playerid, VipShop[i]); CancelSelectTextDraw(playerid);}
				TextDrawHideForPlayer(playerid, VipShop[8]);
			}
			if(clickedid == VipShop[VS_ADDFUNDS])
			{
			    playercheckin[playerid] = 1;
			    new cat[600];
			    strcat(cat,"\nEnglish: In order to add funds to your VIP Balance, you have to:\n\n1-Go to mw3-samp.org/forum\n2- Register a new account\n3-Go to -Donator Information- board & find the Paypal donation link\n4-After donating, contact an administrator to add your donated");
			    strcat(cat," amount to your VIP Balance.\n\n\nEspañol: para agregar fondos a su Saldo VIP, tiene que:\n\n1-Ir a mw3-samp.org/forum\n2-Registrar una nueva cuenta \n3- Ir a -Donator Information- board para encontrar el enlace de donación de Paypal \n4-Después de donar, comuníquese con un administrador para agregar su monto donado a su saldo VIP.\n");
				ShowPlayerDialog(playerid, VIPSHOP_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00E7}MW3 VIP SHOP: {009F00}Add Funds", cat, "ok", "");
			}
		}
		if(clickedid == StatsArrowLeft)
		{
		    AtStats[playerid] = 1;
		    TextDrawShowForPlayer(playerid, StatsArrowRight);
			if(StatsPage[playerid] > 0) StatsPage[playerid] --;
			new id = StatsTarget[playerid];
			if(!IsPlayerConnected(id)) return ERR(playerid, "Target player has disconnected.");
			if(StatsPage[playerid] == 1)
			{
			 	PlayerTextDrawSetString(playerid, StatsPart1[playerid], "%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~", PlayerInfo[id][MDSpree], PlayerInfo[id][ddm], PlayerInfo[id][dcbdm], PlayerInfo[id][dsdm], PlayerKills[id][fist], PlayerKills[id][m9], PlayerKills[id][sm9], PlayerKills[id][ak47], PlayerKills[id][m4]);
				PlayerTextDrawSetString(playerid, StatsPart1Titles[playerid], "Max Death Spree~n~DM Kills~n~CBDM Kills~n~SDM Kills~n~Fist~n~Pistol~n~Silenced~n~AK 47~n~M4~n~");
			 	PlayerTextDrawSetString(playerid, StatsPart2[playerid], "%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~", PlayerKills[id][rpg], PlayerKills[id][satchel], PlayerKills[id][grenade], PlayerKills[id][knife], PlayerKills[id][chainsaw], PlayerKills[id][molotov], PlayerKills[id][deagle], PlayerKills[id][shotgun], PlayerKills[id][sawnoff]);
				PlayerTextDrawSetString(playerid, StatsPart2Titles[playerid], "RPG~n~Satchel~n~Grenade~n~Knife~n~Chainsaw~n~Molotov~n~Deagle~n~Shotgun~n~Sawn-Off~n~");
			}
			else
			{
			    new h,m,s,pDeaths;
				if(PlayerInfo[id][Deaths] == 0) pDeaths = 1; else pDeaths = PlayerInfo[id][Deaths];
				TotalGameTime(id, h, m, s);
			 	PlayerTextDrawSetString(playerid, StatsPart1[playerid], "%s~n~%s~n~%s~n~%d~n~%d~n~%d~n~%d~n~%d~n~%0.2f~n~", GetRankName(id), GetClass(id), GetTeamName(id), GetPlayerScore(id), PlayerInfo[id][Headshots], GetPlayerMoney(id), PlayerInfo[id][Kills], PlayerInfo[id][Deaths], Float:PlayerInfo[id][Kills]/Float:pDeaths);
				PlayerTextDrawSetString(playerid, StatsPart1Titles[playerid], "Rank~n~Class~n~Team~n~Score~n~Headshots~n~Money~n~Kills~n~Deaths~n~K/D Ratio~n~");
			 	PlayerTextDrawSetString(playerid, StatsPart2[playerid], "%d:%d:%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~", h,m,s, PlayerInfo[id][MedKit], PlayerInfo[id][dRank], PlayerInfo[id][ArmourP], PlayerInfo[id][Rank], PlayerInfo[id][ZCaptures], PlayerInfo[id][ZHelps], PlayerInfo[id][License], PlayerInfo[id][MKSpree]);
				PlayerTextDrawSetString(playerid, StatsPart2Titles[playerid], "Time Played~n~MedKits~n~Donor Rank~n~Armour Packs~n~Rank~n~Zones Captured~n~Zones Assists~n~Pilot License~n~Max Kill Spree~n~");
			    TextDrawHideForPlayer(playerid, StatsArrowLeft);
			}
			PlayerTextDrawShow(playerid, StatsPart1[playerid]);
			PlayerTextDrawShow(playerid, StatsPart2[playerid]);
			PlayerTextDrawShow(playerid, StatsPart1Titles[playerid]);
			PlayerTextDrawShow(playerid, StatsPart2Titles[playerid]);
		}
		if(clickedid == Event_Menu[7])  //TDM
		{

			for (new i = 0; i < sizeof(Event_Menu); i++)
			{

				TextDrawHideForPlayer(playerid,Event_Menu[i]);
			}
			event = 1;
			for (new i = 0; i < sizeof(TDM_Menu); i++)
			{

				TextDrawShowForPlayer(playerid,TDM_Menu[i]);
			}
			SendClientMessage(playerid,-1,"You can use /done to close and save these settings");
			SendClientMessage(playerid,-1,"You can use /team1spawn to set team 1's spawn at your position!");
			SendClientMessage(playerid,-1,"You can use /team2spawn to set team 2's spawn at your position!");
			SendClientMessage(playerid,-1,"You can use /startevent to save all those settings and begin it");
			SendClientMessage(playerid,-1,"You can use /lockevent to (un)lock the event and /eunfreeze to unfreeze everyone.");
		}
		if(clickedid == TDM_Menu[8])
		{

			ShowPlayerDialog(playerid, DIALOG_T1NAME, DIALOG_STYLE_INPUT,"{F81414}Team 1's {FFFFFF}Name","Below goes the name","Done","Quit");
		}
		if(clickedid == TDM_Menu[9])
		{

			ShowPlayerDialog(playerid, DIALOG_T2NAME, DIALOG_STYLE_INPUT,"{F81414}Team 2's {FFFFFF}Name","Below goes the name","Done","Quit");
		}
		if(clickedid == TDM_Menu[10])
		{

			ShowPlayerDialog(playerid, DIALOG_MAINONE, DIALOG_STYLE_LIST, "{F81414}Team 1's Weapons", "Weapon 1\nWeapon 2\nWeapon 3", "Confirm", "Quit");
		}
		if(clickedid == TDM_Menu[11])
		{

			ShowPlayerDialog(playerid, DIALOG_MAINTWO, DIALOG_STYLE_LIST, "{F81414}Team 2's Weapons", "Weapon 1\nWeapon 2\nWeapon 3", "Confirm", "Quit");
		}
		if(clickedid == TDM_Menu[14])
		{

			ShowPlayerDialog(playerid, DIALOG_T1SKIN, DIALOG_STYLE_INPUT,"{F81414}Team 1's {FFFFFF}Skin","Below goes the Skin ID","Done","Quit");
		}
		if(clickedid == TDM_Menu[15])
		{

			ShowPlayerDialog(playerid, DIALOG_T2SKIN, DIALOG_STYLE_INPUT,"{F81414}Team 2's {FFFFFF}Skin","Below goes the Skin ID","Done","Quit");
		}
		if(clickedid == TDM_Menu[18])
		{

			ShowPlayerDialog(playerid, DIALOG_T1COL, DIALOG_STYLE_INPUT,"{F81414}Team 1's {FFFFFF}Color","1 = Blue | 2 = Green | 3 = Red","Done","Quit");
		}
		if(clickedid == TDM_Menu[19])
		{

			ShowPlayerDialog(playerid, DIALOG_T2COL, DIALOG_STYLE_INPUT,"{F81414}Team 2's {FFFFFF}Color","1 = Blue | 2 = Green | 3 = Red","Done","Quit");
		}
		if(clickedid == TDM_Menu[21])
		{

			ShowPlayerDialog(playerid, DIALOG_REWARD, DIALOG_STYLE_INPUT,"{F81414}Reward {FFFFFF}Amount","Example: 1000 = $1000","Done","Quit");
		}
		if(clickedid == Event_Menu[8])
		{

			for (new i = 0; i < sizeof(Event_Menu); i++)
			{

				TextDrawHideForPlayer(playerid,Event_Menu[i]);
			}
			event = 2;
			for (new i = 0; i < sizeof(DM_Menu); i++)
			{

				TextDrawShowForPlayer(playerid,DM_Menu[i]);
			}
			SendClientMessage(playerid,-1,"You can use /done to close and save these settings");
			SendClientMessage(playerid,-1,"You can use /dmspawn to set dm's spawn area at your position!");
			SendClientMessage(playerid,-1,"You can use /startevent to save all those settings and begin it");
			SendClientMessage(playerid,-1,"You can use /lockevent to (un)lock the event and /eunfreeze to unfreeze everyone.");
		}
		if(clickedid == DM_Menu[8])
		{

			ShowPlayerDialog(playerid, DIALOG_DMSKIN1, DIALOG_STYLE_INPUT,"{F81414}Random Skin {FFFFFF}1","Below goes the skin id.","Done","Quit");
		}
		if(clickedid == DM_Menu[9])
		{

			ShowPlayerDialog(playerid, DIALOG_DMSKIN2, DIALOG_STYLE_INPUT,"{F81414}Random Skin {FFFFFF}2","Below goes the skin id.","Done","Quit");
		}
		if(clickedid == DM_Menu[10])
		{

			ShowPlayerDialog(playerid, DIALOG_DMSKIN3, DIALOG_STYLE_INPUT,"{F81414}Random Skin {FFFFFF}3","Below goes the skin id.","Done","Quit");
		}
		if(clickedid == DM_Menu[11])
		{

			ShowPlayerDialog(playerid, DIALOG_DMCOLOR, DIALOG_STYLE_INPUT,"{F81414}DM Color {FFFFFF}","1 = Blue | 2 = Green | 3 = Red","Done","Quit");
		}
		if(clickedid == DM_Menu[14])
		{

			ShowPlayerDialog(playerid, DIALOG_DMWEAP1, DIALOG_STYLE_INPUT,"{F81414}Weapon 1 {FFFFFF}","Below goes the weapon id.","Done","Quit");
		}
		if(clickedid == DM_Menu[15])
		{

			ShowPlayerDialog(playerid, DIALOG_DMWEAP2, DIALOG_STYLE_INPUT,"{F81414}Weapon 2 {FFFFFF}","Below goes the weapon id.","Done","Quit");
		}
		if(clickedid == DM_Menu[18])
		{

			ShowPlayerDialog(playerid, DIALOG_DMWEAP3, DIALOG_STYLE_INPUT,"{F81414}Weapon 3 {FFFFFF}1","Below goes the weapon id.","Done","Quit");
		}
		if(clickedid == DM_Menu[19])
		{

			ShowPlayerDialog(playerid, DIALOG_DMWEAP4, DIALOG_STYLE_INPUT,"{F81414}Weapon 4 {FFFFFF}1","Below goes the weapon id.","Done","Quit");
		}
		if(clickedid == DM_Menu[21])
		{

			ShowPlayerDialog(playerid, DIALOG_REWARD, DIALOG_STYLE_INPUT,"{F81414}Reward {FFFFFF}Amount","Example: 1000 = $1000","Done","Quit");
		}
		if(clickedid == Event_Menu[9]) //Zombie
		{


		}
		if(clickedid == Event_Menu[10])  //Racing
		{

			for (new i = 0; i < sizeof(Event_Menu); i++)
			{

				TextDrawHideForPlayer(playerid,Event_Menu[i]);
			}
			event = 4;
			for (new i = 0; i < sizeof(RC_Menu); i++)
			{

				TextDrawShowForPlayer(playerid,RC_Menu[i]);
			}
			SendClientMessage(playerid,-1,"You can use /done to close and save these settings");
			SendClientMessage(playerid,-1,"You can use /startevent to save all those settings and begin it");
			SendClientMessage(playerid,-1,"You can use /lockevent to (un)lock the event and /eunfreeze to unfreeze everyone.");
		}
		if(clickedid == RC_Menu[8])
		{

			ShowPlayerDialog(playerid, DIALOG_RCMODELID, DIALOG_STYLE_INPUT,"{F81414}Race Vehicle {FFFFFF}Model","Below goes the vehicle id","Done","Quit");
		}
		if(clickedid == RC_Menu[9])
		{

			ShowPlayerDialog(playerid, DIALOG_RCMAP, DIALOG_STYLE_LIST, "{F81414}Racing Maps", "Test Map", "Confirm", "Quit");
		}
		if(clickedid == RC_Menu[10])
		{

			ShowPlayerDialog(playerid, DIALOG_RCCOLOR1, DIALOG_STYLE_INPUT,"{F81414}Race Color {FFFFFF}","1 = Blue | 2 = Green | 3 = Red","Done","Quit");
		}
		if(clickedid == RC_Menu[11])
		{

			ShowPlayerDialog(playerid, DIALOG_RCCOLOR2, DIALOG_STYLE_INPUT,"{F81414}Race Color {FFFFFF}","Below goes a color id.","Done","Quit");
		}
		if(clickedid == RC_Menu[14])
		{

			ShowPlayerDialog(playerid, DIALOG_RCSKIN, DIALOG_STYLE_INPUT,"{F81414}Race Skin","Below goes a skin id.","Done","Quit");
		}
		if(clickedid == RC_Menu[15])
		{

			if(carnos == 0) SendClientMessage(playerid,-1,"Vehicle Nos enabled"),carnos=1;
			else if(carnos == 1) SendClientMessage(playerid,-1,"Vehicle Nos disabled"),carnos=0;
		}
		if(clickedid == RC_Menu[18])
		{

			ShowPlayerDialog(playerid, DIALOG_RCPLATES, DIALOG_STYLE_INPUT,"{F81414}Vehicle Plates","Below you can write a plate id or something","Done","Quit");
		}
		if(clickedid == RC_Menu[19])
		{

			if(rcinvul == 0) SendClientMessage(playerid,-1,"Vehicle invulnerabillity enabled"),rcinvul=1;
			else if(rcinvul == 1) SendClientMessage(playerid,-1,"Vehicle invulnerabillity disabled"),rcinvul=0;
		}
		if(clickedid == RC_Menu[21])
		{

			ShowPlayerDialog(playerid, DIALOG_REWARD, DIALOG_STYLE_INPUT,"{F81414}Reward {FFFFFF}Amount","Example: 1000 = $1000","Done","Quit");
		}
		if(clickedid == Event_Menu[11])  //Exit
		{

			CancelSelectTextDraw(playerid);
			for (new i = 0; i < sizeof(Event_Menu); i++)
			{

				TextDrawHideForPlayer(playerid,Event_Menu[i]);
			}
		}
		if(PlayerInfo[playerid][Level] > 0 ||  PlayerInfo[playerid][SpecID] != INVALID_PLAYER_ID || Spectating[playerid] != 0)
		{
			if(clickedid == SpecPanel_TD[17]) // kick - bugged
			{
				new ss = PlayerInfo[playerid][SpecID];
				new nam[24]; strcat(nam, PlayerInfo[ss][Nick]);
				SendClientMessageToAll(red,"KICK | %s Has been kicked by an Admin | Reason : Bugged, relog please.",nam);
				KickX(PlayerInfo[playerid][SpecID]);
				CMDMessageToAdmins(playerid,"KICK");
			}
			if(clickedid == SpecPanel_TD[16]) // ban - illegal mods
			{
				if(PlayerInfo[playerid][Level] < 2) return SendClientMessage(playerid,Dred,"|ERROR:| Only level 2 admins can ban people!");
				new ss = PlayerInfo[playerid][SpecID];
				new nam[2][24]; strcat(nam[0], PlayerInfo[ss][Nick]);
				strcat(nam[1], PlayerInfo[playerid][Nick]);
				SendClientMessageToAll(red,"BAN | %s has been banned by an Admin | Reason : Illegal mods.", nam[0]);
				COD_BAN(PlayerInfo[playerid][SpecID], nam[1], "General Hacks");
				CMDMessageToAdmins(playerid,"BAN");
			}
			if(clickedid == SpecPanel_TD[19]) // spawn
			{
				SpawnPlayer(PlayerInfo[playerid][SpecID]);
				CMDMessageToAdmins(playerid,"SPAWN");
			}

			if(clickedid == SpecPanel_TD[18]) // slap
			{
				new str[24];
				valstr(str, PlayerInfo[playerid][SpecID]);
				cmd_slap(playerid, str);
			}
			if(clickedid == SpecPanel_TD[4]) // ip lookout
			{
			    new query[132];
			    new sid = PlayerInfo[playerid][SpecID];
				strcat(query, PlayerInfo[sid][lastip]);
				mysql_format(mysql,query,sizeof(query),"SELECT * FROM `playerbase` WHERE `ip` = '%e' OR `lastip` = '%e' AND `lastip` != 'Not available' LIMIT 7", query, query);
				mysql_pquery(mysql,query,"akasearchpanel","d",playerid);
			}
		}
	}
	if(clickedid == INVALID_TEXT_DRAW)
	{
		if(AtStats[playerid]) { HideStats(playerid); AtStats[playerid] = 0; }
	}
	return 1;
}

forward akasearchpanel(playerid);
public akasearchpanel(playerid)
{
	new r, string[256], ipss[16], name[MAX_PLAYER_NAME];
	cache_get_row_count(r);

	for(new x; x < r; x ++)
	{
		cache_get_value_name(x, "ip", ipss, 16);
		cache_get_value_name(x, "name", name, 25);
		format(string, _, "%s%s - %s~n~", string, ipss, name);
	}

	if(r) PlayerTextDrawSetString(playerid, SpecPanel_PTD[playerid][0], string);
	else PlayerTextDrawSetString(playerid, SpecPanel_PTD[playerid][0], "No results found");
	return 1;
}

forward UnfreezeMe(playerid);
public UnfreezeMe(playerid)
{
    TogglePlayerControllable(playerid, true);
	return 1;
}

CMD:eunfreeze(playerid)
{
	if(PlayerInfo[playerid][Level] < 4) return 0;
	foreach(new i : Player)
	{

		if(inevent[i] > 0)
		{

			TogglePlayerControllable(i, true);
			PlayerInfo[i][Frozen] = 0;
		}
	}
	SendClientMessageToAll(-1,"{FF0000}[EVENT] {00FF00}Everybody has been unfrozen!");
	return 1;
}
CMD:no(playerid)
{
	if(PlayerInfo[playerid][CWINV] == true)
	{

		CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
		Iter_Clear(JOINED1);
		Iter_Clear(JOINED2);
		new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
		SendClientMessage(CLAN_WAR[CW_STARTER],Dred,"* %s(%d) has refused your clan war request",nam,playerid);
		PlayerInfo[playerid][CWINV] = false;
	}
	if(PlayerInfo[playerid][cleave] == true)
	{

		SendClientMessage(playerid,Lg,"* You have decided to stay into the clan.");
		PlayerInfo[playerid][cleave] = false;
	}
	return 1;
}

forward CheckForAccept(playerid, id);
public CheckForAccept(playerid, id)
{
	if(cache_num_rows()>0)
	{
		new lvl, members; cache_get_value_name_int(0, "clevel", lvl); cache_get_value_name_int(0, "cmembers", members);
		if(GetMaxMembersFromLevel(lvl) <= members)
		{
			SendClientMessage(playerid,Dred,"* Sorry but the clan is already full");
			return 1;
		}
		ConnectKills[playerid] = 0;
		PlayerInfo[playerid][cRank] = 0;
		ConnectDeaths[playerid] = 0;
		PlayerInfo[playerid][InClan] = id;
		new str[91];
	 	strcat(str, PlayerInfo[playerid][Nick]);
		format(str, _, "* %s(%d) has joined the clan.", str, playerid);
		ClanMSG(id,str);
		SendClientMessage(playerid, Lg, "* You have joined the Clan (id: %d).", id);
		mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `cmembers`= `cmembers` + 1 WHERE `cID`='%d' LIMIT 1", id);
		mysql_tquery(mysql, str);
		SavePlayer(playerid);
		PlayerInfo[playerid][cinvite] = -1;
		foreach(new i : Player)
		{
			if(i != playerid) if(PlayerInfo[i][InClan] == id)
			{
			    Toy1Info[playerid][tbone] = Toy1Info[i][tbone];
				Toy1Info[playerid][tx] = Toy1Info[i][tx];
				Toy1Info[playerid][ty] = Toy1Info[i][ty];
				Toy1Info[playerid][tz] = Toy1Info[i][tz];
				Toy1Info[playerid][rtx] = Toy1Info[i][rtx];
				Toy1Info[playerid][rty] = Toy1Info[i][rty];
				Toy1Info[playerid][rtz] = Toy1Info[i][rtz];
				Toy1Info[playerid][tsx] = Toy1Info[i][tsx];
				Toy1Info[playerid][tsy] = Toy1Info[i][tsy];
				Toy1Info[playerid][tsz] = Toy1Info[i][tsz];
				cToy1[playerid] = cToy1[i];

			    Toy2Info[playerid][tbone] = Toy2Info[i][tbone];
				Toy2Info[playerid][tx] = Toy2Info[i][tx];
				Toy2Info[playerid][ty] = Toy2Info[i][ty];
				Toy2Info[playerid][tz] = Toy2Info[i][tz];
				Toy2Info[playerid][rtx] = Toy2Info[i][rtx];
				Toy2Info[playerid][rty] = Toy2Info[i][rty];
				Toy2Info[playerid][rtz] = Toy2Info[i][rtz];
				Toy2Info[playerid][tsx] = Toy2Info[i][tsx];
				Toy2Info[playerid][tsy] = Toy2Info[i][tsy];
				Toy2Info[playerid][tsz] = Toy2Info[i][tsz];
				cToy2[playerid] = cToy2[i];

				new ct1 = cToy1[playerid];
				if(ct1 != -1)
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid,4)) RemovePlayerAttachedObject(playerid,4);
					SetPlayerAttachedObject(playerid,4,ct1,Toy1Info[playerid][tbone],Toy1Info[playerid][tx],Toy1Info[playerid][ty],Toy1Info[playerid][tz],Toy1Info[playerid][rtx], 	Toy1Info[playerid][rty],Toy1Info[playerid][rtz],Toy1Info[playerid][tsx],Toy1Info[playerid][tsy],Toy1Info[playerid][tsz]);
				}
				new ct2 = cToy2[playerid];
				if(ct2 != -1)
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid,5)) RemovePlayerAttachedObject(playerid,5);
					SetPlayerAttachedObject(playerid,5,ct2,Toy2Info[playerid][tbone],Toy2Info[playerid][tx],Toy2Info[playerid][ty],Toy2Info[playerid][tz],Toy2Info[playerid][rtx], 	Toy2Info[playerid][rty],Toy2Info[playerid][rtz],Toy2Info[playerid][tsx],Toy2Info[playerid][tsy],Toy2Info[playerid][tsz]);
				}
				strcopy(cTag[playerid], cTag[i]);
				strcopy(cName[playerid], cName[i]);
				break;
			}
		}
		cLevel[playerid] = lvl;
		UpdateLabelText(playerid);
	}else SendClientMessage(playerid, Dred, "Could not connect to database, try again.");
	return 1;
}

AddBeforeWar(playerid)
{
	new clan, x = PlayerInfo[playerid][InClan];
	if(x == CLAN_WAR[CW_C1]) clan = 1;
	else clan = 2;
	if(clan == 1)
	{
		Iter_Add(JOINED1, playerid);
	}
	else
	{
		Iter_Add(JOINED2, playerid);
	}
	return 1;
}

RemoveBeforeWar(playerid)
{
	KillTimer(CWTimer1);
	KillTimer(CWTimer2);
	KillTimer(CWTimer3);
	KillTimer(CWTimer4);
	new maxx = CLAN_WAR[CW_MAX];
	foreach(new i : Player)
	{
		if(IsSpectator[i])
		{
			TextDrawHideForPlayer(i, Warmup0);
			TextDrawHideForPlayer(i, Warmup1);
	 		PlayerPlaySound(i, 15805, 0,0,0);
			TextDrawHideForPlayer(i, Warmup2);
		}
	}
	foreach(new x: JOINED1)
	{
	    TextDrawHideForPlayer(x, Warmup0);
	    TextDrawHideForPlayer(x, Warmup1);
	    TextDrawHideForPlayer(x, Warmup2);
		SetCameraBehindPlayer(x);
		TogglePlayerControllable(x, true);
		SpawnPlayer(x);
		HideViewersTD(x);
		for(new i=0; i < maxx; i++)
		{
			TextDrawHideForPlayer(x, CW_MEMBER[i]);
			TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
			TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
			TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
			HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
			HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
			HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
			HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
        }
        TextDrawHideForPlayer(x, CW_ROUNDS);
	}
	foreach(new x: JOINED2)
	{
	    TextDrawHideForPlayer(x, Warmup0);
	    TextDrawHideForPlayer(x, Warmup1);
	    TextDrawHideForPlayer(x, Warmup2);
		SetCameraBehindPlayer(x);
		HideViewersTD(x);
		TogglePlayerControllable(x, true);
		SpawnPlayer(x);
		for(new i=0; i < maxx; i++)
		{
			TextDrawHideForPlayer(x, CW_MEMBER[i]);
			TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
			TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
			TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
			HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
			HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
			HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
			HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
        }
        TextDrawHideForPlayer(x, CW_ROUNDS);
	}
	for(new i=0; i < maxx; i++) WAR_SLOT_T1[i] = WAR_SLOT_T2[i] = WAR_SLOT_T1_AID[i] = WAR_SLOT_T2_AID[i] = -1;
	CLAN_WAR[CW_WARMUP] = CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
	Iter_Clear(JOINED1);
	Iter_Clear(JOINED2);
	Iter_Clear(ALIVE1);
	Iter_Clear(ALIVE2);
	SendClientMessageToAll(0xFF4848FF, "* Clan war between [%s] and [%s] is canceled (%s disconnected before start).", cTag[CLAN_WAR[CW_STARTER]], cTag[CLAN_WAR[CW_ACCEPTER]], PlayerInfo[playerid][Nick]);
	foreach(new x: Player)
	{
	    if(IsSpectator[x])
	    {
	        cmd_tspecoff(x);
		    TextDrawHideForPlayer(x, Warmup0);
		    TextDrawHideForPlayer(x, Warmup1);
		    TextDrawHideForPlayer(x, Warmup2);
			for(new i=0; i < maxx; i++)
			{
				TextDrawHideForPlayer(x, CW_MEMBER[i]);
				TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
				TextDrawHideForPlayer(x, CW_DISCONNECT[i]);
				TextDrawHideForPlayer(x, CW_DISCONNECT_2[i]);
				HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
				HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
				HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
				HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
            }
            TextDrawHideForPlayer(x, CW_ROUNDS);
            HideViewersTD(x);
	    }
	}
	return 1;
}

forward CWTimer();
public CWTimer()
{
    if(CLAN_WAR[CW_WARMUP])
	{
	    new str[20];
	    if(CLAN_WAR[CW_WARMUP_SECONDS] < 10) format(str, _, "Warmup:_0%d_seconds", CLAN_WAR[CW_WARMUP_SECONDS]);
	    else format(str, _, "Warmup:_%d_seconds", CLAN_WAR[CW_WARMUP_SECONDS]);
	    TextDrawSetString(Warmup0, str);
	    foreach(new x : JOINED1) TextDrawShowForPlayer(x,Warmup0);
	    foreach(new i : Player) if(IsSpectator[i]) TextDrawShowForPlayer(i,Warmup0);
	    foreach(new x : JOINED2) TextDrawShowForPlayer(x,Warmup0);
	    CLAN_WAR[CW_WARMUP_SECONDS] --;
	}
	if(CLAN_WAR[CW_ON])
	{
     	if(ct_available)
	    {
	        new stt[5];
			file_read("/var/www/html/results.txt", stt);
	        TextDrawSetString(CTSpectatorIg, "%d", GetCTSpectators());
	        TextDrawSetString(CTSpectatorTwitch, stt);
	        foreach(new i : Player)
	        {
	            if(IsSpectator[i])
	            {
	                TextDrawShowForPlayer(i, CTSpectatorIg);
	                TextDrawShowForPlayer(i, CTSpectatorTwitch);
	            }
	        }
	        foreach(new i : JOINED1)
	        {
	            TextDrawShowForPlayer(i, CTSpectatorIg);
	            TextDrawShowForPlayer(i, CTSpectatorTwitch);
	        }
	        foreach(new i : JOINED2)
	        {
	           	TextDrawShowForPlayer(i, CTSpectatorIg);
	            TextDrawShowForPlayer(i, CTSpectatorTwitch);
	        }
	    }
	    CWTimer1 = SetTimer("CWTimer", 1000, false);
	}
	return 1;
}

forward StartCWW();
public StartCWW()
{
	CLAN_WAR[CW_WARMUP] = false;
	new R;
	new maxx = CLAN_WAR[CW_MAX];
	for(new i=0; i < maxx; i++)
	{
		if(IsPlayerConnected(WAR_SLOT_T1[i]))
		{
			SetPlayerHealth(WAR_SLOT_T1[i], 100, 100.0);
			foreach (new j : Player)
			{
				SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 100.00);
				SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 100.00);
			}
		}
		if(IsPlayerConnected(WAR_SLOT_T2[i]))
		{
			SetPlayerHealth(WAR_SLOT_T2[i], 100.0, 100.0);
			foreach (new j : Player)
			{
				SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 100.00);
				SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 100.00);
			}
		}

		foreach(new l: JOINED1)
		{
			if(IsPlayerConnected(WAR_SLOT_T1[i]))
			{
				ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
				ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
			}
			if(IsPlayerConnected(WAR_SLOT_T2[i]))
			{
				ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
				ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
			}
		}
		foreach(new l: JOINED2)
		{
			if(IsPlayerConnected(WAR_SLOT_T1[i]))
			{
				ShowPlayerProgressBar(l, CW_STAT_BAR[l][HPP][i]);
				ShowPlayerProgressBar(l, CW_STAT_BAR[l][ARMOURR][i]);
			}
			if(IsPlayerConnected(WAR_SLOT_T2[i]))
			{
				ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][HPP][i]);
				ShowPlayerProgressBar(l, CW_STAT_BAR_2[l][ARMOURR][i]);
			}
		}
		foreach(new j: Player)
		{
		    if(IsSpectator[j])
		    {
		        if(IsPlayerConnected(WAR_SLOT_T1[i]))
				{
					ShowPlayerProgressBar(j, CW_STAT_BAR[j][HPP][i]);
					ShowPlayerProgressBar(j, CW_STAT_BAR[j][ARMOURR][i]);
			    }
			    if(IsPlayerConnected(WAR_SLOT_T2[i]))
				{
					ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][HPP][i]);
					ShowPlayerProgressBar(j, CW_STAT_BAR_2[j][ARMOURR][i]);
			    }
				TextDrawShowForPlayer(j, CW_ROUNDS);
		    }
		}
	}
	foreach(new w : JOINED1)
	{
	    if(!IsValidSkin(PlayerInfo[w][cSkin])) SetPlayerSkin(w,24);
		else SetPlayerSkin(w,PlayerInfo[w][cSkin]);
		TextDrawHideForPlayer(w, Warmup0);
		TextDrawHideForPlayer(w, Warmup1);
		TextDrawHideForPlayer(w, Warmup2);
		SendClientMessage(w, COLOR_GREEN, "[CLAN WAR] War is starting in 10 seconds.");
		switch(CLAN_WAR[CW_MAP])
		{
			case 1:
			{
				SetPlayerInterior(w,1);
				R = random(sizeof(de_dust_bspawn));
				SetPlayerPos(w,de_dust_bspawn[R][0],de_dust_bspawn[R][1],de_dust_bspawn[R][2]);
				SetPlayerFacingAngle(w,de_dust_bspawn[R][3]);
				SetPlayerCameraPos(w, 254.3212, 1790.3757, 60.7934);
				SetPlayerCameraLookAt(w, 253.5711, 1791.0426, 60.5784);
			}
			case 2:
			{
				SetPlayerInterior(w,1);
				R = random(sizeof(b_inferno));
				SetPlayerPos(w,b_inferno[R][0],b_inferno[R][1],b_inferno[R][2]);
				SetPlayerFacingAngle(w,b_inferno[R][3]);
				SetPlayerCameraPos(w, 9431.2178, -8805.7510, 34.6133);
				SetPlayerCameraLookAt(w, 9431.4111, -8804.7793, 34.2882);
			}
			case 3:
			{
				SetPlayerInterior(w, 10);
				R = random(sizeof(b_rc));
				SetPlayerPos(w,b_rc[R][0],b_rc[R][1],b_rc[R][2]);
				SetPlayerFacingAngle(w,b_rc[R][3]);
			}
		}
		TogglePlayerControllable(w, false);
		SetPlayerVirtualWorld(w,66);
		ResetPlayerWeapons(w);
		GivePlayerWeapon(w, WEAPON_DEAGLE, 150);
		GivePlayerWeapon(w, WEAPON_SHOTGSPA, 250);
		GivePlayerWeapon(w, WEAPON_M4, 250);
		SetPlayerHealth(w, 100.0, 100.0);
		GameTextForPlayer(w, "~n~~n~~p~Loading..", 3000, 3);
	}
	foreach(new w: JOINED2)
	{
	    if(!IsValidSkin(PlayerInfo[w][cSkin])) SetPlayerSkin(w,24);
		else SetPlayerSkin(w,PlayerInfo[w][cSkin]);
		TextDrawHideForPlayer(w, Warmup0);
		TextDrawHideForPlayer(w, Warmup1);
		TextDrawHideForPlayer(w, Warmup2);
		SendClientMessage(w, COLOR_GREEN, "[CLAN WAR] Clan war is starting in 10 seconds.");
		switch(CLAN_WAR[CW_MAP])
		{

			case 1:
			{

				SetPlayerInterior(w,1);
				R = random(sizeof(de_dust_tspawn));
				SetPlayerPos(w,de_dust_tspawn[R][0],de_dust_tspawn[R][1],de_dust_tspawn[R][2]);
				SetPlayerFacingAngle(w,de_dust_tspawn[R][3]);
				SetPlayerCameraPos(w, 152.9509, 1580.1943, 62.0240);
				SetPlayerCameraLookAt(w, 151.9476, 1580.2219, 61.7489);
			}
			case 2:
			{

				SetPlayerInterior(w,1);
				R = random(sizeof(t_inferno));
				SetPlayerPos(w,t_inferno[R][0],t_inferno[R][1],t_inferno[R][2]);
				SetPlayerFacingAngle(w,t_inferno[R][3]);
				SetPlayerCameraPos(w, 9582.8320, -8746.6553, 25.5376);
				SetPlayerCameraLookAt(w, 9582.6172, -8747.6289, 25.3977);
			}
			case 3:
			{

				SetPlayerInterior(w, 10);
				R = random(sizeof(t_rc));
				SetPlayerPos(w,t_rc[R][0],t_rc[R][1],t_rc[R][2]);
				SetPlayerFacingAngle(w,t_rc[R][3]);
			}
		}
		TogglePlayerControllable(w, false);
		ResetPlayerWeapons(w);
		GivePlayerWeapon(w, WEAPON_DEAGLE, 150);
		GivePlayerWeapon(w, WEAPON_SHOTGSPA, 250);
		GivePlayerWeapon(w, WEAPON_M4, 250);
		SetPlayerHealth(w, 100.0, 100.0);
		GameTextForPlayer(w, "~n~~n~~p~Loading..", 3000, 3);
	}
	CWTimer3 = SetTimer("InsistOnGoodSpawn", 3000, false);
	SendClientMessageToAll(COLOR_YELLOW, "(!) Clan War between [%s] and [%s] is starting in 10 seconds.", cTag[CLAN_WAR[CW_STARTER]], cTag[CLAN_WAR[CW_ACCEPTER]]);
	CWTimer4 = SetTimer("StartCW", 10000, false);
	new w = Iter_Random(JOINED2);
	foreach(new i : Player)
	{
		if(IsSpectator[i])
		{
			TextDrawHideForPlayer(i, Warmup0);
			TextDrawHideForPlayer(i, Warmup1);
			TextDrawHideForPlayer(i, Warmup2);
			SetCameraBehindPlayer(i);
			SpectatedPlayer2[i] = w;
			PlayerSpectatePlayer(i, w);
		}
	}
	return 1;
}

forward InsistOnGoodSpawn();
public InsistOnGoodSpawn()
{
	new R;
    foreach(new w : JOINED1)
	{
	    if(!IsValidSkin(PlayerInfo[w][cSkin])) SetPlayerSkin(w,24);
		else SetPlayerSkin(w,PlayerInfo[w][cSkin]);
		switch(CLAN_WAR[CW_MAP])
		{
			case 1:
			{
				SetPlayerInterior(w,1);
				R = random(sizeof(de_dust_bspawn));
				SetPlayerPos(w,de_dust_bspawn[R][0],de_dust_bspawn[R][1],de_dust_bspawn[R][2]);
				SetPlayerFacingAngle(w,de_dust_bspawn[R][3]);
				SetPlayerCameraPos(w, 254.3212, 1790.3757, 60.7934);
				SetPlayerCameraLookAt(w, 253.5711, 1791.0426, 60.5784);
			}
			case 2:
			{
				SetPlayerInterior(w,1);
				R = random(sizeof(b_inferno));
				SetPlayerPos(w,b_inferno[R][0],b_inferno[R][1],b_inferno[R][2]);
				SetPlayerFacingAngle(w,b_inferno[R][3]);
				SetPlayerCameraPos(w, 9431.2178, -8805.7510, 34.6133);
				SetPlayerCameraLookAt(w, 9431.4111, -8804.7793, 34.2882);
			}
			case 3:
			{
				SetPlayerInterior(w, 10);
				R = random(sizeof(b_rc));
				SetPlayerPos(w,b_rc[R][0],b_rc[R][1],b_rc[R][2]);
				SetPlayerFacingAngle(w,b_rc[R][3]);
			}
		}
		TogglePlayerControllable(w, false);
		SetPlayerVirtualWorld(w,66);
		ResetPlayerWeapons(w);
		GivePlayerWeapon(w, WEAPON_DEAGLE, 150);
		GivePlayerWeapon(w, WEAPON_SHOTGSPA, 250);
		GivePlayerWeapon(w, WEAPON_M4, 250);
		SetPlayerHealth(w, 100.0, 100.0);
		GameTextForPlayer(w, "~n~~n~~p~Loading..", 3000, 3);
	}
	foreach(new w: JOINED2)
	{
	    if(!IsValidSkin(PlayerInfo[w][cSkin])) SetPlayerSkin(w,24);
		else SetPlayerSkin(w,PlayerInfo[w][cSkin]);
		switch(CLAN_WAR[CW_MAP])
		{
			case 1:
			{

				SetPlayerInterior(w,1);
				R = random(sizeof(de_dust_tspawn));
				SetPlayerPos(w,de_dust_tspawn[R][0],de_dust_tspawn[R][1],de_dust_tspawn[R][2]);
				SetPlayerFacingAngle(w,de_dust_tspawn[R][3]);
				SetPlayerCameraPos(w, 152.9509, 1580.1943, 62.0240);
				SetPlayerCameraLookAt(w, 151.9476, 1580.2219, 61.7489);
			}
			case 2:
			{

				SetPlayerInterior(w,1);
				R = random(sizeof(t_inferno));
				SetPlayerPos(w,t_inferno[R][0],t_inferno[R][1],t_inferno[R][2]);
				SetPlayerFacingAngle(w,t_inferno[R][3]);
				SetPlayerCameraPos(w, 9582.8320, -8746.6553, 25.5376);
				SetPlayerCameraLookAt(w, 9582.6172, -8747.6289, 25.3977);
			}
			case 3:
			{

				SetPlayerInterior(w, 10);
				R = random(sizeof(t_rc));
				SetPlayerPos(w,t_rc[R][0],t_rc[R][1],t_rc[R][2]);
				SetPlayerFacingAngle(w,t_rc[R][3]);
			}
		}
		TogglePlayerControllable(w, false);
		ResetPlayerWeapons(w);
		GivePlayerWeapon(w, WEAPON_DEAGLE, 150);
		GivePlayerWeapon(w, WEAPON_SHOTGSPA, 250);
		GivePlayerWeapon(w, WEAPON_M4, 250);
		SetPlayerHealth(w, 100.0, 100.0);
		GameTextForPlayer(w, "~n~~n~~p~Loading..", 3000, 3);
	}
	new w = Iter_Random(JOINED2);
    foreach(new i : Player)
    {
        if(IsSpectator[i])
        {
            SpectatedPlayer2[i] = w;
			PlayerSpectatePlayer(i, w);
        }
    }
	return 1;
}

forward StartCW();
public StartCW()
{
	new str[128], maxx = CLAN_WAR[CW_MAX];
	foreach(new i : Player)
	{
		if(IsSpectator[i])
		{
			TextDrawHideForPlayer(i, Warmup0);
			TextDrawHideForPlayer(i, Warmup1);
	 		PlayerPlaySound(i, 15805, 0,0,0);
			TextDrawHideForPlayer(i, Warmup2);
		}
	}
	if(Iter_Count(JOINED1) < maxx || Iter_Count(JOINED2) < maxx)
	{
		foreach(new x: JOINED1)
		{
		    TextDrawHideForPlayer(x, Warmup0);
		    TextDrawHideForPlayer(x, Warmup1);
		    TextDrawHideForPlayer(x, Warmup2);
			SetCameraBehindPlayer(x);
			TogglePlayerControllable(x,true);
			SpawnPlayer(x);
			for(new i=0; i < maxx; i++)
			{
				TextDrawHideForPlayer(x, CW_MEMBER[i]);
				TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
				HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
				HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
				HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
				HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
            }
            TextDrawHideForPlayer(x, CW_ROUNDS);
		}
		foreach(new x: JOINED2)
		{
		    TextDrawHideForPlayer(x, Warmup0);
		    TextDrawHideForPlayer(x, Warmup1);
		    TextDrawHideForPlayer(x, Warmup2);
			SetCameraBehindPlayer(x);
			TogglePlayerControllable(x,true);
			SpawnPlayer(x);
			for(new i=0; i < maxx; i++)
			{
				TextDrawHideForPlayer(x, CW_MEMBER[i]);
				TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
				HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
				HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
				HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
				HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
            }
            TextDrawHideForPlayer(x, CW_ROUNDS);
		}
		for(new i=0; i < maxx; i++) WAR_SLOT_T1[i] = WAR_SLOT_T2[i] = WAR_SLOT_T1_AID[i] = WAR_SLOT_T2_AID[i] = -1;
		CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
		Iter_Clear(JOINED1);
		Iter_Clear(JOINED2);
		Iter_Clear(ALIVE1);
		Iter_Clear(ALIVE2);
		SendClientMessageToAll(0xFF4848FF, "* Clan war between [%s] and [%s] is canceled (unbalanced members).", cTag[CLAN_WAR[CW_STARTER]],cTag[CLAN_WAR[CW_ACCEPTER]]);
		foreach(new x: Player)
		{
		    if(IsSpectator[x])
		    {
		        cmd_tspecoff(x);
				for(new i=0; i < maxx; i++)
				{
					TextDrawHideForPlayer(x, CW_MEMBER[i]);
					TextDrawHideForPlayer(x, CW_MEMBER_2[i]);
					HidePlayerProgressBar(x, CW_STAT_BAR[x][HPP][i]);
					HidePlayerProgressBar(x, CW_STAT_BAR[x][ARMOURR][i]);
					HidePlayerProgressBar(x, CW_STAT_BAR_2[x][HPP][i]);
					HidePlayerProgressBar(x, CW_STAT_BAR_2[x][ARMOURR][i]);
	            }
	            TextDrawHideForPlayer(x, CW_ROUNDS);
	            HideViewersTD(x);
		    }
		}
		return 1;
	}
	if(CLAN_TOURNAMENT[CT_ON])
	{
        CLAN_TOURNAMENT[CT_PLAYING] = true;
        foreach(new playerid : Player)
        {
            if(IsSpectator[playerid])
            {
		        new bool:found;
				foreach(new i : ALIVE1)
				{
				    found = true;
					SpectatedPlayer2[playerid] = i;
					PlayerSpectatePlayer(playerid, i);
					break;
				}
				if(!found)
				{
					foreach(new i : ALIVE2)
					{
						SpectatedPlayer2[playerid] = i;
						PlayerSpectatePlayer(playerid, i);
						break;
					}
				}
			}
        }
        format(str, _, "* Clan Tournament Match between [%s] and [%s] has been started, use /tspec to spectate!", cTag[CLAN_WAR[CW_STARTER]], cTag[CLAN_WAR[CW_ACCEPTER]]);
	}
	else format(str, _, "* Clan war between [%s] and [%s] has been started, use /tspec to spectate! !", cTag[CLAN_WAR[CW_STARTER]], cTag[CLAN_WAR[CW_ACCEPTER]]);
	SendClientMessageToAll(0xFF4848FF,str);
	foreach(new x: JOINED1)
	{
	    TextDrawHideForPlayer(x, Warmup0);
	    TextDrawHideForPlayer(x, Warmup1);
	    TextDrawHideForPlayer(x, Warmup2);
		SetCameraBehindPlayer(x);
		GameTextForPlayer(x,"~r~Fight",5000,5);
		TogglePlayerControllable(x,true);
		SpectatedPlayer[x] = -1;
		PlayerPlaySound(x, 15805, 0,0,0);
		CWJoins[x] ++;
		if(QuestContent[4] == CONTENT_CWJOIN)
		{
		    QuestProgress[x][4] ++;
            if(CWJoins[x] == 14)
		    {
		    	if(!Bit_Get(QuestDone[x], 4))
		    	{
		    	    Bit_Let(QuestDone[x], 4);
		    	    SendClientMessage(x, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
		    	    TextDrawHideForPlayer(x,Quest[4]);
		    	    PlayerInfo[x][XP] += 100;
		    	    GiveCash(x, 50000);
		    	}
			}
		}
	}
	foreach(new x: JOINED2)
	{
		CWJoins[x] ++;
		if(QuestContent[4] == CONTENT_CWJOIN)
		{
		    QuestProgress[x][4] ++;
		    if(CWJoins[x] == 14)
		    {
		    	if(!Bit_Get(QuestDone[x], 4))
		    	{
		    	    Bit_Let(QuestDone[x], 4);
		    	    SendClientMessage(x, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
		    	    TextDrawHideForPlayer(x,Quest[4]);
		    	    PlayerInfo[x][XP] += 100;
		    	    GiveCash(x, 50000);
		    	}
			}
		}
	    TextDrawHideForPlayer(x, Warmup0);
	    TextDrawHideForPlayer(x, Warmup1);
	    TextDrawHideForPlayer(x, Warmup2);
		SetCameraBehindPlayer(x);
		GameTextForPlayer(x,"~r~Fight",5000,5);
		TogglePlayerControllable(x,true);
		SpectatedPlayer[x] = -1;
	 	PlayerPlaySound(x, 15805, 0,0,0);
	}
	return 1;
}
forward StartCW2();
public StartCW2()
{
	new str[128];
	SendClientMessageToAll(0xFF4848FF, "* Round %d in Clan war between [%s] and [%s] has been started !", CLAN_WAR[CW_ROUND1] + CLAN_WAR[CW_ROUND2] + 1, cTag[CLAN_WAR[CW_STARTER]], cTag[CLAN_WAR[CW_ACCEPTER]]);
	new maxx = CLAN_WAR[CW_MAX], R;
	new cc1 = Iter_Count(JOINED1), cc2 = Iter_Count(JOINED2), t1 = CLAN_WAR[CW_C1], t2 = CLAN_WAR[CW_C2];
	for(new i=0; i < maxx; i++)
	{
	    if(!IsPlayerConnected(WAR_SLOT_T1[i]))
	    {
			if(cc1 != maxx)
			{
			    foreach(new l: Player)
			    {
			        if(!IsPlayerConnected(WAR_SLOT_T1[i]))
					{
				        if(PlayerInfo[l][InClan] == CLAN_WAR[CW_C1])
				        {
					        if(PlayerInfo[l][IsSpawned])
					        {
								if(!Iter_Contains(JOINED1, l))
						        {
									cc1++;
									Iter_Add(JOINED1, l); Iter_Add(ALIVE1, l);

									WAR_SLOT_T1[i] = l;
									WAR_SLOT_T1_AID[i] = PlayerInfo[l][AID];
									new sk;
									if(!IsValidSkin(PlayerInfo[l][cSkin])) sk = 24;
									else sk = PlayerInfo[l][cSkin];
									SetPlayerSkin(l,sk);
									SetPlayerColor(l,0xEB055B00);
									switch(CLAN_WAR[CW_MAP])
									{
										case 1:
										{
											SetPlayerInterior(l,1);
											R = random(sizeof(de_dust_bspawn));
											SetPlayerPos(l,de_dust_bspawn[R][0],de_dust_bspawn[R][1],de_dust_bspawn[R][2]);
											SetSpawnInfo(l, t1, sk, de_dust_bspawn[R][0],de_dust_bspawn[R][1],de_dust_bspawn[R][2], de_dust_bspawn[R][3]);
											SetPlayerFacingAngle(l,de_dust_bspawn[R][3]);
											SetTimerEx("UnfreezeMe", 1000, false, "d", l);
											TogglePlayerControllable(l, false);
										}
										case 2:
										{
											SetPlayerInterior(l,1);
											R = random(sizeof(b_inferno));
											SetPlayerPos(l,b_inferno[R][0],b_inferno[R][1],b_inferno[R][2]);
											SetPlayerFacingAngle(l,b_inferno[R][3]);
											SetSpawnInfo(l, t1, sk, b_inferno[R][0],b_inferno[R][1],b_inferno[R][2], b_inferno[R][3]);
											SetTimerEx("UnfreezeMe", 1000, false, "d", l);
											TogglePlayerControllable(l, false);
										}
										case 3:
										{
											SetPlayerInterior(l, 10);
											R = random(sizeof(b_rc));
											SetPlayerPos(l,b_rc[R][0],b_rc[R][1],b_rc[R][2]);
											SetSpawnInfo(l, t1, sk, b_rc[R][0],b_rc[R][1],b_rc[R][2], b_rc[R][3]);
											SetPlayerFacingAngle(l,b_rc[R][3]);
										}
									}
									UpdateDynamic3DTextLabelText(RankLabel[l],0xEB055B66, cName[l]);
									SetPlayerVirtualWorld(l,66);
									SetPlayerTeam(l,t1);
									ResetPlayerWeapons(l);
									GivePlayerWeapon(l, WEAPON_DEAGLE, 150);
									GivePlayerWeapon(l, WEAPON_SHOTGSPA, 250);
									GivePlayerWeapon(l, WEAPON_M4, 250);
									SetPlayerHealth(l, 100.0, 100.0);
									TextDrawSetString(CW_MEMBER[i], "%s~n~_", PlayerInfo[l][Nick]);
									format(str, _, "[Replacement]: %s from %s was added to the clan war.", PlayerInfo[l][Nick], cTag[CLAN_WAR[CW_STARTER]]);
									foreach(new c : JOINED1)
									{
									    SendClientMessage(c, COLOR_YELLOW, str);
										TextDrawShowForPlayer(c, CW_MEMBER[i]);
									    TextDrawHideForPlayer(c, CW_DISCONNECT[i]);
										ShowPlayerProgressBar(c, CW_STAT_BAR[c][HPP][i]);
										ShowPlayerProgressBar(c, CW_STAT_BAR[c][ARMOURR][i]);
									}
									foreach(new c : JOINED2)
									{
									    SendClientMessage(c, COLOR_YELLOW, str);
										TextDrawShowForPlayer(c, CW_MEMBER[i]);
									    TextDrawHideForPlayer(c, CW_DISCONNECT[i]);
										ShowPlayerProgressBar(c, CW_STAT_BAR[c][HPP][i]);
										ShowPlayerProgressBar(c, CW_STAT_BAR[c][ARMOURR][i]);
									}
									foreach(new c : Player)
									{
									    if(IsSpectator[c])
										{
											SendClientMessage(c, COLOR_YELLOW, str);
											TextDrawShowForPlayer(c, CW_MEMBER[i]);
										    TextDrawHideForPlayer(c, CW_DISCONNECT[i]);
											ShowPlayerProgressBar(c, CW_STAT_BAR[c][HPP][i]);
											ShowPlayerProgressBar(c, CW_STAT_BAR[c][ARMOURR][i]);
										}
										SetPlayerProgressBarValue(c, CW_STAT_BAR[c][HPP][i], 100.00);
										SetPlayerProgressBarValue(c, CW_STAT_BAR[c][ARMOURR][i], 100.00);
									}
					            }
					        }
						}
					}
				}
			}
			continue;
		}
		foreach (new j : Player)
		{
			SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 100.00);
			SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 100.00);
		}
	}
	for(new i=0; i < maxx; i++)
	{
	    if(!IsPlayerConnected(WAR_SLOT_T2[i]))
	    {
			if(cc2 != maxx)
			{
			    foreach(new l: Player)
			    {
				    if(!IsPlayerConnected(WAR_SLOT_T2[i]))
				    {
				        if(PlayerInfo[l][InClan] == CLAN_WAR[CW_C2])
				        {
					        if(PlayerInfo[l][IsSpawned])
					        {
								if(!Iter_Contains(JOINED2, l))
						        {
									cc2++;
									Iter_Add(JOINED2, l); Iter_Add(ALIVE2, l);

									WAR_SLOT_T2[i] = l;
									WAR_SLOT_T2_AID[i] = PlayerInfo[l][AID];
									new sk;
									if(!IsValidSkin(PlayerInfo[l][cSkin])) sk = 24;
									else sk = PlayerInfo[l][cSkin];
									SetPlayerSkin(l,sk);
									SetPlayerColor(l,0x2F97FF00);
									switch(CLAN_WAR[CW_MAP])
									{
										case 1:
										{
											SetPlayerInterior(l,1);
											R = random(sizeof(de_dust_tspawn));
											SetPlayerPos(l,de_dust_tspawn[R][0],de_dust_tspawn[R][1],de_dust_tspawn[R][2]);
											SetSpawnInfo(l, t2, sk, de_dust_tspawn[R][0],de_dust_tspawn[R][1],de_dust_tspawn[R][2], de_dust_tspawn[R][3]);
											SetPlayerFacingAngle(l,de_dust_tspawn[R][3]);
											SetTimerEx("UnfreezeMe", 1000, false, "d", l);
											TogglePlayerControllable(l, false);
										}
										case 2:
										{
											SetPlayerInterior(l,1);
											R = random(sizeof(t_inferno));
											SetPlayerPos(l,t_inferno[R][0],t_inferno[R][1],t_inferno[R][2]);
											SetPlayerFacingAngle(l,t_inferno[R][3]);
											SetTimerEx("UnfreezeMe", 1000, false, "d", l);
											SetSpawnInfo(l, t2, sk, t_inferno[R][0],t_inferno[R][1],t_inferno[R][2], t_inferno[R][3]);
											TogglePlayerControllable(l, false);
										}
										case 3:
										{
											SetPlayerInterior(l, 10);
											R = random(sizeof(t_rc));
											SetPlayerPos(l,t_rc[R][0],t_rc[R][1],t_rc[R][2]);
											SetSpawnInfo(l, t2, sk, t_rc[R][0],t_rc[R][1],t_rc[R][2], t_rc[R][3]);
											SetPlayerFacingAngle(l,t_rc[R][3]);
										}
									}
									UpdateDynamic3DTextLabelText(RankLabel[l],0x2F97FF66, cName[l]);
									SetPlayerVirtualWorld(l,66);
									SetPlayerTeam(l,t2);
									ResetPlayerWeapons(l);
									GivePlayerWeapon(l, WEAPON_DEAGLE, 150);
									GivePlayerWeapon(l, WEAPON_SHOTGSPA, 250);
									GivePlayerWeapon(l, WEAPON_M4, 250);
									SetPlayerHealth(l, 100.0, 100.0);
									TextDrawSetString(CW_MEMBER_2[i], "%s~n~_", PlayerInfo[l][Nick]);
									format(str, _, "[Replacement]: %s from %s was added to the clan war.", PlayerInfo[l][Nick], cTag[CLAN_WAR[CW_ACCEPTER]]);
									foreach(new c : JOINED1)
									{
									    SendClientMessage(c, COLOR_YELLOW, str);
										TextDrawShowForPlayer(c, CW_MEMBER_2[i]);
									    TextDrawHideForPlayer(c, CW_DISCONNECT_2[i]);
										ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][HPP][i]);
										ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][ARMOURR][i]);
									}
									foreach(new c : JOINED2)
									{
									    SendClientMessage(c, COLOR_YELLOW, str);
										TextDrawShowForPlayer(c, CW_MEMBER_2[i]);
									    TextDrawHideForPlayer(c, CW_DISCONNECT_2[i]);
										ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][HPP][i]);
										ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][ARMOURR][i]);
									}
									foreach(new c : Player)
									{
									    if(IsSpectator[c])
										{
											SendClientMessage(c, COLOR_YELLOW, str);
											TextDrawShowForPlayer(c, CW_MEMBER_2[i]);
										    TextDrawHideForPlayer(c, CW_DISCONNECT_2[i]);
											ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][HPP][i]);
											ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][ARMOURR][i]);
										}
										SetPlayerProgressBarValue(c, CW_STAT_BAR_2[c][HPP][i], 100.00);
										SetPlayerProgressBarValue(c, CW_STAT_BAR_2[c][ARMOURR][i], 100.00);
									}
					            }
					        }
						}
					}
				}
			}
			continue;
		}
		foreach (new j : Player)
		{
			SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 100.00);
			SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 100.00);
		}
	}
	foreach(new x: JOINED1)
	{
		SetCameraBehindPlayer(x);
		GameTextForPlayer(x,"~r~Fight",5000,5);
		TogglePlayerControllable(x,true);
		PlayerPlaySound(x, 3200, 0,0,0);
		ResetPlayerWeapons(x);
		GivePlayerWeapon(x, WEAPON_DEAGLE, 150);
		GivePlayerWeapon(x, WEAPON_SHOTGSPA, 250);
		GivePlayerWeapon(x, WEAPON_M4, 250);
		SetPlayerHealth(x, 100.0, 100.0);
		HideMVP(x);
	}
	foreach(new x: JOINED2)
	{
		SetCameraBehindPlayer(x);
		GameTextForPlayer(x,"~r~Fight",5000,5);
		TogglePlayerControllable(x,true);
		PlayerPlaySound(x, 3200, 0,0,0);
		ResetPlayerWeapons(x);
		GivePlayerWeapon(x, WEAPON_DEAGLE, 150);
		GivePlayerWeapon(x, WEAPON_SHOTGSPA, 250);
		GivePlayerWeapon(x, WEAPON_M4, 250);
		SetPlayerHealth(x, 100.0, 100.0);
		HideMVP(x);
	}
	foreach(new j: Player)
	{
	    if(IsSpectator[j])
	    {
			PlayerPlaySound(j, 3200, 0,0,0);
			SpectateNext2(j);
			HideMVP(j);
	    }
	}
	return 1;
}

forward RefreshCWTD();
public RefreshCWTD()
{
	if(!CLAN_WAR[CW_ON] || CLAN_WAR[CW_STARTED]) return 1;
	CLAN_WAR[CW_WAIT]--;
	new c1 = Iter_Count(JOINED1), c2 = Iter_Count(JOINED2), maxx = CLAN_WAR[CW_MAX], t1 = CLAN_WAR[CW_C1], t2 = CLAN_WAR[CW_C2];
	if(CLAN_WAR[CW_WAIT] == 0)
	{
	    KillTimer(RefreshTimer);
		if(c1 < maxx || c2 < maxx)
		{
			foreach(new i : JOINED1)
			{
				for(new j = 0; j < 13; j++) TextDrawHideForPlayer(i, CW[j]);
				SendClientMessage(i, RED, "[CLAN WAR] Clan war has been canceled (time expired).");
			}
			foreach(new i : JOINED2)
			{
				for(new j = 0; j < 13; j++) TextDrawHideForPlayer(i, CW[j]);
				SendClientMessage(i, RED, "[CLAN WAR] Clan war has been canceled (time expired).");
			}
			CLAN_WAR[CW_ON] = CLAN_WAR[CW_STARTED] = false;
			Iter_Clear(JOINED1);
			Iter_Clear(JOINED2);
		}
		else
		{
			new str[150];
			new showable = CLAN_TOURNAMENT[CT_ON];
			if(showable) format(str, _, "(!) Clan Tournament match between [%s] and [%s] is starting in 1 minute, /tspec to watch!", cTag[CLAN_WAR[CW_STARTER]], cTag[CLAN_WAR[CW_ACCEPTER]]);
			else format(str, _, "(!) Clan War between [%s] and [%s] is starting in 1 minute, /tspec to watch!.", cTag[CLAN_WAR[CW_STARTER]], cTag[CLAN_WAR[CW_ACCEPTER]]);
			ct_available = true;
			SendClientMessageToAll(COLOR_YELLOW, str);
			CLAN_WAR[CW_WARMUP] = true;
			CLAN_WAR[CW_WARMUP_START] = GetTickCount();
			CWTimer1 = SetTimer("CWTimer", 1000, false);
			CWTimer2 = SetTimer("StartCWW", 60000, false);
			new bool:passs,R;
			for(new i = 0; i < maxx; i++)
			{
				foreach (new j : Player)
				{
					SetPlayerProgressBarValue(j, CW_STAT_BAR[j][HPP][i], 100.00);
					SetPlayerProgressBarValue(j, CW_STAT_BAR[j][ARMOURR][i], 100.00);
					SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][HPP][i], 100.00);
					SetPlayerProgressBarValue(j, CW_STAT_BAR_2[j][ARMOURR][i], 100.00);
				}
				foreach(new w : JOINED1)
				{
				    //if(showable)
					ShowViewersTD(w);
					passs = true;
					for(new pp=0; pp < maxx; pp++) { if(WAR_SLOT_T1[pp] == w) passs = false;}
					if(passs)
					{
					    TextDrawShowForPlayer(w, Warmup0);
					    TextDrawShowForPlayer(w, Warmup1);
					    TextDrawShowForPlayer(w, Warmup2);
						WAR_SLOT_T1[i] = w;
						WAR_SLOT_T1_AID[i] = PlayerInfo[w][AID];
						for(new j = 0; j < 13; j++) TextDrawHideForPlayer(w, CW[j]);
						SendClientMessage(w, COLOR_GREEN, "[CLAN WAR] You can now warmup and prepare for the war.");
						Iter_Add(ALIVE1, w);
						new sk;
						if(!IsValidSkin(PlayerInfo[w][cSkin])) sk = 24; 
						else sk = PlayerInfo[w][cSkin];
						SetPlayerSkin(w,sk);
						SetPlayerColor(w,0xEB055B00);
						switch(CLAN_WAR[CW_MAP])
						{
							case 1:
							{
								SetPlayerInterior(w,1);
								R = random(sizeof(de_dust_bspawn));
								SetPlayerPos(w,de_dust_bspawn[R][0],de_dust_bspawn[R][1],de_dust_bspawn[R][2]);
								SetSpawnInfo(w, t1, sk, de_dust_bspawn[R][0],de_dust_bspawn[R][1],de_dust_bspawn[R][2], de_dust_bspawn[R][3]);
								SetPlayerFacingAngle(w,de_dust_bspawn[R][3]);
								SetTimerEx("UnfreezeMe", 1000, false, "d", w);
								TogglePlayerControllable(w, false);
							}
							case 2:
							{
								SetPlayerInterior(w,1);
								R = random(sizeof(b_inferno));
								SetPlayerPos(w,b_inferno[R][0],b_inferno[R][1],b_inferno[R][2]);
								SetPlayerFacingAngle(w,b_inferno[R][3]);
								SetSpawnInfo(w, t1, sk, b_inferno[R][0],b_inferno[R][1],b_inferno[R][2], b_inferno[R][3]);
								SetTimerEx("UnfreezeMe", 1000, false, "d", w);
								TogglePlayerControllable(w, false);
							}
							case 3:
							{
								SetPlayerInterior(w, 10);
								R = random(sizeof(b_rc));
								SetPlayerPos(w,b_rc[R][0],b_rc[R][1],b_rc[R][2]);
								SetSpawnInfo(w, t1, sk, b_rc[R][0],b_rc[R][1],b_rc[R][2], b_rc[R][3]);
								SetPlayerFacingAngle(w,b_rc[R][3]);
							}
						}
						UpdateDynamic3DTextLabelText(RankLabel[w], 0xEB055B66, cName[w]);
						SetPlayerVirtualWorld(w,66);
						SetPlayerTeam(w,t1);
						ResetPlayerWeapons(w);
						GivePlayerWeapon(w, WEAPON_DEAGLE, 150);
						GivePlayerWeapon(w, WEAPON_SHOTGSPA, 250);
						GivePlayerWeapon(w, WEAPON_M4, 250);
						SetPlayerHealth(w, 100.0, 100.0);
						TextDrawSetString(CW_MEMBER[i], "%s~n~_", PlayerInfo[w][Nick]);
						break;
					}
				}
				foreach(new w: JOINED2)
				{
				    //if(showable)
					ShowViewersTD(w);
					passs = true;
					for(new pp=0; pp < maxx; pp++) {if(WAR_SLOT_T2[pp] == w) passs = false; }
					if(passs)
					{
					    TextDrawShowForPlayer(w, Warmup0);
					    TextDrawShowForPlayer(w, Warmup1);
					    TextDrawShowForPlayer(w, Warmup2);
						WAR_SLOT_T2[i] = w;
						WAR_SLOT_T2_AID[i] = PlayerInfo[w][AID];
						for(new j = 0; j < 13; j++) TextDrawHideForPlayer(w, CW[j]);
						Iter_Add(ALIVE2, w);
						SendClientMessage(w, COLOR_GREEN, "[CLAN WAR] You can now warmup and prepare for the war.");
						new sk;
						if(!IsValidSkin(PlayerInfo[w][cSkin])) sk = 24;
						else sk = PlayerInfo[w][cSkin];
						SetPlayerSkin(w,sk);
						SetPlayerColor(w,0x2F97FF00);
						switch(CLAN_WAR[CW_MAP])
						{
							case 1:
							{
								SetPlayerInterior(w,1);
								R = random(sizeof(de_dust_tspawn));
								SetPlayerPos(w,de_dust_tspawn[R][0],de_dust_tspawn[R][1],de_dust_tspawn[R][2]);
								SetSpawnInfo(w, t2, sk, de_dust_tspawn[R][0],de_dust_tspawn[R][1],de_dust_tspawn[R][2], de_dust_tspawn[R][3]);
								SetPlayerFacingAngle(w,de_dust_tspawn[R][3]);
								SetTimerEx("UnfreezeMe", 1000, false, "d", w);
								TogglePlayerControllable(w, false);
							}
							case 2:
							{
								SetPlayerInterior(w,1);
								R = random(sizeof(t_inferno));
								SetPlayerPos(w,t_inferno[R][0],t_inferno[R][1],t_inferno[R][2]);
								SetPlayerFacingAngle(w,t_inferno[R][3]);
								SetTimerEx("UnfreezeMe", 1000, false, "d", w);
								SetSpawnInfo(w, t2, sk, t_inferno[R][0],t_inferno[R][1],t_inferno[R][2], t_inferno[R][3]);
								TogglePlayerControllable(w, false);
							}
							case 3:
							{
								SetPlayerInterior(w, 10);
								R = random(sizeof(t_rc));
								SetPlayerPos(w,t_rc[R][0],t_rc[R][1],t_rc[R][2]);
								SetSpawnInfo(w, t2, sk, t_rc[R][0],t_rc[R][1],t_rc[R][2], t_rc[R][3]);
								SetPlayerFacingAngle(w,t_rc[R][3]);
							}
						}
						UpdateDynamic3DTextLabelText(RankLabel[w], 0x2F97FF66, cName[w]);
						SetPlayerVirtualWorld(w,66);
						SetPlayerTeam(w,t2);
						ResetPlayerWeapons(w);
						GivePlayerWeapon(w, WEAPON_DEAGLE, 150);
						GivePlayerWeapon(w, WEAPON_SHOTGSPA, 250);
						GivePlayerWeapon(w, WEAPON_M4, 250);
						SetPlayerHealth(w, 100.0, 100.0);
						TextDrawSetString(CW_MEMBER_2[i], "%s~n~_", PlayerInfo[w][Nick]);
						break;
					}
				}
				foreach(new c : JOINED1)
				{
					TextDrawShowForPlayer(c, CW_MEMBER[i]);
					TextDrawShowForPlayer(c, CW_MEMBER_2[i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR[c][HPP][i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR[c][ARMOURR][i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][HPP][i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][ARMOURR][i]);
				}
				foreach(new c : JOINED2)
				{
					TextDrawShowForPlayer(c, CW_MEMBER[i]);
					TextDrawShowForPlayer(c, CW_MEMBER_2[i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR[c][HPP][i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR[c][ARMOURR][i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][HPP][i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][ARMOURR][i]);
				}
				foreach(new c : Player)
				{
				    if(!IsSpectator[c]) continue;
					TextDrawShowForPlayer(c, CW_MEMBER[i]);
					TextDrawShowForPlayer(c, CW_MEMBER_2[i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR[c][HPP][i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR[c][ARMOURR][i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][HPP][i]);
					ShowPlayerProgressBar(c, CW_STAT_BAR_2[c][ARMOURR][i]);
				}
			}
			CLAN_WAR[CW_STARTED] = true;
			TextDrawSetString(CW_ROUNDS, "    Round: ~p~1~w~/~g~%d~n~~b~~h~%s~w~: 0    ~r~~h~%s~w~: 0", CLAN_WAR[CW_ROUNDSS], cTag[CLAN_WAR[CW_ACCEPTER]], cTag[CLAN_WAR[CW_STARTER]]);
			foreach(new c : JOINED1) TextDrawShowForPlayer(c, CW_ROUNDS);
			foreach(new c : JOINED2) TextDrawShowForPlayer(c, CW_ROUNDS);
		}
		return 1;
	}
	new str[240];
	if(c1 < maxx) format(str, _, "~r~UNREADY ~w~(%d/%d)", c1, maxx);
	else format(str, _, "READY ~w~(%d/%d)", c1, maxx);
	TextDrawSetString(CW[11], str);
	if(c2 < maxx) format(str, _, "~r~UNREADY ~w~(%d/%d)", c2, maxx);
	else format(str, _, "READY ~w~(%d/%d)", c2, maxx);
	TextDrawSetString(CW[12], str);
	str ="";
	foreach(new i : JOINED1)
	{
	    format(str, _, "%s%s~n~", str, PlayerInfo[i][Nick]);
	}
	TextDrawSetString(CW[9], str);
	TextDrawSetString(CW[6], "War starting in: ~r~%d", CLAN_WAR[CW_WAIT]);
	str = "";
	foreach(new i : JOINED2)
	{
	    format(str, _, "%s%s~n~", str, PlayerInfo[i][Nick]);
	}
	TextDrawSetString(CW[10], str);

	foreach(new i : JOINED1) for(new j = 0; j < 13; j++) TextDrawShowForPlayer(i, CW[j]);
	foreach(new i : JOINED2) for(new j = 0; j < 13; j++) TextDrawShowForPlayer(i, CW[j]);
	RefreshTimer = SetTimer("RefreshCWTD", 1000, false);
	return 1;
}

CMD:yes(playerid)
{
	if(IsAlive1(playerid) || IsAlive2(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(inevent[playerid] > 0) return ERR(playerid,"Please wait ! an admin will teleport you soon");
	if(PlayerInfo[playerid][cleave] == true)
	{

		cmd_cleave22(playerid);
		PlayerInfo[playerid][cleave] = false;
	}
	new x = PlayerInfo[playerid][cinvite];
	if(x != -1)
	{
		new query[150];
		mysql_format(mysql, query, sizeof(query), "SELECT `clevel`, `cmembers` FROM `clans` WHERE `cid` ='%d' LIMIT 1",x);
		mysql_pquery(mysql, query, "CheckForAccept", "id",playerid, x);
	}
	if(PlayerInfo[playerid][CWINV])
	{
		new starter = CLAN_WAR[CW_STARTER];
		PlayerInfo[playerid][CWINV] = false;
		KillTimer(cwtimer);
		AddBeforeWar(starter);
		AddBeforeWar(playerid);
		TextDrawSetString(CW[4], "%s                       vs                       %s", cTag[starter], cTag[playerid]);
		new str[128];
		switch(CLAN_WAR[CW_MAP])
		{

			case 1: str = "de dust 2";
			case 2: str = "inferno";
			case 3: str = "RC Battlefield";
		}
		TextDrawSetString(CW[5], "ROUNDS: %d~n~~n~MAX MEMBERS: %d~n~~n~Map: %s", CLAN_WAR[CW_ROUNDSS], CLAN_WAR[CW_MAX], str);
		CLAN_WAR[CW_WAIT] = CLAN_WAR[CW_MAX]*6;
		TextDrawSetString(CW[6], "War starting in: ~r~60");
		TextDrawSetString(CW[9], PlayerInfo[starter][Nick]);
		TextDrawSetString(CW[10], PlayerInfo[playerid][Nick]);
		TextDrawSetString(CW[11], "~r~UNREADY ~w~(1/10)");
		TextDrawSetString(CW[12], "~r~UNREADY ~w~(1/10)");
		for(new j = 0; j < 13; j++) TextDrawShowForPlayer(playerid, CW[j]);
		for(new j = 0; j < 13; j++) TextDrawShowForPlayer(starter, CW[j]);
		RefreshTimer = SetTimer("RefreshCWTD", 1000, false);
		SendClientMessage(playerid, -1, "Use /am to add members");
		SendClientMessage(starter, -1, "Use /am to add members");
	}
	new bet = Inviter[playerid];
	if(bet != INVALID_PLAYER_ID)
	{
	    KillTimer(FriendTimer[bet]);
		Invited[bet] = INVALID_PLAYER_ID;
		Inviter[playerid] = INVALID_PLAYER_ID;
		new str[128], idd = PlayerInfo[playerid][AID];
		strcat(str, PlayerInfo[playerid][Nick]);
		for(new i=0; i < 50; i ++)
		{
	        if(FriendID[bet][i] == -1)
	        {
            	strcopy(FriendLine[bet][i], str);
				FriendID[bet][i] = idd;
				break;
			}
		}
		SendClientMessage(bet, COLOR_YELLOW, "%s has accepted your friend request. Use /friends to check your updated friends list.", str);
		strcopy(str, PlayerInfo[bet][Nick]);
		new idd2 = PlayerInfo[bet][AID];
		for(new i=0; i < 50; i ++)
		{
	        if(FriendID[playerid][i] == -1)
	        {
            	strcopy(FriendLine[playerid][i], str);
				FriendID[playerid][i] = idd2;
				break;
			}
		}
		SendClientMessage(playerid, COLOR_YELLOW, "You have accepted %s's friend request. Use /friends to check your updated friends list.", str);
		mysql_format(mysql, str, sizeof(str), "INSERT INTO `friends` (`beta`,`alpha`) VALUES ('%d','%d')", idd2, idd);
		mysql_tquery(mysql, str);
	}
	if(PlayerInfo[playerid][Duel_I] != INVALID_PLAYER_ID)
	{
		if(!InArena(playerid, NON)) return SendClientMessage(playerid, Dred, "You cannot duel while in a DM stadium, please /qdm first.");
		if(AntiSK[playerid]) return ERR(playerid, "Cannot duel under anti spawn kill protection.");
		if(!PlayerInfo[playerid][InDuel])
		{

			new d = PlayerInfo[playerid][Duel_I];
			if(!IsPlayerConnected(d))
			{

				SendClientMessage(playerid,Dred,"* Player has left the server");
				PlayerInfo[d][Duel_P] = INVALID_PLAYER_ID;
				PlayerInfo[playerid][Duel_I] = INVALID_PLAYER_ID;
				return 1;
			}
			SendClientMessage(d,0x8080C0FF,"%s(%d) has accepted your duel request",PlayerInfo[playerid][Nick],playerid);
			SendClientMessage(playerid,0x8080C0FF,"You have accepted %s(%d) Duel request",PlayerInfo[d][Nick],d);
			SetPlayerHealth(playerid, 100.0, 99.0);
			SetPlayerHealth(PlayerInfo[playerid][Duel_I], 100.0, 99.0);
			PlayerInfo[d][InDuel] = 1;
			PlayerInfo[playerid][InDuel] = 1;
			KillTimer(PlayerInfo[d][Duel_T]);
			switch(PlayerInfo[playerid][Duel_A])
			{
			    case 0:
			    {
					SetPlayerInterior(d,16);
					SetPlayerPos(d,-1406.3654,1265.2664,1039.8672);
					SetPlayerFacingAngle(d,210.5551);
					SetPlayerInterior(playerid,16);
					SetPlayerPos(playerid,-1385.3429,1227.3176,1039.8741);
					SetPlayerFacingAngle(playerid,33.8335);
				}
				case 1:
				{
					SetPlayerInterior(d, 10);
					new R;
					R = random(sizeof(t_rc));
					SetPlayerPos(d,t_rc[R][0],t_rc[R][1],t_rc[R][2]);
					SetPlayerFacingAngle(d,t_rc[R][3]);
					SetPlayerInterior(playerid, 10);
					R = random(sizeof(b_rc));
					SetPlayerPos(playerid,b_rc[R][0],b_rc[R][1],b_rc[R][2]);
					SetPlayerFacingAngle(playerid,b_rc[R][3]);
				}
			}
			SetPlayerVirtualWorld(playerid,d);
			SetPlayerVirtualWorld(d,d);
			ResetPlayerWeapons(d); ResetPlayerWeapons(playerid);
			SetPlayerTeam(d,d);
			SetPlayerTeam(playerid,playerid);
			GivePlayerWeapon(d,PlayerInfo[d][Duel_W],300);
			GivePlayerWeapon(playerid,PlayerInfo[d][Duel_W],300);
			GameTextForPlayer(d,"~r~Duel started",6000,5);
			GameTextForPlayer(playerid,"~r~Duel started",6000,5);
			return 1;
		}
	}
	return 1;
}

forward WEAPON:GetWeaponIDFromName(const WeaponName[]);

CMD:duel(playerid,params[])
{
    if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid, "Cannot duel in PUBG event.");
	if(HasJoined(playerid)) return ERR(playerid,"You cant use this cmd in clan war");
	new id,wep[30],bet;
	if(!InArena(playerid, NON)) return SendClientMessage(playerid,Dred,"* Cannot usee this cmd in a dm stadium");
	if(PlayerInfo[playerid][JailTime] > 0) return SendClientMessage(playerid,Dred,"* You cannit use this command while in jail!");
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You are already in Duel");
	if(PlayerInfo[playerid][Duel_P] != INVALID_PLAYER_ID) return SendClientMessage(playerid,Dred,"* You have already invited someone");
	if(sscanf(params,"ds[30]d",id,wep,bet)) { SendClientMessage(playerid,Dred,"USAGE: /duel (ID) (Weaponname) (Bet$$)"); SendClientMessage(playerid, -1, "Note: you can also use /rcduel to duel in RC Battlefield"); return 1;}
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid,Dred,"Player not connected");
	if(!PlayerInfo[id][IsSpawned]) return ERR(playerid, "Target player is not spawned.");
	if(playerid == id) return SendClientMessage(playerid,Dred,"You cannot duel yourself.");
	if(!InArena(id, NON)) return SendClientMessage(playerid,Dred,"* Player is in a dm stadium");
	if(PlayerInfo[id][InDuel] == 1) return SendClientMessage(playerid,Dred,"* Player is dueling");
	if(PlayerInfo[id][Duel_I] != INVALID_PLAYER_ID) return SendClientMessage(playerid,Dred,"* Player invited by someone else");
	if(GetCash(id) < bet) return SendClientMessage(playerid,Dred,"* Player cannot afford to duel you with this bet");
	if(Iter_Contains(PUBGEvent, id)) return ERR(playerid, "This player is in PUBG event.");
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid, "Cannot duel while in PUBG event.");
	if(BD[id] == 1) return SendClientMessage(playerid,Dred,"* Player in Do Not Duel Me mod");
	new WEAPON:ix = GetWeaponIDFromName(wep);
	if(GetWeaponIDFromName(wep) == UNKNOWN_WEAPON) return SendClientMessage(playerid,Dred,"* Invalid Weapon name (desert , combat , sawn, tec-9, uzi, mp5 etc.)");
	if(ix == WEAPON_HEATSEEKER || ix == WEAPON_FLAMETHROWER || ix == WEAPON_MINIGUN || ix == WEAPON_GRENADE || ix == WEAPON_FLAMETHROWER || ix == WEAPON_FIST) return SendClientMessage(playerid,Dred,"* Invalid Weapon name (desert , combat , sawn, tec-9, uzi, mp5 etc.)");
	if(bet < 1000) return SendClientMessage(playerid,Dred,"* Bet must be greater then 1000$!");
	if(bet > 50000) return SendClientMessage(playerid,Dred,"* Maximum Bet is 50000$");
	PlayerInfo[playerid][Duel_B] = bet;
	PlayerInfo[id][Duel_B] = bet;
	PlayerInfo[playerid][Duel_A] = 0;
	PlayerInfo[id][Duel_A] = 0;
	PlayerInfo[id][Duel_I] = playerid;
	PlayerInfo[playerid][Duel_W] = ix;
	PlayerInfo[playerid][Duel_P] = id;
	SendClientMessage(playerid,0x8080C0FF,"* Duel invitation sent to %s(%d)",PlayerInfo[id][Nick],id);
	SendClientMessage(id,0x8080C0FF,"* %s(%d) has requested to duel you with weapon %s(%d) | Bet : %d$",PlayerInfo[playerid][Nick],playerid,wep,ix,bet);
	SendClientMessage(id,0x8080C0FF,"* Type /Yes to accept the duel");
	PlayerInfo[playerid][Duel_T] = SetTimerEx("DuelTimer",12000,false,"dd",playerid,id);
	return 1;
}

CMD:rcduel(playerid,params[])
{
	new id,wep[30],bet;
	if(!InArena(playerid, NON)) return SendClientMessage(playerid,Dred,"* Cannot usee this cmd in a dm stadium");
	if(HasJoined(playerid)) return ERR(playerid,"You cant use this cmd in clan war");
	if(PlayerInfo[playerid][JailTime] > 0) return SendClientMessage(playerid,Dred,"* You cannit use this command while in jail!");
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You are already in Duel");
	if(PlayerInfo[playerid][Duel_P] != INVALID_PLAYER_ID) return SendClientMessage(playerid,Dred,"* You have already invited someone");
	if(sscanf(params,"ds[30]d",id,wep,bet)) return SendClientMessage(playerid,Dred,"USAGE: /rcduel (ID) (Weaponname) (Bet$$)");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid,Dred,"Player not connected");
	if(playerid == id) return SendClientMessage(playerid,Dred,"You cannot duel yourself.");
	if(!InArena(id, NON)) return SendClientMessage(playerid,Dred,"* Player is in a dm stadium");
	if(PlayerInfo[id][InDuel] == 1) return SendClientMessage(playerid,Dred,"* Player is dueling");
	if(PlayerInfo[id][Duel_I] != INVALID_PLAYER_ID) return SendClientMessage(playerid,Dred,"* Player invited by someone else");
	if(GetCash(id) < bet) return SendClientMessage(playerid,Dred,"* Player cannot afford to duel you with this bet");
	if(Bit_Get(ToggleState[id], TOGGLE_DND)) return SendClientMessage(playerid,Dred,"* Player in DND mod");
	new WEAPON:ix = GetWeaponIDFromName(wep);
	if(GetWeaponIDFromName(wep) == UNKNOWN_WEAPON) return SendClientMessage(playerid,Dred,"* Invalid Weapon name (desert , combat , sawn, tec-9, uzi, mp5 etc.)");
	if(ix == WEAPON_HEATSEEKER || ix == WEAPON_FLAMETHROWER || ix == WEAPON_MINIGUN || ix == WEAPON_GRENADE || ix == WEAPON_TEARGAS || ix == WEAPON_FIST) return SendClientMessage(playerid,Dred,"* Invalid Weapon name (desert , combat , sawn, tec-9, uzi, mp5 etc.)");
	if(bet < 1000) return SendClientMessage(playerid,Dred,"* Bet must be greater then 1000$!");
	if(bet > 50000) return SendClientMessage(playerid,Dred,"* Maximum Bet is 50000$");
	PlayerInfo[playerid][Duel_B] = bet;
	PlayerInfo[id][Duel_B] = bet;
	PlayerInfo[playerid][Duel_A] = 1;
	PlayerInfo[id][Duel_A] = 1;
	PlayerInfo[id][Duel_I] = playerid;
	PlayerInfo[playerid][Duel_W] = ix;
	PlayerInfo[playerid][Duel_P] = id;
	SendClientMessage(playerid,0x8080C0FF,"* Duel invitation sent to %s(%d)",PlayerInfo[id][Nick],id);
	SendClientMessage(id,0x8080C0FF,"* %s(%d) has requested to duel you with weapon %s(%d) | Bet : %d$",PlayerInfo[playerid][Nick],playerid,wep,ix,bet);
	SendClientMessage(id,0x8080C0FF,"* Type /Yes to accept the duel");
	PlayerInfo[playerid][Duel_T] = SetTimerEx("DuelTimer",12000,false,"dd",playerid,id);
	return 1;
}
forward DuelTimer(playerid,duel);
public DuelTimer(playerid,duel)
{
	PlayerInfo[duel][Duel_I] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][Duel_P] = INVALID_PLAYER_ID;
	SendClientMessage(playerid,-1,"Duel request canceled");
	SendClientMessage(duel,-1,"Duel request canceled");
	return 1;
}


CMD:getteam(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3 || PlayerInfo[playerid][dRank] == 6)
	{
		new team[50],c;
		if(sscanf(params,"s[50]",team)) return SendClientMessage(playerid, RED,"USAGE: /getteam [Team Name]]");
		new Float:p[3]; GetPlayerPos(playerid,p[0],p[1],p[2]);
		SendClientMessageToAll(blue,"Administrator \"%s\" Has teleported Team %s",PlayerInfo[playerid][Nick],team);
		foreach(new i : Player)
		{
			if(strfind(GetTeamName(i),team,true) != -1)
			{
				if(inevent[i]>0)
				{
					SetPlayerPos(i,p[0],p[1],p[2]+1); SetPlayerInterior(i,GetPlayerInterior(playerid));
					SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(playerid));
					ResetPlayerWeapons(i);
					SetPlayerHealth(i, 100.0, 98.0);
				}
				c ++;
			}
		}
		if(c == 0) SendClientMessage(playerid,Dred,"* No player in this team");
		return 1;
	}
	else return 0;
}
CMD:ft(playerid,params[]) return cmd_freezeteam(playerid,params);
CMD:freezeteam(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3 || PlayerInfo[playerid][dRank] == 6)
	{
		new team[50],c;
		if(sscanf(params,"s[50]",team)) return SendClientMessage(playerid, RED,"USAGE: /Freezeteam [Team Name]]");
		SendClientMessageToAll(blue,"Administrator \"%s\" has frozen Team %s",PlayerInfo[playerid][Nick],team);
		foreach(new i : Player)
		{
			if(strfind(GetTeamName(i),team,true) != -1)
			{
				if(inevent[i]> 0)
				{
					PlayerInfo[i][Frozen] = 1;
					TogglePlayerControllable(i,false);
				}
				c ++;
			}
		}
		if(c == 0) SendClientMessage(playerid,Dred,"* No player in this team");
	}else return 0;
	return 1;
}

CMD:spawnteam(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3 || PlayerInfo[playerid][dRank] == 6)
	{
		new team[50],c;
		if(sscanf(params,"s[50]",team)) return SendClientMessage(playerid, RED,"USAGE: /Spawnteam [Team Name]]");
		new Float:p[3]; GetPlayerPos(playerid,p[0],p[1],p[2]);
		SendClientMessageToAll(blue,"Administrator \"%s\" has spawned team %s",PlayerInfo[playerid][Nick],team);
		foreach(new i : Player)
		{
			if(strfind(GetTeamName(i),team,true) != -1)
			{
				if(inevent[i] > 0) SpawnPlayer(i);
				c ++;
			}
		}
		if(c == 0) SendClientMessage(playerid,Dred,"* No player in this team");
	}else return 0;
	return 1;
}

CMD:healteam(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3 || PlayerInfo[playerid][dRank] == 6)
	{
		new team[50],c;
		if(sscanf(params,"s[50]",team)) return SendClientMessage(playerid, RED,"USAGE: /healteam [Team Name]]");
		new Float:p[3]; GetPlayerPos(playerid,p[0],p[1],p[2]);
		SendClientMessageToAll(blue,"Administrator \"%s\" Has healed Team %s",PlayerInfo[playerid][Nick],team);
		foreach(new i : Player)
		{
			if(strfind(GetTeamName(i),team,true) != -1)
			{
				SetPlayerHealth(i,100);
				c ++;
			}
		}
		if(c == 0) SendClientMessage(playerid,Dred,"* No player in this team");
	}else return 0;
	return 1;
}
CMD:armourteam(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3 || PlayerInfo[playerid][dRank] == 6)
	{
		new team[50],c;
		if(sscanf(params,"s[50]",team)) return SendClientMessage(playerid, RED,"USAGE: /armourteam [Team Name]]");
		new Float:p[3]; GetPlayerPos(playerid,p[0],p[1],p[2]);
		SendClientMessageToAll(blue,"Administrator \"%s\" Has Restored Team %s armour",PlayerInfo[playerid][Nick],team);
		foreach(new i : Player)
		{
			if(strfind(GetTeamName(i),team,true) != -1)
			{
				SetPlayerArmour(i, 98.0);
				c ++;
			}
		}
		if(c == 0) SendClientMessage(playerid,Dred,"* No player in this team");
	}else return 0;
	return 1;
}

CMD:gsteam(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3 || PlayerInfo[playerid][dRank] == 6)
	{

		new team[50],c,score;
		if(sscanf(params,"s[50]d",team,score)) return SendClientMessage(playerid, RED,"USAGE: /gsteam [Team Name] [score]");
		SendClientMessageToAll(blue,"Administrator \"%s\" Has given Team %s '%d' score",PlayerInfo[playerid][Nick],team,score);
		foreach(new i : Player)
		{

			if(strfind(GetTeamName(i),team,true) != -1)
			{

				GivePlayerScore(i,score);
				c ++;
			}
		}
		if(c == 0) SendClientMessage(playerid,Dred,"* No player in this team");
	}else return 0;
	return 1;
}
CMD:gcteam(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3 || PlayerInfo[playerid][dRank] == 6)
	{
		new team[50],c,cash;
		if(sscanf(params,"s[50]d",team,cash)) return SendClientMessage(playerid, RED,"USAGE: /gcteam [Team Name] [cash]");
		SendClientMessageToAll(blue,"Administrator \"%s\" Has given Team %s '%d$' Money",PlayerInfo[playerid][Nick],team,cash);
		foreach(new i : Player)
		{
			if(strfind(GetTeamName(i),team,true) != -1)
			{
				GiveCash(i,cash);
				c ++;
			}
		}
		if(c == 0) SendClientMessage(playerid,Dred,"* No player in this team");
		return 1;
	}else return 0;
}
CMD:eventhelp(playerid)
{
	if(PlayerInfo[playerid][Level] > 3 || PlayerInfo[playerid][dRank] == 6)
	{
		SendClientMessage(playerid,lightblue,"Event Commands");
		SendClientMessage(playerid,lightblue,"/getteam,/spawnteam,/freezeteam,/spawnteam,/gsteam,/gcteam,/healteam,/armourteam");
		SendClientMessage(playerid,lightblue,"/eventarmourall, /eventheallall, /eventfrezeall,/eventinvisinbleall,/team2spawn,/team1spawn");
		SendClientMessage(playerid,lightblue,"dmspawn,eventmenu,done,eunfreeze,endevent,startevent,eventinvisinbleall,eventarmourall,eventheallall,eventfrezeall,lockevent");
		SendClientMessage(playerid,lightblue,"NOTE: for /getteam ( only the players who joined the event will be teleported) same as /spawnteam");
		SendClientMessage(playerid,lightblue,"NOTE: to start an event type /startevent to announce the event to players so they can join by typing /yes");
		SendClientMessage(playerid,lightblue,"NOTE: To end event type /endevent");
		SendClientMessage(playerid,lightblue,"NOTE: only 4/5 events per day");
		SendClientMessage(playerid,lightblue,"NOTE: if you think you can't manage to host an event then don't start one");
		return 1;
	}else return 0;
}

CMD:r(playerid,params[]) {

	new remain = GetTickCount() - PlayerInfo[playerid][PMS];
	if(remain < 6000) return SendClientMessage(playerid,Dred,"* Please wait before using this command again");
	if(PlayerInfo[playerid][Muted]) return SendClientMessage(playerid,Dred,"* You are muted");
	if(isnull(params)) return SendClientMessage(playerid, -1, "USAGE: /r [text] to talk in team radio");
	new string[128], adminstr[144];
	new name[24];
	strcat(name, PlayerInfo[playerid][Nick]);
	format(string, _, "[R][TEAM CHAT] %s: %s , over", name, params[0]);

	format(adminstr, _, "%s[%d] in /R: %s", name, playerid, params[0]);
	if(ServerInfo[ReadPMs]) MessageTo4(grey, adminstr);
	PlayerInfo[playerid][PMS] = GetTickCount();
	new kk = gTeam[playerid];
	foreach(new i : Player) if(gTeam[i] == kk) SendClientMessage(i, 0xFF8000FF, string);
	return 1;
}

CMD:order(playerid,params[]) {
	if(PlayerInfo[playerid][Muted] == true) return SendClientMessage(playerid,Dred,"* You are muted");
	if(isnull(params)) return USG(playerid," /order [text]");
	new string[128];
	BadWord(params[0]);
	format(string, _, "*%s %s: %s",GetRankName(playerid), PlayerInfo[playerid][Nick], params[0]);
	print(string);
	new kk = gTeam[playerid];
	foreach(new i : Player) if(gTeam[i] == kk) SendClientMessage(i, lightblue, string);
	return 1;
}


CMD:myrank(playerid, params[])
{
	SendClientMessage(playerid, green, "{FFFFFF}Your current rank status is {FFFFFF}| Scores: "cgreen"%d {FFFFFF}| Rank: "cgreen"%s", GetPlayerScore(playerid), GetRankName(playerid));
	return 1;
}

CMD:sync(playerid, params[])
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(IsPlayerInAnyVehicle(playerid)) return ERR(playerid,"You cannot sync in a vehicle.");
	if(CheckNearBy(playerid) == 0) return ERR(playerid,"You cant use this command now");
	new remain = GetTickCount() - PlayerInfo[playerid][SYNCCMD];
	if(remain < 60000)
	{

		SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use this command again", (60000-remain)/1000);
		return 1;
	}
	PlayerInfo[playerid][SYNCCMD] = GetTickCount();
	SetTimerEx("Spawnie", 1000, false, "d", playerid);
	SendClientMessage(playerid, GREEN,"Trying to sync");
	return 1;
}

forward Spawnie(playerid);
public Spawnie(playerid)
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(IsPlayerInAnyVehicle(playerid)) return ERR(playerid,"You cannot sync in a vehicle.");
	if(CheckNearBy(playerid) == 0) return ERR(playerid,"You cant use this command now");
	ResetPlayerWeapons(playerid);
	for(new WEAPON_SLOT:slot; slot < MAX_WEAPON_SLOTS; slot++) GetPlayerWeaponData(playerid,slot,sWeap[playerid][slot],sAmmo[playerid][slot]);
	issync[playerid] = 1;
	GetPlayerHealth(playerid, LastHP[playerid]);
	GetPlayerArmour(playerid, LastAR[playerid]);
	GetPlayerPos(playerid, LastPos[0][playerid], LastPos[1][playerid], LastPos[2][playerid]);
	SendClientMessage(playerid, GREEN,"You have synced");
    SpawnPlayer(playerid);
	return 1;
}

CMD:site(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 0 || IsPlayerAdmin(playerid)) {
		CMDMessageToAdmins(playerid,"SITE");
		SendClientMessageToAll(0xFD01FDAA,".::Check Out Our Website:www.mw3-samp.org !::.");
		return GameTextForAll("          ~n~~n~~g~   server website:~n~~b~~>~ www.mw3-samp.org~<~",5000,3);
	} else return ERRR(playerid,1);
}
CMD:forum(playerid, params[])
{
	SendClientMessage(playerid, RED, "Server Website : www.mw3-samp.org");
	GameTextForPlayer(playerid, "~w~Server Website:~r~www.mw3-samp.org", 2500, 3);
	return 1;
}

CMD:objective(playerid, params[]) {
	SendClientMessage(playerid, BLUE, "_____________ Objectives _______________");
	SendClientMessage(playerid, -1, "                                                     ");
	SendClientMessage(playerid, -1,"         > Your Objective is to Kill Players            ");
	SendClientMessage(playerid, -1,"                 > Make killing spree            ");
	SendClientMessage(playerid, -1,"               > Win Hourly Tournaments            ");
	SendClientMessage(playerid, -1,"                   > Capture zones            ");
	SendClientMessage(playerid, -1, "                                                     ");
	SendClientMessage(playerid, GREEN, "________________________________________");
	return 1;
}
CMD:help(playerid, params[])
{
	SendClientMessage(playerid, COLOR_BLUE2, " =======================| Call Of Duty - Modern Warfare 3 Help |======================");
	SendClientMessage(playerid, COLOR_ORANGE,"=============================================================");
	SendClientMessage(playerid, red, ">> Q1.How to Rank Up? ");
	SendClientMessage(playerid, COLOR_GREEN, "<< A1.Kill Enemies, Capture zones, Compelete quests & achievements..");
	SendClientMessage(playerid, COLOR_ORANGE,"=============================================================");
	SendClientMessage(playerid, red, ">> Q2.What's Spawn Kill? ");
	SendClientMessage(playerid, COLOR_GREEN, "<< A2.Killing Some one in his base with | Rhino/Tank, hydra, Hunter,seasparow |");
	SendClientMessage(playerid, COLOR_ORANGE,"=============================================================");
	SendClientMessage(playerid, red,">> Q3.How I can Cap Areas?");
	SendClientMessage(playerid, COLOR_GREEN,"<< A3.Find Enemey Flag On Minimap and stand there for 30 seconds");
	SendClientMessage(playerid, COLOR_ORANGE,"=============================================================");
	SendClientMessage(playerid, COLOR_YELLOW, "if you have any Question or need help /pm any admin online or any moderator (/admins, /moderators)");
	return 1;
}
CMD:ch(playerid) return cmd_chelp(playerid);
CMD:chelp(playerid)
{
    ShowPlayerDialog(playerid, CHELP1_DIALOG, DIALOG_STYLE_LIST, "{FF00FB}MW3 Class Help", "Assault\n{FFE800}Sniper\nDemolisher\n{FFE800}Suicider\nMedic\n{FFE800}Pilot\nEngineer\n{FFE800}JetTrooper\nSpotter\n{FFE800}Support\nScout\n{FFE800}Spy\nRifleman\n{FFE800}Recon\nBomber\n", "info", "exit");
	return 1;
}
CHelpp(playerid, listitem)
{
	new cat[1000];
	switch(listitem)
	{
	    case 0:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Assault\n\n\t{FFDF00}Required Rank:{FFFFFF} 0");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 0");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can spawn an /armypackage.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Commando Assault\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 1750");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Spawns with a Gas Mask.");
	        strcat(cat, "\n\t>+10 damage with m4.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Assault", cat, "ok", "back");
	    }
	    case 1:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Sniper\n\n\t{FFDF00}Required Rank:{FFFFFF} 2");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 100");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Invisible on the map.");
	        strcat(cat, "\n\t{FFFFFF}>Can use /buch.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Hitman\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 3000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Ability to use night vision goggles.");
	        strcat(cat, "\n\t>+15 damage with SD Pistol.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Sniper", cat, "ok", "back");
	    }
	    case 2:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Demolisher\n\n\t{FFDF00}Required Rank:{FFFFFF} 4");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 500");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can /plantbomb (/pb).");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Demo Raze\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 3500");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Ability to destroy vehicles by planting a c4 inside them /c4");
	        strcat(cat, "\n\t**C4 would take 8 seconds to explode. (2 minutes cooldown)");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Demolisher", cat, "ok", "back");
	    }
	    case 3:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Suicider\n\n\t{FFDF00}Required Rank:{FFFFFF} 3");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 150");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can instantly explode using /suicide or 'Y' key.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Terrorist\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 2250");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Spawns with a one-time protection vest against explosions (mines-suicidals). ");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Suicider", cat, "ok", "back");
	    }
	    case 4:
	    {
	        strcat(cat, "");
	        strcat(cat, "\n{0000FF}Primary Class: Medic\n\n\t{FFDF00}Required Rank:{FFFFFF} 3");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 150");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can Heal teammates using /h [id] or aiming and using MMB(Midle mouse button).");
	        strcat(cat, "\n\t>Auto-Restores 10 HP on self every 30 seconds.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Field Medic\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 3250");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Ability to refill nearby teammates HP.");
	        strcat(cat, "\n\t>15% more armour and HP while using /mk and /ap.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Medic", cat, "ok", "back");
	    }
	    case 5:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Pilot\n\n\t{FFDF00}Required Rank:{FFFFFF} 10");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 7500");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can fly heavy air vehicles.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Fighter Pilot\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 3000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>+150 More HP on any air vehicle.");
	        strcat(cat, "\n\n");
	        strcat(cat, "");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Pilot", cat, "ok", "back");
	    }
	    case 6:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Engineer\n\n\t{FFDF00}Required Rank:{FFFFFF} 5");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 1000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can drive rhinos.");
	        strcat(cat, "\n\t> Can /placemine , /removemine.");
	        strcat(cat, "\n\t> Can /fix own vehicles.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Combat Engineer \n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 4000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>+150 More HP on Tank.");
	        strcat(cat, "\n\t>+10 damage with Standard Shotgun.");
	        strcat(cat, "\n\t>One extra landmine.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: ", cat, "ok", "back");
	    }
	    case 7:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Jet Trooper\n\n\t{FFDF00}Required Rank:{FFFFFF} 7");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 2500");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can use /jp to spawn jetpack.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Elite Jet Trooper\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 5000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Ability to use /fb (flash bang) and blind enemies.");
	        strcat(cat, "\n\t>Spawn with dual 9mms, deals +15 extra damage with those.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Jet Trooper", cat, "ok", "back");
	    }
	    case 8:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Spotter\n\n\t{FFDF00}Required Rank:{FFFFFF} 7");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 2500");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Powerful amongst weapons.");
	        strcat(cat, "\n\t>Can /locate (/lc) players.");
	        strcat(cat, "\n\t>Can /search to disable all GPS/Camouflage in range.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Spotter", cat, "ok", "back");
	    }
	    case 9:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Support\n\n\t{FFDF00}Required Rank:{FFFFFF} 8");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 3400");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>/SHeal - Support your team with a Health Pack.");
	        strcat(cat, "\n\t>/SAmmo - Support your team with a Large Ammo Pack.");
	        strcat(cat, "\n\t>/SArmour - Support your team with a Armour Pack.");
	        strcat(cat, "\n\t>/SWeaps - Support Your team mate in Range Weapons.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Defender\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 5500");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can be invisible on the map for 2 minutes using /shide.");
	        strcat(cat, "\n\t>Spawns with thermal goggles.");
	        strcat(cat, "\n\t>Can use /svest to give nearby team mates anti explosion vests.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Support", cat, "ok", "back");
	    }
	    case 10:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Scout\n\n\t{FFDF00}Required Rank:{FFFFFF} 5");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 1000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can Drive Sea Sparrow.");
	        strcat(cat, "\n\t>Can flash enemies with flashbang.");
	        strcat(cat, "\n\t>Spawns with dual sawn-offs.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Military Scout\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 2500");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Spawn with a helmet.");
	        strcat(cat, "\n\t>+100 HP on sea sparrow.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Scout", cat, "ok", "back");
	    }
	    case 11:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Spy\n\n\t{FFDF00}Required Rank:{FFFFFF} 9");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 5000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can /dis to disguise.");
	        strcat(cat, "\n\t>Can press Y or /backstab in a vehicle as passenger to stab the driver.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Assassin\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 5000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Kills the driver with a single /backstab.");
	        strcat(cat, "\n\t>+10 damage with SD Pistol.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Spy", cat, "ok", "back");
	    }
	    case 12:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Rifleman\n\n\t{FFDF00}Required Rank:{FFFFFF} 10");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 7500");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Can /placemine and /removemine.");
	        strcat(cat, "\n\t>Deals +33 damage on county rifle.");
	        strcat(cat, "\n\t>Can make headshots with country rifle.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Elite Rifleman\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 6500");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>+50 damage with country rifle");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Rifleman", cat, "ok", "back");
	    }
	    case 13:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Recon\n\n\t{FFDF00}Required Rank:{FFFFFF} 16");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 22000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Invisible on the map.");
	        strcat(cat, "\n\t>Deals extra +10 damage with the sniper rifle.");
	        strcat(cat, "\n\t>Ability to spawn /drone which can explode using spacebar.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Silent Recon\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF} 7000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Ability to purchase drones from shop.");
	        strcat(cat, "\n\t>+15 damage with mp5.");
	        strcat(cat, "\n\t>+50 HP for the drone.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Recon", cat, "ok", "back");
	    }
	    case 14:
	    {
	        strcat(cat, "\n{0000FF}Primary Class: Bomber\n\n\t{FFDF00}Required Rank:{FFFFFF} 18");
	        strcat(cat, "\n\t{FFDF00}Required Score:{FFFFFF} 30000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Powerful amongst weapons.");
	        strcat(cat, "\n\t>Can shoot explosive ammo using rifle.");
	        strcat(cat, "\n\n{0000FF}Advanced Class: Destroyer\n");
	        strcat(cat, "\n\t{FFDF00}Required XP:{FFFFFF}12000");
	        strcat(cat, "\n\t{FFDF00}Features:");
	        strcat(cat, "\n\t{FFFFFF}>Spawns with chainsaw.");
	        strcat(cat, "\n\t>Can bomb all nearby air vehicles /bas if the kill spree is more than 24.");
	        strcat(cat, "\n\t>Can shoot 5 grenades using Left ALT (LALT) with M4.");
	        strcat(cat, "\n\n");
	        ShowPlayerDialog(playerid, CHELP2_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00FB}MW3 Class Help: Bomber", cat, "ok", "back");
	    }
	}
	return 1;
}
CMD:aradio(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 5)
	{
		new link[300];
		if(sscanf(params,"s[300]",link)) return ERR(playerid,"/Aradio [ Link ] - put song / radio url ");
		foreach(new i : Player) { PlayAudioStreamForPlayer(i,link); SendClientMessage(i, red, "You are listening to the admin radio");}
		SendClientMessage(playerid,Lg,"* Use /astop to stop streaming");
	}else ERR(playerid,"You have to be level 5 to use this cmd");
	return 1;
}

CMD:pradio(playerid,params[])
{
	new link[300];
	if(sscanf(params,"s[300]",link)) return ERR(playerid,"/Pradio [ Link ] - put song / radio url ");
	PlayAudioStreamForPlayer(playerid,link);
	SendClientMessage(playerid,Lg,"* Use /pstop to stop streaming");
	return 1;
}

CMD:radio(playerid,params[])
{
	PlayAudioStreamForPlayer(playerid,"http://147.135.253.138:8000/listen.pls");
	SendClientMessage(playerid,Lg,"* Now listening to MW3 Radio, use /pstop to stop streaming");
	SendClientMessage(playerid,Lg,"* You can request songs on main chat.");
	return 1;
}

CMD:astop(playerid)
{
	if(PlayerInfo[playerid][Level] > 0 || PlayerInfo[playerid][Helper] == 1)
	{

		StopAudioStreamForPlayer(playerid);
		SendClientMessage(playerid,Lg,"Stopping Radio");
	}else return ERRR(playerid,1);
	return 1;
}
CMD:pstop(playerid)
{
	StopAudioStreamForPlayer(playerid);
	SendClientMessage(playerid,Lg,"Stopping Radio");
	return 1;
}

CMD:qdm(playerid,params[])
{
	if(!InArena(playerid, NON))
	{
		if((GetTickCount() - LastDamaged[playerid]) < 4000) return ERR(playerid,"You should not receive damage in the last 4 seconds to be able to leave.");
		PlayerInfo[playerid][Dead] = 1;
		new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
		foreach(new i : Player)
		{
		    if(i != playerid)
			{
				if(!InArena(i, NON))
			    {
					if(InArena(playerid, EDM)) SendClientMessage(i,Dred,"* %s(%d) has left Death-match stadium",nam,playerid);
					else if(InArena(playerid, MDM))  SendClientMessage(i,Dred,"* %s(%d) has left Minigun Death-match stadium",nam,playerid);
					else if(InArena(playerid, CBDM)) SendClientMessage(i,Dred,"* %s(%d) has left C-bug Death-match stadium",nam,playerid);
					else if(InArena(playerid, SDM))  SendClientMessage(i,Dred,"* %s(%d) has left Sniper Death-match stadium",nam,playerid);
					else if(InArena(playerid, HSDM)) SendClientMessage(i,Dred,"* %s(%d) has left Headshot only Death-match stadium",nam,playerid);
					else if(InArena(playerid, CHDM))  SendClientMessage(i,Dred,"* %s(%d) has left Chainsaw Death-match stadium",nam,playerid);
				}
			}
		}
		TextDrawHideForPlayer(playerid, DM_Top[0]);
		TextDrawHideForPlayer(playerid, DM_Top[1]);
		TextDrawHideForPlayer(playerid, DM_Top[2]);
		TextDrawHideForPlayer(playerid, DM_Top[3]);
		TextDrawHideForPlayer(playerid, DSDM_Top[0]);
		TextDrawHideForPlayer(playerid, DSDM_Top[1]);
		TextDrawHideForPlayer(playerid, DSDM_Top[2]);
		TextDrawHideForPlayer(playerid, DSDM_Top[3]);
		TextDrawHideForPlayer(playerid, CBDM_Top[0]);
		TextDrawHideForPlayer(playerid, CBDM_Top[1]);
		TextDrawHideForPlayer(playerid, CBDM_Top[2]);
		TextDrawHideForPlayer(playerid, CBDM_Top[3]);
		ResetPlayerWeapons(playerid);
		for(new j =0; j < MAX_ARENAS; j++)
		{
			if(InArena(playerid, j))
			{
				Iter_Remove(ARENA[j], playerid);
				break;
			}
		}
		Iter_Add(ARENA[NON], playerid);
		SetPlayerArmour(playerid, 0.0);
		SpawnPlayer(playerid);
	}else SendClientMessage(playerid,Dred,"* You are not in death-match");
	return 1;
}
GetDuty()
{
	new T;
	foreach(new i : Player) if(PlayerInfo[i][OnDuty]) T ++;
	return T;
}

GetMaxPl()
{
	new c = Iter_Count(Player);
	return c;
}
CMD:mk(playerid) return cmd_medkit(playerid);
CMD:medkit(playerid)
{
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You cannot use this command while in a duel!");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid,"This command cannot be used in PUBG event.");
	if(PlayerInfo[playerid][MedKit] == 0) return SendClientMessage(playerid,Dred,"* You don't have any medic kits !");
	new remain = GetTickCount() - PlayerInfo[playerid][MKCMD];
	if(remain < 60000)
	{

		SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use this command again", (60000-remain)/1000);
		return 1;
	}
	new Float:HP;
	GetPlayerHealth(playerid,HP);
	if(HP > 99) return SendClientMessage(playerid,Dred,"* You already have full health !");
	PlayerInfo[playerid][MKCMD] = GetTickCount();
	PlayerInfo[playerid][MedKit] --;
	new string[75];
	format(string, _, "MEDKIT: %s(%d) has refilled his health with /mk", PlayerInfo[playerid][Nick], playerid);
	SetPlayerChatBubble(playerid,"I used Medic Kit",Lg,50,12000);
	MessageToAdmins(grey,string);
	if(gClass[playerid] == MEDIC)
	{

		if(Bit_Get(ClassUpgrade[playerid], A_MEDIC))
		{

			SetPlayerHealth(playerid,HP+28.75);
			SendClientMessage(playerid,Lg,"* Medic kit used ! + 28.75 HP");
			return 1;
		}
	}
	SetPlayerHealth(playerid,HP+25);
	SendClientMessage(playerid,Lg,"* Medic kit used ! + 25.0 HP");
	return 1;
}

CMD:ap(playerid) return cmd_armourpack(playerid);
CMD:armourpack(playerid)
{
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You cannot use this command while in a duel!");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid,"This command cannot be used in PUBG event.");
	if(PlayerInfo[playerid][ArmourP] == 0) return SendClientMessage(playerid,Dred,"* You don't have any Armour packs !");
	new remain = GetTickCount() - PlayerInfo[playerid][APCMD];
	if(remain < 60000)
	{

		SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use this command again", (60000-remain)/1000);
		return 1;
	}
	new Float:HP;
	GetPlayerArmour(playerid,HP);
	if(HP > 99) return SendClientMessage(playerid,Dred,"* You already have full Armour !");
	PlayerInfo[playerid][ArmourP] --;
	PlayerInfo[playerid][APCMD] = GetTickCount();
	new string[76];
	format(string, _, "AP PACK: %s(%d) has refilled his armour with /ap", PlayerInfo[playerid][Nick], playerid);
	MessageToAdmins(grey,string);
	SetPlayerChatBubble(playerid,"I used Armour pack",Lg,50,12000);
	if(gClass[playerid] == MEDIC)
	{

		if(Bit_Get(ClassUpgrade[playerid], A_MEDIC))
		{

			SetPlayerArmour(playerid, HP + 28.75);
			SendClientMessage(playerid,Lg,"* Armour pack used ! + 28.75 Armour");
			return 1;
		}
	}
	SetPlayerArmour(playerid, HP + 25.0);
	SendClientMessage(playerid,Lg,"* Armour pack used ! + 25 Armour");
	return 1;
}

CMD:total(playerid,params[])
{
	new string[700];
	format(string, _, "{00FF00}Eurasia: {FFFFFF}%d Players\n", GetTeamCount(TEAM_EURASIA));
	format(string, _, "%s{0080C0}Usa:{FFFFFF} %d Players\n", string, GetTeamCount(TEAM_USA));
	format(string, _, "%s{FF8000}Arabia:{FFFFFF} %d Players\n", string, GetTeamCount(TEAM_ARAB));
	format(string, _, "%s{972FFF}Australia: {FFFFFF} %d Players\n", string, GetTeamCount(TEAM_AUS));
	format(string, _, "%s{FF3333}Soviet: {FFFFFF} %d Players\n", string, GetTeamCount(TEAM_SOVIET));
	format(string, _, "%s{03FCFC}Brazil: {FFFFFF} %d Players\n", string, GetTeamCount(TEAM_CH));
	format(string, _, "%s{008040}Taliban {FFFFFF} %d Players\n", string, GetTeamCount(TEAM_ID));
	format(string, _, "%s{923E34}France: {FFFFFF} %d Players\n\n\n\n", string, GetTeamCount(TEAM_FRANCE));
	format(string, _, "%s{FFFFFF}Mercenary: {FFFFFF} %d Players\n\n\n\n", string, GetTeamCount(TEAM_MERC));
	format(string, _, "%s{FF5600}DM Stadium: {FFFFFF} %d Players \n",DmCount());
	format(string, _, "%s{FF5600}C-Bug DM Stadium: {FFFFFF} %d Players\n",CDmCount());
	format(string, _, "%s{FF5600}Minigun DM: {FFFFFF} %d Players\n",MDmCount());
	format(string, _, "%s{FF5600}Headshot DM: {FFFFFF} %d Players\n",HSDmCount());
	format(string, _, "%s{FF5600}Chainsaw DM: {FFFFFF} %d Players\n",CHDmCount());
	format(string, _, "%s{FF5600}Sniper DM Stadium: {FFFFFF} %d Players\n",sDmCount());
	format(string, _, "%s{FF0000}On-Duty Admins: {FFFFFF} %d Players\n\n\n\n", string, GetDuty());
	format(string, _, "%s{00FF00}Total Online Players: {FFFFFF} %d Players", string, GetMaxPl());
	ShowPlayerDialog(playerid, 254, DIALOG_STYLE_MSGBOX, "{DE0000}Total Players", string, "Close", "");
	return 1;
}

CMD:ss(playerid) return cmd_spawnplace(playerid);
CMD:spawnplace(playerid)
{
	if(gTeam[playerid] == TEAM_MERC) return SendClientMessage(playerid,Dred,"* Mercenaries have got no base.");
	new Cat[868];
	strcat(Cat, "BASE\n");
	for(new x =0; x < MAX_ZONES; x++)
	{
		if(tCP[x] == GetPlayerTeam(playerid))
		{
			format(Cat, _, "%s{00F400}%s\n", Cat, ZName(x));
		} else format(Cat, _, "%s{FF0000}%s\n", Cat, ZName(x));
	}
	if(CBaseOwnershipCheck(playerid))
	{
		strcat(Cat, "{80FF00}Clan Base\n");
	}
	ShowPlayerDialog(playerid, 2336, DIALOG_STYLE_LIST, "Select Spawn", Cat, "Select", "cancel");
	return 1;
}
CMD:zones(playerid)
{
    new Cat[500];
	for(new x =0; x < MAX_ZONES; x++)
	{
		format(Cat, _, "%s%s\n", Cat, ZName(x));
	}
	ShowPlayerDialog(playerid, FINDZONE_DIALOG, DIALOG_STYLE_LIST, "Find Any Capturable Zone", Cat, "Locate", "Cancel");
	return 1;
}
GetVehDriver(veh)
{
	foreach(new i : Player) if(IsPlayerInVehicle(i,veh)) if(GetPlayerVehicleSeat(i) == 0) return i;
	return -1;
}
CMD:plantbomb(playerid)
{
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid, Dred, "Error: You cannot use this cmd while dueling someone.");
	if(PlayerInfo[playerid][Dead] == 1) return ERR(playerid, "You cannot plant bombs when you're dead.");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	if(gClass[playerid] == DEMOLISHER)
	{

		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,Dred,"|ERROR:| You can't plant bombs inside a vehicle");
		new remain = GetTickCount() - PlayerInfo[playerid][BOMBCMD];
		if(remain < 120000)
		{

			SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use this command again", (120000-remain)/1000);
			return 1;
		}
		for(new i=0; i< sizeof ZonesCapturePos; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 40.00,ZonesCapturePos[i][0],ZonesCapturePos[i][1],ZonesCapturePos[i][2])) return ERR(playerid,"You cannot plant bombs inside/near Capturable Zones.");
		}
		if(Planted[playerid] == 0)
		{

			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, false, false, false, false, 1000, SYNC_ALL);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			PlayerInfo[playerid][BOMBCMD] = GetTickCount();
			Planted[playerid] = 1;
			Bombb[playerid] = CreateDynamicObject(1252, X, Y, Z, 0.0, 0.0, 96.0);
			Bombf[playerid][0] = X, Bombf[playerid][1] = Y, Bombf[playerid][2] = Z;
		}
		else SendClientMessage(playerid,red,"You have planted a bomb already. Detonate it first!");
	}
	else SendClientMessage(playerid,red,"Only Demolishers can plant bombs!");
	return 1;
}
CMD:c4(playerid)
{
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid, Dred, "Error: You cannot use this cmd while dueling someone.");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	if(gClass[playerid] == DEMOLISHER)
	{

		if(Bit_Get(ClassUpgrade[playerid], A_DEMOLISHER))
		{

			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,Dred,"|ERROR:| You should plant the c4 inside the vehicle!");
			new remain = GetTickCount() - PlayerInfo[playerid][BOMBCMD];
			if(remain < 120000)
			{

				SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use this command again", (120000-remain)/1000);
				return 1;
			}
			if(C4Planted[playerid] == 0)
			{

				PlayerInfo[playerid][C4CMD] = GetTickCount();
				C4Planted[playerid] = 1;
				new vehicleid = GetPlayerVehicleID(playerid);
				VehicleBomber[vehicleid] = playerid;
				VehicleBombTimer[playerid] = SetTimerEx("C4Vehicle", 8000, false, "dd", playerid, vehicleid);
			}
			else SendClientMessage(playerid,red,"You have already planted a c4.");
		}
	}
	else SendClientMessage(playerid,red,"Only Demo Razes can plant C4!");
	return 1;
}

forward C4Vehicle(playerid, vehicleid);
public C4Vehicle(playerid, vehicleid)
{
	C4Planted[playerid] = 0;
	VehicleBomber[vehicleid] = -1;
	new Float:xx,Float:yy,Float:zz, tt = gTeam[playerid], kk = cPerk[playerid][P_MONEY];
	GetVehiclePos(vehicleid,xx,yy,zz);
	CreateExplosion(xx,yy,zz,6,10);
	new x = PlayerInfo[playerid][InClan];
	foreach(new i : Player)
	{
        if(x != -1) if(PlayerInfo[i][InClan] == x) continue;
		if(IsPlayerInVehicle(i, vehicleid))
		{

			if(i == playerid) SetPlayerHealth(playerid, 0.00);
			else
			{

				if(tt != gTeam[i])
				{

					SendClientMessage(playerid,green," Good job you killed %s(%d) + 2 score & 3000",PlayerInfo[i][Nick],i);
					if(kk > 0)
					{

						SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the kill money.");
						GiveCash(playerid,3000);
					}
					if(cPerk[i][P_DEATH] == 0)
					{

						SendClientMessage(i,Dred,"[DEATH] You have been killed by a Demo Raze C4 you lost $500.");
						if(GetCash(i) > 600) GiveCash(i,-500);
					}else SendClientMessage(i, COLOR_YELLOW,"[Clan Perk] You did not lose cash after your death.");
					SetPlayerScore(playerid,GetPlayerScore(playerid)+2);
					GiveCash(playerid,3000);
					SetPlayerHealth(i,0);
					SendDeathMessage(playerid,i,51);
					Streak[i] = 0;
					if(x != -1)
					{
						new str[128],rnn;
						rnn = random(1500);
						format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, PlayerInfo[playerid][Nick]);
						ConnectKills[playerid] ++;
						ClanMSG(x,str);
						foreach(new j : Player) if(x == PlayerInfo[j][InClan]) GiveCash(j,rnn);
					}
					SUIKILL[playerid] ++;
					if(SUIKILL[playerid] == 5)
					{
						if(x > -1)
						{

							SUIKILL[playerid] = 0;
							AddClanPoints(playerid, 6);
						}
					}
				}
			}
		}
	}
	return 1;
}

CMD:drone(playerid)
{
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid, Dred, "Error: You cannot use this cmd while dueling someone.");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	if(gClass[playerid] == RECON)
	{

		new remain = GetTickCount() - PlayerInfo[playerid][DRONECMD];
		if(remain < 200000)
		{

			SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use this command again", (200000-remain)/1000);
			return 1;
		}
		if(InDrone[playerid]) return SendClientMessage(playerid,red,"You are already using the drone!");
		if(Drones[playerid] == 0)  return SendClientMessage(playerid,red,"You do not have any remaining drones.");
		InDrone[playerid] = true;
	 	Drones[playerid] --;
		CarSpawner(playerid,501);
		for(new WEAPON_SLOT:slot; slot < MAX_WEAPON_SLOTS; slot++) GetPlayerWeaponData(playerid,slot,sWeap[playerid][slot],sAmmo[playerid][slot]);
		PlayerInfo[playerid][DRONECMD] = GetTickCount();
		GetPlayerHealth(playerid, LastHP[playerid]);
		GetPlayerArmour(playerid, LastAR[playerid]);
		GetPlayerPos(playerid, LastPos[0][playerid], LastPos[1][playerid], LastPos[2][playerid]);
	}
	else SendClientMessage(playerid,red,"Only Recon can use drones!");
	return 1;
}
CMD:detonate(playerid)
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(gClass[playerid] != DEMOLISHER) return SendClientMessage(playerid,red,"You are not a demolisher!");
	if(Planted[playerid] == 0) return SendClientMessage(playerid,red,"No bomb has been planted");
	new Float:X, Float:Y, Float:Z;
	X = Bombf[playerid][0], Y = Bombf[playerid][1], Z = Bombf[playerid][2];
	CreateExplosionForPlayer(playerid, X, Y, Z, 0, 30.0);
	new mm = GetPlayerTeam(playerid), x = PlayerInfo[playerid][InClan];
	foreach(new i : Player)
	{
		if(i != playerid)
		{
			if(GetPlayerTeam(i) != mm)
			{
				if(!PlayerInfo[i][OnDuty])
				{
				    if(PlayerInfo[i][IsSpawned])
				    {
	                    if(x != -1) if(PlayerInfo[i][InClan] == x) continue;
						if (IsPlayerInRangeOfPoint(i, 12.0, X,Y,Z))
						{
							if(suiciderprotect[i])
							{
								suiciderprotect[i] = false;
								SendClientMessage(i, COLOR_YELLOW, "Your vest saved you from a detonation");
								continue;
							}
							CreateExplosionForPlayer(i, X, Y, Z, 0, 30.0);
							SetPlayerHealth(i,0);
							SendDeathMessage(playerid, i, 51);
							PlayAudioStreamForPlayer(i, "http://bit.ly/2FbYKmV");
							if(x != -1)
							{
								new str[256],rnn;
								rnn = random(1500);
								format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, PlayerInfo[playerid][Nick]);
								ConnectKills[playerid] ++;
								ClanMSG(x, str);
								foreach(new j : Player) if(x == PlayerInfo[j][InClan]) GiveCash(j,rnn);
							}
							DetonateKills[playerid] ++;
							if(QuestContent[2] == CONTENT_DETONATE)
							{
								QuestProgress[playerid][2] ++;
							    if(DetonateKills[playerid] == 21)
							    {
							    	if(!Bit_Get(QuestDone[playerid], 2))
							    	{
							    	    Bit_Let(QuestDone[playerid], 2);
							    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 3 and got $50k & 100XP.");
							    	    TextDrawHideForPlayer(playerid,Quest[2]);
							    	    PlayerInfo[playerid][XP] += 100;
							    	    GiveCash(playerid, 50000);
							    	}
								}
							}
							SendClientMessage(playerid,Lg, "You killed %s with a bomb, so you get 1 score.", PlayerInfo[i][Nick]);
							SetPlayerScore(playerid,GetPlayerScore(playerid)+1);
							PlayerInfo[playerid][Kills]++;
							Streak[playerid]++;
						}
					}
				}
			}
		}
	}
	DestroyDynamicObject(Bombb[playerid]);
	Bombb[playerid] = -1;
	Planted[playerid] = 0;
	return 1;
}

CMD:bas(playerid)
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(gClass[playerid] != BOMBER || !Bit_Get(ClassUpgrade[playerid], A_BOMBER)) return SendClientMessage(playerid,red,"You are not a Destroyer!");
	if(Streak[playerid] < 25) return ERR(playerid,"You got to have at least a 25 kills spree.");
	if(UsedBAS[playerid]) return ERR(playerid,"Only one /bas per spawn.");
	new Float:X,Float:Y,Float:Z, pd = GetPlayerTeam(playerid);
	GetPlayerPos(playerid,X,Y,Z);
	new count, x = PlayerInfo[playerid][InClan];
	foreach(new i : Player)
	{

		if(i != playerid)
		{

			if(GetPlayerTeam(i) != pd)
			{

				if(!PlayerInfo[i][OnDuty])
				{
                    if(x != -1) if(PlayerInfo[i][InClan] == x) continue;
					if (IsPlayerInRangeOfPoint(i, 100.0, X,Y,Z))
					{
						if(suiciderprotect[i])
						{
							suiciderprotect[i] = false;
							SendClientMessage(i, COLOR_YELLOW, "Your vest saved you from a detonation");
							continue;
						}
						if(!IsPlayerInAnyVehicle(i)) continue;
						new vehicleid = GetPlayerVehicleID(i);
						new mod=GetVehicleModel(vehicleid);
						if(mod == 460 || mod == 476 || mod == 511 || mod == 512 || mod == 513 || mod == 519 || mod == 520 || mod == 553 || mod == 577 || mod == 592 || mod == 593 || mod == 417 || mod == 425 || mod == 469 || mod == 487 || mod == 488 || mod == 497 || mod == 548 || mod == 563)
						{
							UsedBAS[playerid] = true;
							new Float:xx,Float:yy,Float:zz;
							GetPlayerPos(i, xx,yy,zz);
							count++;
							CreateExplosionForPlayer(i, xx, yy, zz, 0, 30.0);
							SetVehicleHealth(vehicleid, 0);
							SendDeathMessage(playerid, i, 51);
       						if(x != -1)
							{
								new str[128],rnn;
								rnn = random(1500);
								format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, PlayerInfo[playerid][Nick]);
								ConnectKills[playerid] ++;
								ClanMSG(x, str);
								foreach(new j : Player) if(x == PlayerInfo[j][InClan]) GiveCash(j,rnn);
							}
							SendClientMessage(playerid, Lg, "Got 1 score for killing %s with your Destroyer airstrike.", PlayerInfo[i][Nick]);
							SetPlayerScore(playerid,GetPlayerScore(playerid)+1);
							PlayerInfo[playerid][Kills]++;
							Streak[playerid]++;
							GameTextForPlayer(i, "Airstricken by a Destroyer!", 3000, 3);
						}
					}
				}
			}
		}
	}
	if(!count) return SendClientMessage(playerid, -1, "You did not get any kill, you can use /bas again.");
	return 1;
}
CMD:backstab(playerid)
{
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(gClass[playerid] == AG)
	{

		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,red,"ERROR: You need to be in vehicle to use this command");
		if(GetPlayerVehicleSeat(playerid) == 0) return SendClientMessage(playerid,red,"ERROR: You need to be passanger ");
		new remain = GetTickCount() - PlayerInfo[playerid][stabb];
		if(remain < 3000) return 1;
		new id = GetVehDriver(GetPlayerVehicleID(playerid));
		if(id == -1) return SendClientMessage(playerid,red,"ERROR: No driver in the vehicle");
		if(GetPlayerTeam(id) == GetPlayerTeam(playerid)) return SendClientMessage(playerid,red,"You can't Backstab your teammates");
		if(PlayerInfo[id][OnDuty]) return SendClientMessage(playerid,red,"You can't Backstab on duty admins");
		new x = PlayerInfo[playerid][InClan];
		if(x != -1) if(PlayerInfo[id][InClan] == x) return ERR(playerid, "You can't stab your clan members");
		new Float:HP;
		GetPlayerHealth(id,HP);
		PlayerInfo[playerid][stabb] = GetTickCount();
		if(HP < 18 || Bit_Get(ClassUpgrade[playerid], A_SPY))
		{
			new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
			SendDeathMessage(playerid,id,4);
			SendClientMessage(playerid,-1,"{80FF00}[KILL] {FFFFFF}You killed {80FF00}%s(%d){FFFFFF} and earned 1 score with $2100. Good Work!",PlayerInfo[id][Nick],id);
			if(cPerk[playerid][P_MONEY] > 0)
			{

				SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the kill money.");
				GiveCash(playerid,2100);
			}
			if(x != -1)
			{
				new str[256],rnn;
				rnn = random(1500);
				format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, nam);
				ConnectKills[playerid] ++;
				ClanMSG(x,str);
				foreach(new j : Player) if(x == PlayerInfo[j][InClan]) GiveCash(j,rnn);
			}
			GiveCash(playerid,2100);
			SendClientMessage(id,-1,"{FF8000}[DEATH] {FFFFFF}You have been stabbed to death by {FF8000}%s(%d){FFFFFF} and lost $2100 !",nam,playerid);
			GiveCash(id,-2100);
			Backstabs[playerid] ++;
			if(QuestContent[2] == CONTENT_BACKSTAB)
			{
			    QuestProgress[playerid][2] ++;
			    if(Backstabs[playerid] == 50)
			    {
			    	if(!Bit_Get(QuestDone[playerid], 2))
			    	{
			    	    Bit_Let(QuestDone[playerid], 2);
			    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 3 and got $50k & 100XP.");
			    	    TextDrawHideForPlayer(playerid,Quest[2]);
			    	    PlayerInfo[playerid][XP] += 100;
			    	    GiveCash(playerid, 50000);
			    	}
				}
			}
			SetPlayerScore(playerid,GetPlayerScore(playerid)+1);
			SetPlayerHealth(id,0);
			Streak[playerid] ++;
			GameTextForPlayer(id,"~w~killed by ~r~~h~spy",3000,0);

		}else
		{

			SetPlayerHealth(id,HP-17);
			PlayerPlaySound(playerid,1130,0,0,0);
			GameTextForPlayer(playerid,"~g~stabbed",6000,3);
		}


	}else SendClientMessage(playerid,red,"ERROR: You need to be spy to use this command");
	return 1;
}

CMD:dis(playerid, params[])
{
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(gClass[playerid] == AG) {
	    new tm = gTeam[playerid];
	    if(IsPlayerInArea(playerid, BASERAPE[tm][MinXX], BASERAPE[tm][MinYY], BASERAPE[tm][MaxXX], BASERAPE[tm][MaxYY])) return ERR(playerid, "Cannot disguise in base.");
		if(Dkits[playerid] != 0) {
			ShowPlayerDialog(playerid, 1541, DIALOG_STYLE_LIST, "Disguise","Usa\nEurasia\nArabia\nSoviet\nAustraillia\nFrance\nBrazil\nTaliban","Select","Back");
		} else return ERR(playerid," You dont have anymore disguise kits.");
	} else return ERR(playerid," You need to be spy to use this command.");
	return 1;
}

CMD:undis(playerid)
{
    if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(gClass[playerid] != AG) return ERR(playerid," You need to be spy to use this command.");
	new kk = gTeam[playerid];
	if(GetPlayerSkin(playerid) != TEAMDATA[kk][skinid])
	{
	    SetPlayerSkin(playerid, TEAMDATA[kk][skinid]);
		SetPlayerColor(playerid, TEAMDATA[kk][Color]);
		UpdateLabelText(playerid);
	} else return ERR(playerid, "You are not disguised.");
	return 1;
}

CMD:disguise(playerid,params[]) {
	return cmd_dis(playerid, params);
}

CMD:undisguise(playerid) {
	return cmd_undis(playerid);
}


CMD:jp(playerid,params[])
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You cannot use this command while in a duel!");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	new remain = GetTickCount() - PlayerInfo[playerid][JP_CMD];
	if( remain < 120000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use this command again", (120000 - remain) / 1000);
		return 1;
	}
	PlayerInfo[playerid][JP_CMD] = GetTickCount();
	if(gClass[playerid] == JET)
	{

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
		SendClientMessage(playerid,blue,"JetPack Spawned.");
	}
	else ERR(playerid," You need to be JetTrooper Class.");
	return 1;
}

CMD:shelp(playerid,params[]) {
	if(gClass[playerid] == SP)
	{

		SendClientMessage(playerid,yellow,"Supporter Help:");
		SendClientMessage(playerid,blue,"/SHeal - Support your team with a Health Pack.");
		SendClientMessage(playerid,blue,"/SAmmo - Support your team with a Large Ammo Pack.");
		SendClientMessage(playerid,blue,"/SArmour - Support your team with a Armour Pack.");
		SendClientMessage(playerid,blue,"/SWeaps - Support Your team mate in Range Weapons.");
		if(Bit_Get(ClassUpgrade[playerid], A_SP))
		{

			SendClientMessage(playerid,blue,"DEFENDER: /svest - Support your team with an anti-explosions Vest.");
			SendClientMessage(playerid,blue,"DEFENDER: /shide - Hide on map for 2 minutes.");
		}
	}else ERR(playerid," Your Must Be Support Class.");
	return 1;
}
CMD:sammo(playerid,params[])
{
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid, Dred, "Error: You cannot use this cmd while dueling someone.");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	new remain = GetTickCount() - PlayerInfo[playerid][SAMMO_CMD];
	if( remain < 120000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use this command again", (120000 - remain) / 1000);
		return 1;
	}
	PlayerInfo[playerid][SAMMO_CMD] = GetTickCount();
	if(gClass[playerid] == SP)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SendClientMessage(playerid,blue,"Support Ammo Package.");
		new kk = gTeam[playerid];
		foreach(new i : Player) if(IsPlayerInRangeOfPoint(i,8.0, x, y, z) ) if(gTeam[i] == kk) GiveAmmo(i);
		SetPlayerChatBubble(playerid,"SUPPORTER: I used /sammo",Lg,50,5000);
	}else return ERR(playerid," You need to be in support class.");
	return 1;
}
CMD:sweaps(playerid,params[])
{
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid, Dred, "Error: You cannot use this cmd while dueling someone.");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	new remain = GetTickCount() - PlayerInfo[playerid][SWEAPS_CMD];
	if( remain < 300000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use this command again", (300000 - remain) / 1000);
		return 1;
	}
	PlayerInfo[playerid][SWEAPS_CMD] = GetTickCount();
	if(gClass[playerid] == SP)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SendClientMessage(playerid,blue,"Supported Weapons.");
		new kk = gTeam[playerid];
		foreach(new i : Player)
		{

			if(IsPlayerInRangeOfPoint(i,5.0, x, y, z))
			{

				if(kk == gTeam[i]){
					GivePlayerWeapon(i, WEAPON_DEAGLE, 50);
					GivePlayerWeapon(i, WEAPON_SHOTGSPA, 50);
					GivePlayerWeapon(i, WEAPON_TEC9, 50);
					GivePlayerWeapon(i, WEAPON_POOLSTICK, 2);
					SendClientMessage(i,blue,"Support Weapons Recieved.");
					if(IsPlayerInAnyVehicle(i)) SetPlayerArmedWeapon(i, WEAPON_FIST);
				}
			}
		}
		SetPlayerChatBubble(playerid,"SUPPORTER: I used /sweaps",Lg,50,5000);
	} else return ERR(playerid," You need to be in support class.");
	return 1;
}
CMD:sa(playerid) return cmd_sarmour(playerid);
CMD:sarmour(playerid)
{
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You cannot use this command while in a duel!");
	if(HasJoined(playerid)) return ERR(playerid,"This command is disabled in a clan war");
	if(inevent[playerid] > 0) return ERR(playerid,"You cannot use this command in an event.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use that feature in DM stadiums!");
	new remain = GetTickCount() - PlayerInfo[playerid][SARMOUR_CMD];
	if( remain < 300000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use this command again", (300000 - remain) / 1000);
		return 1;
	}
	PlayerInfo[playerid][SARMOUR_CMD] = GetTickCount();
	if(gClass[playerid] == SP)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		new kk = gTeam[playerid];
		SendClientMessage(playerid,blue,"Support Armour Package.");
		foreach(new i : Player)
		{

			if(IsPlayerInRangeOfPoint(i,5.0, x, y, z))
			{

				if(kk == gTeam[i])
				{

					SetPlayerArmour(i, 100.0);
					SendClientMessage(i,blue,"Support Armour Package Recieved.");
				}
			}
		}
		SetPlayerChatBubble(playerid,"SUPPORTER: I used /sarmour",Lg,50,5000);
	}else return ERR(playerid," You need to be in support class.");
	return 1;
}
CMD:sh(playerid) return cmd_sheal(playerid);
CMD:sheal(playerid)
{
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid, Dred, "Error: You cannot use this cmd while dueling someone.");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	new remain = GetTickCount() - PlayerInfo[playerid][SHEAL_CMD];
	if( remain < 300000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use this command again", (300000 - remain) / 1000);
		return 1;
	}
	PlayerInfo[playerid][SHEAL_CMD] = GetTickCount();
	if(gClass[playerid] == SP)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SendClientMessage(playerid,blue,"Support Health Package.");
		new kk = gTeam[playerid];
		foreach(new i: Player)
		{

			if(IsPlayerInRangeOfPoint(i,5.0, x, y, z) )
			{

				if(gTeam[i] == kk) {
					SetPlayerHealth(i,100);
					SendClientMessage(playerid,blue,"Support health package recieved."); }
			}
		}
		SetPlayerChatBubble(playerid,"SUPPORTER: I used /sheal",Lg,50,5000);
	} else return ERR(playerid," You need to be in support class.");
	return 1;
}

CMD:shide(playerid)
{
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid, Dred, "Error: You cannot use this cmd while dueling someone.");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	if(gClass[playerid] == SP)
	{

		if(!Bit_Get(ClassUpgrade[playerid], A_SP)) return ERR(playerid, "You need to be a Defender to use this cmd.");
		new remain = GetTickCount() - PlayerInfo[playerid][SHIDECMD];
		if(remain < 300000) return SendClientMessage(playerid,Dred,"|ERROR:| You must wait 5 minutes each time you use this cmd!");
		PlayerInfo[playerid][SHIDECMD] = GetTickCount();
		SetTimerEx("ShideOff",120000, false, "d", playerid);
		switch(gTeam[playerid])
		{

			case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
			case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
			case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
			case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
			case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
			case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
			case TEAM_ID: SetPlayerColor(playerid,0x00804000);
			case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
		}
		SendClientMessage(playerid,Dred,"[SHIDE] Hidden on map for 2 minutes.");
	}
	return 1;
}

forward ShideOff(playerid);
public ShideOff(playerid)
{
	GetTeamColor(playerid);
	SendClientMessage(playerid,Dred,"* You are now visible on the map again.");
	return 1;
}

CMD:svest(playerid)
{
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid, Dred, "Error: You cannot use this cmd while dueling someone.");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	new remain = GetTickCount() - PlayerInfo[playerid][SVEST_CMD];
	if( remain < 300000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use this command again", (300000 - remain) / 1000);
		return 1;
	}
	if(gClass[playerid] == SP)
	{

		if(!Bit_Get(ClassUpgrade[playerid], A_SP)) return ERR(playerid, "You need to be a Defender to use this cmd.");
		PlayerInfo[playerid][SVEST_CMD] = GetTickCount();
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SendClientMessage(playerid,blue,"Support anti explosion Vest.");
		new kk = gTeam[playerid];
		foreach(new i: Player)
		{

			if(IsPlayerInRangeOfPoint(i,5.0, x, y, z) )
			{

				if(gTeam[i] == kk)
				{

					suiciderprotect[i] = true;
					SendClientMessage(playerid,blue,"Support anti explosion Vest recieved.");
				}
			}
		}
		SetPlayerChatBubble(playerid,"SUPPORTER: I used /svest",Lg,50,5000);
	} else return ERR(playerid," You need to be in support class.");
	return 1;
}



CMD:h(playerid,params[]) return cmd_heal(playerid,params);
CMD:heal(playerid,params[])
{
	if(HasJoined(playerid)) return ERR(playerid,"This command is disabled in a clan war");
	if(inevent[playerid] > 0) return ERR(playerid,"You cannot use this command in an event.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, Dred,"* You cannot use this command now.");
	if(gClass[playerid] != MEDIC) return ERR(playerid," You need to be in a MEDIC class.");
	new id;
	if(sscanf(params,"d",id)) return SendClientMessage(playerid,red,"USAGE: /heal [id]");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid,red,"ERROR: Player not connected");
	if(id == playerid) return SendClientMessage(playerid,red,"ERROR: You cannot heal yourself.");
	if(gTeam[id] != gTeam[playerid]) return SendClientMessage(playerid,red,"ERROR: You cannot heal enemy players.");
	if(Tryg3D::ItemGetDistance(playerid, item_player, id, item_player) > 14) return SendClientMessage(playerid,red,"* Player not in range");
	new remain = GetTickCount() - PlayerInfo[playerid][HEAL_CMD];
	if( remain < 30000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use this command again", (30000 - remain) / 1000);
		return 1;
	}
	PlayerInfo[playerid][HEAL_CMD] = GetTickCount();
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	new Float:EHP;
	if(Bit_Get(ClassUpgrade[playerid], A_MEDIC))
	{
		SetPlayerHealth(id, 100.00);
		SendClientMessage(id,0xC1ED12FF, " %s(%d) has healed you to 100HP !", nam, playerid);
	}
	else
	{
		GetPlayerHealth(id,EHP);
		SetPlayerHealth(id,EHP+25);
		if(EHP >=75) SetPlayerHealth(id,100);
		SendClientMessage(id,0xC1ED12FF, " %s(%d) has healed you 25.0 HP !", nam, playerid);
	}
	Heals[playerid] ++;
	if(QuestContent[2] == CONTENT_HEAL)
	{
	    QuestProgress[playerid][2] ++;
	    if(Heals[playerid] == 16)
	    {
	    	if(!Bit_Get(QuestDone[playerid], 2))
	    	{
	    	    Bit_Let(QuestDone[playerid], 2);
	    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 3 and got $50k & 100XP.");
	    	    TextDrawHideForPlayer(playerid,Quest[2]);
	    	    PlayerInfo[playerid][XP] += 100;
	    	    GiveCash(playerid, 50000);
	    	}
		}
	}
	if(PlayerInfo[id][InClan] == PlayerInfo[playerid][InClan])
	{
	    CHeals[playerid] ++;
	    if(QuestContent[4] == CONTENT_CHEAL)
		{
		    QuestProgress[playerid][4] ++;
		    if(CHeals[playerid] == 10)
			{
		    	if(!Bit_Get(QuestDone[playerid], 4))
		    	{
		    	    Bit_Let(QuestDone[playerid], 4);
		    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 5 and got $50k & 100XP.");
		    	    TextDrawHideForPlayer(playerid,Quest[4]);
		    	    PlayerInfo[playerid][XP] += 100;
		    	    GiveCash(playerid, 50000);
		    	}
			}
		}
	}
	GetPlayerHealth(id,EHP);
	SendClientMessageToAll(COLOR_YELLOW,"* MEDIC : %s has healed *%s* and his new HP : %0.2f",nam,PlayerInfo[id][Nick],EHP);
	PlayerPlaySound(playerid,1134,0.0,0.0,0.0);
	PlayerPlaySound(id,1134,0.0,0.0,0.0);
	return 1;
}
CMD:suicide(playerid)
{
	if(HasJoined(playerid)) return 1;
	if(PlayerInfo[playerid][Dead] == 1) return 1;
	if(inevent[playerid] > 0) return SendClientMessage(playerid,red,"* Cannot use this cmd in events.");
	if(PlayerInfo[playerid][InDuel] == 1) return 1;
	if(AntiSK[playerid]) return ERR(playerid, "You cannot suicide under anti spawn protection.");
	new remain = GetTickCount() - PlayerInfo[playerid][SUI];
	if(remain < 200000)
	{
		SendClientMessage(playerid, red, "* Please wait %d seconds before using this command.", (200000 - remain) / 1000);
		return 1;
	}
	if(!InArena(playerid, NON)) return 1;
	if(gClass[playerid] == SUICIDER)
	{
	    new Float:hp; GetPlayerHealth(playerid, hp);
		if(hp < 50.00) return ERR(playerid, "You need to have a minimum of 50 HP to suicide");
        for(new i=0; i< sizeof ZonesCapturePos; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 11.00,ZonesCapturePos[i][0],ZonesCapturePos[i][1],ZonesCapturePos[i][2])) return ERR(playerid,"You cannot suicide near zones checkpoints.");
		}
		new Float:Ten[3];
		SetPlayerHealth(playerid,0);
		PlayerInfo[playerid][Dead] = 1;
		GetPlayerPos(playerid,Ten[0],Ten[1],Ten[2]);
		CreateExplosion(Ten[0],Ten[1],Ten[2], 0,8.0);
		new pp = GetPlayerTeam(playerid), ll = cPerk[playerid][P_MONEY], x = PlayerInfo[playerid][InClan];
		foreach(new i : Player)
		{
			if(GetPlayerTeam(i) != pp)
			{
				if(!PlayerInfo[i][OnDuty])
				{
					if(!PlayerInfo[i][Dead])
					{
                        if(x != -1) if(PlayerInfo[i][InClan] == x) continue;
						if(!IsPlayerInAnyVehicle(i))
						{
							if(IsPlayerInRangeOfPoint(i,8.0,Ten[0],Ten[1],Ten[2]))
							{
                                if(GetPlayerState(i) == PLAYER_STATE_SPECTATING) continue;
								if(suiciderprotect[i])
								{
									suiciderprotect[i] = false;
									SendClientMessage(i, COLOR_YELLOW, "Your vest saved you from a suicide attack");
									continue;
								}
								PlayAudioStreamForPlayer(i, "https://bit.ly/2FbYKmV", Ten[0],Ten[1],Ten[2], 10.0, true);
								SendClientMessage(playerid,green," Good job you killed %s(%d) + 2 score & 3000",PlayerInfo[i][Nick],i);
								if(ll> 0)
								{
									SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the kill money.");
									GiveCash(playerid,3000);
								}
								if(cPerk[i][P_DEATH] == 0)
								{
									SendClientMessage(i,Dred,"[DEATH] You have been killed by a suicider you lost $500.");
									if(GetCash(i) > 600) GiveCash(i,-500);
								}else SendClientMessage(i, COLOR_YELLOW,"[Clan Perk] You did not lose cash after your death.");
								SetPlayerScore(playerid,GetPlayerScore(playerid)+2);
								GiveCash(playerid,3000);
								SetPlayerHealth(i,0);
								SendDeathMessage(playerid,i,51);
								Streak[i] = 0;
								if(x != -1)
								{
									new str[256],rnn;
									rnn = random(1500);
									format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, PlayerInfo[playerid][Nick]);
									ConnectKills[playerid] ++;
									ClanMSG(x,str);
									foreach(new j : Player) if(x == PlayerInfo[j][InClan]) GiveCash(j,rnn);
								}
								SUIKILL[playerid] ++;
								if(SUIKILL[playerid] == 5)
								{
									if(x > -1)
									{
										SUIKILL[playerid] = 0;
										AddClanPoints(playerid, 6);
									}
								}
							}
						}
					}
				}
			}
		}
		PlayerInfo[playerid][SUI] = GetTickCount();
	}else SendClientMessage(playerid,Dred,"* You should be suicider class to use this");
	return 1;
}
new AirStrike;
CMD:as(playerid,params[]) return cmd_airstrike(playerid,params);
CMD:airstrike(playerid,params[])
{
	if(!PlayerInfo[playerid][IsSpawned]) return ERR(playerid, "You have to be spawned to use this cmd.");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, Dred,"* You cant use this command now");
	if(AirStrike == 1) return SendClientMessage(playerid,Dred,"* The airstrike has been used recently ");
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid,"This command cannot be used in PUBG event.");
	if(GetPlayerScore(playerid) <= 500) return SendClientMessage(playerid,0xE64242FF,"* You need to be Lieutenant Rank (4) in order to use the airstrike");
	if(GetCash(playerid) < 40000) return SendClientMessage(playerid,0xE64242FF,"* You need to have 40000$ To call for airstrike");
	if(tCP[SPS] != GetPlayerTeam(playerid)) return SendClientMessage(playerid,0xE64242FF,"* Your team should own Space Station in order to use the Airstrike");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,0xE64242FF,"* You cant use this command while in vehicle");
	if(PlayerInfo[playerid][IsSpawned]) return ERR(playerid, "Cannot use /as if you're not spawned");
	GiveCash(playerid,-40000);
	AirStrike = 1;
	GetPlayerPos(playerid,PlayerInfo[playerid][AirX],PlayerInfo[playerid][AirY],PlayerInfo[playerid][AirZ]);
	SetTimerEx("Airstrikeeffect",6600,false,"d",playerid);
	SetTimerEx("EnableAirstrike",60000,false,"d",playerid);
	SendClientMessageToAll(green, " %s has ordered an airstrike !", PlayerInfo[playerid][Nick]);
	GameTextForPlayer(playerid,"~n~~n~~n~~g~~h~Airstrike called",5000,3);
	return 1;
}
forward Airstrikeeffect(playerid);
public Airstrikeeffect(playerid)
{
	CreateExplosion(PlayerInfo[playerid][AirX],PlayerInfo[playerid][AirY],PlayerInfo[playerid][AirZ], 0,8.0);
	new kk = GetPlayerTeam(playerid), x = PlayerInfo[playerid][InClan];
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	foreach(new i : ARENA[NON])
	{
		if(IsPlayerInRangeOfPoint(i,10,PlayerInfo[playerid][AirX],PlayerInfo[playerid][AirY],PlayerInfo[playerid][AirZ]))
		{
			if(kk != GetPlayerTeam(i))
			{
                if(x != -1) if(PlayerInfo[i][InClan] == x) continue;
				if(!PlayerInfo[i][OnDuty])
				{

					if(PlayerInfo[i][dRank] > 3) continue;
					SetPlayerHealth(i,0);
					SendDeathMessage(playerid,i,35);
					if(x != -1)
					{
						new str[160],rnn;
						rnn = random(1500);
						format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, nam);
						ConnectKills[playerid] ++;
						ClanMSG(x,str);
						foreach(new j : Player) if(x == PlayerInfo[j][InClan]) GiveCash(j,rnn);
					}
					if(cPerk[playerid][P_MONEY] > 0)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "[Clan Perk]: You got double the kill money.");
						GiveCash(playerid,1500);
					}
					SetPlayerScore(playerid,GetPlayerScore(playerid)+1);
					GiveCash(playerid,1500);
					SendClientMessage(playerid, green, "{80FF00}[AIRSTRIKE] {FFFFFF}You killed {80FF00}%s(%d){FFFFFF}  with the airstrike You earned 1 score with $1500", PlayerInfo[i][Nick]);
					if(cPerk[i][P_DEATH] == 0)
					{
						GiveCash(i,-2500);
					}else SendClientMessage(i, COLOR_YELLOW,"[Clan Perk] You did not lose cash after your death.");
					SendClientMessage(i, 0xE64242FF, "* You have died from %s(%d) Airstrike. You lost $2500", nam, playerid);
					PlayerInfo[playerid][Kills]++;
					GameTextForPlayer(i,"~r~Airstriked",3000,3);
					AIRKILL[playerid] ++;
					if(AIRKILL[playerid] > 14)
					{

						if(x  > -1)
						{

							AIRKILL[playerid] = 0;
							AddClanPoints(playerid, 7);
						}
					}
				}
			}
		}
	}
	return 1;
}

forward EnableAirstrike(playerid);
public EnableAirstrike(playerid)
{
	AirStrike = 0;
	return 1;
}
CMD:pb(playerid) return cmd_plantbomb(playerid);

CMD:kill(playerid, params[])
{
    if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid, "Cannot suicide in PUBG event.");
	if(HasJoined(playerid)) return ERR(playerid,"You cant kill yourself in a clan war");
	if(PlayerInfo[playerid][TUTS] == true) return SendClientMessage(playerid,Dred,"Please wait for the tutorial to finish.");
	for(new i =0; i < MAX_ARENAS; i++)
	{
		if(InArena(playerid, i))
		{
			Iter_Remove(ARENA[i], playerid);
			break;
		}
	}
	Iter_Add(ARENA[NON], playerid);
	if(Bit_Get(Suicided, playerid)) return SendClientMessage(playerid, RED,"You are already commiting suicide.");
	Bit_Set(Suicided, playerid, true);
	SendClientMessage(playerid, COLOR_YELLOW, "You have taken suicide pills.");
	SetTimerEx("KillPlayer", 8000, false, "d", playerid);
	ApplyAnimation(playerid,"SWEET","Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	Streak[playerid] = 0;
	return true;
}

forward KillPlayer(playerid);
public KillPlayer(playerid)
{
	ClearAnimations(playerid, SYNC_NONE);
	AnormalDeath[playerid] = true;
	ForceClassSelection(playerid);
	SetPlayerHealth(playerid, 0.0);
	if(sttt[playerid]) return 1;
	SendClientMessage(playerid, COLOR_YELLOW, "You have commited suicide.");
	return 1;
}


DmCount()
{
	new c = Iter_Count(ARENA[EDM]);
	return c;
}

sDmCount()
{
	new c = Iter_Count(ARENA[SDM]);
	return c;
}
CDmCount()
{
	new c = Iter_Count(ARENA[CBDM]);
	return c;
}
MDmCount()
{
	new c = Iter_Count(ARENA[MDM]);
	return c;
}
HSDmCount()
{
	new c = Iter_Count(ARENA[HSDM]);
	return c;
}
CHDmCount()
{
	new c = Iter_Count(ARENA[CHDM]);
	return c;
}

CheckNearBy(playerid)
{
	new Float:x,Float:y,Float:z, tt = GetPlayerTeam(playerid);
	GetPlayerPos(playerid,x,y,z);
	foreach(new i : Player) if(!PlayerInfo[i][OnDuty]) if(gTeam[i] != TEAM_NONE) if(GetPlayerState(i) != PLAYER_STATE_SPECTATING) if(i != playerid) if(GetPlayerTeam(i) != tt) if(IsPlayerInRangeOfPoint(i,7.0,x,y,z)) return false;
	return true;
}

CMD:rules(playerid, params[])
{
	new cat[1200];
	strcat(cat, "\t{FFFF00}---= Call Of Duty - Modern Warfare 3 Rules =---\n\n");
	strcat(cat, "{E10000}1).Do not use any kind of bugs that gives you advantage over others players.");
	strcat(cat, "\n2).Do not cheat or hack as it wont get you anywhere.");
	strcat(cat, "\n3).Do not insult other players nor do not spam/flood the chat.");
	strcat(cat, "\n4).Please do respect everyone (Players&Administrators).");
	strcat(cat, "\n5).Do not score farm as it's considered as exploiting.");
	strcat(cat, "\n6).Do not car park players.");
	strcat(cat, "\n7).Do not spawnkill.");
	strcat(cat, "\n8).Do not ask for things from Administrators, earn them legitly.");
	strcat(cat, "\n9).Baseraid is not allowed ( attacking bases with heavy vehicles )");
	strcat(cat, "\n10).C-Bug Only allowed in dm arenas (  dm, cbdm, sdm )");
	strcat(cat, "\n11).Placing mines & /pb at capture point not allowed");
	strcat(cat, "\n12).Crackshooting is not allowed");
	strcat(cat, "\n13).Abusing clan toys is not allowed");
	ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_MSGBOX,"{DE0000}MW3 Rules", cat, "Close", "");
	return 1;
}
CMD:forcerules(playerid, params[])
{
	if(PlayerInfo[playerid][Level] < 2) return ERR(playerid, "You have to be at least admin level 2 to use this cmd.");
	new id;
	if(sscanf(params,"dd",id)) return USG(playerid,"/forcerules (playerid)");
	if(!IsPlayerConnected(id)) return ERR(playerid, "Player not connected");
	if(PlayerInfo[id][Level] > 0) return ERR(playerid, "Cannot use this cmd on admins.");
	new cat[1200];
	strcat(cat, "\t{FFFF00}---= Call Of Duty - Modern Warfare 3 Rules =---\n\n");
	strcat(cat, "{E10000}1).Do not use any kind of bugs that gives you advantage over others players.");
	strcat(cat, "\n2).Do not cheat or hack as it wont get you anywhere.");
	strcat(cat, "\n3).Do not insult other players nor do not spam/flood the chat.");
	strcat(cat, "\n4).Please do respect everyone (Players&Administrators).");
	strcat(cat, "\n5).Do not score farm as it's considered as exploiting.");
	strcat(cat, "\n6).Do not car park players.");
	strcat(cat, "\n7).Do not spawnkill.");
	strcat(cat, "\n8).Do not ask for things from Administrators, earn them legitly.");
	strcat(cat, "\n9).Baseraid is not allowed ( attacking bases with heavy vehicles )");
	strcat(cat, "\n10).C-Bug Only allowed in dm arenas (  dm, cbdm, sdm )");
	strcat(cat, "\n11).Placing mines & /pb at capture point not allowed");
	strcat(cat, "\n12).Crackshooting is not allowed");
	strcat(cat, "\n13).Abusing clan toys is not allowed");
	CMDMessageToAdmins(playerid,"FORCERULES");
	ShowPlayerDialog(id, 5137, DIALOG_STYLE_MSGBOX,"{DE0000}MW3 Rules", cat, "Close", "");
	return 1;
}

CMD:cbhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_PURPLE, " ---= Clan Base MW3 Help =--");
	SendClientMessage(playerid, red, "The clan base (island) is located near SF ship, between arabia base and SF.");
	SendClientMessage(playerid, red, "Clan base is a clan perk, it can be owned only by 1 clan for 5 days and costs 20k honor points.");
	SendClientMessage(playerid, red, "Clan base members have special access to the island heavy vehicles, they can also in clan base with /ss.");
	SendClientMessage(playerid, red, "You can check the clan currently owning clan base with /cbcheck.");
	return 1;
}
CMD:pubgstart(playerid, params[])
{
	if(PlayerInfo[playerid][Level] < 4) return 0;
	new mapp;
	if(sscanf(params,"d",mapp)) return USG(playerid,"/pubstart (map [0-1])");
	PUBGOpen = true;
	SetTimer("POTimer", 1000, false);
	PUBGLaunched = false;
	SendClientMessageToAll(-1,"{FFFF00}[EVENT] {00FF00}PUBG Event started by an admin, use /pubg to join it!");
	SendClientMessageToAll(-1,"{FFFF00}[EVENT] {00FF00}PUBG Event will be locked and launched in 60 seconds.");
	SetTimer("ClosePUBG", 60*1000, false);
	GZ_ShapeDestroy(PUBGCircle);
	PUBGMap = mapp;
	switch(mapp)
	{
		case 0:
		{
			PUBGCircleFloat[0] = 6840.83;
			PUBGCircleFloat[1] = -2516.52;
			PUBGCircleFloat[2] = 250.00;
		}
		case 1:
		{
			PUBGCircleFloat[0] = 8823.31;
			PUBGCircleFloat[1] = 2811.53;
			PUBGCircleFloat[2] = 250.00;
		}
	}
	PUBGCircle = GZ_ShapeCreate(CIRCLE, 6840.8354,-2516.5256, 250.00);
	GZ_ShapeShowForAll(PUBGCircle, 0x00FF0084);
	return 1;
}

CMD:pubg(playerid)
{
	if(PlayerInfo[playerid][JailTime] > 0) return ERR(playerid, "Cannot use this cmd while in jail.");
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid, "You have already joined PUBG Event.");
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(!PUBGOpen) return ERR(playerid, "No PUBG event running or the event is locked.");
	if(!PlayerInfo[playerid][IsSpawned]) return ERR(playerid, "You need to be spawned to join the event.");
	if(PlayerInfo[playerid][InDuel]) return ERR(playerid, "Cannot use this cmd while duelling.");
	if(AntiSK[playerid]) return SendClientMessage(playerid, RED,"You cannot join PUBG while in antiSK protection!");
	if(PlayerInfo[playerid][OnDuty] == 1) return SendClientMessage(playerid, RED,"You have to be off-duty to be able to join.");
	SetPlayerInterior(playerid, 12);
	SetPlayerPos(playerid, 2324.3792,-1144.6045,1050.7031);
	SetPlayerVirtualWorld(playerid, 500);
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 100.0, 0.0);
	gClass[playerid] = Assault;
	SendClientMessage(playerid, COLOR_PINK, "You have joined PUBG event, starting in few moments..");
	gTeam[playerid] = 50;
	SetPlayerColor(playerid,0xFFFFFF00);
	SetPlayerTeam(playerid, 50);
	TextDrawShowForPlayer(playerid, PUBGAliveTD);
	TextDrawShowForPlayer(playerid, PUBGStaticTD);
	Iter_Add(PUBGEvent, playerid);
	return 1;
}

forward ClosePUBG();
public ClosePUBG()
{
	PUBGOpen = false;
	PUBGLaunchTime = 0;
	PUBGLaunched = true;
	SetTimer("PLTimer", 1000, false);
	foreach(new i:PUBGEvent)
	{
	    GameTextForPlayer(i,"~r~Go!",3000,5);
	    PlayerPlaySound(i, 15805, 0,0,0);
	    ResetPlayerWeapons(i);
		GivePlayerWeapon(i, WEAPON_PARACHUTE, 1);
	    new Float:xx = RandomFloat(-50.0, 50.0, 2), Float:yy = RandomFloat(-50.0, 50.0, 2), Float:zz = RandomFloat(-15.0, 15.0, 2);
	    switch(PUBGMap)
		{
			case 0: SetPlayerPos(i, 6883.5371+xx,-2507.3267+yy,779.9348+zz);
			case 1: SetPlayerPos(i, 8823.31+xx,2811.53+yy,779.9348+zz);
		}
	    SetPlayerInterior(i, 0);
	    SetPlayerTeam(i, TEAM_MERC);
		ApplyAnimation(i,"PARACHUTE","FALL_skyDive",0.0,0,0,0,0,0);
	}
	return 1;
}

CMD:ah(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return ERR(playerid, "gotta be admin");
	new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
	// MapAndreas_FindZ_For2DCoord(x, y, z);
	new Float:zz=z-0.93;
	new query[200];
	CreateObject(348, x,y,zz,90,0,0, 100);
	mysql_format(mysql, query, sizeof(query), "INSERT INTO `pubgpickups` (`x`,`y`,`z`) VALUES (%f,%f,%f)", x,y,z);
	mysql_tquery(mysql, query);
	return 1;
}

CMD:cmds(playerid, params[])
{
	new s[1000];
	strcat(s,"{FFFFFF}- Chat Related\n/Pm  /Rpm  /r  /order  /dnd  /say\n\n");
	strcat(s,"{FFFFFF}- Class Related\n/shelp  /dis  /undis  /ranks  /myrank  /jp /suicide  /pb /chelp (/ch) /buch\n\n");
	strcat(s,"{FFFFFF}- Misc Related \n /mynamehistory /tutorial /stats  /total  /kill /myquests /rules /pl /duel /rcduel \n /topscores  /richlist  /nukehelp /ctinfo /airstrikehelp /toggletextdraws\n");
	strcat(s,"/help /ep /anims /spree /friends /addfriend /eject /tt /zones /cmc /tinfo\n /givegun /jailtime /givemoney /bd /spawnplace (/ss) /togglehelmet /togglemask /aprogress (/apr) /cbhelp /xphelp /quests /toggle\n");
	strcat(s,"/st  /sc  /teams /objective /medkit(/mk)\n  /prestige  /armourpack (/ap) /clans /moderators  /admins /mappers /pradio /pstop\n/gpsstatus /zep /gps /cm /cmhelp /cmostatus /pms /block /toggletournament (/tt)\n\n");
	strcat(s,"{FFFFFF}-Arenas Related\n /sdm /cbdm /hsdm /chdm /minigundm  /qdm\n\n\n");
	strcat(s,"{FFFFFF}-Ingame Clans\n-/Createclan /topclans /clanhelp\n");
	strcat(s,"For more Information please visit our website {00FFC3} www.mw3-samp.org");
	ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_MSGBOX,"{DE0000}MW3 Commands", s, "Close", "");
	return 1;
}

CMD:zep(playerid, params[])
{
    new str[1380];
	strcat(str,"\n\n\n");
	strcat(str,"{15ADF7}Zeppelins {FFFFFF}are the huge airships laying over each base, each one has 5000 HP and can be damaged by on foot weapons only.\n");
	strcat(str,"{FFFFFF}Each weapon shot makes a {15ADF7}1 HP damage, M4 is the most effective distance wise.\n");
	strcat(str,"Each {15ADF7}Zeppelin{FFFFFF} can drop unlimited numbers of bombs. However, a cooldown can be triggered if you throw too many bombs in\n");
	strcat(str,"a small period of time.\n");
	strcat(str,"-> Press {15ADF7}Fire{FFFFFF} key to drop a bomb (CTRL or LMB).\n");
	strcat(str,"-> Press {15ADF7}N{FFFFFF} key to escape with an emergency parachute.\n");
	strcat(str,"-> Press {15ADF7}Y{FFFFFF} to toggle the {15ADF7}Zeppelin{FFFFFF}'s movement / camera view.\n");
	strcat(str,"-> To move the {15ADF7}Zeppelin{FFFFFF}, you have to stop moving the mouse and fix your camera in a specific direction.\n");
	strcat(str,"{15ADF7}Zeppelins{FFFFFF} are invincible in their bases and cost {15ADF7}250 XP{FFFFFF}.\n");
	strcat(str,"You cannot hit your team {15ADF7}Zeppelin{FFFFFF} or one that is being piloted by a clan member.\n");
	strcat(str,"Taking down a Zeppelin rewards you with 50 XP, $25.000 and 5 score for you team.\n");
	strcat(str,"**{15ADF7}Zeppelins {FFFFFF}are accessible from {15ADF7}Command Centers{FFFFFF}.\n\n\n");
	ShowPlayerDialog(playerid,5137,DIALOG_STYLE_MSGBOX,"-- Zeppelin (Airship L30) help --",str,"OK","");
	return 1;
}

CMD:vipshop(playerid)
{
    PlayerTextDrawSetString(playerid, PVipShop[playerid][VS_BALANCE], "%f", PlayerInfo[playerid][VPB]);
	for(new i=0;i <8;i++) { PlayerTextDrawShow(playerid, PVipShop[playerid][i]); TextDrawShowForPlayer(playerid, VipShop[i]); SelectTextDraw(playerid, 0xFFFF00FF);}
	TextDrawShowForPlayer(playerid, VipShop[8]);
	return 1;
}

CMD:xphelp(playerid, params[])
{
	new s[2000];
	strcat(s,"{0000FF}* XP {FFFFFF}is collected from {009300}kills.\n");
	strcat(s,"{009300}* Killing sprees {FFFFFF}increase {0000FF}XP {FFFFFF}multipler (5-10 kills: 2XP per kill, 10-20 kills: 3 XP per kill, ect..)\n");
	strcat(s,"\n\n{F3F400}Class\t\tAdvanced Class + Features\t\t\t\t\t\t\tRequired XP\n\n");
	strcat(s,"{FFFFFF}Assault\t\tCommando Assault - Spawn with a Gas Mask and +10 damage with m4\t\t1750 XP\n");
	strcat(s,"Sniper\t\tHitman - Ability to use night vision goggles and +15 damage with\t\t3000 XP\n");
	strcat(s,"\t\tSD Pistol\n");
	strcat(s,"Suicider\tTerrorist - Spawn with a one-time protection vest against explosions\t\t2250 XP\n");
	strcat(s,"\t\t(mines-suicides) (only with this class)\n");
	strcat(s,"Demolisher\tDemo Raze - Ability to destroy vehicles by planting a c4\t\t\t\t3500 XP\n");
	strcat(s,"\t\tinside them /c4 , would take 8 seconds to explode. (2 minutes cooldown)\n");
	strcat(s,"Medic\t\tField Medic - Ability to refill nearby teammates HP and 15% more\t\t3250 XP\n");
	strcat(s,"\t\tarmour and HP while using /mk and /ap\n");
	strcat(s,"Pilot\t\tFighter Pilot - +150 More HP on any air vehicle\t\t\t\t\t3000 XP\n");
	strcat(s,"Engineer\tCombat Engineer - +150 More HP on Tank and +10 damage with Standard\t4000 XP\n");
	strcat(s,"\t\tShotgun and one extra landmine\n");
	strcat(s,"JetTrooper\tElite JetTrooper - Ability to use /fb (flash bang) which will blur\t\t\t5000 XP\n");
	strcat(s,"\t\tenemies vision for 2 seconds only and and spawn with dual 9mms +15\n");
	strcat(s,"\t\textra damage\n");
	strcat(s,"Support\tDefender - invisible on map for 2 minutes using /shide, thermal goggles\t\t5500 XP\n");
	strcat(s,"\t\ton spawn, /svest to give nearby team mates anti explosion vests\n");
	strcat(s,"Scout\t\tMilitary Scout - Spawn with a helmet and +100 HP on sea sparrow\t\t2500 XP\n");
	strcat(s,"Spy\t\tAssassin - Kills the driver with a single /backstab, +10 damage with\t\t5000 XP\n");
	strcat(s,"\t\tSD Pistol\n");
	strcat(s,"Rifleman\t\tElite Rifleman - +50 damage with country rifle\t\t6500 XP\n");
	strcat(s,"Recon\t\tSilent Recon - Ability to purchase drones from shop,+15 damage with\t\t7000 XP\n");
	strcat(s,"\t\tmp5 and +50 hp for the drone\n");
	strcat(s,"Bomber\tDestroyer - Spawns with chainsaw, can bomb all nearby air vehicles\t\t12000 XP\n");
	strcat(s,"\t\t/bas if the kill spree is more than 24 + Can shoot 5 grenades using\n");
	strcat(s,"\t\tLeft ALT (LALT) with M4\n");
	ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_MSGBOX,"{DE0000}MW3 XP System", s, "Close", "");
	return true;
}

CMD:th(playerid) return cmd_togglehelmet(playerid);

CMD:togglehp(playerid)
{
	EnableHealthBarForPlayer(playerid, false);
	return 1;
}

CMD:togglehelmet(playerid)
{
	if(PlayerInfo[playerid][HELMET] == false) return SendClientMessage(playerid,Dred,"* You dont have helmet. You can buy one at base weapon shop.");
	if(PlayerInfo[playerid][WEAR] == false)
	{

		PlayerInfo[playerid][WEAR] = true;
		switch(gTeam[playerid])
		{

			case TEAM_AUS: SetPlayerAttachedObject(playerid,0,19104,2,0.152999,0.015000,-0.002000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
			case TEAM_EURASIA: SetPlayerAttachedObject(playerid,0,19104,2,0.142000,0.020000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
			case TEAM_ARAB: SetPlayerAttachedObject(playerid,0,19104,2,0.147999,0.000000,0.000000,0.000000,0.000000,0.000000,1.090000,1.000000,1.114000);
			case TEAM_USA: SetPlayerAttachedObject(playerid,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
			case TEAM_ID: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
			case TEAM_CH: SetPlayerAttachedObject(playerid,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
			case TEAM_FRANCE: SetPlayerAttachedObject(playerid,0,19104,2,0.151000,0.004000,0.000000,-0.399999,-0.200000,-7.599999,1.123999,1.000000,1.058000);
			case TEAM_MERC: SetPlayerAttachedObject(playerid,0,19104,2,0.151000,0.004000,0.000000,-0.399999,-0.200000,-7.599999,1.123999,1.000000,1.058000);
		}
		SendClientMessage(playerid,green,"Helmet is toggled ON ! use the command again to remove it");
	}else
	{

		PlayerInfo[playerid][WEAR] = false;
		RemovePlayerAttachedObject(playerid,0);
		SendClientMessage(playerid,green,"Helmet is toggled OFF. Use the command again to put it back");
	}
	return 1;
}

CMD:toggle(playerid)
{
	new cat[500];
	strcat(cat, "Option\tState\nTextdraws\t");
	if(Bit_Get(ToggleState[playerid], TOGGLE_TEXTDRAWS)) strcat(cat,"{00FF28}ON\nGas Mask\t");
	else strcat(cat, "{E10000}OFF\nGas Mask\t");
	if(PlayerInfo[playerid][WEARMASK]) strcat(cat, "{00FF28}ON\nHelmet\t");
	else strcat(cat, "{E10000}OFF\nHelmet\t");
	if(PlayerInfo[playerid][WEAR]) strcat(cat, "{00FF28}ON\nDND\t");
	else strcat(cat, "{E10000}OFF\nDND\t");
	if(Bit_Get(ToggleState[playerid], TOGGLE_DND)) strcat(cat, "{00FF28}ON\nSpawn Protection\t");
	else strcat(cat, "{E10000}OFF\nSpawn Protection\t");
	if(Bit_Get(ToggleState[playerid], TOGGLE_ANTISK)) strcat(cat, "{00FF28}ON\nChat Clan Tag\t");
	else strcat(cat, "{E10000}OFF\nChat Clan Tag\t");
	if(Bit_Get(ToggleState[playerid], TOGGLE_CLANTAG)) strcat(cat, "{00FF28}ON\nVIP Join Message\t");
	else strcat(cat, "{E10000}OFF\nVIP Join Message\t");
	if(Bit_Get(ToggleState[playerid], TOGGLE_VIPMSG)) strcat(cat, "{00FF28}ON");
	else strcat(cat, "{E10000}OFF");

	ShowPlayerDialog(playerid, TOGGLE_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Toggle Menu", cat, "Toggle", "Done");
	return 1;
}

CMD:tm(playerid) return cmd_togglemask(playerid);

CMD:togglemask(playerid)
{
	if(PlayerInfo[playerid][Mask] == false) return SendClientMessage(playerid,Dred,"* You dont have Gas Mask. You can buy one at base weapon shop");
	if(PlayerInfo[playerid][WEARMASK] == false)
	{

		SetPlayerAttachedObject(playerid,1,19472,2,0.027000,0.138999,0.010000,95.200027,74.399917,2.100000,1.000000,1.000000,1.000000);
		SendClientMessage(playerid,green,"Gas mask is toggled ON ! use the command again to remove it");
		PlayerInfo[playerid][WEARMASK] = true;
	}else
	{

		PlayerInfo[playerid][WEARMASK] = false;
		RemovePlayerAttachedObject(playerid,1);
		SendClientMessage(playerid,green,"Gas mask is toggled OFF ! use the command again to put it back");
	}
	return 1;
}
CMD:st(playerid, params[])
{
    if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid, "Cannot switch team in PUBG event.");
	if(HasJoined(playerid)) return ERR(playerid,"You cant change teams in clan war");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use that feature in DM stadiums!");
	if(sttt[playerid]) return ERR(playerid,"You are already changing team.");
	SpawnP[playerid] = BASE;
	SendClientMessage(playerid, -1,"You Will Be Taken To Team Selection (death not counted).");
	FirstSpawn[playerid] = 1;
	HideBox(playerid);
	PlayerTextDrawHide(playerid,Guit[playerid][0]);
	PlayerTextDrawHide(playerid,Guit[playerid][1]);
	TextDrawHideForPlayer(playerid, BoxDraw1);
	PlayerTextDrawHide(playerid,Guit[playerid][2]);
	Bit_Set(Suicided, playerid, true);
	SetTimerEx("KillPlayer", 8000, false, "d", playerid);
	ApplyAnimation(playerid,"SWEET","Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	Streak[playerid] = 0;
	sttt[playerid] = true;
	return 1;
}

CMD:tinfo(playerid, params[])
{
	SendClientMessage(playerid, GREEN, "Tournament Info: Your Count : %d | Remaining Time : %d minutes.", CurrentTOURCount[playerid], (TournamentTick - GetTickCount()) / 60000);
	return 1;
}
CMD:toggletextdraws(playerid)
{
	new bool:kk = Bit_Get(ToggleState[playerid], TOGGLE_TEXTDRAWS);
	Bit_Set(ToggleState[playerid], TOGGLE_TEXTDRAWS, !kk);
	if(kk)
	{
		tournamentshown[playerid] = false;
		HideBox(playerid);
		PlayerTextDrawHide(playerid,Guit[playerid][0]);
		TextDrawHideForPlayer(playerid, BoxDraw1);
		PlayerTextDrawHide(playerid,Guit[playerid][1]);
		PlayerTextDrawHide(playerid,Guit[playerid][2]);
		TextDrawHideForPlayer(playerid, TournamentTD);
		TextDrawHideForPlayer(playerid, TournamentTD2);
		TextDrawHideForPlayer(playerid, QuestTitle);
		TextDrawHideForPlayer(playerid, Quest[0]); TextDrawHideForPlayer(playerid, Quest[1]); TextDrawHideForPlayer(playerid, Quest[2]); TextDrawHideForPlayer(playerid, Quest[3]); TextDrawHideForPlayer(playerid, Quest[4]);
		return 1;
	}
	ShowBoxPlayer(playerid);
	PlayerTextDrawShow(playerid,Guit[playerid][0]);
	PlayerTextDrawShow(playerid,Guit[playerid][1]);
	TextDrawShowForPlayer(playerid, BoxDraw1);
	PlayerTextDrawShow(playerid,Guit[playerid][2]);
	TextDrawShowForPlayer(playerid, TournamentTD);
	TextDrawShowForPlayer(playerid, TournamentTD2);
	tournamentshown[playerid] = true;
	TextDrawShowForPlayer(playerid, QuestTitle);
	for(new i; i < 3; i++)	if(!Bit_Get(QuestDone[playerid], i)) TextDrawShowForPlayer(playerid, Quest[i]);
	if(PlayerInfo[playerid][dRank] > 0) if(!Bit_Get(QuestDone[playerid], 3)) TextDrawShowForPlayer(playerid, Quest[3]);
	if(PlayerInfo[playerid][InClan] > -1) if(!Bit_Get(QuestDone[playerid], 4)) TextDrawShowForPlayer(playerid, Quest[4]);
	return 1;
}

CMD:toggletournament(playerid)
{
	new kk = tournamentshown[playerid];
	tournamentshown[playerid] = !kk;
	if(kk)
	{
		TextDrawHideForPlayer(playerid, TournamentTD);
		TextDrawHideForPlayer(playerid, TournamentTD2);
		return 1;
	}
	TextDrawShowForPlayer(playerid, TournamentTD);
	TextDrawShowForPlayer(playerid, TournamentTD2);
	return 1;
}

CMD:tt(playerid) return cmd_toggletournament(playerid);

CMD:sc(playerid, params[])
{
    if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid, "Cannot switch class in PUBG event.");
	if(gTeam[playerid] == TEAM_MERC) return ERR(playerid,"Mercenaries can't change classes!");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use that feature in DM stadiums!");
	if(HasJoined(playerid)) return ERR(playerid,"You can't change your class while in a clan war");
	if(sttt[playerid]) return SendClientMessage(playerid, Dred, "You are already changing team");
	if(PlayerInfo[playerid][OnDuty]) return SendClientMessage(playerid, Dred, "You can't use this cmd on duty");
	SendClientMessage(playerid, -1,"You will be taken to class selection (death not counted).");
	FirstSpawn[playerid] = 1;
	sccc[playerid] = true;
	cmd_kill(playerid, params);
	return 1;
}

GetOnLineClanMembers(clan)
{
	new count;
	foreach(new i : Player) if(PlayerInfo[i][InClan] == clan) count ++;
	return count;
}

clanin(playerid)
{
	new xx = PlayerInfo[playerid][InClan];
	if(xx == -1) return 1;
	new query[200];
	mysql_format(mysql, query, sizeof(query), "SELECT cowner, chpoints,cmembers,cteam,cskin,ckills,cdeaths,cwins,close,cslogan FROM clans WHERE cid = %i LIMIT 1", xx);
	mysql_pquery(mysql, query, "ShowMyClan", "i", playerid);
	return 1;
}

forward ShowMyClan(playerid);
public ShowMyClan(playerid)
{
	new xx = PlayerInfo[playerid][InClan];
	new r;
	cache_get_row_count(r);
	if(r == 1)
	{
		new ownername[24], chp, clvl = cLevel[playerid], cmembers, cteam[20], cskin,ckills,cdeaths,cwins,close, cslogan[70];
		cache_get_value_name(0, "cowner", ownername);
		cache_get_value_name_int(0, "chpoints", chp);
		cache_get_value_name_int(0, "cmembers", cmembers);
		cache_get_value_name(0, "cteam", cteam);
		cache_get_value_name_int(0, "cskin", cskin);
		cache_get_value_name_int(0, "ckills", ckills);
		cache_get_value_name_int(0, "cdeaths", cdeaths);
		cache_get_value_name_int(0, "cwins", cwins);
		cache_get_value_name_int(0, "close", close);
		cache_get_value_name(0, "cslogan", cslogan);

	    new str[200];
	    PlayerTextDrawSetString(playerid, ClanLine1[playerid], "%d~n~%d~n~%d~n~%d~n~%s~n~", chp, ckills, cdeaths, cskin, cteam);
		PlayerTextDrawSetString(playerid, ClanLine2[playerid], "%d/6~n~%d/%d~n~%d~n~%d~n~%d~n~", clvl, cmembers, GetMaxMembersFromLevel(cLevel[playerid]), GetOnLineClanMembers(xx), cwins, close);
        PlayerTextDrawSetString(playerid, ClanName[playerid], "] %s ] ~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~", cName[playerid]);
        PlayerTextDrawSetString(playerid, ClanSlogan[playerid], "~b~~h~~h~~h~%s", cslogan);
        PlayerTextDrawSetString(playerid, ClanOwners[playerid], "~r~~h~Owner: ~w~%s", ownername);

		mysql_format(mysql, str, sizeof(str), "SELECT name, clanlead, clancoown FROM playerbase WHERE clanown <> %i AND ((clanlead = %i) OR (clancoown = %i)) LIMIT 70", xx, xx, xx);
		mysql_pquery(mysql, str, "ShowCosLeaders", "i", playerid);
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_PURPLE, "Oops, something went wrong. Please notify an admin of this error: ERR00001137");
}

forward ShowCosLeaders(playerid);
public ShowCosLeaders(playerid)
{
	new r;
	new xx = PlayerInfo[playerid][InClan];
	cache_get_row_count(r);
	new IsLeader[70], IsCoOwner[70], Leaders, CoOwners;
	PlayerTextDrawSetString(playerid, ClanCoOwners[playerid], "~r~~h~~h~Co-Owner: ~w~None");
	PlayerTextDrawSetString(playerid, ClanLeaders[playerid], "~p~~h~Leader: ~w~None");
	new str[2][150];
	str[1] = "~r~~h~~h~Co-Owner: ~w~"; str[0] = "~p~~h~Leader: ~w~";
	for(new x; x < r; x ++)
	{
	    new pname[24];
		cache_get_value_name(x, "name", pname);
		cache_get_value_name_int(x, "clanlead", IsLeader[x]);
		cache_get_value_name_int(x, "clancoown", IsCoOwner[x]);
		if(IsCoOwner[x] != xx)
		{
		    if(IsLeader[x] == xx)
		    {
		        Leaders ++;
		        if(Leaders < 4) format(str[0], _, "%s%s__", str[0], pname);
		    }
		}
		else
		{
		    CoOwners ++;
	        if(CoOwners < 4) format(str[1], _, "%s%s__", str[1], pname);
		}
	}
	if(CoOwners > 0)
	{
	    if(CoOwners > 3) format(str[1], _, "%sand %d more.", str[1], CoOwners - 3);
		PlayerTextDrawSetString(playerid, ClanCoOwners[playerid], str[1]);
	}
	if(Leaders > 0)
	{
		if(Leaders > 3) format(str[0], _, "%sand %d more.", str[0], Leaders - 3);
		PlayerTextDrawSetString(playerid, ClanLeaders[playerid], str[0]);
    }
	inclantd[playerid] = true;
	TextDrawShowForPlayer(playerid, ClanBar1);
	TextDrawShowForPlayer(playerid, ClanBar2);
	TextDrawShowForPlayer(playerid, ClanTitle2);
	TextDrawShowForPlayer(playerid, ClanTitle1);
	PlayerTextDrawShow(playerid, ClanName[playerid]);
	PlayerTextDrawShow(playerid, ClanOwners[playerid]);
	PlayerTextDrawShow(playerid, ClanLine1[playerid]);
	PlayerTextDrawShow(playerid, ClanLine2[playerid]);
	PlayerTextDrawShow(playerid, ClanCoOwners[playerid]);
	PlayerTextDrawShow(playerid, ClanSlogan[playerid]);
	PlayerTextDrawShow(playerid, ClanLeaders[playerid]);
	
	SetPlayerProgressBarValue(playerid, CRBar[playerid], PlayerInfo[playerid][CRP]);
	ShowPlayerProgressBar(playerid, CRBar[playerid]);
	ShowCRLogo(playerid, PlayerInfo[playerid][CR]);
	return 1;
}

DealCR(player1, player2)
{
	new wc = PlayerInfo[player1][InClan], lc = PlayerInfo[player2][InClan];
	new wcr = PlayerInfo[player1][CR], lcr = PlayerInfo[player2][CR];
	new wcrp = PlayerInfo[player1][CRP], lcrp = PlayerInfo[player2][CRP];
	new wctag[7], lctag[7]; strcat(wctag, cTag[player1]); strcat(lctag, cTag[player2]);
	new extra;
	if(wcr > lcr) extra = 10*(wcr-lcr);
	else if(wcr < lcr) extra = 10*(lcr-wcr);
	new total = 30 + extra;
	if((100 - wcrp) > total)
	{
	    new final_ = wcrp + total;
        foreach(new i : Player)
		{
		    if(PlayerInfo[i][InClan] == wc)
		    {
		        PlayerInfo[i][CRP] = final_;
		    }
		}
		new query[156];
		mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `rankprog` = '%d' WHERE `cid`='%d' LIMIT 1", final_, wc);
		mysql_tquery(mysql, query);
	}
	else
	{
	    if(wcr == 7)
	    {
	        foreach(new i : Player)
			{
			    if(PlayerInfo[i][InClan] == wc)
			    {
			        PlayerInfo[i][CRP] = 100;
			    }
			}
			new query[156];
			mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `rankprog` = 100 WHERE `cid`='%d' LIMIT 1", wc);
			mysql_tquery(mysql, query);
	    }
	    else
	    {
			new final_ = total - (100 - wcrp);
			new newcr = wcr+1;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][InClan] == wc)
			    {
			        PlayerInfo[i][CRP] = final_;
			        PlayerInfo[i][CR] = newcr;
			    }
			}
			new query[156];
			mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `rankprog`='%d', `rank`='%d' WHERE `cid`='%d' LIMIT 1", final_, newcr, wc);
			mysql_tquery(mysql, query);
			SendClientMessageToAll(COLOR_YELLOW, "[RANKUP] Clan %s ranked up to %s!", wctag, ReturnCR(newcr));
	    }
	}
	if(lcrp > total)
	{
	    new final_ = lcrp - total;
        foreach(new i : Player)
		{
		    if(PlayerInfo[i][InClan] == lc)
		    {
		        PlayerInfo[i][CRP] = final_;
		    }
		}
		new query[156];
		mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `rankprog` = '%d' WHERE `cid`='%d' LIMIT 1", final_, lc);
		mysql_tquery(mysql, query);
	}
	else
	{
	    if(lcr == 0)
	    {
	        foreach(new i : Player)
			{
			    if(PlayerInfo[i][InClan] == lc)
			    {
			        PlayerInfo[i][CRP] = 0;
			    }
			}
			new query[156];
			mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `rankprog` = 0 WHERE `cid`='%d' LIMIT 1", lc);
			mysql_tquery(mysql, query);
	    }
	    else
	    {
			new final_ = 100 - (total - lcrp);
			new newcr = lcr-1;
			foreach(new i : Player)
			{
			    if(PlayerInfo[i][InClan] == lc)
			    {
			        PlayerInfo[i][CRP] = final_;
			        PlayerInfo[i][CR] = newcr;
			    }
			}
			new query[156];
			mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `rankprog`='%d', `rank`='%d' WHERE `cid`='%d' LIMIT 1", final_, newcr, lc);
			mysql_tquery(mysql, query);
			SendClientMessageToAll(COLOR_YELLOW, "[DERANK] Clan %s ranked down to %s!", lctag, ReturnCR(newcr));
	    }
	}
	return 1;
}

ReturnCR(rank)
{
    new str[50];
	switch(rank)
	{
	    case 0:
		{
			str = "Unranked";
	    }
		case 1:
		{
			str = "Silvers";
	    }
		case 2:
		{
			str = "Silvers Master";
	    }
	    case 3:
		{
			str = "Master Guardians";
	    }
		case 4:
		{
			str = "Master Guardians Elite";
	    }
	    case 5:
		{
			str = "Legendary Eagles";
	    }
	    case 6:
		{
			str = "Leagendary Eagles Master";
	    }
	    case 7:
		{
			str = "The Global Elites";
	    }
	}
	return str;
}

ShowCRLogo(playerid, rank)
{
	new str[50];
	switch(rank)
	{
	    case 0:
		{
			str = "Unranked";
			PlayerTextDrawSetString(playerid, CR_PREVR[playerid], "");
			PlayerTextDrawSetString(playerid, CR_NEXTR[playerid], "Silvers");
	    }
		case 1:
		{
			str = "Silvers";
			TextDrawShowForPlayer(playerid, CR_S);
			PlayerTextDrawSetString(playerid, CR_PREVR[playerid], "Unranked");
			PlayerTextDrawSetString(playerid, CR_NEXTR[playerid], "Silvers Master");
	    }
		case 2:
		{
			str = "Silvers Master";
			TextDrawShowForPlayer(playerid, CR_SM);
			PlayerTextDrawSetString(playerid, CR_PREVR[playerid], "Silvers");
			PlayerTextDrawSetString(playerid, CR_NEXTR[playerid], "Guardians");
	    }
	    case 3:
		{
			str = "Guardians";
			TextDrawShowForPlayer(playerid, CR_MG);
			PlayerTextDrawSetString(playerid, CR_PREVR[playerid], "Silvers Master");
			PlayerTextDrawSetString(playerid, CR_NEXTR[playerid], "Master Guardians");
	    }
		case 4:
		{
			str = "Master Guardians";
			TextDrawShowForPlayer(playerid, CR_MGE[0]);
			TextDrawShowForPlayer(playerid, CR_MGE[1]);
			PlayerTextDrawSetString(playerid, CR_PREVR[playerid], "Guardians");
			PlayerTextDrawSetString(playerid, CR_NEXTR[playerid], "Legendary Eagles");
	    }
	    case 5:
		{
			str = "Legendary Eagles";
			TextDrawShowForPlayer(playerid, CR_LE[0]);
			TextDrawShowForPlayer(playerid, CR_LE[1]);
			TextDrawShowForPlayer(playerid, CR_LE[2]);
			PlayerTextDrawSetString(playerid, CR_PREVR[playerid], "Master Guardians");
			PlayerTextDrawSetString(playerid, CR_NEXTR[playerid], "Legendary Eagles Master");
	    }
	    case 6:
		{
			str = "Leagendary Eagles Master";
			TextDrawShowForPlayer(playerid, CR_LEM[0]);
			TextDrawShowForPlayer(playerid, CR_LEM[1]);
			TextDrawShowForPlayer(playerid, CR_LEM[2]);
			TextDrawShowForPlayer(playerid, CR_LEM[3]);
			PlayerTextDrawSetString(playerid, CR_PREVR[playerid], "Legendary Eagles");
			PlayerTextDrawSetString(playerid, CR_NEXTR[playerid], "Global Elites");
	    }
	    case 7:
		{
			str = "The Global Elites";
			TextDrawShowForPlayer(playerid, CR_GE[0]);
			TextDrawShowForPlayer(playerid, CR_GE[1]);
			TextDrawShowForPlayer(playerid, CR_GE[2]);
			TextDrawShowForPlayer(playerid, CR_GE[3]);
			PlayerTextDrawSetString(playerid, CR_PREVR[playerid], "Legendary Eagles Master");
			PlayerTextDrawSetString(playerid, CR_NEXTR[playerid], "");
	    }
	}
	PlayerTextDrawSetString(playerid, CRName[playerid], str);
	PlayerTextDrawShow(playerid, CR_PREVR[playerid]);
	PlayerTextDrawShow(playerid, CR_NEXTR[playerid]);
	PlayerTextDrawShow(playerid, CRName[playerid]);
	return 1;
}

HideCRLogo(playerid)
{
	PlayerTextDrawHide(playerid, CR_PREVR[playerid]);
	PlayerTextDrawHide(playerid, CR_NEXTR[playerid]);
	TextDrawHideForPlayer(playerid, CR_S);
	TextDrawHideForPlayer(playerid, CR_SM);
	TextDrawHideForPlayer(playerid, CR_MG);
	TextDrawHideForPlayer(playerid, CR_MGE[0]);
	TextDrawHideForPlayer(playerid, CR_MGE[1]);
	TextDrawHideForPlayer(playerid, CR_LE[0]);
	TextDrawHideForPlayer(playerid, CR_LE[1]);
	TextDrawHideForPlayer(playerid, CR_LE[2]);
	TextDrawHideForPlayer(playerid, CR_LEM[0]);
	TextDrawHideForPlayer(playerid, CR_LEM[1]);
	TextDrawHideForPlayer(playerid, CR_LEM[2]);
	TextDrawHideForPlayer(playerid, CR_LEM[3]);
	TextDrawHideForPlayer(playerid, CR_GE[0]);
	TextDrawHideForPlayer(playerid, CR_GE[1]);
	TextDrawHideForPlayer(playerid, CR_GE[2]);
	TextDrawHideForPlayer(playerid, CR_GE[3]);
	PlayerTextDrawHide(playerid, CRName[playerid]);
	return 1;
}

GetMaxMembersFromLevel(x)
{
	new maxx;
	switch(x)
	{
		case 1: maxx = 20;
		case 2: maxx = 30;
		case 3: maxx = 40;
		case 4: maxx = 50;
		case 5: maxx = 60;
		default: maxx = 70;
	}
	return maxx;
}

CMD:ci(playerid) return cmd_claninfo(playerid);

CMD:claninfo(playerid)
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan /createclan");
	new remain = GetTickCount() - PlayerInfo[playerid][CICMD];
	if(remain < 10000) return SendClientMessage(playerid, Dred, "Please wait 10 seconds between each time you use this cmd.");
	PlayerInfo[playerid][CICMD] = GetTickCount();
	clanin(playerid);
	SendClientMessage(playerid,clanxx,"Press FIRE or LMB to close the box");
	return 1;
}
GetClanleader(zz)
{
	foreach(new i : Player) if(PlayerInfo[i][InClan] == zz) if(PlayerInfo[i][ClanLead] == zz || PlayerInfo[i][ClanOwn] == zz || PlayerInfo[i][ClanCoOwn] == zz) return i;
	return INVALID_PLAYER_ID;
}
CMD:clansearch(playerid, params[])
{
	new name[20];
	if(sscanf(params,"s[20]",name)) return USG(playerid,"/clansearch (clan name / part of name)");
	if(strlen(name) < 2 || strlen(name) > 4) return SendClientMessage(playerid, Dred, "invalid length");
	new query[120];
	mysql_format(mysql, query, sizeof(query), "SELECT `cid`, `cname` FROM `clans` WHERE `cname` LIKE '%%%e%%' LIMIT 25", name);
	mysql_pquery(mysql, query, "OnClanSearch", "i", playerid);
	return 1;
}

forward OnClanSearch(playerid);
public OnClanSearch(playerid)
{
	new cc = cache_num_rows();
	if(cc>0)
	{

		new cat[2000];
		for(new row = 0; row < cc; row++)
		{

			new name[20], id;
			cache_get_value_name(row, "cname", name);
			cache_get_value_name_int(row, "cid", id);
			format(cat, _, "%s{B71F09}ID: %d | {B7B7B7}%s |ON: {B71F09}%d\n", cat, id, name, GetOnLineClanMembers(id));
		}
		ShowPlayerDialog(playerid,774,DIALOG_STYLE_LIST,"Modern warfare 3 Clans Search",cat,"ok","");
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "No clans found.");
}

CMD:cperks(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan.");
	new str[80*MAX_PERKS], Day, Hour, Minute, Second, remain;
	str = "Perk\tRemaining Time\n";
	new bool:hh;
	hh = false;
	for(new i; i < MAX_PERKS; i++)
	{
		if(cPerk[playerid][i] > 0)
		{
			hh = true;
			remain = cPerk[playerid][i]+ 432000 - gettime(); //86400 1 day in second
			if(remain < 0) continue;
			Day = (remain - (remain % 86400)) / 86400;
			remain = remain % 86400;
			Hour = (remain - (remain % 3600)) / 3600;
			remain = remain % 3600;
			Minute = (remain - (remain % 60)) / 60;
			Second = remain % 60;
			switch(i)
			{
				case 0: format(str, _, "%sSniper on Spawn\t %d Days %d Hours %d Minutes %d Seconds\n", str, Day, Hour, Minute, Second);
				case 1: format(str, _, "%sArmour on Spawn\t %d Days %d Hours %d Minutes %d Seconds\n", str, Day, Hour, Minute, Second);
				case 2: format(str, _, "%sFast Capture\t %d Days %d Hours %d Minutes %d Seconds\n", str, Day, Hour, Minute, Second);
				case 3: format(str, _, "%sNo Death Tax\t %d Days %d Hours %d Minutes %d Seconds\n", str, Day, Hour, Minute, Second);
				case 4: format(str, _, "%sDouble Cash on Capping-Killing\t %d Days %d Hours %d Minutes %d Seconds\n", str, Day, Hour, Minute, Second);
				case 5: format(str, _, "%s\nHelmet on Spawn\t %d Days %d Hours %d Minutes %d Seconds\n", str, Day, Hour, Minute, Second);
				case 6: format(str, _, "%sGasmask on Spawn\t %d Days %d Hours %d Minutes %d Seconds\n", str, Day, Hour, Minute, Second);
				case 7: format(str, _, "%sClan Base\t %d Days %d Hours %d Minutes %d Seconds", str, Day, Hour, Minute, Second);
			}
		}
	}
	if(hh) ShowPlayerDialog(playerid, DIALOG_CPERKS, DIALOG_STYLE_TABLIST_HEADERS, "Clan Perks", str, "ok", "");
	else ERR(playerid, "Your clan does not have any perks activated.");
	return 1;
}
CMD:buyperks(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan.");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanLead] == x || PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{
		ShowPlayerDialog(playerid, PERK_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Buy Clan Perks", "Perk\tPrice in HP\nSniper on Spawn\t{FF7100}10000\nArmour on Spawn\t8000{FF6100}\nFast Capture\t{FF4C00}5000\nNo Death Tax \t{FF4C00}4000\nDouble Cash on Cap/Kill\t{FF9900}11000\nHelmet on Spawn\t{FFDF00}15000\nGasmask on Spawn\t{FFC600}12000\nClan Base\t{FFFF00}20000","Buy","Close");
	}else return ERR(playerid,"Only leaders/owners/co-owners can use this command");
	return 1;
}

forward OnClanPerk(playerid,perk);
public OnClanPerk(playerid,perk)
{
	if(cache_num_rows()>0)
	{
		new substr, points,str[200], Hour, Minute, Second, Timestamp, xx = PlayerInfo[playerid][InClan];
		cache_get_value_name_int(0, "chpoints", points);
		switch(perk)
		{

			case 0:	substr = 10000;
			case 1:	substr = 8000;
			case 2:	substr = 5000;
			case 3:	substr = 4000;
			case 4:	substr = 11000;
			case 5:	substr = 15000;
			case 6:	substr = 12000;
			case 7:	substr = 20000;
		}
		format(str, _, "Your clan treasury is missing %d Honor Points to activate this perk.", substr-points);
		if(points < substr) return ERR(playerid,str);
		if(perk == 7) return mysql_pquery(mysql, "SELECT EXISTS(SELECT 1 FROM `clans` WHERE perk7 > 0 LIMIT 1)", "OnClanBaseCheck", "i", playerid);
		Timestamp = gettime(Hour, Minute, Second);
		mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`=`chpoints`-%d, `perk%d`=%d WHERE `cid`=%d LIMIT 1",substr, perk, Timestamp, xx);
		mysql_tquery(mysql, str);
		mysql_format(mysql, str, sizeof(str), "CREATE EVENT `%d_perk_%d` ON SCHEDULE AT CURRENT_TIMESTAMP() + INTERVAL 5 DAY DO UPDATE `clans` SET `perk%d`=0 WHERE `cid`='%d'", xx, perk, perk, PlayerInfo[playerid][InClan]);
		mysql_tquery(mysql, str);
		format(str, _, "%s bought a perk for %d HP.", PlayerInfo[playerid][Nick], points);
		RecordClanCMD(str, xx);
		foreach(new i : Player)
		{
			if(PlayerInfo[i][InClan] == xx)
			{
				SendClientMessage(i,clanxx,"[Notice]: A perk has been successfully activated in your clan, check /cperks.");
				cPerk[i][perk] = Timestamp;
			}
		}
		return 1;
	}
	else return SendClientMessage(playerid, Dred, "Oups, something went wrong.. Please report this error to an admin ERR_CLAN_PERK_1111125");
}

forward OnClanBaseCheck(playerid);
public OnClanBaseCheck(playerid)
{
	new p, xx = PlayerInfo[playerid][InClan]; cache_get_value_index_int(0, 0, p);
	if(p == 1) return ERR(playerid, "Clan base is already owned by another clan, type /cbcheck to know remaining time for the clan base..");
	new str[200], Hour, Minute, Second, Timestamp;
	Timestamp = gettime(Hour, Minute, Second);
	mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `chpoints`= `chpoints`-20000, `perk7`= '%d' WHERE `cid`='%d' LIMIT 1", Timestamp, xx);
	mysql_tquery(mysql, str);
	mysql_format(mysql, str, sizeof(str), "CREATE EVENT `%d_perk_7` ON SCHEDULE AT CURRENT_TIMESTAMP() + INTERVAL 5 DAY DO UPDATE `clans` SET `perk7`=0 WHERE `cid`='%d'",xx, PlayerInfo[playerid][InClan]);
	mysql_tquery(mysql, str);
	foreach(new i : Player)
	{

		if(PlayerInfo[i][InClan] == xx)
		{

			SendClientMessage(i,clanxx,"[Notice]: A perk has been successfully activated in your clan, check /cperks.");
			cPerk[i][7] = Timestamp;
			SetPlayerMapIcon(playerid, 40, -1376.5936,1330.8347,15.0127, 57, 0, MAPICON_GLOBAL);
		}
	}
	SendClientMessageToAll(COLOR_PINK, "%s clan now owns the clan island.", cName[playerid]);
	return 1;
}

CMD:ad(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan /createclan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanLead] == x || PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new remain = GetTickCount() - ServerInfo[ADT];
		if(remain < 1800000) return ERR(playerid,"Another clan advertised recently please try again later.");
		new query[80];
		mysql_format(mysql, query, sizeof(query), "SELECT `chpoints`,`cname` FROM `clans` WHERE `cid`= %d LIMIT 1", PlayerInfo[playerid][InClan]);
		mysql_pquery(mysql, query, "OnClanAd", "i", playerid);
	}else return ERR(playerid,"Only leaders can use this command");
	return 1;
}

CMD:cbcheck(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan.");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new remain = GetTickCount() - PlayerInfo[playerid][CBCHECKCMD];
		if(remain < 15000) return SendClientMessage(playerid, Dred, "You have recently used this cmd, please try again later.");
		PlayerInfo[playerid][CBCHECKCMD] = GetTickCount();
		mysql_pquery(mysql, "SELECT `cname`, `perk7` FROM `clans` WHERE `perk7` > 0 LIMIT 1", "OnCbcheck", "i", playerid);
	}else return ERR(playerid,"Only owners/co-owners can use this command");
	return 1;
}

forward OnCbcheck(playerid);
public OnCbcheck(playerid)
{
	if(cache_num_rows()>0)
	{

		new until, name[20];
		cache_get_value_name_int(0, "perk7", until);
		cache_get_value_name(0, "cname", name);
		new remain = until + 432000 - gettime(); //86400 1 day in second
		new Day = (remain - (remain % 86400)) / 86400;
		remain = remain % 86400;
		new Hour = (remain - (remain % 3600)) / 3600;
		remain = remain % 3600;
		new Minute = (remain - (remain % 60)) / 60;
		new Second = remain % 60;
		SendClientMessage(playerid, COLOR_GREEN, "Clan Island is owned by %s and will be available again after %d:%d:%d:%d", name, Day, Hour, Minute, Second);
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GREEN, "Clan base is not activated by any clan and is available.");
}

forward OnClanAd(playerid);
public OnClanAd(playerid)
{
	if(cache_num_rows()>0)
	{

		new points, name[20];
		cache_get_value_name_int(0, "chpoints", points),
		cache_get_value_name(0, "cname", name);
		if(points < 100) return ERR(playerid,"You need atleast 100 honor point to advertise your clan.");
		new str[94], xx = PlayerInfo[playerid][InClan];
		mysql_format(mysql, str, 94, "UPDATE `clans` SET `chpoints`= `chpoints` - 100 WHERE `cid`='%d' LIMIT 1", xx);
		mysql_tquery(mysql, str);
		ServerInfo[ADT] = GetTickCount();
		SetTimer("StopClanAd", 12000, false);
		new msg[160];
		format(msg, _, "%s advertised the clan for 100 HP.", PlayerInfo[playerid][Nick], points);
		RecordClanCMD(msg, xx);
		TextDrawSetString(C_AD[1], "clan ~r~%s~w~ is recruiting new members~n~Contact ~p~%s(%d)~r~ or ~w~apply at forum to join ~p~mw3-samp.org", name, PlayerInfo[playerid][Nick], playerid);
		TextDrawShowForAll(C_AD[0]);
		TextDrawShowForAll(C_AD[1]);
		return 1;
	}
	else return SendClientMessage(playerid, Dred, "Oups, something went wrong.. Please report this error to an admin ERR_CLAN_ADV_1111115");
}

forward StopClanAd();
public StopClanAd()
{
	TextDrawHideForAll(C_AD[0]);
	TextDrawHideForAll(C_AD[1]);
	return 1;
}

CMD:am(playerid) return cmd_addmember(playerid);
CMD:addmember(playerid)
{
	new x = PlayerInfo[playerid][InClan];
	new count;
	new Cat[1200];
	if(x == -1) return ERR(playerid,"You are not in any clan /createclan");
	if(CLAN_WAR[CW_STARTED]) return ERR(playerid,"Clan war already started you can't add more players");
	if(!CLAN_WAR[CW_ON]) return ERR(playerid,"There is no running clan war.");
	if(CLAN_WAR[CW_STARTER] == playerid)
	{
		if(Iter_Count(JOINED1) == CLAN_WAR[CW_MAX]) return ERR(playerid, "No more free war slots for your clan.");
		if(CLAN_WAR[CW_ON])
		{
			foreach(new i : Player)
			{
				if(!HasJoined1(i))
				{
					if(PlayerInfo[i][InClan] == x)
					{
						if(i != playerid)
						{
							ADDM[playerid][count] = i;
							format(Cat, _, "%s{C0C0C0}[ %s %s ]\n", Cat, cRankName[i] ,PlayerInfo[i][Nick]);
							count ++;
						}
					}
				}
			}
		}
	}
	else if(CLAN_WAR[CW_ACCEPTER] == playerid)
	{

		if(Iter_Count(JOINED2) == CLAN_WAR[CW_MAX]) return ERR(playerid, "No more free war slots for your clan.");
		if(CLAN_WAR[CW_ON])
		{
			foreach(new i : ARENA[NON])
			{
				if(!HasJoined2(i))
				{
					if(PlayerInfo[i][InClan] == x)
					{
						if(i != playerid)
						{

							ADDM[playerid][count] = i;
							format(Cat, _, "%s{C0C0C0}[ %s %s ]\n", Cat, cRankName[i] ,PlayerInfo[i][Nick]);
							count ++;
						}
					}
				}
			}
		}
	}
	else return ERR(playerid,"Only the leaders who started the clan war can use this command");
	ShowPlayerDialog(playerid,ADDM_DIALOG,DIALOG_STYLE_LIST,"Add Members",Cat,"Add","Close");
	return 1;
}

CMD:playsound(playerid,params[])
{
	PlayerPlaySound(playerid, strval(params),0,0,0);
	return 1;
}

HideViewersTD(playerid)
{
    TextDrawHideForPlayer(playerid, CTSpectatorT);
    TextDrawHideForPlayer(playerid, CTSpectatorI);
    TextDrawHideForPlayer(playerid, CTSpectatorB);
    TextDrawHideForPlayer(playerid, CTSpectatorTwitch);
    TextDrawHideForPlayer(playerid, CTSpectatorIg);
	return 1;
}

ShowViewersTD(playerid)
{
    TextDrawShowForPlayer(playerid, CTSpectatorT);
    TextDrawShowForPlayer(playerid, CTSpectatorI);
    TextDrawShowForPlayer(playerid, CTSpectatorB);
    TextDrawShowForPlayer(playerid, CTSpectatorTwitch);
    TextDrawShowForPlayer(playerid, CTSpectatorIg);
	return 1;
}

CMD:tspec(playerid)
{
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You cannot use this command while in a duel!");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in event");
	if(HasJoined(playerid)) return ERR(playerid,"This command has been disabled in a clan war.");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use this command while in Death-Match");
	if(!ct_available || !CLAN_WAR[CW_ON]) return SendClientMessage(playerid, RED,"There is no clan war currently being played.");
	if(IsSpectator[playerid]) return SendClientMessage(playerid,Dred,"* You are already spectating!");
	SendClientMessage(playerid,-1,"* You are now spectating, you can use /tspecoff to stop spectating.");
	SendClientMessage(playerid,-1,"* Use mouse button to spectate next player.");
	IsSpectator[playerid] = true;
	SetPlayerInterior(playerid, 10);
	SetPlayerVirtualWorld(playerid,66);
	TogglePlayerSpectating(playerid, true);
	Bit_Set(ToggleState[playerid], TOGGLE_TEXTDRAWS, false);
	tournamentshown[playerid] = false;
	HideBox(playerid);
	PlayerTextDrawHide(playerid,Guit[playerid][0]);
	TextDrawHideForPlayer(playerid, BoxDraw1);
	PlayerTextDrawHide(playerid,Guit[playerid][1]);
	PlayerTextDrawHide(playerid,Guit[playerid][2]);
	TextDrawHideForPlayer(playerid, TournamentTD);
	TextDrawHideForPlayer(playerid, TournamentTD2);

    TextDrawShowForPlayer(playerid, CTSpectatorT);
    TextDrawShowForPlayer(playerid, CTSpectatorI);
    TextDrawShowForPlayer(playerid, CTSpectatorB);
    TextDrawShowForPlayer(playerid, CTSpectatorTwitch);
    TextDrawShowForPlayer(playerid, CTSpectatorIg);
    TextDrawShowForPlayer(playerid, CW_ROUNDS);

    
    TextDrawHideForPlayer(playerid, QuestTitle);
	for(new i; i < 3; i++)	TextDrawHideForPlayer(playerid, Quest[i]);
	if(PlayerInfo[playerid][dRank] > 0) TextDrawHideForPlayer(playerid, Quest[3]);
	if(PlayerInfo[playerid][InClan] > -1) TextDrawHideForPlayer(playerid, Quest[4]);

	if(CLAN_WAR[CW_WARMUP])
	{
		TextDrawShowForPlayer(playerid, Warmup0);
		TextDrawShowForPlayer(playerid, Warmup1);
		TextDrawShowForPlayer(playerid, Warmup2);
		new pp = CLAN_WAR[CW_WARMUP_START];
		new inerpolatetime = pp + 60000 - GetTickCount();
		InterpolateCameraPos(playerid, -968.526245, 1019.879821, 1361.134277, -1136.270019, 1019.231140, 1360.633789, inerpolatetime);
		InterpolateCameraLookAt(playerid, -971.109191, 1023.850158, 1359.532836, -1133.462158, 1023.023681, 1358.980712, inerpolatetime);
	}
	else
	{
	    new bool:found;
		foreach(new i : ALIVE1)
		{
		    found = true;
			SpectatedPlayer2[playerid] = i;
			PlayerSpectatePlayer(playerid, i);
			break;
		}
		if(!found)
		{
			foreach(new i : ALIVE2)
			{
				SpectatedPlayer2[playerid] = i;
				PlayerSpectatePlayer(playerid, i);
				break;
			}
		}
	}
	new maxx = CLAN_WAR[CW_MAX];
	for(new i=0; i < maxx; i++)
	{
		TextDrawShowForPlayer(playerid, CW_MEMBER[i]);
		TextDrawShowForPlayer(playerid, CW_MEMBER_2[i]);
		if(IsPlayerConnected(WAR_SLOT_T1[i]))
		{
			ShowPlayerProgressBar(playerid, CW_STAT_BAR[playerid][HPP][i]);
			ShowPlayerProgressBar(playerid, CW_STAT_BAR[playerid][ARMOURR][i]);
		}
		else TextDrawShowForPlayer(playerid, CW_DISCONNECT[i]);
		if(IsPlayerConnected(WAR_SLOT_T2[i]))
		{
			ShowPlayerProgressBar(playerid, CW_STAT_BAR_2[playerid][HPP][i]);
			ShowPlayerProgressBar(playerid, CW_STAT_BAR_2[playerid][ARMOURR][i]);
		}
		else TextDrawShowForPlayer(playerid, CW_DISCONNECT_2[i]);
	}
	return 1;
}

GetCTSpectators()
{
	new cc;
	foreach(new i : Player) if(IsSpectator[i]) cc++;
	return cc;
}

CMD:tspecoff(playerid)
{
	if(!IsSpectator[playerid]) return ERR(playerid, "You are not spectating.");
	TogglePlayerSpectating(playerid, false);
	IsSpectator[playerid] = false;
	SendClientMessage(playerid, -1, "You have stopped spectating.");
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid,0);
	Bit_Set(ToggleState[playerid], TOGGLE_TEXTDRAWS, true);
	tournamentshown[playerid] = true;
	ShowBoxPlayer(playerid);
	PlayerTextDrawShow(playerid,Guit[playerid][0]);
	TextDrawShowForPlayer(playerid, BoxDraw1);
	PlayerTextDrawShow(playerid,Guit[playerid][1]);
	PlayerTextDrawShow(playerid,Guit[playerid][2]);
	TextDrawShowForPlayer(playerid, TournamentTD);
	TextDrawShowForPlayer(playerid, TournamentTD2);
	HideMVP(playerid);
	TextDrawShowForPlayer(playerid, QuestTitle);
	for(new i; i < 3; i++)	if(!Bit_Get(QuestDone[playerid], i)) TextDrawShowForPlayer(playerid, Quest[i]);
	if(PlayerInfo[playerid][dRank] > 0) if(!Bit_Get(QuestDone[playerid], 3)) TextDrawShowForPlayer(playerid, Quest[3]);
	if(PlayerInfo[playerid][InClan] > -1) if(!Bit_Get(QuestDone[playerid], 4)) TextDrawShowForPlayer(playerid, Quest[4]);

	TextDrawHideForPlayer(playerid, CTSpectatorT);
    TextDrawHideForPlayer(playerid, CTSpectatorI);
    TextDrawHideForPlayer(playerid, CTSpectatorB);
    TextDrawHideForPlayer(playerid, CTSpectatorTwitch);
    TextDrawHideForPlayer(playerid, CTSpectatorIg);
    TextDrawHideForPlayer(playerid, CW_ROUNDS);
    new maxx = CLAN_WAR[CW_MAX];
    for(new i=0; i < maxx; i++)
	{
		TextDrawHideForPlayer(playerid, CW_MEMBER[i]);
		TextDrawHideForPlayer(playerid, CW_MEMBER_2[i]);
		TextDrawHideForPlayer(playerid, CW_DISCONNECT[i]);
		TextDrawHideForPlayer(playerid, CW_DISCONNECT_2[i]);
		HidePlayerProgressBar(playerid, CW_STAT_BAR[playerid][HPP][i]);
		HidePlayerProgressBar(playerid, CW_STAT_BAR[playerid][ARMOURR][i]);
		HidePlayerProgressBar(playerid, CW_STAT_BAR_2[playerid][HPP][i]);
		HidePlayerProgressBar(playerid, CW_STAT_BAR_2[playerid][ARMOURR][i]);
	}
	return 1;
}

CMD:clanwar(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan /createclan");
	new x = PlayerInfo[playerid][InClan];
	new id,maxx,map,rounds;
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid, "Cannot make clan war in PUBG event.");
	if(CLAN_TOURNAMENT[CT_ON] == true) return ERR(playerid,"There is an active clan tournament, you cannot make any clan war.");
	if(CLAN_WAR[CW_ON] == true) return ERR(playerid,"There is already a clan war active , try later");
	if(PlayerInfo[playerid][ClanLead] == x || PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{
		if(sscanf(params,"dddd",id,maxx,map,rounds)) return USG(playerid,"/Clanwar [clan id] [max members] [MAP (1-2-3)] [Rounds (1-9)] /clans");
		if(id == x) return ERR(playerid,"oops this is your clan id ..");
		if(map < 1 || map > 3) return ERR(playerid,"only 3 maps ( 1- de_dust, 2- inferno, 3- RC Battlefied");
		if(maxx < 1 || maxx > 10) return ERR(playerid,"Minimum members count is 3 and 10 is max");
		if(!(rounds == 1 || rounds == 3 || rounds == 5 || rounds == 7 || rounds == 9)) return ERR(playerid,"Available rounds: 1 | 3 | 5 | 7 | 9");
		foreach(new i : Player) if(PlayerInfo[i][CWINV] == true) return ERR(playerid,"There is already a clan war request in the server.");
		if(GetOnLineClanMembers(id) < maxx) {
			SendClientMessage(playerid,Dred,"* This clan has %d online members",GetOnLineClanMembers(id));
			return ERR(playerid,"Change the maximum members to join or try another clan");
		}
		if(GetOnLineClanMembers(x) < maxx) return ERR(playerid,"You have less online members");
		if(GetClanleader(id) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in this clan");
		if(HasJoined(playerid)) return ERR(playerid,"You are already in clan war");
		new remain = GetTickCount() - PlayerInfo[playerid][CWS];
		if(remain < 30000)
		{
			SendClientMessage(playerid, red, "* Please wait %d seconds before using this command again", 30 - remain / 1000);
			return 1;
		}
		PlayerInfo[playerid][CWS] = GetTickCount();
		new ld = GetClanleader(id);
		GameTextForPlayer(ld,"~n~~r~~h~Clan war invitation",6000,5);
		GameTextForPlayer(playerid,"~n~~g~~h~Clan war invitation sent",6000,5);
		SendClientMessage(playerid,0xBDFA05FF,"* Clan war request sent to %s's clan",cName[ld]);
		SendClientMessage(ld,0xBDFA05FF,"[CLAN-WAR] %s clan is requesting a clan war from leader %s /yes to accept or /no to refuse. Please wait for 15 seconds.",cName[playerid],PlayerInfo[playerid][Nick]);
		PlayerInfo[ld][CWINV] = true;
		cwtimer = SetTimerEx("CWinv",15000,false,"d",ld);
		CLAN_WAR[CW_ON] = true;
		CLAN_WAR[CW_STARTER] = playerid;
		CLAN_WAR[CW_ACCEPTER] = ld;
		CLAN_WAR[CW_MAP] = map;
		CLAN_WAR[CW_MAX]= maxx;
		CLAN_WAR[CW_ROUNDSS]= rounds;
		CLAN_WAR[CW_ROUND1]= CLAN_WAR[CW_ROUND2]= 0;
		CLAN_WAR[CW_C1] = x;
		CLAN_WAR[CW_C2] = id;
		CLAN_WAR[CW_STARTED] = false;
		CLAN_WAR[CW_WARMUP_SECONDS] = 60;
		Iter_Clear(JOINED1);
		Iter_Clear(JOINED2);
		Iter_Add(JOINED1, playerid);
		Iter_Add(JOINED2, ld);
	}
	return 1;
}

CMD:makect(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 8) return ERR(playerid,"CMD restricted to owners only.");
	if(CLAN_TOURNAMENT[CT_ON]) return ERR(playerid, "A clan tournament is already created / being made by a level 8.");
	ShowPlayerDialog(playerid, MAKECT_DIALOG, DIALOG_STYLE_LIST, "Clan Tournament Creator: Number of participating teams", "4 Teams\n8 Teams", "Next", "Cancel");
	return 1;
}
CMD:cancelct(playerid)
{
	if(PlayerInfo[playerid][Level] < 8) return ERR(playerid,"CMD restricted to owners only.");
	if(!CLAN_TOURNAMENT[CT_ON]) return ERR(playerid, "There already is no clan tournament running.");
    SendClientMessage(playerid, Dred, "Clan tournament has been canceled."); CLAN_TOURNAMENT[CT_ON] = false; CLAN_TOURNAMENT[CT_PLAYING] = false;
	foreach(new i : CT_TEAMS) {CT_TEAM[i] = -1;}
	Iter_Clear(CT_TEAMS);
	for(new i=0; i < 4; i++) strcopy(CT_SEMI_TAG[i], "?");
    strcopy(CT_FINALS_TAG[0], "?");
    strcopy(CT_FINALS_TAG[1], "?");
	return 1;
}
CMD:ctinfo(playerid)
{
	SeeingCT[playerid] = true;
	TextDrawShowForPlayer(playerid, CT_BOX);
	TextDrawShowForPlayer(playerid, CT_PRIZE);
	TextDrawShowForPlayer(playerid, CT_WINNER_TD);
	TextDrawShowForPlayer(playerid, CT_INFO_TD);
	TextDrawShowForPlayer(playerid, CT_QUARTER[0]);
	TextDrawShowForPlayer(playerid, CT_QUARTER[1]);
	TextDrawShowForPlayer(playerid, CT_QUARTER[2]);
	TextDrawShowForPlayer(playerid, CT_QUARTER[3]);
	TextDrawShowForPlayer(playerid, CT_SEMI[0]);
	TextDrawShowForPlayer(playerid, CT_SEMI[1]);
	TextDrawShowForPlayer(playerid, CT_FINALS);
	TextDrawShowForPlayer(playerid, CT_INFO_TD_2);
	return 1;
}

CMD:ctplay(playerid)
{
	if(PlayerInfo[playerid][Level] < 8) return ERR(playerid,"CMD restricted to owners only.");
	if(!CLAN_TOURNAMENT[CT_ON]) return ERR(playerid, "There is no clan tournament running.");
	if(CLAN_TOURNAMENT[CT_PLAYING]) return ERR(playerid, "There's already a clan tournament match running.");
	switch(CLAN_TOURNAMENT[CT_PHASE])
	{
	    case QUARTER:
	    {
	        switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
	        {
	            case 0:
	            {
	                new t1 = CLAN_TOURNAMENT[CT_QUARTER_TEAM1][0], t2 = CLAN_TOURNAMENT[CT_QUARTER_TEAM2][0], maxx = CLAN_TOURNAMENT[CT_MAX];
	               	foreach(new i : Player) if(PlayerInfo[i][CWINV] == true) return ERR(playerid,"There is already a clan war request in the server.");
					if(GetOnLineClanMembers(t1) < maxx) {
						SendClientMessage(playerid,Dred,"* First clan has only %d online members", GetOnLineClanMembers(t1));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetOnLineClanMembers(t2) < maxx) {
						SendClientMessage(playerid,Dred,"* Second clan has only %d online members", GetOnLineClanMembers(t2));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetClanleader(t1) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the first clan");
					if(GetClanleader(t2) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the second clan");
					new ld2 = GetClanleader(t2);
					new ld1 = GetClanleader(t1);
					GameTextForPlayer(ld2,"~n~~r~~h~Clan Tournament Request",6000,5);
					GameTextForPlayer(ld1,"~n~~g~~h~Clan Tournament Request",6000,5);
					CLAN_WAR[CW_ON] = true;
					CLAN_WAR[CW_STARTER] = ld1;
					CLAN_WAR[CW_ACCEPTER] = ld2;
					CLAN_WAR[CW_MAP] = 3;
					CLAN_WAR[CW_MAX]= maxx;
					CLAN_WAR[CW_ROUNDSS]= 9;
					CLAN_WAR[CW_ROUND1]= CLAN_WAR[CW_ROUND2]= 0;
					CLAN_WAR[CW_C1] = t1;
					CLAN_WAR[CW_C2] = t2;
					CLAN_WAR[CW_STARTED] = false;
					CLAN_WAR[CW_WARMUP_SECONDS] = 60;
					Iter_Clear(JOINED1);
					Iter_Clear(JOINED2);
					Iter_Add(JOINED1, ld1);
					Iter_Add(JOINED2, ld2);
					AddBeforeWar(ld1);
					AddBeforeWar(ld2);
					TextDrawSetString(CW[4], "%s                       vs                       %s", cTag[ld1], cTag[ld2]);
					TextDrawSetString(CW[5], "ROUNDS: %d~n~~n~MAX MEMBERS: %d~n~~n~Map: RC Battlefield", CLAN_WAR[CW_ROUNDSS], maxx);
					CLAN_WAR[CW_WAIT] = maxx*6;
					TextDrawSetString(CW[6], "War starting in: ~r~60");
					TextDrawSetString(CW[9], PlayerInfo[ld1][Nick]);
					TextDrawSetString(CW[10], PlayerInfo[ld2][Nick]);
					TextDrawSetString(CW[11], "~r~UNREADY ~w~(1/10)");
					TextDrawSetString(CW[12], "~r~UNREADY ~w~(1/10)");
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld2, CW[j]);
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld1, CW[j]);
					RefreshTimer = SetTimer("RefreshCWTD", 1000, false);
					SendClientMessage(ld2, -1, "Use /am to add members");
					SendClientMessage(ld1, -1, "Use /am to add members");
	            }
	            case 1:
	            {
	                new t1 = CLAN_TOURNAMENT[CT_QUARTER_TEAM1][1], t2 = CLAN_TOURNAMENT[CT_QUARTER_TEAM2][1], maxx = CLAN_TOURNAMENT[CT_MAX];
	               	foreach(new i : Player) if(PlayerInfo[i][CWINV] == true) return ERR(playerid,"There is already a clan war request in the server.");
					if(GetOnLineClanMembers(t1) < maxx) {
						SendClientMessage(playerid,Dred,"* First clan has only %d online members", GetOnLineClanMembers(t1));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetOnLineClanMembers(t2) < maxx) {
						SendClientMessage(playerid,Dred,"* Second clan has only %d online members", GetOnLineClanMembers(t2));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetClanleader(t1) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the first clan");
					if(GetClanleader(t2) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the second clan");
					new ld2 = GetClanleader(t2);
					new ld1 = GetClanleader(t1);
					GameTextForPlayer(ld2,"~n~~r~~h~Clan Tournament Request",6000,5);
					GameTextForPlayer(ld1,"~n~~g~~h~Clan Tournament Request",6000,5);
					CLAN_WAR[CW_ON] = true;
					CLAN_WAR[CW_STARTER] = ld1;
					CLAN_WAR[CW_ACCEPTER] = ld2;
					CLAN_WAR[CW_MAP] = 3;
					CLAN_WAR[CW_MAX]= maxx;
					CLAN_WAR[CW_ROUNDSS]= 9;
					CLAN_WAR[CW_ROUND1]= CLAN_WAR[CW_ROUND2]= 0;
					CLAN_WAR[CW_C1] = t1;
					CLAN_WAR[CW_C2] = t2;
					CLAN_WAR[CW_STARTED] = false;
					CLAN_WAR[CW_WARMUP_SECONDS] = 60;
					Iter_Clear(JOINED1);
					Iter_Clear(JOINED2);
					Iter_Add(JOINED1, ld1);
					Iter_Add(JOINED2, ld2);
					AddBeforeWar(ld1);
					AddBeforeWar(ld2);
					TextDrawSetString(CW[4], "%s                       vs                       %s", cTag[ld1], cTag[ld2]);
					TextDrawSetString(CW[5], "ROUNDS: %d~n~~n~MAX MEMBERS: %d~n~~n~Map: RC Battlefield", CLAN_WAR[CW_ROUNDSS], maxx);
					CLAN_WAR[CW_WAIT] = maxx*6;
					TextDrawSetString(CW[6], "War starting in: ~r~60");
					TextDrawSetString(CW[9], PlayerInfo[ld1][Nick]);
					TextDrawSetString(CW[10], PlayerInfo[ld2][Nick]);
					TextDrawSetString(CW[11], "~r~UNREADY ~w~(1/10)");
					TextDrawSetString(CW[12], "~r~UNREADY ~w~(1/10)");
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld2, CW[j]);
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld2, CW[j]);
					RefreshTimer = SetTimer("RefreshCWTD", 1000, false);
					SendClientMessage(ld2, -1, "Use /am to add members");
					SendClientMessage(ld1, -1, "Use /am to add members");
	            }
	            case 2:
	            {
					new t1 = CLAN_TOURNAMENT[CT_QUARTER_TEAM1][2], t2 = CLAN_TOURNAMENT[CT_QUARTER_TEAM2][2], maxx = CLAN_TOURNAMENT[CT_MAX];
	               	foreach(new i : Player) if(PlayerInfo[i][CWINV] == true) return ERR(playerid,"There is already a clan war request in the server.");
					if(GetOnLineClanMembers(t1) < maxx) {
						SendClientMessage(playerid,Dred,"* First clan has only %d online members", GetOnLineClanMembers(t1));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetOnLineClanMembers(t2) < maxx) {
						SendClientMessage(playerid,Dred,"* Second clan has only %d online members", GetOnLineClanMembers(t2));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetClanleader(t1) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the first clan");
					if(GetClanleader(t2) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the second clan");
					new ld2 = GetClanleader(t2);
					new ld1 = GetClanleader(t1);
					GameTextForPlayer(ld2,"~n~~r~~h~Clan Tournament Request",6000,5);
					GameTextForPlayer(ld1,"~n~~g~~h~Clan Tournament Request",6000,5);
					CLAN_WAR[CW_ON] = true;
					CLAN_WAR[CW_STARTER] = ld1;
					CLAN_WAR[CW_ACCEPTER] = ld2;
					CLAN_WAR[CW_MAP] = 3;
					CLAN_WAR[CW_MAX]= maxx;
					CLAN_WAR[CW_ROUNDSS]= 9;
					CLAN_WAR[CW_ROUND1]= CLAN_WAR[CW_ROUND2]= 0;
					CLAN_WAR[CW_C1] = t1;
					CLAN_WAR[CW_C2] = t2;
					CLAN_WAR[CW_STARTED] = false;
					CLAN_WAR[CW_WARMUP_SECONDS] = 60;
					Iter_Clear(JOINED1);
					Iter_Clear(JOINED2);
					Iter_Add(JOINED1, ld1);
					Iter_Add(JOINED2, ld2);
					AddBeforeWar(ld1);
					AddBeforeWar(ld2);
					TextDrawSetString(CW[4], "%s                       vs                       %s", cTag[ld1], cTag[ld2]);
					TextDrawSetString(CW[5], "ROUNDS: %d~n~~n~MAX MEMBERS: %d~n~~n~Map: RC Battlefield", CLAN_WAR[CW_ROUNDSS], maxx);
					CLAN_WAR[CW_WAIT] = maxx*6;
					TextDrawSetString(CW[6], "War starting in: ~r~60");
					TextDrawSetString(CW[9], PlayerInfo[ld1][Nick]);
					TextDrawSetString(CW[10], PlayerInfo[ld2][Nick]);
					TextDrawSetString(CW[11], "~r~UNREADY ~w~(1/10)");
					TextDrawSetString(CW[12], "~r~UNREADY ~w~(1/10)");
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld2, CW[j]);
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld1, CW[j]);
					RefreshTimer = SetTimer("RefreshCWTD", 1000, false);
					SendClientMessage(ld2, -1, "Use /am to add members");
					SendClientMessage(ld1, -1, "Use /am to add members");
	            }
	            case 3:
	            {
					new t1 = CLAN_TOURNAMENT[CT_QUARTER_TEAM1][3], t2 = CLAN_TOURNAMENT[CT_QUARTER_TEAM2][3], maxx = CLAN_TOURNAMENT[CT_MAX];
	               	foreach(new i : Player) if(PlayerInfo[i][CWINV] == true) return ERR(playerid,"There is already a clan war request in the server.");
					if(GetOnLineClanMembers(t1) < maxx) {
						SendClientMessage(playerid,Dred,"* First clan has only %d online members", GetOnLineClanMembers(t1));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetOnLineClanMembers(t2) < maxx) {
						SendClientMessage(playerid,Dred,"* Second clan has only %d online members", GetOnLineClanMembers(t2));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetClanleader(t1) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the first clan");
					if(GetClanleader(t2) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the second clan");
					new ld2 = GetClanleader(t2);
					new ld1 = GetClanleader(t1);
					GameTextForPlayer(ld2,"~n~~r~~h~Clan Tournament Request",6000,5);
					GameTextForPlayer(ld1,"~n~~g~~h~Clan Tournament Request",6000,5);
					CLAN_WAR[CW_ON] = true;
					CLAN_WAR[CW_STARTER] = ld1;
					CLAN_WAR[CW_ACCEPTER] = ld2;
					CLAN_WAR[CW_MAP] = 3;
					CLAN_WAR[CW_MAX]= maxx;
					CLAN_WAR[CW_ROUNDSS]= 9;
					CLAN_WAR[CW_ROUND1]= CLAN_WAR[CW_ROUND2]= 0;
					CLAN_WAR[CW_C1] = t1;
					CLAN_WAR[CW_C2] = t2;
					CLAN_WAR[CW_STARTED] = false;
					CLAN_WAR[CW_WARMUP_SECONDS] = 60;
					Iter_Clear(JOINED1);
					Iter_Clear(JOINED2);
					Iter_Add(JOINED1, ld1);
					Iter_Add(JOINED2, ld2);
					AddBeforeWar(ld1);
					AddBeforeWar(ld2);
					TextDrawSetString(CW[4], "%s                       vs                       %s", cTag[ld1], cTag[ld2]);
					TextDrawSetString(CW[5], "ROUNDS: %d~n~~n~MAX MEMBERS: %d~n~~n~Map: RC Battlefield", CLAN_WAR[CW_ROUNDSS], maxx);
					CLAN_WAR[CW_WAIT] = maxx*6;
					TextDrawSetString(CW[6], "War starting in: ~r~60");
					TextDrawSetString(CW[9], PlayerInfo[ld1][Nick]);
					TextDrawSetString(CW[10], PlayerInfo[ld2][Nick]);
					TextDrawSetString(CW[11], "~r~UNREADY ~w~(1/10)");
					TextDrawSetString(CW[12], "~r~UNREADY ~w~(1/10)");
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld2, CW[j]);
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld1, CW[j]);
					RefreshTimer = SetTimer("RefreshCWTD", 1000, false);
					SendClientMessage(ld2, -1, "Use /am to add members");
					SendClientMessage(ld1, -1, "Use /am to add members");
	            }
	        }
	    }
	    case SEMI:
		{
			switch(CLAN_TOURNAMENT[CT_PHASE_CURRENT_MATCH])
	        {
	            case 0:
	            {
					new t1 = CLAN_TOURNAMENT[CT_SEMI_TEAM1][0], t2 = CLAN_TOURNAMENT[CT_SEMI_TEAM2][0], maxx = CLAN_TOURNAMENT[CT_MAX];
	               	foreach(new i : Player) if(PlayerInfo[i][CWINV] == true) return ERR(playerid,"There is already a clan war request in the server.");
					if(GetOnLineClanMembers(t1) < maxx) {
						SendClientMessage(playerid,Dred,"* First clan has only %d online members", GetOnLineClanMembers(t1));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetOnLineClanMembers(t2) < maxx) {
						SendClientMessage(playerid,Dred,"* Second clan has only %d online members", GetOnLineClanMembers(t2));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetClanleader(t1) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the first clan");
					if(GetClanleader(t2) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the second clan");
					new ld2 = GetClanleader(t2);
					new ld1 = GetClanleader(t1);
					GameTextForPlayer(ld2,"~n~~r~~h~Clan Tournament Request",6000,5);
					GameTextForPlayer(ld1,"~n~~g~~h~Clan Tournament Request",6000,5);
					CLAN_WAR[CW_ON] = true;
					CLAN_WAR[CW_STARTER] = ld1;
					CLAN_WAR[CW_ACCEPTER] = ld2;
					CLAN_WAR[CW_MAP] = 3;
					CLAN_WAR[CW_MAX]= maxx;
					CLAN_WAR[CW_ROUNDSS]= 9;
					CLAN_WAR[CW_ROUND1]= CLAN_WAR[CW_ROUND2]= 0;
					CLAN_WAR[CW_C1] = t1;
					CLAN_WAR[CW_C2] = t2;
					CLAN_WAR[CW_STARTED] = false;
					CLAN_WAR[CW_WARMUP_SECONDS] = 60;
					Iter_Clear(JOINED1);
					Iter_Clear(JOINED2);
					Iter_Add(JOINED1, ld1);
					Iter_Add(JOINED2, ld2);
					AddBeforeWar(ld1);
					AddBeforeWar(ld2);
					TextDrawSetString(CW[4], "%s                       vs                       %s", cTag[ld1], cTag[ld2]);
					TextDrawSetString(CW[5], "ROUNDS: %d~n~~n~MAX MEMBERS: %d~n~~n~Map: RC Battlefield", CLAN_WAR[CW_ROUNDSS], maxx);
					CLAN_WAR[CW_WAIT] = maxx*6;
					TextDrawSetString(CW[6], "War starting in: ~r~60");
					TextDrawSetString(CW[9], PlayerInfo[ld1][Nick]);
					TextDrawSetString(CW[10], PlayerInfo[ld2][Nick]);
					TextDrawSetString(CW[11], "~r~UNREADY ~w~(1/10)");
					TextDrawSetString(CW[12], "~r~UNREADY ~w~(1/10)");
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld2, CW[j]);
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld1, CW[j]);
					RefreshTimer = SetTimer("RefreshCWTD", 1000, false);
					SendClientMessage(ld2, -1, "Use /am to add members");
					SendClientMessage(ld1, -1, "Use /am to add members");
			    }
			    case 1:
			    {
					new t1 = CLAN_TOURNAMENT[CT_SEMI_TEAM1][1], t2 = CLAN_TOURNAMENT[CT_SEMI_TEAM2][1], maxx = CLAN_TOURNAMENT[CT_MAX];
	               	foreach(new i : Player) if(PlayerInfo[i][CWINV] == true) return ERR(playerid,"There is already a clan war request in the server.");
					if(GetOnLineClanMembers(t1) < maxx) {
						SendClientMessage(playerid,Dred,"* First clan has only %d online members", GetOnLineClanMembers(t1));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetOnLineClanMembers(t2) < maxx) {
						SendClientMessage(playerid,Dred,"* Second clan has only %d online members", GetOnLineClanMembers(t2));
						return ERR(playerid,"Change the maximum members to join or try another clan");
					}
					if(GetClanleader(t1) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the first clan");
					if(GetClanleader(t2) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the second clan");
					new ld2 = GetClanleader(t2);
					new ld1 = GetClanleader(t1);
					GameTextForPlayer(ld2,"~n~~r~~h~Clan Tournament Request",6000,5);
					GameTextForPlayer(ld1,"~n~~g~~h~Clan Tournament Request",6000,5);
					CLAN_WAR[CW_ON] = true;
					CLAN_WAR[CW_STARTER] = ld1;
					CLAN_WAR[CW_ACCEPTER] = ld2;
					CLAN_WAR[CW_MAP] = 3;
					CLAN_WAR[CW_MAX]= maxx;
					CLAN_WAR[CW_ROUNDSS]= 9;
					CLAN_WAR[CW_ROUND1]= CLAN_WAR[CW_ROUND2]= 0;
					CLAN_WAR[CW_C1] = t1;
					CLAN_WAR[CW_C2] = t2;
					CLAN_WAR[CW_STARTED] = false;
					CLAN_WAR[CW_WARMUP_SECONDS] = 60;
					Iter_Clear(JOINED1);
					Iter_Clear(JOINED2);
					Iter_Add(JOINED1, ld1);
					Iter_Add(JOINED2, ld2);
					AddBeforeWar(ld1);
					AddBeforeWar(ld2);
					TextDrawSetString(CW[4], "%s                       vs                       %s", cTag[ld1], cTag[ld2]);
					TextDrawSetString(CW[5], "ROUNDS: %d~n~~n~MAX MEMBERS: %d~n~~n~Map: RC Battlefield", CLAN_WAR[CW_ROUNDSS], maxx);
					CLAN_WAR[CW_WAIT] = maxx*6;
					TextDrawSetString(CW[6], "War starting in: ~r~60");
					TextDrawSetString(CW[9], PlayerInfo[ld1][Nick]);
					TextDrawSetString(CW[10], PlayerInfo[ld2][Nick]);
					TextDrawSetString(CW[11], "~r~UNREADY ~w~(1/10)");
					TextDrawSetString(CW[12], "~r~UNREADY ~w~(1/10)");
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld2, CW[j]);
					for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld1, CW[j]);
					RefreshTimer = SetTimer("RefreshCWTD", 1000, false);
					SendClientMessage(ld2, -1, "Use /am to add members");
					SendClientMessage(ld1, -1, "Use /am to add members");
			    }
			}
		}
	    case FINALS:
		{
			new t1 = CLAN_TOURNAMENT[CT_FINALS_TEAM1], t2 = CLAN_TOURNAMENT[CT_FINALS_TEAM2], maxx = CLAN_TOURNAMENT[CT_MAX];
           	foreach(new i : Player) if(PlayerInfo[i][CWINV] == true) return ERR(playerid,"There is already a clan war request in the server.");
			if(GetOnLineClanMembers(t1) < maxx) {
				SendClientMessage(playerid,Dred,"* First clan has only %d online members", GetOnLineClanMembers(t1));
				return ERR(playerid,"Change the maximum members to join or try another clan");
			}
			if(GetOnLineClanMembers(t2) < maxx) {
				SendClientMessage(playerid,Dred,"* Second clan has only %d online members", GetOnLineClanMembers(t2));
				return ERR(playerid,"Change the maximum members to join or try another clan");
			}
			if(GetClanleader(t1) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the first clan");
			if(GetClanleader(t2) == INVALID_PLAYER_ID) return ERR(playerid,"There are no leaders online in the second clan");
			new ld2 = GetClanleader(t2);
			new ld1 = GetClanleader(t1);
			GameTextForPlayer(ld2,"~n~~r~~h~Clan Tournament Request",6000,5);
			GameTextForPlayer(ld1,"~n~~g~~h~Clan Tournament Request",6000,5);
			CLAN_WAR[CW_ON] = true;
			CLAN_WAR[CW_STARTER] = ld1;
			CLAN_WAR[CW_ACCEPTER] = ld2;
			CLAN_WAR[CW_MAP] = 3;
			CLAN_WAR[CW_MAX]= maxx;
			CLAN_WAR[CW_ROUNDSS]= 9;
			CLAN_WAR[CW_ROUND1]= CLAN_WAR[CW_ROUND2]= 0;
			CLAN_WAR[CW_C1] = t1;
			CLAN_WAR[CW_C2] = t2;
			CLAN_WAR[CW_STARTED] = false;
			CLAN_WAR[CW_WARMUP_SECONDS] = 60;
			Iter_Clear(JOINED1);
			Iter_Clear(JOINED2);
			Iter_Add(JOINED1, ld1);
			Iter_Add(JOINED2, ld2);
			AddBeforeWar(ld1);
			AddBeforeWar(ld2);
			TextDrawSetString(CW[4], "%s                       vs                       %s", cTag[ld1], cTag[ld2]);
			TextDrawSetString(CW[5], "ROUNDS: %d~n~~n~MAX MEMBERS: %d~n~~n~Map: RC Battlefield", CLAN_WAR[CW_ROUNDSS], maxx);
			CLAN_WAR[CW_WAIT] = maxx*6;
			TextDrawSetString(CW[6], "War starting in: ~r~60");
			TextDrawSetString(CW[9], PlayerInfo[ld1][Nick]);
			TextDrawSetString(CW[10], PlayerInfo[ld2][Nick]);
			TextDrawSetString(CW[11], "~r~UNREADY ~w~(1/10)");
			TextDrawSetString(CW[12], "~r~UNREADY ~w~(1/10)");
			for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld2, CW[j]);
			for(new j = 0; j < 13; j++) TextDrawShowForPlayer(ld1, CW[j]);
			RefreshTimer = SetTimer("RefreshCWTD", 1000, false);
			SendClientMessage(ld2, -1, "Use /am to add members");
			SendClientMessage(ld1, -1, "Use /am to add members");
		}
	}
	SendClientMessage(playerid, green, "You have started a tournament matched.");
	return 1;
}

new badchars[][] = {
	{
		"Â²"},{"Ã©"},{"#"},{"'"},{"Ã¨"},{"Ã§"},{"|"},{"^"},{"~"},{"{"},{"}"},{"`"},{"Â¤"},{"Ã¹"},{"!"},{"?"},{":"},{","},{"@"}
};

CMD:createclan(playerid,params[])
{
	if(PlayerInfo[playerid][Rank] < 4) return ERR(playerid,"You need to be rank 4 atleast /ranks");
	if(GetCash(playerid) <  1000000) return ERR(playerid," You need 1.000.000$ to create a clan");
	if(PlayerInfo[playerid][InClan] != -1) return ERR(playerid,"You are already in clan");
	new ctag[7],name[20];
	if(sscanf(params,"s[7]s[20]",ctag,name)) return USG(playerid,"/Createclan [ TAG ] [ Name ]");
	if(strlen(ctag) < 2 || strlen(ctag) > 5) return ERR(playerid,"Invalid tag (2-5 characters)");
	if(strlen(name) < 5 || strlen(name) > 20) return ERR(playerid,"too long or too short clan name (5-20 characters)");
	if(strfind(ctag,"[",true) != -1) return ERR(playerid,"No need to use [ or ] in tag");
	if(strfind(ctag,"]",true) != -1) return ERR(playerid,"No need to use [ or ] in tag");
	new sz = sizeof(badchars);
	for(new Bad=0; Bad < sz; Bad ++){
		if(strfind(name,badchars[Bad],true) != -1) return ERR(playerid,"characters like (Â²,~,@,?,!...) Are NOT allowed");
		if(strfind(ctag,badchars[Bad],true) != -1) return ERR(playerid,"characters like (Â²,~,@,?,!...) Are NOT allowed"); }
	new query[120];
	mysql_format(mysql, query, sizeof(query), "SELECT `ctag` FROM `clans` WHERE `ctag` = '%e' LIMIT 1", ctag);
	mysql_pquery(mysql, query, "OnSameTagCheck", "iss", playerid, ctag, name);
	return 1;
}

forward OnSameTagCheck(playerid, tagg[7], name[20]);
public OnSameTagCheck(playerid, tagg[7], name[20])
{
	new TAG[7],NAME[20];
	strcat(TAG, tagg); strcat(NAME, name);
	if(cache_num_rows()>0) return SendClientMessage(playerid, Dred, "ERROR: Clan tag already taken, please choose another tag.");
	new query[210];
	mysql_format(mysql, query, sizeof(query), "INSERT INTO `clans` (`ctag`, `cname`, `cowner`, `cleader` ,`clevel`, `chpoints`,`cteam`,`cskin`) VALUES ('%e', '%e', '%e', '%e', 1, 0, '%e', -1)",TAG,NAME,PlayerInfo[playerid][Nick],"None",GetTeamName(playerid));
	mysql_tquery(mysql, query, "OnClanCreated","i", playerid);
	strcopy(cName[playerid], NAME);
	strcopy(cTag[playerid], TAG);
	UpdateLabelText(playerid);
	SendClientMessage(playerid,clanxx,"CLAN: You have created %s Clan | Tag : %s",NAME,TAG);
	return 1;
}

forward OnClanCreated(playerid);
public OnClanCreated(playerid)
{
	new x = cache_insert_id();
	PlayerInfo[playerid][InClan] = x;
	PlayerInfo[playerid][ClanOwn] = x;
	PlayerInfo[playerid][ClanCoOwn] = -1;
	cLevel[playerid] = 1;
	PlayerInfo[playerid][CR] = PlayerInfo[playerid][CRP] = 0;
	PlayerInfo[playerid][ClanLead] = -1;
	GiveCash(playerid, -1000000);
	SavePlayer(playerid);
	clanin(playerid);
	ConnectKills[playerid] = ConnectDeaths[playerid] = 0;
	SendClientMessage(playerid, COLOR_YELLOW, "Please relog to apply all changes.");
	return 1;
}

forward CWinv(id);
public CWinv(id)
{
	if(PlayerInfo[id][CWINV] == true)
	{
		CLAN_WAR[CW_ON] = false;
		SendClientMessage(CLAN_WAR[CW_STARTER],Dred,"* %s(%d) has refused your clan war request",PlayerInfo[id][Nick],id);
		PlayerInfo[id][CWINV] = false;
		Iter_Clear(JOINED1);
		Iter_Clear(JOINED2);
	}
}

CMD:toxicnevada(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{

		new sz = sizeof(BASERAPE);
		for(new zo = 0; zo< sz; zo++) if(IsPlayerInArea(playerid, BASERAPE[zo][MinXX], BASERAPE[zo][MinYY], BASERAPE[zo][MaxXX], BASERAPE[zo][MaxYY])) return ERR(playerid,"You can't intoxicate bases");
		if(CROPDUSTER[GetPlayerVehicleID(playerid)][C_BOMB] == 0) return SendClientMessage(playerid,Dred,"|ERROR:| No toxic bombs left.");
		new Float:X,Float:Y,Float:Z,Float:A;
		new remain = GetTickCount() - PlayerInfo[playerid][TOXCMD];
		if(remain < 60000)
		{
			return SendClientMessage(playerid, Dred, "|ERROR:| You must wait %d seconds before launching another toxic bomb.", (60000 - remain) / 1000);
		}
		GetPlayerPos(playerid,X,Y,Z);
		PlayerInfo[playerid][TOXCMD] = GetTickCount();
		if(PlayerInfo[playerid][dRank] < 5) CROPDUSTER[GetPlayerVehicleID(playerid)][C_BOMB] --;
		Update3DTextLabelText(CROPDUSTER[GetPlayerVehicleID(playerid)][C_TEXT], 0x3E9EFFFF, "[ Toxic Bomber Plane ]\nToxic Bombs [ %d / 5 ]", CROPDUSTER[GetPlayerVehicleID(playerid)][C_BOMB]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid),A);
		toxicbomb[playerid] = CreateDynamicObject(1370,X,Y,Z-3,A,0,0);
		MapAndreas_FindZ_For2DCoord(X, Y, Z);
		MoveDynamicObject(toxicbomb[playerid],X,Y,Z,50.0,A,0.0,0.0);
		toxicbombtimerz[playerid] = SetTimerEx("toxicbombtiming", 1000, false, "ifff",playerid,X,Y,Z);
	}
	return 1;
}


forward toxicbombtiming(playerid,Float:X,Float:Y,Float:Z);
public toxicbombtiming(playerid,Float:X,Float:Y,Float:Z)
{
	new Float:x,Float:y,Float:z,tt = GetPlayerTeam(playerid);
	GetDynamicObjectPos(toxicbomb[playerid],x,y,z);
	if(z == Z)
	{
		foreach(new i : Player)
		{
			if(i != playerid)
			{
				if(GetPlayerTeam(i) != tt)
				{
					if(!IsPlayerInAnyVehicle(i))
					{
						if(!PlayerInfo[i][OnDuty])
						{
							if(PlayerInfo[i][Mask] == false)
							{
								if(HasJoined(i)) continue;
								if(GetPlayerInterior(i) == 0)
						    	{
									if (IsPlayerInRangeOfPoint(i, 32.0, X,Y,Z))
									{
										PlayAudioStreamForPlayer(i, "https://csgostash.com/storage/mp3/22/bombtenseccount.mp3");
										SendClientMessage(playerid, Lg, "You are intoxicating %s, you got $3200.", PlayerInfo[i][Nick]);
										ApplyAnimation(i,"ped","gas_cwr", 4.1, false, true, true, false, 1000, SYNC_ALL);
										GiveCash(playerid, 3200);
									}
								}
							}
						}
					}
				}
			}
		}
		toxicvar[playerid] = 40;
		toxicbombdeploytimer[playerid] = SetTimerEx("IntoxicatePlayers", 500, false, "dfff", playerid, X,Y,Z);
		toxicsmoke[playerid][0] = CreateDynamicObject(18732,X,Y,Z,0,0,0);
		toxicsmoke[playerid][1] = CreateDynamicObject(18732,X-10,Y,Z,0,0,0);
		toxicsmoke[playerid][2] = CreateDynamicObject(18732,X,Y-10,Z,0,0,0);
		toxicsmoke[playerid][3] = CreateDynamicObject(18732,X,Y+10,Z,0,0,0);
		toxicsmoke[playerid][4] = CreateDynamicObject(18732,X+10,Y,Z,0,0,0);
		toxicsmoke[playerid][5] = CreateDynamicObject(18732,X-20,Y,Z,0,0,0);
		toxicsmoke[playerid][6] = CreateDynamicObject(18732,X,Y-20,Z,0,0,0);
		toxicsmoke[playerid][7] = CreateDynamicObject(18732,X,Y+20,Z,0,0,0);
		toxicsmoke[playerid][8] = CreateDynamicObject(18732,X+20,Y,Z,0,0,0);
		toxicsmoke[playerid][9] = CreateDynamicObject(18732,X-20,Y-20,Z,0,0,0);
		toxicsmoke[playerid][10] = CreateDynamicObject(18732,X-20,Y+20,Z,0,0,0);
		toxicsmoke[playerid][11] = CreateDynamicObject(18732,X+20,Y+20,Z,0,0,0);
		toxicsmoke[playerid][12] = CreateDynamicObject(18732,X+20,Y-20,Z,0,0,0);
		toxicsmoke[playerid][13] = CreateDynamicObject(18732,X-30,Y-30,Z,0,0,0);
		toxicsmoke[playerid][14] = CreateDynamicObject(18732,X-30,Y+30,Z,0,0,0);
		toxicsmoke[playerid][15] = CreateDynamicObject(18732,X+30,Y+30,Z,0,0,0);
		toxicsmoke[playerid][16] = CreateDynamicObject(18732,X+30,Y-30,Z,0,0,0);
		KillTimer(toxicbombtimerz[playerid]);
		ttries[playerid] = 0;
		return 1;
	}
	else ttries[playerid] ++;
	if(ttries[playerid] == 10)
	{

		KillTimer(toxicbombtimerz[playerid]);
		toxicvar[playerid] = 40;
		ttries[playerid] = 0;
		return 1;
	}
	toxicbombtimerz[playerid] = SetTimerEx("toxicbombtiming", 1000, false, "ifff",playerid,X,Y,Z);
	return 1;
}

forward IntoxicatePlayers(playerid, Float:x,Float:y,Float:z);
public IntoxicatePlayers(playerid, Float:x,Float:y,Float:z)
{
	new Float:dmg, tt = GetPlayerTeam(playerid);
	if(PlayerInfo[playerid][dRank] > 4) dmg = 10.00;
	else dmg = 5.00;
	foreach(new i : Player)
	{
		if(i != playerid)
		{
			if(GetPlayerTeam(i) != tt)
			{
				if(!IsPlayerInAnyVehicle(i))
				{
					if(!PlayerInfo[i][OnDuty])
					{
						if(PlayerInfo[i][Mask] == false)
						{
							if (IsPlayerInRangeOfPoint(i, 32.0, x,y,z))
							{
								new Float:hp; GetPlayerHealth(i, hp);
								if(hp < 6)
								{
									if(!toxicdead[i])
									{
										SendClientMessage(playerid, Lg, "You got 1 score for intoxicating %s to death.", PlayerInfo[i][Nick]);
										SendDeathMessage(playerid, i, 53);
										PlayerInfo[playerid][Kills] ++;
										SetPlayerHealth(i, 0);
										Streak[playerid]++;
										SetPlayerScore(playerid,GetPlayerScore(playerid)+1);
										SendClientMessage(i, -1, "You were intoxicated to death.");
										toxicdead[i] = true;
										Intoxications[playerid] ++;
										if(QuestContent[2] == CONTENT_TOXIC)
										{
										    QuestProgress[playerid][2] ++;
										    if(Intoxications[playerid] == 19)
										    {
										    	if(!Bit_Get(QuestDone[playerid], 2))
										    	{
										    	    Bit_Let(QuestDone[playerid], 2);
										    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 3 and got $50k & 100XP.");
										    	    TextDrawHideForPlayer(playerid,Quest[2]);
										    	    PlayerInfo[playerid][XP] += 100;
										    	    GiveCash(playerid, 50000);
										    	}
											}
										}
									}
								} else
								{

									SetPlayerHealth(i, hp-dmg);
									GameTextForPlayer(i, "~r~Get Out Of The Intoxication Zone", 500, 6);
								}
							}
						}
					}
				}
			}
		}
	}
	toxicvar[playerid]--;
	if(toxicvar[playerid] < 1)
	{

		DestroyDynamicObject(toxicsmoke[playerid][0]);
		DestroyDynamicObject(toxicsmoke[playerid][1]);
		DestroyDynamicObject(toxicsmoke[playerid][2]);
		DestroyDynamicObject(toxicsmoke[playerid][3]);
		DestroyDynamicObject(toxicsmoke[playerid][4]);
		DestroyDynamicObject(toxicsmoke[playerid][5]);
		DestroyDynamicObject(toxicsmoke[playerid][6]);
		DestroyDynamicObject(toxicsmoke[playerid][7]);
		DestroyDynamicObject(toxicsmoke[playerid][8]);
		DestroyDynamicObject(toxicsmoke[playerid][9]);
		DestroyDynamicObject(toxicsmoke[playerid][10]);
		DestroyDynamicObject(toxicsmoke[playerid][11]);
		DestroyDynamicObject(toxicsmoke[playerid][12]);
		DestroyDynamicObject(toxicsmoke[playerid][13]);
		DestroyDynamicObject(toxicsmoke[playerid][14]);
		DestroyDynamicObject(toxicsmoke[playerid][15]);
		DestroyDynamicObject(toxicsmoke[playerid][16]);
		DestroyDynamicObject(toxicbomb[playerid]);
		toxicbomb[playerid] = toxicsmoke[playerid][0] = toxicsmoke[playerid][1] = toxicsmoke[playerid][2] = toxicsmoke[playerid][3] = toxicsmoke[playerid][4] = toxicsmoke[playerid][5] = toxicsmoke[playerid][6] =
		toxicsmoke[playerid][7] = toxicsmoke[playerid][8] = toxicsmoke[playerid][9] = toxicsmoke[playerid][10] = toxicsmoke[playerid][11] = toxicsmoke[playerid][12] = toxicsmoke[playerid][13] = toxicsmoke[playerid][14] =
		toxicsmoke[playerid][15] = toxicsmoke[playerid][16] = -1;
		KillTimer(toxicbombdeploytimer[playerid]);
		return 1;
	}
	toxicbombdeploytimer[playerid] = SetTimerEx("IntoxicatePlayers", 500, false, "dfff", playerid, x,y,z);
	return 1;
}

CMD:firenevada(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{

		new sz = sizeof(BASERAPE);
		for(new zo = 0; zo < sz; zo++) if(IsPlayerInArea(playerid, BASERAPE[zo][MinXX], BASERAPE[zo][MinYY], BASERAPE[zo][MaxXX], BASERAPE[zo][MaxYY])) return ERR(playerid,"You can't bomb bases");
		if(RUSTL[GetPlayerVehicleID(playerid)][R_BOMB] == 0) return SendClientMessage(playerid,Dred,"|ERROR:| No bombs left.");
		new Float:X,Float:Y,Float:Z,Float:A;
		new remain = GetTickCount() - PlayerInfo[playerid][NEVCMD];
		if(remain < 15000)
		{
			return SendClientMessage(playerid, Dred, "|ERROR:| You must wait %d seconds before launching another bomb.", (15000 - remain) / 1000);
		}
		GetPlayerPos(playerid,X,Y,Z);
		PlayerInfo[playerid][NEVCMD] = GetTickCount();
		RUSTL[GetPlayerVehicleID(playerid)][R_BOMB] --;
		Update3DTextLabelText(RUSTL[GetPlayerVehicleID(playerid)][R_TEXT], 0x3E9EFFFF, "[ Bomber Plane ]\nBombs [ %d / 5 ]", RUSTL[GetPlayerVehicleID(playerid)][R_BOMB]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid),A);
		bomb[playerid] = CreateObject(354,X,Y,Z,A,0,0, 100.00);
		MapAndreas_FindZ_For2DCoord(X, Y, Z);
		MoveObject(bomb[playerid],X,Y,Z,50.0,A,0.0,0.0);
		bombtimerz[playerid] = SetTimerEx("bombtiming", 1000, true, "ifff",playerid,X,Y,Z);
	}
	return 1;
}

forward bombtiming(playerid,Float:X,Float:Y,Float:Z);
public bombtiming(playerid,Float:X,Float:Y,Float:Z)
{
	new Float:yx,Float:y,Float:z, Float:range;
	if(PlayerInfo[playerid][dRank] > 4) range = 16.00;
	else range = 8.00;
	GetObjectPos(bomb[playerid], yx, y, z);
	if(yx == X && y == Y && z == Z)
	{
		new tt = GetPlayerTeam(playerid), x = PlayerInfo[playerid][InClan];
		new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
		foreach(new i : Player)
		{
			if(i != playerid)
			{
				if(GetPlayerTeam(i) != tt)
				{
				    if(GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				    {
						if(!PlayerInfo[i][OnDuty])
						{
						    if(x != -1) if(PlayerInfo[i][InClan] == x) continue;
							if (IsPlayerInRangeOfPoint(i, range, X,Y,Z))
							{
								SetPlayerHealth(i,0);
								SendDeathMessage(playerid, i, 51);
								RustlerBombeds[playerid] ++;
								if(QuestContent[2] == CONTENT_RBOMBS)
								{
								    QuestProgress[playerid][2] ++;
								    if(RustlerBombeds[playerid] == 23)
									{
								    	if(!Bit_Get(QuestDone[playerid], 2))
								    	{
								    	    Bit_Let(QuestDone[playerid], 2);
								    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 3 and got $50k & 100XP.");
								    	    TextDrawHideForPlayer(playerid,Quest[2]);
								    	    PlayerInfo[playerid][XP] += 100;
								    	    GiveCash(playerid, 50000);
								    	}
									}
								}
								SendClientMessage(playerid, Lg, "You killed %s, you got 1 score.", PlayerInfo[i][Nick]);
								if(x != -1)
								{
									new str[256],rnn;
									rnn = random(1500);
									format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, nam);
									ConnectKills[playerid] ++;
									ClanMSG(x, str);
									foreach(new j : Player)
									{
										if(x == PlayerInfo[j][InClan])
										{
											GiveCash(j,rnn);
										}
									}
								}
								PlayerInfo[playerid][Kills] ++;
								Streak[playerid]++;
								SetPlayerScore(playerid,GetPlayerScore(playerid)+1);
							}
						}
					}
				}
			}
		}
		CreateExplosion(X,Y,Z,10,20.0);
		DestroyObject(bomb[playerid]);
		tries[playerid] = 0;
		bomb[playerid] = -1;
		KillTimer(bombtimerz[playerid]);
		return 1;
	}
	else tries[playerid] ++;
	if(tries[playerid] == 10)
	{
		DestroyObject(bomb[playerid]);
		bomb[playerid] = -1;
		KillTimer(bombtimerz[playerid]);
		tries[playerid] = 0;
	}
	return 1;
}


CMD:cranks(playerid)
{
	if(PlayerInfo[playerid][InClan] == -1) return SendClientMessage(playerid, Dred, "You are not in any clan");
	new query[160];
	mysql_format(mysql, query, sizeof(query),"SELECT `crank0`,`crank1`,`crank2`,`crank3`,`crank4`,`crank5`,`crank6`,`crank7`,`crank8`,`crank9`,`crank10` FROM `clans` WHERE `cid`='%d' LIMIT 1", PlayerInfo[playerid][InClan]);
	mysql_pquery(mysql,query, "OnClanDisplayRanks", "i", playerid);
	return 1;
}

forward OnClanDisplayRanks(playerid);
public OnClanDisplayRanks(playerid)
{
	if(cache_num_rows()>0)
	{

		new rank[11][15];
		cache_get_value_name(0, "crank0", rank[0]);
		cache_get_value_name(0, "crank1", rank[1]);
		cache_get_value_name(0, "crank2", rank[2]);
		cache_get_value_name(0, "crank3", rank[3]);
		cache_get_value_name(0, "crank4", rank[4]);
		cache_get_value_name(0, "crank5", rank[5]);
		cache_get_value_name(0, "crank6", rank[6]);
		cache_get_value_name(0, "crank7", rank[7]);
		cache_get_value_name(0, "crank8", rank[8]);
		cache_get_value_name(0, "crank9", rank[9]);
		cache_get_value_name(0, "crank10", rank[10]);
		new cat[292];
		strcat(cat, "Rank\tName\n");
		for(new i=0; i<11; i++)
		{

			if(strlen(rank[i]) == 0) format(rank[i], _, "%d : None", i);
			format(cat, _, "%s%d\t%s\n", cat, i, rank[i]);
		}
		ShowPlayerDialog(playerid, CRANKSDIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Clan Ranks",cat,"ok", "");
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Specified clanid was not found in the database.");
}

CMD:rankname(playerid, params[])
{
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanCoOwn] != x)
	{

		if(PlayerInfo[playerid][ClanOwn] != x) return SendClientMessage(playerid, Dred, "Only Owners/Co-Owner can use this cmd.");
	}
	new rankid,pt[15];
	if(sscanf(params,"ds[15]",rankid,pt)) return USG(playerid,"/rankname (rankid 0-10) (new rank name)");
	if(rankid < 0 || rankid > 10) return SendClientMessage(playerid, Dred, "Rank ID should be between 0 - 11");
	if(strlen(pt) < 2 || strlen(pt) > 15) return SendClientMessage(playerid, Dred, "Rank Name should be between 3 - 15 characters.");
	new query[90];
	mysql_format(mysql,query,sizeof(query),"SELECT `chpoints` FROM `clans` WHERE `cid` = '%d' LIMIT 1", x);
	mysql_pquery(mysql, query, "OnRankNameChangeCheck", "dds",playerid,rankid, pt);
	return 1;
}

forward OnRankNameChangeCheck(playerid, rankid, rname[15]);
public OnRankNameChangeCheck(playerid, rankid, rname[15])
{
	if(cache_num_rows()>0)
	{

		new pts; cache_get_value_name_int(0, "chpoints", pts);
		if(pts < 10) return SendClientMessage(playerid, Dred, "You need 10 Honor Points for a rank name change.");
		new x = PlayerInfo[playerid][InClan];
		new query[137];
		switch(rankid)
		{

			case 0: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank0` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
			case 1: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank1` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
			case 2: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank2` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
			case 3: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank3` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
			case 4: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank4` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
			case 5: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank5` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
			case 6: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank6` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
			case 7: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank7` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
			case 8: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank8` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
			case 9: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank9` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
			case 10: mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `crank10` = '%e', `chpoints`=`chpoints`-10 WHERE `cid`='%d' LIMIT 1", rname, x);
		}
		mysql_tquery(mysql, query);
		format(query, _, "%s renamed rank %d for 10 HP.", PlayerInfo[playerid][Nick], rankid);
		RecordClanCMD(query, x);
		SendClientMessage(playerid, COLOR_GREEN, "You have named rank %d: %s for 10 honor points", rankid, rname);
		foreach(new i : Player)
		{

			if(i != playerid)
			{

				if(PlayerInfo[i][InClan] == x)
				{

					if(PlayerInfo[i][ClanOwn] != x)
					{

						if(PlayerInfo[i][ClanCoOwn] != x)
						{

							if(PlayerInfo[i][ClanLead] != x)
							{

								if(PlayerInfo[i][cRank] == rankid)
								{

									SendClientMessage(i, COLOR_YELLOW, "[CLAN]: The owner/co-owner has changed your rank name");
									strcopy(cRankName[i], rname);
								}
							}
						}
					}
				}
			}
		}
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Specified clanid was not found in the database.");
}

CMD:setrank(playerid, params[])
{
	new x = PlayerInfo[playerid][InClan];
	if(x == -1) return ERR(playerid, "You are not in any clan.");
	if(PlayerInfo[playerid][ClanCoOwn] != x)
	{
		if(PlayerInfo[playerid][ClanOwn] != x)
		{
			return SendClientMessage(playerid, Dred, "Only Owners/Co-Owner can use this cmd.");
		}
	}
	new id,rank;
	if(sscanf(params,"dd",id,rank)) return USG(playerid,"/setrank (playerid) (rank)");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, Dred, "Invalid player id.");
	if(PlayerInfo[id][InClan] != PlayerInfo[playerid][InClan]) return SendClientMessage(playerid, Dred, "Player is not in a clan.");
	if(rank < 0 || rank > 10) return SendClientMessage(playerid, Dred, "Rank should be between 0-11");
	if(PlayerInfo[id][cRank] == rank) return SendClientMessage(playerid, Dred, "Player already has this rank");
	new query[68];
	mysql_format(mysql,query,sizeof(query),"SELECT * FROM `clans` WHERE `cid` = '%d' LIMIT 1", x);
	mysql_pquery(mysql, query, "SetRankCheck", "ddd",playerid, id,rank);
	return 1;
}

forward SetRankCheck(playerid, target,rank);
public SetRankCheck(playerid, target,rank)
{
	if(cache_num_rows()>0)
	{

		switch(rank)
		{

			case 0: cache_get_value_name(0, "crank0", cRankName[target]);
			case 1: cache_get_value_name(0, "crank1", cRankName[target]);
			case 2: cache_get_value_name(0, "crank2", cRankName[target]);
			case 3: cache_get_value_name(0, "crank3", cRankName[target]);
			case 4: cache_get_value_name(0, "crank4", cRankName[target]);
			case 5: cache_get_value_name(0, "crank5", cRankName[target]);
			case 6: cache_get_value_name(0, "crank6", cRankName[target]);
			case 7: cache_get_value_name(0, "crank7", cRankName[target]);
			case 8: cache_get_value_name(0, "crank8", cRankName[target]);
			case 9: cache_get_value_name(0, "crank9", cRankName[target]);
			case 10: cache_get_value_name(0, "crank10", cRankName[target]);
		}
		PlayerPlaySound(target,1057,0.0,0.0,0.0);
		new str[108];
		if(PlayerInfo[target][cRank] > rank)
		{

			SendClientMessage(target, COLOR_YELLOW, "[CLAN]: You have been demoted.");
			// format(str, _, "[CLAN]: %s has demoted %s rank to %s (%d)", PlayerInfo[playerid][Nick], PlayerInfo[target][Nick], cRankName[target], rank);
		}
		else
		{

			SendClientMessage(target, COLOR_YELLOW, "[CLAN]: You have been promoted.");
			// format(str, _, "[CLAN]: %s has promoted %s rank to %s (%d)", PlayerInfo[playerid][Nick], PlayerInfo[target][Nick], cRankName[target], rank);
		}
		new x = PlayerInfo[playerid][InClan];

		format(str, _, "%s set %s rank to %d.", PlayerInfo[playerid][Nick], PlayerInfo[target][Nick], rank);
		RecordClanCMD(str, x);
		PlayerInfo[target][cRank] = rank;
		foreach(new i : Player) if(PlayerInfo[i][InClan] == x) SendClientMessage(i, COLOR_PURPLE, str);
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Specified clanid was not found in the database.");
}

CMD:clans(playerid)
{
	new cat[2000];
	strcat(cat, "Clan Name\tClan TAG\tClan ID\tOnline Members\n");
    ClanID = ClanIDDefault;
    new cc;
    IterList = 0;
	foreach(new i : Player)
	{
	    cc = PlayerInfo[i][InClan];
		new bool:good;
	    if(cc != -1)
	    {
	        for(new d = 0; d < MAX_PLAYERS; d ++) { if(ClanID[d] == cc) good = true;}
	    	if(!good)
			{
			    ClanID[IterList] = cc;
			    IterList ++;
				strcat(cat, cName[i]);
				strcat(cat, "\t");
				strcat(cat, cTag[i]);
				format(cat, _, "%s\t%d\t", cat, cc);
				format(cat, _, "%s%d\n", cat, GetOnLineClanMembers(cc));
			}
	    }
	}
	ShowPlayerDialog(playerid, CLANSLIST_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, "Online Clans",cat,"Members", "Exit");
	return 1;
}

CMD:clanwarlist(playerid)
{
	SendClientMessage(playerid, -1, "CMD removed, check /clans instead.");
	return 1;
}

CMD:clanhelp(playerid)
{
	new str[2168];
	strcat(str,"**** CLAN HELP ****\n");
	strcat(str,"{15ADF7}/Createclan [TAG] [ Clan Name ]{FFFFFF} ( 1 mil ( 1.000.000) )\n");
	strcat(str,"{15ADF7}/cname (OWNER){FFFFFF}- Change clan name ( 20 hpoints)\n");
	strcat(str,"{15ADF7}/ctag  (OWNER){FFFFFF}- Change clan tag ( 10 hpoints )\n");
	strcat(str,"{15ADF7}/cmembers{FFFFFF} - View all online / offline members\n");
	strcat(str,"{15ADF7}/cinvite ( LEADER / OWNER ){FFFFFF} - invite someone to your clan\n");
	strcat(str,"{15ADF7}/buyperks ( CO-OWNER / OWNER ){FFFFFF} - buy clan perks\n");
	strcat(str,"{15ADF7}/ctoys ( CO-OWNER / OWNER ){FFFFFF} - Set clan toys\n");
	strcat(str,"{15ADF7}/cslogan ( CO-OWNER / OWNER ){FFFFFF} - changes clan slogan\n");
	strcat(str,"{15ADF7}/ckick ( LEADER / OWNER ){FFFFFF} - kick online player fom clan\n");
	strcat(str,"{15ADF7}/cokick ( OWNER ){FFFFFF} - Kick OFFLINE player from clan\n");
	strcat(str,"{15ADF7}/cskin ( LEADER/OWNER ){FFFFFF} - change Clan default skin (1500 hpoint)\n");
	strcat(str,"{15ADF7}/cteam ( LEADER/OWNER ){FFFFFF} - Change Clan prefered team ( 5 hpoints ) \n");
	strcat(str,"{15ADF7}/cleader ( OWNER ){FFFFFF} - Promote a member to clan leader\n");
	strcat(str,"{15ADF7}/cleave{FFFFFF} - Leave the clan\n");
	strcat(str,"{15ADF7}/ccall{FFFFFF} - call all your clan mates to your position\n");
	strcat(str,"{15ADF7}/cleader{FFFFFF} - promote a member to leader\n");
	strcat(str,"{15ADF7}/cdleader{FFFFFF} - Demote leader\n");
	strcat(str,"{15ADF7}/cblacklist ( OWNER/CO-OWNER ){FFFFFF} - Blacklist a player\n");
	strcat(str,"{15ADF7}/cblacklisted {FFFFFF} - Blacklisted players\n");
	strcat(str,"{15ADF7}/cunblacklist ( OWNER/CO-OWNER ){FFFFFF} - Unblacklist a player\n");
	strcat(str,"{15ADF7}/topclans\n");
	strcat(str,"{15ADF7}/clanlog ( OWNER/CO-OWNER ){FFFFFF} - Display clan history.\n");
	strcat(str,"{15ADF7}/clans{FFFFFF} - shows online clans list\n");
	strcat(str,"{15ADF7}/cperks{FFFFFF} - view activated clan perks\n");
	strcat(str,"{15ADF7}/cbcheck{FFFFFF} - check clan base status\n");
	strcat(str,"{15ADF7}/cbhelp{FFFFFF} - clan base help\n");
	strcat(str,"{15ADF7}/crhelp{FFFFFF} - clan ranking help\n");
	strcat(str,"{15ADF7}/ccoowner - promote to co owner{FFFFFF}\n");
	strcat(str,"{15ADF7}/cdcoowner - demote co owner{FFFFFF}\n");
	strcat(str,"{15ADF7}/crankshelp\n");
	strcat(str,"{15ADF7}/cmute (OWNER/CO-OWNER/LEADER) {FFFFFF}- Mute A Clan Member\n");
	strcat(str,"{15ADF7}/cunmute (OWNER/CO-OWNER/LEADER) {FFFFFF}- UnMute A Clan Member\n");
	strcat(str,"use {15ADF7}![text]{FFFFFF} or /c for clan chat\n");
	strcat(str,"{15ADF7}/ad{FFFFFF} to advertise your clan ( 300 point )\n");
	strcat(str,"{15ADF7}/clanpoints{FFFFFF} - how to earn honor points\n\n\n");
	strcat(str,"You need to be {15ADF7}rank 4{FFFFFF} to be able to make your own clan");
	ShowPlayerDialog(playerid,844,DIALOG_STYLE_MSGBOX,"Clan commands",str,"ok",">> Clanpoints");
	return 1;
}

CMD:crankshelp(playerid)
{
	new str[800];
	strcat(str,"**** CLAN RANKS HELP ****\n");
	strcat(str,"{15ADF7}/setrank [playerid] [rank (0-10)]{FFFFFF}\n");
	strcat(str,"{15ADF7}/rankname [rank] [name]{FFFFFF} - Set rank name (10 Honor Points)\n");
	strcat(str,"{15ADF7}/cranks{FFFFFF} - Display clan ranks with their names\n");
	ShowPlayerDialog(playerid,844,DIALOG_STYLE_MSGBOX,"Clan Ranks Help",str,"ok",">> Clanpoints");
	return 1;
}

CMD:clanpoints(playerid)
{
	new str[800];
	strcat(str,"-- How to earn clan honor points --\n\n");
	strcat(str,"{15ADF7}+1{FFFFFF} complete an achievement\n");
	strcat(str,"{15ADF7}+2{FFFFFF} each 10 kill spree by any member\n");
	strcat(str,"{15ADF7}+50{FFFFFF} for protecting area 51 for 2 minute\n");
	strcat(str,"{15ADF7}+90{FFFFFF} for protecting area 51 for 2 minute and having military tent under control\n");
	strcat(str,"{15ADF7}+3{FFFFFF} for killing 10 airplanes with MML ( Military Missile Launcher) \n");
	strcat(str,"{15ADF7}+2{FFFFFF} use suicide class and kill 5 players\n");
	strcat(str,"{15ADF7}+2{FFFFFF} kill 5 players with demolisher bombs /plantbomb\n");
	strcat(str,"{15ADF7}+3{FFFFFF} kill 15 player with Airstrike /airstrike\n\n\n");
	strcat(str,"{FFFFFF}You can also get honor points by {15ADF7}donating{FFFFFF} to our server\n");
	strcat(str,"{FFFFFF}Visit our website {15ADF7}www.mw3-samp.org{FFFFFF} for more info");
	ShowPlayerDialog(playerid,840,DIALOG_STYLE_MSGBOX,"Clan commands",str,"ok","");
	return 1;
}
CMD:crhelp(playerid)
{
	new str[800];
	strcat(str,"-- Clan Ranking Help --\n\n\n");
	strcat(str,"{FFFFFF}There is a total of {15ADF7}7 {FFFFFF}clan skill ranks:\n");
	strcat(str," > {15ADF7}Silvers\n");
	strcat(str," > {15ADF7}Silvers Master\n");
	strcat(str," > {15ADF7}Master Guardians\n");
	strcat(str," > {15ADF7}Master Guardians Elite\n");
	strcat(str," > {15ADF7}Legendary Eagles\n");
	strcat(str," > {15ADF7}Legendary Eagles Master\n");
	strcat(str," > {15ADF7}The Global Elites\n\n");
	strcat(str,"{FFFFFF}Clans can rankup by winning {15ADF7}clan wars{FFFFFF}.\n");
	strcat(str,"{FFFFFF}Losing many {15ADF7}clan wars{FFFFFF} will result in a rankdown.\n");
	strcat(str,"{FFFFFF}* New clans are {15ADF7}unranked{FFFFFF}.\n");
	ShowPlayerDialog(playerid,840,DIALOG_STYLE_MSGBOX,"Clan Ranking System",str,"ok","");
	return 1;
}
CMD:cname(playerid,params[])
{
	new x = PlayerInfo[playerid][InClan];
	if(x == -1) return ERR(playerid,"You are not in any clan");
	if(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new Nam[20];
		if(sscanf(params,"s[20]",Nam)) return USG(playerid,"/cname [ New Clan Name]");
		if(strlen(Nam) < 2 || strlen(Nam) > 20) return ERR(playerid,"Invalid name lengh");
		new sz = sizeof(badchars);
		for(new Bad=0; Bad < sz; Bad ++) if(strfind(Nam,badchars[Bad],true) != -1) return ERR(playerid,"characters like (Â²,~,@,?,!...) Are NOT allowed");
		new query[100];
		mysql_format(mysql, query, sizeof(query), "SELECT `chpoints` FROM `clans` WHERE `cid` = '%d' LIMIT 1", x);
		mysql_pquery(mysql, query, "CheckNameChangePoints", "is", playerid, Nam);
	}else return ERR(playerid,"Only owner can change clan name");
	return 1;
}

forward CheckNameChangePoints(playerid, name[20]);
public CheckNameChangePoints(playerid, name[20])
{
	if(cache_num_rows()>0)
	{

		new points; cache_get_value_name_int(0, "chpoints", points);
		new x = PlayerInfo[playerid][InClan];
		if(points < 20) return SendClientMessage(playerid, RED, "Your clan doesn't appear to have a minimum of 20 honor points to make a name change.");
		new query[110];
		SendClientMessage(playerid,Lg,"* You have changed your clan name to %s",name);
		new str[81];
		format(str, _, "CLAN NAME: %s has changed clan name to %s", PlayerInfo[playerid][Nick], name);
		ClanMSG(x, str);
		mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `cname` = '%e',`chpoints` = `chpoints`-20 WHERE `cid`= '%d' LIMIT 1", name, PlayerInfo[playerid][InClan]);
		mysql_tquery(mysql, query);
		SendClientMessage(playerid, COLOR_GREEN, "[Clan Info]: You have successfully changed the clan name to %s.", name);
		format(query, _, "%s changed clan name to %s.", PlayerInfo[playerid][Nick], name);
		RecordClanCMD(query, x);
		foreach(new i : Player) if(PlayerInfo[i][InClan] == x) strcopy(cName[i], name);
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Oups, something went wrong. Please notify an admin of this error: ERR00000123");
}

CMD:ctag(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new Nam[7];
		if(sscanf(params,"s[7]",Nam)) return USG(playerid,"/ctag [ New Clan tag]");
		new sz = sizeof(badchars);
		for(new Bad=0; Bad < sz; Bad ++)
		if(strfind(Nam,badchars[Bad],true) != -1) return ERR(playerid,"characters like (Â²,~,@,?,!...) Are NOT allowed");
		if(strlen(params) < 2 || strlen(params) > 5) return ERR(playerid,"Invalid tag lengh");
		if(strfind(Nam,"[",true) != -1) return ERR(playerid,"No need to use [ or ] in tag");
		if(strfind(Nam,"]",true) != -1) return ERR(playerid,"No need to use [ or ] in tag");
		new query[100];
		mysql_format(mysql, query, sizeof(query), "SELECT * FROM `clans` WHERE `ctag` = '%e' LIMIT 1", Nam);
		mysql_pquery(mysql, query, "CheckTagAvailable", "is", playerid, Nam);

	}else return ERR(playerid,"Only owner can change clan tag");
	return 1;
}

forward CheckTagAvailable(playerid, name[7]);
public CheckTagAvailable(playerid, name[7])
{
	if(cache_num_rows()>0) return ERR(playerid,"Tag already used");
	new query[100];
	new x = PlayerInfo[playerid][InClan];
	new nammm[7];
	strcat(nammm, name);
	mysql_format(mysql, query, sizeof(query), "SELECT `chpoints` FROM `clans` WHERE `cid` = '%d' LIMIT 1", x);
	mysql_pquery(mysql, query, "CheckTagChangePoints", "is", playerid, nammm);
	return 1;
}

forward CheckTagChangePoints(playerid, name[7]);
public CheckTagChangePoints(playerid, name[7])
{
	if(cache_num_rows()>0)
	{

		new points, x = PlayerInfo[playerid][InClan]; cache_get_value_name_int(0, "chpoints", points);
		if(points < 20) return SendClientMessage(playerid, RED, "Your clan doesn't appear to have a minimum of 20 honor points to make a tag change.");
		new query[125];
		SendClientMessage(playerid, Lg, "* You have changed your clan tag to %s", name);
		new str[54];
		format(str, _, "CLAN TAG: %s has changed clan tag to %s", PlayerInfo[playerid][Nick], name);
		ClanMSG(x,str);
		mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `ctag` = '%e',`chpoints` = `chpoints`-20 WHERE `cid`= '%d' LIMIT 1", name, PlayerInfo[playerid][InClan]);
		mysql_tquery(mysql, query);
		SendClientMessage(playerid, COLOR_GREEN, "[Clan Info]: You have successfully changed the clan tag to %s.", name);
		format(query, _, "%s changed clan tag to %s.", PlayerInfo[playerid][Nick], name);
		RecordClanCMD(query, x);
		foreach(new i : Player) if(PlayerInfo[i][InClan] == x) strcopy(cTag[i], name);
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Oups, something went wrong. Please notify an admin of this error: ERR00000123");
}

CMD:cskin(playerid)
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanLead] == x || PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new query[100];
		mysql_format(mysql, query, sizeof(query), "SELECT `chpoints` FROM `clans` WHERE `cid` = '%d' LIMIT 1", x);
		mysql_pquery(mysql, query, "CheckSkinChangePoints", "i", playerid);
	}else return ERR(playerid,"Only leader or owner can change the skin");
	return 1;
}

forward CheckSkinChangePoints(playerid);
public CheckSkinChangePoints(playerid)
{
	if(cache_num_rows()>0)
	{

		new points; cache_get_value_name_int(0, "chpoints", points);
		if(points < 1500) return SendClientMessage(playerid, Dred, "insufficient clan honor point ( 1500 honor points required)");
		SendClientMessage(playerid,Lg,"Choose a skin");
		ShowModelSelectionMenu(playerid, skinlist, "Select Skin");
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Oups, something went wrong. Please notify an admin of this error: ERR00000123");
}

CMD:ctoys(playerid)
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	if(!PlayerInfo[playerid][IsSpawned]) return ERR(playerid, "You have to be spawned to use this cmd.");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{
		new lvl = cLevel[playerid];
		switch(lvl)
		{
		    case 5:
		    {
		        if(cToy1[playerid] != -1) return ERR(playerid, "Your clan has only 1 toy slot, /upgrade to have one extra slot.");
		    }
		    case 6:
			{
			}
		    default:
		    {
		        ERR(playerid, "Your clan needs to be at least level 5 to have toys");
		        return 1;
		    }
		}
		new query[100];
		mysql_format(mysql, query, sizeof(query), "SELECT `chpoints` FROM `clans` WHERE `cid` = '%d' LIMIT 1", x);
		mysql_pquery(mysql, query, "CheckToysChangePoints", "i", playerid);
	}else return ERR(playerid,"Only co-owner or owner can set clan toys");
	return 1;
}

forward CheckToysChangePoints(playerid);
public CheckToysChangePoints(playerid)
{
	if(cache_num_rows()>0)
	{

		new points; cache_get_value_name_int(0, "chpoints", points);
		if(points < 500) return SendClientMessage(playerid, Dred, "insufficient clan honor point ( 500 honor points required)");
		ShowPlayerDialog(playerid, DIALOG_TOYS, DIALOG_STYLE_TABLIST_HEADERS, "Clan Toys", "Slot\tRequired Clan Level\nToy 1\tLevel 5\nToy 2\tLevel 6", "Select", "Cancel");
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Oups, something went wrong. Please notify an admin of this error: ERR00000123");
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(!response) return ERR(playerid,"You have canceled the selection");
	if(listid == toylist)
	{
		if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in clan !! you got kicked ?");
        SetPVarInt(playerid, "AttachmentModelSel", modelid);
		new dialog[500];
		for(new x;x<sizeof(AttachmentBones);x++)
		{
			format(dialog, _, "%sBone:%s\n", dialog, AttachmentBones[x]);
		}
		ShowPlayerDialog(playerid, DIALOG_ATTACH_BONE_SELECTION, DIALOG_STYLE_LIST, "{FF0000}Attachment Modification - Bone Selection", dialog, "Select", "Cancel");
	}
	else if(listid == skinlist)
	{
		if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in clan !! you got kicked ?");
		new query[159];
		mysql_format(mysql, query, sizeof(query), "UPDATE `clans` SET `cskin` = '%d', `chpoints` =`chpoints`-1500 WHERE `cid`='%d' LIMIT 1", modelid, PlayerInfo[playerid][InClan]);
		mysql_tquery(mysql, query, "OnClanSkinChange", "id", playerid, modelid);
	}
	else if(listid == vehiclelist)
	{
		CarSpawner(playerid,modelid);
	}
	return 1;
}

forward OnClanSkinChange(playerid, target);
public OnClanSkinChange(playerid, target)
{
	if(cache_warning_count()) return SendClientMessage(playerid, RED, "Oups, something went wrong. Please notify an admin of this error: ERR00000126");
	SendClientMessage(playerid, COLOR_PURPLE, "[Clan Info]: Clan skin was successfully changed");
	new x = PlayerInfo[playerid][InClan];
	new msg[100];
	format(msg, _, "%s set clan skin to %d.", PlayerInfo[playerid][Nick], target);
	RecordClanCMD(msg, x);
	new str[45];
	format(str, _, "CLAN SKIN: %s has changed clan skin to %d", PlayerInfo[playerid][Nick], target);
	foreach(new i : Player)
	{

		if(PlayerInfo[i][InClan] == x)
		{

			SetPlayerSkin(i, target);
			PlayerInfo[i][cSkin] = target;
		}
	}
	ClanMSG(PlayerInfo[playerid][InClan],str);
	return 1;
}

CMD:cleader(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new id,str[256];
		if(sscanf(params,"d",id)) return USG(playerid,"/Cleader [ ID / NAME]");
		if(id == playerid) return ERR(playerid,"Player is yourself");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not conected");
		if(PlayerInfo[id][InClan] != x) return ERR(playerid,"Player not in your clan");
		if(PlayerInfo[id][ClanLead] == x) return ERR(playerid,"Player already leader");
		if(PlayerInfo[id][ClanCoOwn] == x) return ERR(playerid,"Player already co owner");
		PlayerInfo[id][ClanLead] = x;
		strcopy(cRankName[id], "Leader");
		new nam[2][24];
		strcat(nam[0], PlayerInfo[playerid][Nick]); strcat(nam[1], PlayerInfo[id][Nick]);
		SendClientMessage(playerid,clanxx,"* You have promoted %s to clan leader", nam[1]);
		SendClientMessage(id,clanxx,"* You have been promoted to clan leader by %s", nam[0]);
		GameTextForPlayer(id,"~y~~h~Promoted to leader",6000,4);
		SavePlayer(id);
		format(str, _, "%s promoted %s to leadership.", nam[0], nam[1]);
		RecordClanCMD(str, x);
		format(str, _, "CLAN PROMOTE: %s has been promoted to clan leader by %s", nam[1], nam[0]);
		ClanMSG(x, str);
	}else return ERR(playerid,"Only owner/co owner can promote to leader");
	return 1;
}
CMD:cdleader(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new id,str[256];
		if(sscanf(params,"d",id)) return USG(playerid,"/cdleader [ ID / NAME]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not conected");
		if(PlayerInfo[id][InClan] != x) return ERR(playerid,"Player not in your clan");
		if(PlayerInfo[id][ClanLead] != x) return ERR(playerid," Player is not a leader");
		PlayerInfo[id][ClanLead] = -1;
		cRankName[id][0] = EOS;
		new nam[2][24];
		strcat(nam[0], PlayerInfo[playerid][Nick]); strcat(nam[1], PlayerInfo[id][Nick]);
		SendClientMessage(playerid,clanxx,"* You have Removed %s Leader status", nam[1]);
		SendClientMessage(id,clanxx,"* You have been demoted from being a leader by %s", nam[0]);
		GameTextForPlayer(id,"~r~~h~Demoted to member",6000,4);
		SavePlayer(id);
		format(str, _, "%s demoted %s from leadership.", nam[0], nam[1]);
		RecordClanCMD(str, x);
		format(str, _, "CLAN DEMOTE: Leader %s  has been demoted by %s", nam[1], nam[0]);
		ClanMSG(x,str);
	}else return ERR(playerid,"Only owner/co owner can demote leaders");
	return 1;
}


CMD:ccoowner(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x)
	{

		new id,str[256];
		if(sscanf(params,"d",id)) return USG(playerid,"/ccoowner [ ID / NAME]");
		if(id == playerid) return ERR(playerid,"Player is yourself");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not conected");
		if(PlayerInfo[id][InClan] != x) return ERR(playerid,"Player not in your clan");
		if(PlayerInfo[id][ClanCoOwn] == x) return ERR(playerid,"Player already co owner");
		PlayerInfo[id][ClanCoOwn] = x;
		PlayerInfo[id][ClanLead] = -1;
		new nam[2][24];
		strcat(nam[0], PlayerInfo[playerid][Nick]); strcat(nam[1], PlayerInfo[id][Nick]);
		SendClientMessage(playerid,clanxx,"* You have promoted %s to clan co owner", nam[1]);
		SendClientMessage(id,clanxx,"* You have been promoted to clan co owner by %s", nam[0]);
		strcopy(cRankName[id], "Co-Owner");
		GameTextForPlayer(id,"~y~~h~Promoted to co owner",6000,4);
		SavePlayer(id);
		format(str, _, "%s promoted %s to co-ownership.", nam[0], nam[1]);
		RecordClanCMD(str, x);
		format(str, _, "CLAN PROMOTE: %s has been promoted to clan co owner by %s", nam[1], nam[0]);
		ClanMSG(x,str);
	}else return ERR(playerid,"Only owner can promote to co owners");
	return 1;
}
CMD:cdcoowner(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x)
	{

		new id,str[256];
		if(sscanf(params,"d",id)) return USG(playerid,"/cdleader [ ID / NAME]");
		if(playerid == id) return ERR(playerid,"Player is yourself");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not conected");
		if(PlayerInfo[id][InClan] != x) return ERR(playerid,"Player not in your clan");
		if(PlayerInfo[id][ClanCoOwn] != x) return ERR(playerid," Player is not a co owner");
		PlayerInfo[id][ClanCoOwn] = -1;
		cRankName[id][0] = EOS;
		new nam[2][24];
		strcat(nam[0], PlayerInfo[playerid][Nick]); strcat(nam[1], PlayerInfo[id][Nick]);
		SendClientMessage(playerid,clanxx,"* You have Removed %s Co Owner status",nam[1]);
		SendClientMessage(id,clanxx,"* You have been demoted from being a co owner by %s",nam[0]);
		GameTextForPlayer(id,"~r~~h~Demoted to member",6000,4);
		SavePlayer(id);
		format(str, _, "%s demoted %s from co-ownership.", nam[0], nam[1]);
		RecordClanCMD(str, x);
		format(str, _, "CLAN DEMOTE: %s co owner has been demoted by %s", nam[1], nam[0]);
		ClanMSG(x,str);
	}else return ERR(playerid,"Only owner can demote co owners");
	return 1;
}

CMD:cslogan(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{
		new tm[70];
		if(sscanf(params,"s[70]",tm)) return USG(playerid,"/cslogan [ Slogan ]");

		new query[100];
		mysql_format(mysql, query, sizeof(query), "SELECT `chpoints` FROM `clans` WHERE `cid` = '%d' LIMIT 1", x);
		mysql_pquery(mysql, query, "ChangeClanSlogan", "is", playerid, tm);
	}
	else return ERR(playerid,"Only co-owner or owner can change the clan slogan.");
	return 1;
}

forward ChangeClanSlogan(playerid, slogan[]);
public ChangeClanSlogan(playerid, slogan[])
{
	if(cache_num_rows()>0)
	{
		new strr[300];
		format(strr, _, "CLAN TEAM: %s has changed clan slogan to: %s", PlayerInfo[playerid][Nick], slogan);
		ClanMSG(PlayerInfo[playerid][InClan],strr);
		new x = PlayerInfo[playerid][InClan];
		format(strr, _, "%s changed clan slogan to %s.", PlayerInfo[playerid][Nick], slogan);
		RecordClanCMD(strr, x);
		mysql_format(mysql, strr, sizeof(strr), "UPDATE `clans` SET `cslogan` = '%e' WHERE `cid`='%d' LIMIT 1", slogan, x);
		mysql_tquery(mysql, strr);
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Oups, something went wrong. Please notify an admin of this error: ERR00001128");
}

CMD:cteam(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanLead] == x || PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new tm[50] = "NNNN",str[25];
		if(sscanf(params,"s[50]",tm)) return USG(playerid,"/cteam [ Team Name] ( arab , soviet , australia etc.. )");
		if(strfind(params,"arab",true) != -1) str = "Arabia";
		if(strfind(params,"austral",true) != -1) str = "Australia";
		if(strfind(params,"franc",true) != -1) str = "France";
		if(strfind(params,"brazil",true) != -1) str = "Brazil";
		if(strfind(params,"tali",true) != -1) str = "Taliban";
		if(strfind(params,"eura",true) != -1) str = "Eurasia";
		if(strfind(params,"sovi",true) != -1) str = "Soviet";
		if(strfind(params,"usa",true) != -1) str = "USA";
		if(strfind(params,"NNN",true) != -1) return USG(playerid,"/cteam [ Team Name] ( arab , soviet , australia etc.. )");
		new query[100];
		mysql_format(mysql, query, sizeof(query), "SELECT `chpoints` FROM `clans` WHERE `cid` = '%d' LIMIT 1", x);
		mysql_pquery(mysql, query, "CheckTeamChangePoints", "is", playerid, str);
	}else return ERR(playerid,"Only leader or owner can change the team");
	return 1;
}

forward CheckTeamChangePoints(playerid, teamName[15]);
public CheckTeamChangePoints(playerid, teamName[15])
{
	if(cache_num_rows()>0)
	{

		new points; cache_get_value_name_int(0, "chpoints", points);
		if(points < 5) return SendClientMessage(playerid, Dred, "insufficient clan honor point ( 5 honor points required)");
		new strr[125];
		format(strr, _, "CLAN TEAM: %s has changed prefered team to %s", PlayerInfo[playerid][Nick], teamName);
		ClanMSG(PlayerInfo[playerid][InClan],strr);
		new x = PlayerInfo[playerid][InClan];
		format(strr, _, "%s set clan team to %s.", PlayerInfo[playerid][Nick], teamName);
		RecordClanCMD(strr, x);
		
		mysql_format(mysql, strr, sizeof(strr), "UPDATE `clans` SET `cteam` = '%e', `chpoints` =`chpoints`-5 WHERE `cid`='%d' LIMIT 1", teamName, x);
		mysql_tquery(mysql, strr);
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Oups, something went wrong. Please notify an admin of this error: ERR00001123");
}
CMD:ckick(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanLead] == x || PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new id;
		if(sscanf(params,"d",id)) return USG(playerid,"/ckick [ID / NAME]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
		if(PlayerInfo[id][InClan] != x) return ERR(playerid,"Player not in your clan");
		if(PlayerInfo[id][ClanOwn] == x) return ERR(playerid,"You cant kick the owner");
		if(PlayerInfo[id][ClanCoOwn] == x) { if(PlayerInfo[playerid][ClanOwn] != x) return ERR(playerid,"You cant kick the co-owner"); }
		if(PlayerInfo[id][ClanLead] == x)
		{

			if(!( PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)) return ERR(playerid,"Only owner can kick leader");
		}
		new nam[2][24]; strcat(nam[0], PlayerInfo[playerid][Nick]);
		strcat(nam[1], PlayerInfo[id][Nick]);
		SendClientMessage(id,Dred,"* You have been kicked from %s Clan by %s", PlayerInfo[id][InClan], nam[0]);
		SendClientMessage(playerid,Lg,"* You have kicked %s from the clan", nam[1]);
		PlayerInfo[id][InClan] = -1;
		if(IsPlayerAttachedObjectSlotUsed(id,4)) RemovePlayerAttachedObject(id,4);
		if(IsPlayerAttachedObjectSlotUsed(id,5)) RemovePlayerAttachedObject(id,5);
		cToy1[id] = cToy2[id] = -1;
		PlayerInfo[id][ClanLead] = -1;
		cName[id] = "";
		cLevel[id] = 0;
		PlayerInfo[id][CR] = PlayerInfo[id][CRP] = 0;
		cTag[id] = "";
		PlayerInfo[id][cRank] = 0;
		new str[104];
		mysql_format(mysql, str, 90, "UPDATE `clans` SET `cmembers` = `cmembers`-1 WHERE `cid`='%d' LIMIT 1", PlayerInfo[playerid][InClan]);
		mysql_tquery(mysql, str);
		GameTextForPlayer(id,"~r~~h~KICKED FROM THE CLAN",6000,5);
		format(str, _, "CLAN KICK: %s(%d) has been kicked from the clan by %s", nam[1], id, nam[0]);
		ClanMSG(x,str);

		format(str, _, "%s kicked %s.", nam[0], nam[1]);
		RecordClanCMD(str, x);
		
		SavePlayer(id);
	}else return ERR(playerid,"Only Leader or owner can kick members");
	return 1;
}
CMD:cmute(playerid,params[])
{
	new x = PlayerInfo[playerid][InClan];
	if(x == -1) return ERR(playerid,"You are not in any clan");
	if(PlayerInfo[playerid][ClanLead] == x || PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{
		new id,mint,ress[50], str[160];
		if(sscanf(params,"dds[50]",id,mint,ress)) return USG(playerid,"/CMute [ ID ] [Minutes] [Reason]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
		if(PlayerInfo[id][InClan] != x) return ERR(playerid,"Player not in your clan");
		if(PlayerInfo[id][ClanOwn] == x) return ERR(playerid,"You cant mute the owner");
		if(PlayerInfo[id][ClanCoOwn] == x) { if(PlayerInfo[playerid][ClanOwn] != x) return ERR(playerid,"You cant mute the co-owner"); }
		if(PlayerInfo[id][ClanLead] == x)
		{

			if(!( PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)) return ERR(playerid,"Only owner/co-owner can mute leaders.");
		}
		PlayerInfo[id][CMuted] = true;
		PlayerInfo[id][CMuteTime] = mint*60;
		new nam[2][24]; strcat(nam[0], PlayerInfo[playerid][Nick]);
		strcat(nam[1], PlayerInfo[id][Nick]);
		SendClientMessage(id,Dred,"* You have been clan muted by %s.", nam[0]);
		SendClientMessage(playerid,Lg,"* You have clan muted %s.", nam[1]);
		GameTextForPlayer(id,"~r~~h~CLAN MUTED",6000,5);
		format(str, _, "CLAN MUTE: %s(%d) has been muted by %s | Reason: %s", nam[1], id, nam[0], ress);
		ClanMSG(x,str);
	}else return ERR(playerid,"Only leaders/owners/co-owners can mute members.");
	return 1;
}

CMD:cunmute(playerid,params[])
{
	new x = PlayerInfo[playerid][InClan];
	if(x == -1) return ERR(playerid,"You are not in any clan");
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/CUnmute [ ID ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][InClan] != x) return ERR(playerid,"Player not in your clan");
	if(PlayerInfo[id][ClanOwn] == x) return ERR(playerid,"You cant unmute the owner");
	if(PlayerInfo[id][CMuted] == false) return ERR(playerid,"Player is not  Muted");
	if(PlayerInfo[id][ClanCoOwn] == x) { if(PlayerInfo[playerid][ClanOwn] != x) return ERR(playerid,"You cant unmute the co-owner"); }
	if(PlayerInfo[id][ClanLead] == x)
	{
		if(!( PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)) return ERR(playerid,"Only owner/co-owner can unmute leaders.");
	}
	PlayerInfo[id][CMuted] = false;
	PlayerInfo[id][CMuteTime] = 0;
	SendClientMessage(id,Lg,"* You have been Clan Unmuted By %s" ,PlayerInfo[playerid][Nick]);
	Play(id);
	return 1;
}


CMD:cblacklisted(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new remain = GetTickCount() - PlayerInfo[playerid][CBLCMD];
	if(remain < 10000) return ERR(playerid, "You need to wait 10 seconds between each time you use this cmd.");
	new str[128];
	mysql_format(mysql, str, sizeof(str), "SELECT `name` FROM `playerbase` WHERE id IN (SELECT `pid` FROM `cblacklist` WHERE `cid` = '%d')", PlayerInfo[playerid][InClan]);
	mysql_pquery(mysql, str, "CBlacklistDisplay", "d", playerid);
	return 1;
}

forward CBlacklistDisplay(playerid);
public CBlacklistDisplay(playerid)
{
	new cat[1280];
	new cc = cache_num_rows();
	if(cc == 0) { cat = "None"; }
	else
	{
		for(new i =0; i < cc; i++)
		{
			new str[24];
			cache_get_value_name(i,"name", str);
			strcat(cat, str);
			strcat(cat, "\n");
		}
	}
	ShowPlayerDialog(playerid, 5137, DIALOG_STYLE_MSGBOX, "{C71CFF}Players in {0094FF}Clan Blacklist", cat, "ok", "");
	return 1;
}

CMD:cblacklist(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new id;
		if(sscanf(params,"d",id)) return USG(playerid,"/cblacklist [ID]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
		if(PlayerInfo[id][InClan] == x) return ERR(playerid,"You can't blacklist your clan members");
		if(!PlayerInfo[id][LoggedIn]) return ERR(playerid,"Player is not logged in");
		new str[104];
		mysql_format(mysql, str, 104, "SELECT * FROM `cblacklist` WHERE `cid`='%d' AND `pid`='%d' LIMIT 1", x, PlayerInfo[id][AID]);
		mysql_pquery(mysql, str, "CheckForBlackList", "dd", playerid, id);
	}else return ERR(playerid,"Only Owner or co-owner can blacklist players");
	return 1;
}

forward CheckForBlackList(playerid, id);
public CheckForBlackList(playerid, id)
{
	if(cache_num_rows()>0) return ERR(playerid, "Player is already blacklisted.");
	new x = PlayerInfo[playerid][InClan];
	new nam[2][24];
	strcat(nam[0], PlayerInfo[playerid][Nick]); strcat(nam[1], PlayerInfo[id][Nick]);
	SendClientMessage(id,Dred,"* You have been blacklisted from %s Clan by %s",cName[playerid],nam[0]);
	SendClientMessage(playerid,Lg,"* You have blacklisted %s from the clan",nam[1]);
	new str[104];
	mysql_format(mysql, str, sizeof(str), "INSERT INTO `cblacklist` (`cid`,`pid`) VALUES ('%d','%d')",x,PlayerInfo[id][AID]);
	mysql_tquery(mysql, str);

	format(str, _, "%s blacklisted %s.", nam[0], nam[1]);
	RecordClanCMD(str, x);
	
	format(str, _, "CLAN BLACKLIST: %s(%d) has been blacklisted from the clan by %s", nam[1], id, nam[0]);
	ClanMSG(x,str);
	return 1;
}

CMD:cunblacklist(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new id;
		if(sscanf(params,"d",id)) return USG(playerid,"/cblacklist [ID]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
		if(PlayerInfo[id][InClan] == x) return ERR(playerid,"You can't unblacklist your clan members");
		if(!PlayerInfo[id][LoggedIn]) return ERR(playerid,"Player is not logged in");
		new str[104];
		mysql_format(mysql, str, sizeof(str), "SELECT * FROM `cblacklist` WHERE `cid`='%d' AND `pid`='%d' LIMIT 1", x, PlayerInfo[id][AID]);
		mysql_pquery(mysql, str, "CheckForUnBlackList", "dd", playerid, id);
	}else return ERR(playerid,"Only Owner or co-owner can unblacklist players");
	return 1;
}

forward CheckForUnBlackList(playerid, id);
public CheckForUnBlackList(playerid, id)
{
	if(cache_num_rows() == 0) return ERR(playerid, "Player is already unblacklisted.");
	new x = PlayerInfo[playerid][InClan];
	new nam[2][24];
	strcat(nam[0], PlayerInfo[playerid][Nick]); strcat(nam[1], PlayerInfo[id][Nick]);
	SendClientMessage(id,Dred,"* You have been unblacklisted from %s Clan by %s",cName[playerid],nam[0]);
	SendClientMessage(playerid,Lg,"* You have unblacklisted %s from the clan",nam[1]);
	new str[104];

	format(str, _, "%s blacklisted %s.", nam[0], nam[1]);
	RecordClanCMD(str, x);

	mysql_format(mysql, str, sizeof(str), "DELETE FROM `cblacklist` where `cid`='%d' AND `pid`='%d'", x, PlayerInfo[id][AID]);
	mysql_tquery(mysql, str);
	format(str, _, "CLAN UNBLACKLIST: %s(%d) has been unblacklisted from the clan by %s", nam[1], id, nam[0]);
	ClanMSG(x,str);
	return 1;
}

CMD:cokick(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanLead] == x || PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{

		new name[25];
		if(sscanf(params,"s[25]",name)) return USG(playerid,"/cokick [ player name ]");
		if(strlen(name) < 3 || strlen(name) > 20) return ERR(playerid,"Invalid Name");
		foreach(new i : Player) if(strcmp(name,PlayerInfo[i][Nick],true) == 0) return ERR(playerid,"Player is online!");
		new query[98];
		mysql_format(mysql,query,sizeof(query),"SELECT * FROM `playerbase` WHERE `name` ='%e' AND `inclan` ='%d' LIMIT 1",name,x);
		mysql_pquery(mysql,query,"OfflineKick","dds",playerid,x,name);
	}else return ERR(playerid,"Only owner can kick members");
	return 1;

}

forward OfflineKick(playerid,x,nam[]);
public OfflineKick(playerid,x,nam[])
{
	if(cache_num_rows()>0)
	{

		new inc,lead,own,coown;
		cache_get_value_name_int(0,"inclan", inc);
		cache_get_value_name_int(0,"clanlead", lead);
		cache_get_value_name_int(0,"clanown", own);
		cache_get_value_name_int(0,"clancoown", coown);
		if(inc != x) return ERR(playerid,"Player is not in your clan");
		if(own == x) return ERR(playerid,"You cannot kick your clan owner");
		if(lead == x)
		{

			if(!(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)) return ERR(playerid,"Only owner/co-owner can kick Leaders");
		}
		if(coown == x) if(!(PlayerInfo[playerid][ClanOwn] == x)) return ERR(playerid,"Only owner can kick co-owners");
		RemoveFromClanBYNAME(nam,x);
		new str[96];
		format(str, _, "%s kicked %s.", PlayerInfo[playerid][Nick], nam);
		RecordClanCMD(str, x);

		SendClientMessage(playerid,clanxx,"CLAN OFFLINE KICK: %s has kicked %s from the clan.",PlayerInfo[playerid][Nick],nam);
	}else ERR(playerid,"Account not found / Player not in your clan");
	return 1;
}
CMD:ccall(playerid)
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	new Float:xx,Float:y,Float:z;
	GetPlayerPos(playerid,xx,y,z);
	new str[43]; format(str, _, "~p~Called ~w~by %s", PlayerInfo[playerid][Nick]);
	foreach(new i : Player)
	{
		if(PlayerInfo[i][InClan] == x)
		{
			if(i != playerid)
			{
				SetPlayerRaceCheckpoint(i, CP_TYPE_GROUND_FINISH,xx,y,z,0.0,0.0,0.0,8.0);
				GameTextForPlayer(i,str,6000,5);
			}
		}
	}
	SendClientMessage(playerid,Lg,"[CLAN-CALL] You have called all of your clan members to your location.");
	return 1;
}
CMD:cleave(playerid)
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan.");
	PlayerInfo[playerid][cleave] = true;
	SendClientMessage(playerid,clanxx,"Are you sure that you want to leave your clan? you may use /yes or /no.");
	return 1;
}
CMD:cleave22(playerid)
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan.");
	new x = PlayerInfo[playerid][InClan];
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	new strr[110];
	if(PlayerInfo[playerid][ClanOwn] == x)
	{
		foreach(new i : Player)
		{
			if(PlayerInfo[i][ClanCoOwn] == x)
			{
				PlayerInfo[i][ClanOwn] = x;
				PlayerInfo[i][ClanCoOwn] = -1;
				new nam2[24]; strcat(nam2, PlayerInfo[i][Nick]);
				SendClientMessage(playerid,clanxx,"* You have left the %s clan. %s is the new owner now.",cName[i],nam2);
				SendClientMessage(i,clanxx,"Clan owner %s has left the clan you are the new owner.",nam);
				mysql_format(mysql, strr, sizeof(strr), "UPDATE `clans` SET `cowner` = '%e' WHERE `cid`='%d' LIMIT 1", nam2, x);
				mysql_tquery(mysql, strr);
				break;
			}
		}
		mysql_format(mysql, strr, 91, "UPDATE `clans` SET `cmembers` = `cmembers`-1 WHERE `cid`='%d' LIMIT 1", x);
		mysql_tquery(mysql, strr);
		format(strr, _, "* %s has left the clan.", nam);
		ClanMSG(x,strr);
		PlayerInfo[playerid][cRank] = 0;
		SendClientMessage(playerid,clanxx,"You have left the clan");
	}else
	{

		if(PlayerInfo[playerid][ClanLead] == x)
		{

			mysql_format(mysql, strr, sizeof(strr), "UPDATE `clans` SET `cleader` = 'None', `cmembers` = `cmembers`-1 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, strr);
			format(strr, _, "* Leader %s has left the clan.", nam);
		}else
		{

			mysql_format(mysql, strr, 91, "UPDATE `clans` SET `cmembers` = `cmembers`-1 WHERE `cid`='%d' LIMIT 1", x);
			mysql_tquery(mysql, strr);
			format(strr, _, "* %s has left the clan.", nam);
		}
		ClanMSG(x,strr);
	}

	format(strr, _, "%s left the clan.", nam);
	RecordClanCMD(strr, x);

	PlayerInfo[playerid][InClan] = -1;
	PlayerInfo[playerid][ClanLead] = -1;
	PlayerInfo[playerid][ClanOwn]= -1;
	PlayerInfo[playerid][ClanCoOwn]= -1;

	if(IsPlayerAttachedObjectSlotUsed(playerid,4)) RemovePlayerAttachedObject(playerid,4);
	if(IsPlayerAttachedObjectSlotUsed(playerid,5)) RemovePlayerAttachedObject(playerid,5);
	cToy1[playerid] = cToy2[playerid] = -1;
	PlayerInfo[playerid][cRank]= 0;
	cName[playerid]= "";
	cLevel[playerid]= 0;
	PlayerInfo[playerid][CR] = PlayerInfo[playerid][CRP] = 0;
	cTag[playerid]= "";
	SavePlayer(playerid);
	UpdateLabelText(playerid);
	new query[85];
	mysql_format(mysql,query,sizeof(query),"SELECT `cmembers` FROM `clans` WHERE `cid` ='%d' LIMIT 1",x);
	mysql_pquery(mysql,query, "CheckToDestroyClan","d",x);
	return 1;
}

forward CheckToDestroyClan(x);
public CheckToDestroyClan(x)
{
	if(cache_num_rows()>0)
	{

		new membersss; cache_get_value_name_int(0, "cmembers", membersss);
		if(membersss < 0)
		{

			printf("Inactive Clan %d Removed",x);
			new query[80];
			mysql_format(mysql,query,sizeof(query),"DELETE FROM `clans` WHERE `cid` ='%d' LIMIT 1",x);
			mysql_tquery(mysql,query);
		}
	}
	return 1;
}

RemoveFromClanBYNAME(namee[],xxx)
{
	new query[256];
	mysql_format(mysql,query,sizeof(query),"UPDATE `playerbase` SET `inclan` ='-1' ,`clanlead` ='-1' , `clanown` ='-1' , `clancoown` ='-1' WHERE `name` ='%e' LIMIT 1",namee);
	mysql_tquery(mysql, query);
	mysql_format(mysql,query,sizeof(query),"UPDATE `clans` SET `cmembers` = `cmembers`-1 WHERE `cid` ='%d' LIMIT 1",xxx);
	mysql_tquery(mysql, query);
}
CMD:activestaff(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 5) return ERRR(playerid,5);
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/Activestaff [ Level ]");
	new query[256];
	if(id < 0 || id > 8) return ERR(playerid,"Invalid Level (0-8) ( 0 for moderators )");
	if(id != 0) mysql_format(mysql, query, sizeof(query), "SELECT * FROM `playerbase` WHERE `adminlvl` = '%d'",id);
	else mysql_format(mysql, query, sizeof(query), "SELECT * FROM `playerbase` WHERE `helper` = '1'");
	mysql_pquery(mysql, query, "GetOfflineAdmins", "dd",playerid,id);
	SendClientMessage(playerid,Lg,"* Active admins ...");
	return 1;
}
forward GetOfflineAdmins(playerid,lvll);
public GetOfflineAdmins(playerid,lvll)
{
	new raw, wat;	cache_get_row_count(raw);
	new Cat[700],ii[25],Gn[25];
	for(new i=0; i < raw; i ++ )
	{
	    wat++;
		cache_get_value_name(i,"name",Gn,25);
		cache_get_value_name(i,"laston",ii,25);
		if(wat < 4 ) format(Cat, _, "%s{FFFFFF}%s (LastOn: {FF48A4}%s) {808080}|| ", Cat, Gn, ii);
		else { format(Cat, _, "%s{FFFFFF}%s (LastOn: {FF48A4}%s)\n", Cat, Gn, ii); wat = 0; }
	}
	if(raw == 0) return ERR(playerid,"No admin found in this level");
	ShowPlayerDialog(playerid, 841, DIALOG_STYLE_MSGBOX, "Inactive Admins", Cat, "Close", "");
	return 1;
}

CMD:topclans(playerid)
{
	new remain = GetTickCount() - PlayerInfo[playerid][TOPCLANSCMD];
	if(remain < 20000) return SendClientMessage(playerid, Dred, "Please wait 20 seconds between each time you use this cmd.");
	PlayerInfo[playerid][TOPCLANSCMD] = GetTickCount();
	ShowPlayerDialog(playerid, TOPCLANSDIALOG, DIALOG_STYLE_LIST, "Top Clans : Choose A Filter", "{FFE7FF}Top {0002B5}Kills\n{FFE7FF}Top {0002B5}Honor Points\n{FFE7FF}Top {0002B5}Level\n{FFE7FF}Top {0002B5}Wars Wins\n{FFE7FF}Top {0002B5}Members Count\n{FFE7FF}Top {0002B5}K/D Ratio\n{FFE7FF}Top {0002B5}All-Time Honor Points\n{FFE7FF}Top {0002B5}Skill Rank", "filter", "close");
	return 1;
}

CMD:upgrade(playerid)
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{
		new query[128];
		mysql_format(mysql, query, sizeof(query), "SELECT `chpoints` FROM `clans` WHERE `cid`='%d' LIMIT 1", PlayerInfo[playerid][InClan]);
		mysql_pquery(mysql, query, "UpgradeClan", "i", playerid);
	}else ERR(playerid,"You are not the leader of this clan");
	return 1;
}

forward UpgradeClan(playerid);
public UpgradeClan(playerid)
{
	if(cache_num_rows()>0)
	{
		new level = cLevel[playerid]; new points; cache_get_value_name_int(0, "chpoints", points);
		if(level == 6) return ERR(playerid,"Sorry you have max clan level");
		new x = PlayerInfo[playerid][InClan];
		new str[110];
		switch(level)
		{
			case 1:
			{
				if(points > 999)
				{
					mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `clevel` = 2, `chpoints` = `chpoints` - 1000 WHERE `cid`='%d' LIMIT 1", x);
					mysql_tquery(mysql, str);
					format(str, _, "[CLAN-UPGRADE] %s has upgraded clan to level 2", PlayerInfo[playerid][Nick]);
					ClanMSG(x,str);
					foreach(new i : Player) if(PlayerInfo[i][InClan] == x) cLevel[i] ++;
					format(str, _, "%s upgraded the clan.", PlayerInfo[playerid][Nick]);
					RecordClanCMD(str, x);

				}else ERR(playerid,"insufficient clan honor point ( 1000 honor points required)");
			}
			case 2:
			{
				if(points >1299)
				{
					mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `clevel` = 3, `chpoints` = `chpoints` - 1300 WHERE `cid`='%d' LIMIT 1", x);
					mysql_tquery(mysql, str);
					format(str, _, "[CLAN-UPGRADE] %s has upgraded clan to level 3", PlayerInfo[playerid][Nick]);
					ClanMSG(x,str);
					foreach(new i : Player) if(PlayerInfo[i][InClan] == x) cLevel[i] ++;
					format(str, 96, "%s upgraded the clan.", PlayerInfo[playerid][Nick]);
					RecordClanCMD(str, x);
				}else ERR(playerid,"insufficient clan honor point ( 1300 honor points required)");
			}
			case 3:
			{
				if(points >1699)
				{
					mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `clevel` = 4, `chpoints` = `chpoints` - 1700 WHERE `cid`='%d' LIMIT 1", x);
					mysql_tquery(mysql, str);
					format(str, _, "[CLAN-UPGRADE] %s has upgraded clan to level 4", PlayerInfo[playerid][Nick]);
					ClanMSG(x,str);
					foreach(new i : Player) if(PlayerInfo[i][InClan] == x) cLevel[i] ++;
					format(str, _, "%s upgraded the clan.", PlayerInfo[playerid][Nick]);
					RecordClanCMD(str, x);
				}else ERR(playerid,"insufficient clan honor point ( 1700 honor points required)");
			}
			case 4:
			{
				if(points >1999)
				{
					mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `clevel` = 5, `chpoints` = `chpoints` - 2000 WHERE `cid`='%d' LIMIT 1", x);
					mysql_tquery(mysql, str);
					format(str, _, "[CLAN-UPGRADE] %s has upgraded clan to level 5", PlayerInfo[playerid][Nick]);
					ClanMSG(x,str);
					foreach(new i : Player) if(PlayerInfo[i][InClan] == x) cLevel[i] ++;
					format(str, _, "%s upgraded the clan.", PlayerInfo[playerid][Nick]);
					RecordClanCMD(str, x);
				}else ERR(playerid,"insufficient clan honor point ( 2000 honor points required)");
			}
			case 5:
			{
				if(points >2999)
				{
					mysql_format(mysql, str, sizeof(str), "UPDATE `clans` SET `clevel` = 6, `chpoints` = `chpoints` - 3000 WHERE `cid`='%d' LIMIT 1", x);
					mysql_tquery(mysql, str);
					format(str, _, "[CLAN-UPGRADE] %s has upgraded clan to level 6", PlayerInfo[playerid][Nick]);
					ClanMSG(x,str);
					foreach(new i : Player) if(PlayerInfo[i][InClan] == x) cLevel[i] ++;
					format(str, _, "%s upgraded the clan.", PlayerInfo[playerid][Nick]);
					RecordClanCMD(str, x);
				}else ERR(playerid,"insufficient clan honor point ( 3000 honor points required)");
			}
		}
	}
	return 1;
}

CMD:cmembers(playerid)
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new remain = GetTickCount() - PlayerInfo[playerid][CMEMBERSCMD];
	if(remain < 15000) return SendClientMessage(playerid, Dred, "You have recently used this cmd, please try again later.");
	PlayerInfo[playerid][CMEMBERSCMD] = GetTickCount();
	PlayerInfo[playerid][CMembersPage] = 0;
	new x = PlayerInfo[playerid][InClan];
	new query[180];
	mysql_format(mysql, query, sizeof(query), "SELECT `crank0`, `crank1`, `crank2`, `crank3`, `crank4`, `crank5`, `crank6`, `crank7`, `crank8`, `crank9`, `crank10` FROM `clans` WHERE `cid` ='%d' LIMIT 1",x);
	mysql_pquery(mysql, query, "CheckForClanRankUse", "d",playerid);
	return 1;
}

forward CheckForClanRankUse(playerid);
public CheckForClanRankUse(playerid)
{
	if(cache_num_rows()>0)
	{
		new query[98];
		mysql_format(mysql, query, sizeof(query), "SELECT `id`,`name`,`crank`,`laston` FROM `playerbase` WHERE `inclan` ='%d'",PlayerInfo[playerid][InClan]);
		new rank[11][15];
		cache_get_value_name(0,"crank0",rank[0]);
		cache_get_value_name(0,"crank1",rank[1]);
		cache_get_value_name(0,"crank2",rank[2]);
		cache_get_value_name(0,"crank3",rank[3]);
		cache_get_value_name(0,"crank4",rank[4]);
		cache_get_value_name(0,"crank5",rank[5]);
		cache_get_value_name(0,"crank6",rank[6]);
		cache_get_value_name(0,"crank7",rank[7]);
		cache_get_value_name(0,"crank8",rank[8]);
		cache_get_value_name(0,"crank9",rank[9]);
		cache_get_value_name(0,"crank10",rank[10]);
		mysql_pquery(mysql, query, "GetClanOfflineMembers", "dsssssssssss",playerid, rank[0], rank[1], rank[2], rank[3], rank[4], rank[5], rank[6], rank[7], rank[8], rank[9], rank[10]);
	} else SendClientMessage(playerid, Dred, "Fatal error, please report this error code on forums 0x4556747");
	return 1;
}

forward GetClanOfflineMembers(playerid, rank0[15], rank1[15], rank2[15], rank3[15], rank4[15], rank5[15], rank6[15], rank7[15], rank8[15], rank9[15], rank10[15]);
public GetClanOfflineMembers(playerid, rank0[15], rank1[15], rank2[15], rank3[15], rank4[15], rank5[15], rank6[15], rank7[15], rank8[15], rank9[15], rank10[15])
{
	new raw; cache_get_row_count(raw);
	page0R[playerid] = "Member\tRank\tStatus\tLast ON\n";
	page1R[playerid] = "Member\tRank\tStatus\tLast ON\n";
	page2R[playerid] = "Member\tRank\tStatus\tLast ON\n";
	if(raw< 2) return SendClientMessage(playerid, Dred, "You are the only member in the clan");
	PlayerInfo[playerid][CMembers] = raw;
	new str[80], rank, act[10];
	for(new i=0; i < raw; i++)
	{
		cache_get_value_name(i,"name",str,24);
		cache_get_value_name_int(i,"crank", rank);
		cache_get_value_name_int(i,"id", MemID[playerid][i]);
		cache_get_value_name(i,"laston", act, 10);
		new bool:found;
		foreach(new j : Player)
		{
			if(strcmp(str,PlayerInfo[j][Nick],true) == 0)
			{
				found = true;
				break;
			}
		}
		if(found)
		{
			switch(i)
			{
				case 0..24:
				{
					strcat(page0R[playerid], str);
					strcat(page0R[playerid], "\t");
					switch(rank)
					{
						case 0: if(strlen(rank0) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank0);
						case 1: if(strlen(rank1) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank1);
						case 2: if(strlen(rank2) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank2);
						case 3: if(strlen(rank3) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank3);
						case 4: if(strlen(rank4) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank4);
						case 5: if(strlen(rank5) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank5);
						case 6: if(strlen(rank6) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank6);
						case 7: if(strlen(rank7) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank7);
						case 8: if(strlen(rank8) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank8);
						case 9: if(strlen(rank9) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank9);
						case 10: if(strlen(rank10) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank10);
					}
					strcat(page0R[playerid], "\t{6EF83C}Online{FFFFFF}\t");
					strcat(page0R[playerid], act);
					strcat(page0R[playerid], "\n");
				}
				case 25..49:
				{

					strcat(page1R[playerid], str);
					strcat(page1R[playerid], "\t");
					switch(rank)
					{

						case 0: if(strlen(rank0) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank0);
						case 1: if(strlen(rank1) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank1);
						case 2: if(strlen(rank2) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank2);
						case 3: if(strlen(rank3) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank3);
						case 4: if(strlen(rank4) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank4);
						case 5: if(strlen(rank5) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank5);
						case 6: if(strlen(rank6) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank6);
						case 7: if(strlen(rank7) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank7);
						case 8: if(strlen(rank8) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank8);
						case 9: if(strlen(rank9) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank9);
						case 10: if(strlen(rank10) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank10);
					}
					strcat(page1R[playerid], "\t{6EF83C}Online{FFFFFF}\t");
					strcat(page1R[playerid], act);
					strcat(page1R[playerid], "\n");
				}
				case 50..70:
				{

					strcat(page2R[playerid], str);
					strcat(page2R[playerid], "\t");
					switch(rank)
					{

						case 0: if(strlen(rank0) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank0);
						case 1: if(strlen(rank1) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank1);
						case 2: if(strlen(rank2) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank2);
						case 3: if(strlen(rank3) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank3);
						case 4: if(strlen(rank4) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank4);
						case 5: if(strlen(rank5) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank5);
						case 6: if(strlen(rank6) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank6);
						case 7: if(strlen(rank7) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank7);
						case 8: if(strlen(rank8) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank8);
						case 9: if(strlen(rank9) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank9);
						case 10: if(strlen(rank10) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank10);
					}
					strcat(page2R[playerid], "\t{6EF83C}Online{FFFFFF}\t");
					strcat(page2R[playerid], act);
					strcat(page2R[playerid], "\n");
				}
			}
		}
		else
		{

			switch(i)
			{

				case 0..24:
				{

					strcat(page0R[playerid], str);
					strcat(page0R[playerid], "\t");
					switch(rank)
					{

						case 0: if(strlen(rank0) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank0);
						case 1: if(strlen(rank1) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank1);
						case 2: if(strlen(rank2) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank2);
						case 3: if(strlen(rank3) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank3);
						case 4: if(strlen(rank4) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank4);
						case 5: if(strlen(rank5) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank5);
						case 6: if(strlen(rank6) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank6);
						case 7: if(strlen(rank7) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank7);
						case 8: if(strlen(rank8) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank8);
						case 9: if(strlen(rank9) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank9);
						case 10: if(strlen(rank10) == 0) strcat(page0R[playerid], "None"); else strcat(page0R[playerid], rank10);
					}
					strcat(page0R[playerid], "\t{F81414}Offline{FFFFFF}\t");
					strcat(page0R[playerid], act);
					strcat(page0R[playerid], "\n");
				}
				case 25..49:
				{

					strcat(page1R[playerid], str);
					strcat(page1R[playerid], "\t");
					switch(rank)
					{

						case 0: if(strlen(rank0) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank0);
						case 1: if(strlen(rank1) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank1);
						case 2: if(strlen(rank2) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank2);
						case 3: if(strlen(rank3) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank3);
						case 4: if(strlen(rank4) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank4);
						case 5: if(strlen(rank5) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank5);
						case 6: if(strlen(rank6) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank6);
						case 7: if(strlen(rank7) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank7);
						case 8: if(strlen(rank8) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank8);
						case 9: if(strlen(rank9) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank9);
						case 10: if(strlen(rank10) == 0) strcat(page1R[playerid], "None"); else strcat(page1R[playerid], rank10);
					}
					strcat(page1R[playerid], "\t{F81414}Offline{FFFFFF}\t");
					strcat(page1R[playerid], act);
					strcat(page1R[playerid], "\n");
				}
				case 50..70:
				{

					strcat(page2R[playerid], str);
					strcat(page2R[playerid], "\t");
					switch(rank)
					{

						case 0: if(strlen(rank0) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank0);
						case 1: if(strlen(rank1) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank1);
						case 2: if(strlen(rank2) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank2);
						case 3: if(strlen(rank3) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank3);
						case 4: if(strlen(rank4) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank4);
						case 5: if(strlen(rank5) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank5);
						case 6: if(strlen(rank6) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank6);
						case 7: if(strlen(rank7) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank7);
						case 8: if(strlen(rank8) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank8);
						case 9: if(strlen(rank9) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank9);
						case 10: if(strlen(rank10) == 0) strcat(page2R[playerid], "None"); else strcat(page2R[playerid], rank10);
					}
					strcat(page2R[playerid], "\t{F81414}Offline{FFFFFF}\t");
					strcat(page2R[playerid], act);
					strcat(page2R[playerid], "\n");
				}
			}
		}
	}
	ShowPlayerDialog(playerid, CMEMBERSDIALOGR, DIALOG_STYLE_TABLIST_HEADERS, "Clan Members", page0R[playerid], "Next", "Check Stats");
	return 1;
}

CMD:c(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	if(PlayerInfo[playerid][CMuted])
    {
        ERR(playerid, "You are clan muted.");
        return 1;
    }
	new d[256],str[128];
	if(sscanf(params,"s[256]",d)) return USG(playerid,"/C [ text ]");
	format(str, _, "!%s", d);
	OnPlayerText(playerid, str);
	return 1;
}
CMD:cinvite(playerid,params[])
{
	if(PlayerInfo[playerid][InClan] == -1) return ERR(playerid,"You are not in any clan");
	new x = PlayerInfo[playerid][InClan];
	if(PlayerInfo[playerid][ClanLead] == x || PlayerInfo[playerid][ClanOwn] == x || PlayerInfo[playerid][ClanCoOwn] == x)
	{
		new id;
		if(sscanf(params,"d",id)) return USG(playerid,"/Claninvite [ID / Name]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
		if(PlayerInfo[id][InClan] != -1) return ERR(playerid,"Player Already in clan");
		new query[104];
		mysql_format(mysql, query, 104, "SELECT * FROM `cblacklist` WHERE `cid`='%d' AND `pid`='%d' LIMIT 1", x, PlayerInfo[id][AID]);
		mysql_pquery(mysql, query, "CheckForBlackListI", "dd", playerid, id);
	}
	return 1;
}

forward CheckForBlackListI(playerid,id);
public CheckForBlackListI(playerid,id)
{
	if(cache_num_rows()>0) return ERR(playerid, "This player is blacklisted from your clan, please /cunblacklist them first.");
	new query[128];
	mysql_format(mysql, query, sizeof(query), "SELECT `cmembers` FROM `clans` WHERE `cid` ='%d' LIMIT 1",PlayerInfo[playerid][InClan]);
	mysql_pquery(mysql, query, "CheckForInvite", "id",playerid, id);
	return 1;
}

forward CheckForInvite(playerid, id);
public CheckForInvite(playerid, id)
{
	if(cache_num_rows()>0)
	{

		new lvl = cLevel[playerid], members; cache_get_value_name_int(0, "cmembers", members);
		if(GetMaxMembersFromLevel(lvl) <= members) return ERR(playerid,"The clan is already full please upgrade your clan members slots to add more players.");
		SendClientMessage(playerid,clanxx,"* You have invited %s(%d) To join the clan",PlayerInfo[id][Nick],id);
		SendClientMessage(id,clanxx,"[CLAN-INVITE] %s(%d) has invited you to join the clan /yes to join",PlayerInfo[playerid][Nick],playerid);
		GameTextForPlayer(id,"~n~~y~~h~Clan Invitation Recieved",6000,5);
		PlayerInfo[id][cinvite] = PlayerInfo[playerid][InClan];
		SetTimerEx("CancelInvite",20000,false,"dd",playerid,id);
	}else SendClientMessage(playerid, Dred, "Could not connect to database, try again later.");
	return 1;
}

forward CancelInvite(playerid,iid);
public CancelInvite(playerid,iid)
{
	if(PlayerInfo[iid][cinvite] != -1)
	{

		PlayerInfo[iid][cinvite] = -1;
		SendClientMessage(playerid,Dred,"* %s(%d) didnt reply to your clan invitation",PlayerInfo[iid][Nick],iid);
		SendClientMessage(iid,-1,"You have refused to join %s's clan",PlayerInfo[playerid][Nick]);
	}
}

ClanMSG(ct, const msg[])
{
	foreach(new i : Player)
	{
		if(PlayerInfo[i][InClan] == ct) SendClientMessage(i,clanxx,msg);
	}
	return 1;
}


CMD:credits(playerid, params[])
{
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""cblue"Credits", "\
		"clightgreen"Founders: Christofski, Seif.\n\
		Owners: Marshall.\n\
		Developers: Seif.\n\
		Ported to open mp by edgy.\n\
		Maps by Spitfire.\n\
		Sponsored by Sam_Hero.\n\
		Ex-Developer: Jelly23.\n\
		Ex-CEO: Mark, Aayush.\n\
		And you for being part of our community.", "Close", #);
	return 1;
}

CMD:ep(playerid)
{
	GivePlayerWeapon(playerid, WEAPON_PARACHUTE, 1);
	SendClientMessage(playerid, -1, "You have got an emergency parachute !");
	return 1;
}
CMD:gps(playerid)
{
	if(PlayerInfo[playerid][GPS] == false) return ERR(playerid,"You don't have gps scrambler, you can buy one from briefcase");
	new bool:kk;
	kk = pGPS[playerid];
	if(!kk)
	{

		GameTextForPlayer(playerid,"~r~GPS SCRAMBLER~n~~g~~h~ACTIVATED",6000,5);
		SendClientMessage(playerid,Lg,"* Now you are invisible from AAML");
		/*switch(gTeam[playerid])
		{
			case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
			case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
			case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
			case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
			case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
			case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
			case TEAM_ID: SetPlayerColor(playerid,0x00804000);
			case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
			case TEAM_MERC: SetPlayerColor(playerid,0xFFFFFF00);
		}*/
	}
	else
	{
		GameTextForPlayer(playerid,"~r~GPS SCRAMBLER~n~~g~~h~DEACTIVATED",6000,5);
		SendClientMessage(playerid,Lg,"* Now you are visible for AAML");
		/*switch(gTeam[playerid])
		{

			case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6AFF);
			case TEAM_ARAB: SetPlayerColor(playerid,0xFF8000FF);
			case TEAM_SOVIET: SetPlayerColor(playerid,0xF93939FF);
			case TEAM_USA: SetPlayerColor(playerid,0x0080FFFF);
			case TEAM_AUS: SetPlayerColor(playerid,0x9B37FFFF);
			case TEAM_CH: SetPlayerColor(playerid,0x03FCFCFF);
			case TEAM_ID: SetPlayerColor(playerid,0x008040FF);
			case TEAM_FRANCE: SetPlayerColor(playerid,0x923E34FF);
			case TEAM_MERC: SetPlayerColor(playerid,0xFFFFFFFF);
		}*/
	}
	pGPS[playerid] = !kk;
	return 1;
}
CMD:cm(playerid)
{
	if(PlayerInfo[playerid][Camouflage] == false) return ERR(playerid,"You don't have Camouflage, you can buy one from briefcase");
	new bool:kk;
	kk = pCamouflage[playerid];
	if(!kk)
	{

		GameTextForPlayer(playerid,"~r~Camouflage~n~~g~~h~ACTIVATED",6000,5);
		SendClientMessage(playerid,Lg,"* Now you are invisible on map.");
		switch(gTeam[playerid])
		{
			case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
			case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
			case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
			case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
			case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
			case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
			case TEAM_ID: SetPlayerColor(playerid,0x00804000);
			case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
			case TEAM_MERC: SetPlayerColor(playerid,0xFFFFFF00);
		}
	}
	else
	{
		GameTextForPlayer(playerid,"~r~Camouflage~n~~g~~h~DEACTIVATED",6000,5);
		SendClientMessage(playerid,Lg,"* Now you are visible on map");
		switch(gTeam[playerid])
		{

			case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6AFF);
			case TEAM_ARAB: SetPlayerColor(playerid,0xFF8000FF);
			case TEAM_SOVIET: SetPlayerColor(playerid,0xF93939FF);
			case TEAM_USA: SetPlayerColor(playerid,0x0080FFFF);
			case TEAM_AUS: SetPlayerColor(playerid,0x9B37FFFF);
			case TEAM_CH: SetPlayerColor(playerid,0x03FCFCFF);
			case TEAM_ID: SetPlayerColor(playerid,0x008040FF);
			case TEAM_FRANCE: SetPlayerColor(playerid,0x923E34FF);
			case TEAM_MERC: SetPlayerColor(playerid,0xFFFFFFFF);
		}
	}
	pCamouflage[playerid] = !kk;
	return 1;
}

CMD:search(playerid)
{
	if(gClass[playerid] != SPOTTER) return ERR(playerid, "Only Spotters can use this command.");
	new remain = GetTickCount() - PlayerInfo[playerid][SEARCHCMD];
	if( remain < 80000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use this command again", (80000 - remain) / 1000);
		return 1;
	}
	new count, Float:xx, Float:yy, Float:zz, tt = gTeam[playerid];
	GetPlayerPos(playerid, xx, yy , zz);
	foreach(new i : Player)
	{
		if(PlayerInfo[i][dRank] < 5)
		{
			if(pGPS[i] || pCamouflage[i])
			{

				if(gTeam[i] != tt)
				{

					if(IsPlayerInRangeOfPoint(i, 300.00, xx,yy,zz))
					{
						PlayerInfo[i][GPS] = false;
						pGPS[i] = false;
						PlayerInfo[i][Camouflage] = false;
						pCamouflage[i] = false;
						GameTextForPlayer(i,"~n~~w~Discovered by~r~~h~Spotter",3000,3);
						switch(gTeam[i])
						{

							case TEAM_EURASIA: SetPlayerColor(i,0x6AFF6AFF);
							case TEAM_ARAB: SetPlayerColor(i,0xFF8000FF);
							case TEAM_SOVIET: SetPlayerColor(i,0xF93939FF);
							case TEAM_USA: SetPlayerColor(i,0x0080FFFF);
							case TEAM_AUS: SetPlayerColor(i,0x9B37FFFF);
							case TEAM_CH: SetPlayerColor(i,0x03FCFCFF);
							case TEAM_ID: SetPlayerColor(i,0x008040FF);
							case TEAM_FRANCE: SetPlayerColor(i,0x923E34FF);
							case TEAM_MERC: SetPlayerColor(i,0xFFFFFFFF);
						}
						count ++;
					}
				}
			}
		}
	}
	if(!count) SendClientMessage(playerid, -1, "No GPS users in range, you can use /search again.");
	else
	{

		PlayerInfo[playerid][SEARCHCMD] = GetTickCount();
		SendClientMessage(playerid, COLOR_GREEN, "You have spotted %d enemies!", count);
	}
	return 1;
}

CMD:lc(playerid, params[]) return cmd_locate(playerid, params);

CMD:locate(playerid, params[])
{
	if(gClass[playerid] != SPOTTER) return ERR(playerid, "Only Spotters can use this command.");
	if(!PlayerInfo[playerid][IsSpawned]) return ERR(playerid, "You have to be spawned to use this cmd.");
	new remain = GetTickCount() - PlayerInfo[playerid][LOCATECMD];
	if( remain < 120000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use this command again", (120000 - remain) / 1000);
		return 1;
	}
	new id;
	if(sscanf(params,"d",id)) return SendClientMessage(playerid,Dred,"USAGE: /locate (id)");
	if(id == playerid) return ERR(playerid, "You cannot locate yourself");
	if(PlayerInfo[id][dRank] > 4) return ERR(playerid, "You can't locate level 5 VIPs.");
	if(PlayerInfo[id][OnDuty] == 1) return ERR(playerid, "You can't locate admins on-duty.");
	SetPlayerMarkerForPlayer(playerid, id, 0xFFFF00AA);
	SendClientMessage(playerid, green,"Target player marked on map.");
	PlayerInfo[playerid][LOCATECMD] = GetTickCount();
	return 1;
}

CMD:buch(playerid, params[])
{
	if(gClass[playerid] != SNIPER) return ERR(playerid, "Only Snipers can use this command.");
	if(!PlayerInfo[playerid][IsSpawned]) return ERR(playerid, "You have to be spawned to use this cmd.");
 	if(!IsPlayerAttachedObjectSlotUsed(playerid,8)) SetPlayerAttachedObject(playerid, 8, 824, 1, -0.313000, 0.035000, -0.080999, -11.599993, 88.999961, -102.699966, 0.080999, 0.122999, 0.525999);
	else RemovePlayerAttachedObject(playerid, 8);
	SendClientMessage(playerid, green,"Toggled Buch.");
	return 1;
}

CMD:gpsstatus(playerid)
{
	if(PlayerInfo[playerid][GPS] == false) return ERR(playerid,"You don't have gps scrambler, you can buy one from briefcase");
	if(pGPS[playerid]) SendClientMessage(playerid,Lg,"* GPS Scrambler is ON.");
	else SendClientMessage(playerid,Lg,"* GPS Scrambler is OFF.");
	return 1;
}
CMD:cmstatus(playerid)
{
	if(PlayerInfo[playerid][Camouflage] == false) return ERR(playerid,"You don't have Camouflage, you can buy one from briefcase");
	if(pCamouflage[playerid]) SendClientMessage(playerid,Lg,"* Camouflage is ON.");
	else SendClientMessage(playerid,Lg,"* Camouflage is OFF.");
	return 1;
}
CMD:aamlhelp(playerid)
{
	SendClientMessage(playerid, COLOR_ORANGE, "_________|- Anti Aircraft Missile Launcher -|_________");
	SendClientMessage(playerid, COLOR_ORANGE, "* AMML will take down any enemy airplane in range of 150 meters. (/fire)");
	SendClientMessage(playerid, COLOR_ORANGE, "* To use AMMl you need to have atleast 5000 score.");
	SendClientMessage(playerid, COLOR_ORANGE, "* You can find AMML in zones (SPECIAL CARS).");
	SendClientMessage(playerid, COLOR_ORANGE, "* You get +1 score & 2000$ per kill");
	return 1;
}
CMD:minehelp(playerid)
{
	SendClientMessage(playerid, COLOR_ORANGE, "_________|- Explosive mines -|_________");
	SendClientMessage(playerid,COLOR_ORANGE,"* Engineer with 8000 score can player mines everywhere except bases");
	SendClientMessage(playerid,COLOR_ORANGE,"* You get +2 score when someone step on it and dies");
	SendClientMessage(playerid,COLOR_ORANGE,"* You can also explode your mine by shouting at it ( only your mine not others )");
	return 1;
}
CMD:gpshelp(playerid)
{
	SendClientMessage(playerid, COLOR_ORANGE, "_________|- Gps Scrambler -|_________");
	SendClientMessage(playerid,COLOR_ORANGE,"* You can buy gps scrambler at briefcase");
	SendClientMessage(playerid,COLOR_ORANGE,"* With Gps scrambler you cannot be killed with Anti Aircraft");
	SendClientMessage(playerid,COLOR_ORANGE,"* /gps to toggle it, /gpsstatus to check its status");
	return 1;
}
CMD:cmhelp(playerid)
{
	SendClientMessage(playerid, COLOR_ORANGE, "_________|- Camouflage -|_________");
	SendClientMessage(playerid,COLOR_ORANGE,"* You can buy Camouflage at briefcase");
	SendClientMessage(playerid,COLOR_ORANGE,"* With Camouflage you can be invisible on map");
	SendClientMessage(playerid,COLOR_ORANGE,"* /cm to toggle it, /cmstatus to check its status");
	return 1;
}
CMD:airstrikehelp(playerid)
{
	SendClientMessage(playerid, COLOR_ORANGE, "_________|- Airstrike -|_________");
	SendClientMessage(playerid,COLOR_ORANGE,"* To Call for airstrike you need to capture Space Station Zone");
	SendClientMessage(playerid,COLOR_ORANGE,"* You need to be Lieutenant Rank (4) and you need to have 40000$");
	SendClientMessage(playerid,COLOR_ORANGE,"* You can call airstrike anywhere in the map");
	SendClientMessage(playerid,COLOR_ORANGE,"* Airstrike Kill Any player in the targated position !");
	return 1;
}
CMD:nukehelp(playerid)
{
	SendClientMessage(playerid, COLOR_ORANGE, "_________|- Nuclear bomb -|_________");
	SendClientMessage(playerid,COLOR_ORANGE,"* To use the Nuclear bomb you need to capture Area 51  zone");
	SendClientMessage(playerid,COLOR_ORANGE,"* You need to be Brigadier Rank 7 (2500 score) and you need to have 200000$");
	SendClientMessage(playerid,COLOR_ORANGE,"* Nuclear bomb kill Any player in the targated Base");
	SendClientMessage(playerid,COLOR_ORANGE,"* Nuclear bomb can be used ONLY from area 51 control room ! ( The skull icon)");
	SendClientMessage(playerid,COLOR_ORANGE,"* To find out which best is best for nuke, you can capture Area 52 to get the number of enemies in each base using Locator.");
	return 1;
}
CMD:nuke2help(playerid)
{
	SendClientMessage(playerid, COLOR_ORANGE, "_________|- Space Nuclear bomb -|_________");
	SendClientMessage(playerid,COLOR_ORANGE,"* To use the Space Nuclear bomb you need to capture Space Station");
	SendClientMessage(playerid,COLOR_ORANGE,"* You need to be Brigadier Rank 7 (2500 score) and you need to have 200000$");
	SendClientMessage(playerid,COLOR_ORANGE,"* Nuclear bomb kill Any player in the targated zone");
	SendClientMessage(playerid,COLOR_ORANGE,"* Nuclear bomb can be used ONLY from Space Station control room ! ( The skull icon)");
	return 1;
}
CMD:quests(playerid)
{
	SendClientMessage(playerid, COLOR_ORANGE, "_________|- Daily Quests -|_________");
	SendClientMessage(playerid,COLOR_ORANGE,"* Each completed Quest rewards you with $50k and 100XP.");
	SendClientMessage(playerid,COLOR_ORANGE,"* There's a total of 28 possible Quests.");
	SendClientMessage(playerid,COLOR_ORANGE,"* Quests are daily reset (at midnight server /time)");
	SendClientMessage(playerid,COLOR_ORANGE,"* There are 3 Normal Quests, 1 Clan Quest and 1 VIP Quest.");
	SendClientMessage(playerid,COLOR_ORANGE,"* Quest progress is lost if you leave the server.");
	SendClientMessage(playerid,COLOR_ORANGE,"* Completed quests will be saved.");
	return 1;
}

CMD:myquests(playerid)
{
	new queststr[5][20], dialogstr[250];
	new pp;
	dialogstr = "\n{FFFFFF}Quest 1 Progress:";
	switch(QuestContent[0])
	{
	    case CONTENT_ZCAPTURE:
		{
		    pp = SSLOG[playerid][s_capture];
		    if(pp < 20) format(queststr[0], _, "{FFFF00}%d/20", pp);
		    else queststr[0] = "{0000FF}Completed";
	    }
	    case CONTENT_ZASSIST:
		{
		    pp = ZoneAssists[playerid];
		    if(pp < 15) format(queststr[0], _, "{FFFF00}%d/15", pp);
		    else queststr[0] = "{0000FF}Completed";
	    }
	    case CONTENT_ZPREVENT:
		{
		    pp = CapturePrevents[playerid];
		    if(pp < 10) format(queststr[0], _, "{FFFF00}%d/10", pp);
		    else queststr[0] = "{0000FF}Completed";
	    }
	    case CONTENT_ZSPREE:
		{
		    pp = ZonesSpree[playerid];
		    if(pp < 15) format(queststr[0], _, "{FFFF00}%d/15", pp);
		    else queststr[0] = "{0000FF}Completed";
	    }
	}
	strcat(dialogstr, queststr[0]);
	strcat(dialogstr, "\n{FFFFFF}Quest 2 Progress:");
	switch(QuestContent[1])
	{
	    case CONTENT_HEADSHOT:
		{
		    pp = SSLOG[playerid][s_headshot];
		    if(pp < 45) format(queststr[1], _, "{FFFF00}%d/45", pp);
		    else queststr[1] = "{0000FF}Completed";
	    }
	    case CONTENT_KASSIST:
		{
		    pp = SSLOG[playerid][s_assist];
		    if(pp < 30) format(queststr[1], _, "{FFFF00}%d/30", pp);
		    else queststr[1] = "{0000FF}Completed";
	    }
	    case CONTENT_M4KILLS:
		{
		    pp = SSLOG[playerid][s_m4k];
		    if(pp < 35) format(queststr[1], _, "{FFFF00}%d/35", pp);
		    else queststr[1] = "{0000FF}Completed";
	    }
	    case CONTENT_SPAZKILLS:
		{
		    pp = SSLOG[playerid][s_spazk];
		    if(pp < 40) format(queststr[1], _, "{FFFF00}%d/40", pp);
		    else queststr[1] = "{0000FF}Completed";
	    }
	    case CONTENT_BASEKILL:
		{
		    pp = BaseKills[playerid];
		    if(pp < 23) format(queststr[1], _, "{FFFF00}%d/23", pp);
		    else queststr[1] = "{0000FF}Completed";
	    }
	    case CONTENT_VKILL:
		{
		    pp = DriverPassengerKill[playerid];
		    if(pp < 15) format(queststr[1], _, "{FFFF00}%d/15", pp);
		    else queststr[1] = "{0000FF}Completed";
	    }
	    case CONTENT_HVKILL:
		{
		    pp = HeavyEnemyKill[playerid];
		    if(pp < 10) format(queststr[1], _, "{FFFF00}%d/10", pp);
		    else queststr[1] = "{0000FF}Completed";
	    }
	}
	strcat(dialogstr, queststr[1]);
	strcat(dialogstr, "\n{FFFFFF}Quest 3 Progress:");
	switch(QuestContent[2])
	{
	    case CONTENT_BACKSTAB:
		{
		    pp = Backstabs[playerid];
		    if(pp < 50) format(queststr[2], _, "{FFFF00}%d/50", pp);
		    else queststr[2] = "{0000FF}Completed";
	    }
	    case CONTENT_DETONATE:
		{
		    pp = DetonateKills[playerid];
		    if(pp < 21) format(queststr[2], _, "{FFFF00}%d/21", pp);
		    else queststr[2] = "{0000FF}Completed";
	    }
	    case CONTENT_HEAL:
		{
		    pp = Heals[playerid];
		    if(pp < 16) format(queststr[2], _, "{FFFF00}%d/16", pp);
		    else queststr[2] = "{0000FF}Completed";
	    }
	    case CONTENT_ASSAULT:
		{
		    pp = AssaultKills[playerid];
		    if(pp < 36) format(queststr[2], _, "{FFFF00}%d/36", pp);
		    else queststr[2] = "{0000FF}Completed";
	    }
	    case CONTENT_TOXIC:
		{
		    pp = Intoxications[playerid];
		    if(pp < 19) format(queststr[2], _, "{FFFF00}%d/19", pp);
		    else queststr[2] = "{0000FF}Completed";
	    }
	    case CONTENT_RBOMBS:
		{
		    pp = RustlerBombeds[playerid];
		    if(pp < 23) format(queststr[2], _, "{FFFF00}%d/23", pp);
		    else queststr[2] = "{0000FF}Completed";
	    }
	    case CONTENT_FBANG:
		{
		    pp = Flashes[playerid];
		    if(pp < 25) format(queststr[2], _, "{FFFF00}%d/25", pp);
		    else queststr[2] = "{0000FF}Completed";
	    }
	}
	strcat(dialogstr, queststr[2]);
	strcat(dialogstr, "\n{FFFFFF}Quest 4 Progress:");
	switch(QuestContent[3])
	{
	    case CONTENT_RACS:
		{
		    pp = RACSKills[playerid];
		    if(pp < 12) format(queststr[3], _, "{FFFF00}%d/12", pp);
		    else queststr[3] = "{0000FF}Completed";
	    }
	    case CONTENT_AAML:
		{
		    pp = AAMLKills[playerid];
		    if(pp < 17) format(queststr[3], _, "{FFFF00}%d/17", pp);
		    else queststr[3] = "{0000FF}Completed";
	    }
	    case CONTENT_DBOOST:
		{
		    pp = DBoosts[playerid];
		    if(pp < 50) format(queststr[3], _, "{FFFF00}%d/50", pp);
		    else queststr[3] = "{0000FF}Completed";
	    }
	    case CONTENT_KVIPS:
		{
		    pp = VIPSKilled[playerid];
		    if(pp < 15) format(queststr[3], _, "{FFFF00}%d/15", pp);
		    else queststr[3] = "{0000FF}Completed";
	    }
	    case CONTENT_KVEHICLES:
		{
		    pp = VehiclesDestroyed[playerid];
		    if(pp < 10) format(queststr[3], _, "{FFFF00}%d/10", pp);
		    else queststr[3] = "{0000FF}Completed";
	    }
	}
	strcat(dialogstr, queststr[3]);
	strcat(dialogstr, "\n{FFFFFF}Quest 5 Progress:");
	switch(QuestContent[4])
	{
	    case CONTENT_A51PROTECT:
		{
		    pp = AreaProtects[playerid];
		    if(pp < 10) format(queststr[4], _, "{FFFF00}%d/10", pp);
		    else queststr[4] = "{0000FF}Completed";
	    }
	    case CONTENT_ZCLANASSIST:
		{
		    pp = ZCLANAssist[playerid];
		    if(pp < 10) format(queststr[4], _, "{FFFF00}%d/10", pp);
		    else queststr[4] = "{0000FF}Completed";
	    }
	    case CONTENT_CWWIN:
		{
		    pp = CWWins[playerid];
		    if(pp < 7) format(queststr[4], _, "{FFFF00}%d/7", pp);
		    else queststr[4] = "{0000FF}Completed";
	    }
	    case CONTENT_CWJOIN:
		{
		    pp = CWJoins[playerid];
		    if(pp < 14) format(queststr[4], _, "{FFFF00}%d/14", pp);
		    else queststr[4] = "{0000FF}Completed";
	    }
	    case CONTENT_CHEAL:
		{
		    pp = CHeals[playerid];
		    if(pp < 10) format(queststr[4], _, "{FFFF00}%d/10", pp);
		    else queststr[4] = "{0000FF}Completed";
	    }
	}
	strcat(dialogstr, queststr[4]);
	ShowPlayerDialog(playerid, 5137 , DIALOG_STYLE_MSGBOX, "{00A900}My Daily Quests Advancement",dialogstr,"ok","");
	return 1;
}

CMD:updates(playerid, params[])
{
	new Cat[3500];
	strcat(Cat,"{FF8080}\nAdded: The Clan Tournament System back (Tested - Flawless).");
	strcat(Cat,"{FF8080}\nFixed: /st & /sc problems.");
	strcat(Cat,"{FF8080}\nFixed: DM cmds could be used in class selection.");
	strcat(Cat,"{FF8080}\nChanged: Decreased chainsaw and sawn off damage by 20 per cent.");
	if(PlayerInfo[playerid][Level] > 0)
	{
 		strcat(Cat,"\n\n{0000FF}Admin Notes:");
 		strcat(Cat,"\nAdded: /forcerules cmd for 2+.");
	}
	ShowPlayerDialog(playerid,2333,DIALOG_STYLE_MSGBOX,"Version 7.7.4 Changelog",Cat,"OK","");
	return 1;
}

CMD:pubgers(playerid, params[])
{
	new Cat[2000];
	foreach(new i : PUBGEvent) { format(Cat, _, "%s\n%s (%d)", Cat, PlayerInfo[i][Nick], i); }
	ShowPlayerDialog(playerid, 5137 , DIALOG_STYLE_LIST, "{00A900}Players alive in PUBG", Cat,"ok","");
	return 1;
}

CMD:friends(playerid, params[])
{
	if(FriendID[playerid][0] == -1) return ERR(playerid, "You don't have any friends, use /addfriend [ID] to make new friends.");
	new Cat[2664];
	strcat(Cat, "Name\tStatus\n");
	new count;
	for(new i = 0; i < 50; i++)
	{
	    new fid = FriendID[playerid][i];
	    if(fid == -1) break;
	    new ison;
	    strcat(Cat, FriendLine[playerid][i]);
	    strcat(Cat, "\t");
	    foreach(new j : Player)
	    {
	        if(fid == PlayerInfo[j][AID])
	        {
	   		 	count ++;
	            ison = 1;
                strcat(Cat, "\t{6EF83C}Online{FFFFFF}\n");
	            break;
	        }
	    }
	    if(!ison) strcat(Cat, "\t{F81414}Offline{FFFFFF}\n");
	}
	new str[60];
	format(str, _, "{00A900}My Friends (%d online)", count);
	ShowPlayerDialog(playerid, DIALOG_FRIENDS , DIALOG_STYLE_TABLIST_HEADERS, str, Cat,"Select","OK");
	return 1;
}

CMD:addfriend(playerid, params[])
{
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/addfriend [ ID ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(id == playerid) return ERR(playerid, "You cannot befriend yourself.");
	if(Invited[id] != INVALID_PLAYER_ID || Inviter[id] != INVALID_PLAYER_ID) return ERR(playerid, "This player already has a pending friend invite.");
	if(Invited[playerid] != INVALID_PLAYER_ID || Inviter[playerid] != INVALID_PLAYER_ID) return ERR(playerid, "You already have a pending friend invite.");
	new friends1, friends2;
	for(new i=0; i < 50; i++)
	{
	    new kk = FriendID[playerid][i], kk2 = FriendID[id][i];
	    if(kk != -1) friends1 ++;
	    if(kk2 != -1) friends2 ++;
	    if(FriendID[playerid][i] == PlayerInfo[id][AID]) return ERR(playerid, "This player is already your friend.");
		if(i == 49) if(FriendID[playerid][i] != -1) return ERR(playerid, "You have used all your friend slots, cannot add more friends.");
		if(i == 49) if(FriendID[id][i] != -1) return ERR(playerid, "Target has used all their friend slots, cannot send invite.");
	}
	new level1 = PlayerInfo[playerid][dRank], level2 = PlayerInfo[id][dRank];
	switch(friends1)
	{
	    case 20:
	    {
	        if(level1 < 1) return ERR(playerid, "You have used all your friend slots, buy VIP level for more slots.");
	    }
	    case 30:
	    {
	        if(level1 < 2) return ERR(playerid, "You have used all your friend slots, upgrade VIP level for more slots.");
	    }
	    case 40:
	    {
	        if(level1 < 3) return ERR(playerid, "You have used all your friend slots, upgrade VIP level for more slots.");
	    }
	}
	switch(friends2)
	{
	    case 20:
	    {
	        if(level2 < 1) return ERR(playerid, "Target has used all their friend slots, cannot send invite.");
	    }
	    case 30:
	    {
	        if(level2 < 2) return ERR(playerid, "Target has used all their friend slots, cannot send invite.");
	    }
	    case 40:
	    {
	        if(level2 < 3) return ERR(playerid, "Target has used all their friend slots, cannot send invite.");
	    }
	}
	FriendTimer[playerid] = SetTimerEx("FriendTime",8000,false,"dd",playerid,id);
	SendClientMessage(playerid, -1, "You have sent %s a friend request", PlayerInfo[id][Nick]);
	Inviter[id] = playerid;
	Invited[playerid] = id;
	SendClientMessage(id, -1, "You have received a friend request from %s, type /yes to accept.", PlayerInfo[playerid][Nick]);
	return 1;
}
forward FriendTime(playerid,wish);
public FriendTime(playerid,wish)
{
	Inviter[wish] = INVALID_PLAYER_ID;
	Invited[playerid] = INVALID_PLAYER_ID;
	SendClientMessage(playerid,-1,"Friend request canceled");
	SendClientMessage(wish,-1,"Friend request canceled");
	return 1;
}

CMD:anims(playerid, params[])
{
	SendClientMessage(playerid,-1,"Anims");
	SendClientMessage(playerid,-1,"/Handsup | /Drunk | /Bomb | /Getarrested | /Laugh | /Robman");
	SendClientMessage(playerid,-1,"/Crossarms | /Lay | /Hide | /Vomit | /Eat | /Wave | /Taichi | /Piss");
	SendClientMessage(playerid,-1,"/Deal | /Crack | /Smokem | /Smokef | /Sit | /Chat | /Dance | /Fu");
	return true;
}

CMD:handsup(playerid, params[])
{
	if(inevent[playerid] > 0) return ERR(playerid, "Cannot use this cmd in event");
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:cellin(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	return 1;
}

CMD:cellout(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;
}

CMD:drunk(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;AnimLoopPlayer(playerid,"PED","WALK_DRUNK", 4.0, true, true, true, true, 0);
	return 1;
}

CMD:bomb(playerid)
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;ClearAnimations(playerid),ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, false, false, false, true, 1);
	return 1;
}

CMD:getarrested(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;AnimLoopPlayer(playerid,"ped", "ARRESTgun", 4.0, false, true, true, true, -1); // Gun Arrest
	return 1;
}

CMD:laugh(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, false, false, false, false, 0); // Laugh
	return 1;
}

CMD:lookout(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, false, false, false, false, 0); // Rob Lookout
	return 1;
}

CMD:piss(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	return 1;
}

CMD:robman(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid, "SHOP", "ROB_Loop_Threat", 4.0, true, false, false, false, 0); // Rob
	return 1;
}

CMD:crossarms(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, false, true, true, true, -1); // Arms crossed
	return 1;
}

CMD:lay(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid,"BEACH", "bather", 4.0, true, false, false, false, 0); // Lay down
	return 1;
}

CMD:hide(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid, "ped", "cower", 3.0, true, false, false, false, 0); // Taking Cover
	return 1;
}

CMD:vomit(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, false, false, false, false, 0); // Vomit BAH!
	return 1;
}

CMD:eat(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, false, false, false, false, 0); // Eat Burger
	return 1;
}

CMD:wave(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid, "ON_LOOKERS", "wave_loop", 4.0, true, false, false, false, 0); // Wave
	return 1;
}

CMD:slapass(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, false, false, false, false, 0); // Ass Slapping
	return 1;
}

CMD:deal(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, false, false, false, false, 0); // Deal Drugs
	return 1;
}

CMD:crack(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid, "CRACK", "crckdeth2", 4.0, true, false, false, false, 0); // Dieing of Crack
	return 1;
}

CMD:smokem(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid,"SMOKING", "M_smklean_loop", 4.0, true, false, false, false, 0); // Smoke
	return 1;
}

CMD:smokef(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid, "SMOKING", "F_smklean_loop", 4.0, true, false, false, false, 0); // Female Smoking
	return 1;
}

CMD:sit(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid,"BEACH", "ParkSit_M_loop", 4.0, true, false, false, false, 0); // Sit
	return 1;
}

CMD:chat(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0, false, false, false, false, 0);
	return 1;
}

CMD:fu(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	ApplyAnimation(playerid,"PED","fucku",4.0, false, false, false, false, 0);
	return 1;
}

CMD:taichi(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid,"PARK","Tai_Chi_Loop",4.0, true, false, false, false, 0);
	return 1;
}

CMD:chairsit(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	AnimLoopPlayer(playerid,"BAR","dnk_stndF_loop",4.0, true, false, false, false, 0);
	return 1;
}

CMD:dance(playerid, params[])
{
	new animlib[32];
	new animname[32];
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	if(!strcmp(animname,"gas_cwr")) return 1;
	new dancestyle;
	if(!sscanf(params, "d", dancestyle))
	{

		if(dancestyle == 1) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		else if(dancestyle == 2) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		else if(dancestyle == 3) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		else if(dancestyle == 4) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		else GameTextForPlayer(playerid,"~r~Invalid Dance-id~n~~w~USAGE: ~y~/Dance (1-4)", 3500, 3);
		return true;
	}
	else return GameTextForPlayer(playerid,"~w~USAGE: ~y~/Dance (1-4)", 3500, 3);
}

AnimLoopPlayer(playerid, const animlib[], const animname[], Float:Speed, bool:looping, bool:lockx, bool:locky, bool:lockz, lp)
{
	IsPlayerUsingAnims[playerid] = true;
	ApplyAnimation(playerid,
	animlib,
	animname,
	Speed,
	looping,
	lockx,
	locky,
	lockz,
	lp);
	//GameTextForPlayer(playerid, "~w~PRESS ~r~ANY KEY ~w~TO STOP ANIM", 3000, 3);
	return true;
}

StopAnimLoopPlayer(playerid)
{
	IsPlayerUsingAnims[playerid] = false;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, false, false, false, false, 0);
	return true;
}

CMD:w(playerid,params[]) return cmd_s(playerid,params);
CMD:say(playerid,params[]) return cmd_s(playerid,params);
CMD:s(playerid,params[])
{
	if(IsSpectator[playerid]) return ERR(playerid, "You should not disturb Tournaments players");
	if(isnull(params)) return SendClientMessage(playerid, -1, "USAGE: /s [text] to talk to nearest person");
	new Name[24]; strcat(Name, PlayerInfo[playerid][Nick]);
	new string[128], Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	BadWord(params[0]);
	format(string, _, ""COL_WHITE"** %s says: (( %s ))", Name, params[0]);
	printf("[SAY] %s: %s", Name, params[0]);
	foreach(new i : Player) if(IsPlayerInRangeOfPoint(i,10.0, x, y, z) ) SendClientMessage(i, RED, string);
	return 1;
}


//===================== [ ZCMD Commands ]=======================================
CMD:pm(playerid, params[])
{
	if(PlayerInfo[playerid][Muted]) return SendClientMessage(playerid,Dred,"* You are muted");
	new str[128], id, adminstr[128];
	if(sscanf(params,"ds[128]", id, str)) return SendClientMessage(playerid, red,"USAGE: /pm [id] [message]");
	new remain = GetTickCount() - PlayerInfo[playerid][PMS];
	if(remain < 2000)
	{

		SendClientMessage(playerid,Dred,"* Please wait (%d) Seconds before using this command again", (2000-remain)/1000);
		return 1;
	}
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, red,"Player is not connected");
	if(id == playerid) return SendClientMessage(playerid, red,"You cannot PM yourself");
	if(Bit_Get(ToggleState[id], TOGGLE_DND)) return SendClientMessage(playerid, red,"That player is in do not disturb mode!");
	if(IsAdvertisement(params))
	{
		SendClientMessageToAll(COLOR_YELLOW, "%s has been kicked for advertising a server in pm.", PlayerInfo[playerid][Nick]);
		Kick(playerid);
		return 0;
	}
	if(IsBlocked(id, playerid)) return ERR(playerid, "Cannot send pm, this user used /block on you.");
	pms[id][0] = pms[id][1];
	pms[id][1] = pms[id][2];
	pms[id][2] = pms[id][3];
	pms[id][3] = pms[id][4];
	new nam[2][24]; strcat(nam[0], PlayerInfo[playerid][Nick]); strcat(nam[1], PlayerInfo[id][Nick]);
	format(pms[id][4], _, "%s:%s", nam[0], str);
	BadWord(str);
	SendClientMessage(playerid, yellow, "PM to [%d]%s: %s", id, nam[1], str);
	SendClientMessage(id, yellow, "PM from [%d]%s: %s", playerid, nam[0], str);
	SendClientMessage(id, -1, "Use "cblue"/rpm [message] "cwhite"to reply to this PM");
	format(adminstr, _, "PM from %s[%d] to %s[%d]: %s", nam[0], playerid, nam[1], id, str);
	if(ServerInfo[ReadPMs]) MessageTo4(grey, adminstr);
	LastPm[id] = playerid;
	PlayerInfo[playerid][PMS] = GetTickCount();
	return 1;
}
CMD:block(playerid, params[])
{
	new id;
	if(sscanf(params,"d", id)) return SendClientMessage(playerid, red,"USAGE: /block [id]");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, red,"Player is not connected");
	if(id == playerid) return SendClientMessage(playerid, red,"You cannot block yourself");
	if(IsBlocked(playerid, id))
	{
		SendClientMessage(playerid, COLOR_YELLOW, "User unblocked");
		Iter_Remove(BLOCKED[playerid], id);
	}
	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, "User blocked (Use /block to unblock them).");
		Iter_Add(BLOCKED[playerid], id);
	}
	return 1;
}
CMD:pms(playerid, params[])
{
	new str[730];
	strcat(str, pms[playerid][0]);
	strcat(str, "\n");
	strcat(str, pms[playerid][1]);
	strcat(str, "\n");
	strcat(str, pms[playerid][2]);
	strcat(str, "\n");
	strcat(str, pms[playerid][3]);
	strcat(str, "\n");
	strcat(str, pms[playerid][4]);
	ShowPlayerDialog(playerid,2333, DIALOG_STYLE_MSGBOX, "Your recent received {F3FF02}PMs", str, "ok","");
	return 1;
}

CMD:undo(playerid)
{
	if(PlayerInfo[playerid][Level] > 1 || IsPlayerAdmin(playerid))
	{
		new str[128];
		strcat(str, undo[playerid][0]);
		strcat(str, "\n");
		strcat(str, undo[playerid][1]);
		strcat(str, "\n");
		strcat(str, undo[playerid][2]);
		strcat(str, "\n");
		strcat(str, undo[playerid][3]);
		strcat(str, "\n");
		strcat(str, undo[playerid][4]);
		ShowPlayerDialog(playerid,BANUNDO_DIALOG, DIALOG_STYLE_LIST, "Recent Banned {F3FF02}Players", str, "Unban-mistake","close");
	} else ERR(playerid, "Only admins can use this command.");
	return 1;
}
CMD:rpm(playerid, params[])
{
	if(PlayerInfo[playerid][Muted] == true) return SendClientMessage(playerid,Dred,"* You are muted");
	new str[128], adminstr[128];
	if(sscanf(params,"s[128]", str)) return SendClientMessage(playerid, red,"USAGE: /rpm [message]");
	new id = LastPm[playerid];
	if(id == -1) return ERR(playerid, "No one PMed you.");
	if(IsBlocked(id, playerid)) return ERR(playerid, "Cannot send pm, this user used /block on you.");
	if(IsPlayerConnected(id))
	{

		if(IsPlayerAFK(id)) return SendClientMessage(playerid, red,"That player is currently AFK");
		if(!Bit_Get(ToggleState[id], TOGGLE_DND))
		{

			if(IsAdvertisement(params))
			{
				SendClientMessageToAll(COLOR_YELLOW, "%s has been kicked for advertising a server.", PlayerInfo[playerid][Nick]);
				Kick(playerid);
				return 0;
			}
			pms[id][0] = pms[id][1];
			pms[id][1] = pms[id][2];
			pms[id][2] = pms[id][3];
			pms[id][3] = pms[id][4];
			new nam[2][24]; strcat(nam[0], PlayerInfo[playerid][Nick]); strcat(nam[1], PlayerInfo[id][Nick]);
			format(pms[id][4], _, "%s:%s", nam[0], str);
			BadWord(str);
			SendClientMessage(playerid, yellow, "PM to [%d]%s: %s", id, nam[1], str);
			SendClientMessage(id, yellow, "PM from [%d]%s: %s", playerid, nam[0], str);
			SendClientMessage(id, -1, "Use "cblue"/rpm [message] "cwhite"to reply to this PM");
			format(adminstr, _, "PM from %s[%d] to %s[%d]: %s", nam[0], playerid, nam[1], id, str);
			if(ServerInfo[ReadPMs]) MessageTo4(grey, adminstr);
			LastPm[LastPm[playerid]] = playerid;
		}
		else return SendClientMessage(playerid, red,"That player is in do not disturb mode!");
	}
	else return SendClientMessage(playerid, red,"Player is not connected");
	return 1;
}

CMD:dnd(playerid)
{
	if(!Bit_Get(ToggleState[playerid], TOGGLE_DND)) SendClientMessage(playerid, green,"Do not disturb mode enabled!");
	else SendClientMessage(playerid, red,"Do not disturb mode disabled!");
	Bit_Set(ToggleState[playerid], TOGGLE_DND, !Bit_Get(ToggleState[playerid], TOGGLE_DND));
	return 1;
}
CMD:bd(playerid)
{
	if(!BD[playerid]) SendClientMessage(playerid, green,"Do not duel me mode enabled!");
	else SendClientMessage(playerid, red,"Do duel me mode disabled!");
	BD[playerid] = !BD[playerid];
	return 1;
}
CMD:bonus(playerid)
{
	SendClientMessage(playerid,Lg,"---- Zones & Player bonus ----");
	if(ZoneD != -1) SendClientMessage(playerid,Lg,"Zone: %s | Rewards %d$ & %d score",ZName(ZoneD),ZoneC,ZoneS);
	else SendClientMessage(playerid,Lg,"No bonus zone has been selected yet.");
	if(BonD != INVALID_PLAYER_ID) SendClientMessage(playerid,Lg,"[BOUNTY] %s | Rewards %d$ & %d score",PlayerInfo[BonD][Nick],BonC,BonS);
	else SendClientMessage(playerid,Lg,"No Bounty player has been selected yet");
	return 1;
}

CMD:m(playerid,params[]) {
	if(PlayerInfo[playerid][Helper] == 1 || PlayerInfo[playerid][Level] > 0) {
		if(isnull(params)) return USG(playerid," /m [text] To Talk in Moderator Chat");
		new string[144];
		if(PlayerInfo[playerid][Level] > 0)
		format(string, _, "[Mod.Chat]: Admin [%d]%s: %s", PlayerInfo[playerid][Level], PlayerInfo[playerid][Nick], params[0]);
		else format(string, _, "[Mod.Chat]: %s: %s", PlayerInfo[playerid][Nick], params[0]);
		return MessageToTwice(0xFF80C0FF,string);
	} else return ERR(playerid," You need to be Help Moderator to use this command");
}
CMD:helpme(playerid, params[])
{
	if(PlayerInfo[playerid][Muted] == true) {
		SendClientMessage(playerid,Dred,"* You are muted");
		return 1;
	}
	new str[144];
	if(sscanf(params,"s[144]", str))
	{
		SendClientMessage(playerid, red,"CORRECT USAGE: /helpme [text]");
		return 1;
	}
	format(str, _, "{8000FF}[HELP MSG From %s(%d)]:{00FFF0} %s", PlayerInfo[playerid][Nick], playerid, str);
	MessageToTwice(red, str);
	SendClientMessage(playerid, yellow,"Your Request has been sent to online Administrators.");
	return 1;
}

CMD:reply(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 1) return ERRR(playerid,1);
	new id,rep[144];
	if(sscanf(params,"ds[144]",id,rep)) return USG(playerid,"/Reply [ID/Name] [MSG]");
	SendClientMessage(id,orange,"{8000FF}|REPLY FROM ADMIN|:{00FFF0} %s",rep);
	GameTextForPlayer(id,"~g~reply from admin",6000,5);
	CMDMessageToAdmins(playerid,"REPLY");
	Play(id);
	new nam[24]; strcat(nam, PlayerInfo[id][Nick]);
	SendClientMessage(playerid,orange,"* Message Sent to %s(%d)",nam,id);

    for (new a = 0; a < MAX_ASAY-1; a++)
    {
		strcopy(REPLY_Info[a][r_admin], REPLY_Info[a + 1][r_admin]);
		strcopy(REPLY_Info[a][r_receiver], REPLY_Info[a + 1][r_receiver]);
		strcopy(REPLY_Info[a][r_message], REPLY_Info[a + 1][r_message]);
    }
    if(PlayerInfo[playerid][is_undercover])
    {
        strcopy(REPLY_Info[29][r_admin], PlayerInfo[playerid][undercover_realname]);
    }
    else
    {
    	strcopy(REPLY_Info[29][r_admin], PlayerInfo[playerid][Nick]);
	}
    strcopy(REPLY_Info[29][r_receiver], nam);
    strcopy(REPLY_Info[29][r_message], rep);
	return 1;
}

CMD:replies(playerid)
{
    if(PlayerInfo[playerid][Level] < 5) return ERRR(playerid, 5);

    new string[6000], count;

    for (new a = 0; a < MAX_ASAY; a++)
    {
        if(!isnull(REPLY_Info[a][r_admin]))
        {
            count++;
        	format(string, _, "%s%%{FFFFFF}%s to %s: {00FF00}%s\n", string, REPLY_Info[a][r_admin], REPLY_Info[a][r_receiver], REPLY_Info[a][r_message]);
		}
	}
	if(!count) ShowPlayerDialog(playerid, 800, DIALOG_STYLE_MSGBOX, "Replies sent by admins", "{FFFFFF}No replies sent.", "Close", "");
	else ShowPlayerDialog(playerid, 800, DIALOG_STYLE_MSGBOX, "Replies sent by admins", string, "Close", "");
	return 1;
}

CMD:gg(playerid,params[]) return cmd_givegun(playerid,params);
CMD:givegun(playerid,params[])
{
	new id,ammo;
	if(sscanf(params,"dd",id,ammo)) return SendClientMessage(playerid,red,"USAGE: /givegun (ID) (Ammo)");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid,red,"ERROR: Player not connected");
	if(Tryg3D::ItemGetDistance(playerid, item_player, id, item_player) > 5.0) return SendClientMessage(playerid,red,"* Player not in range");
	if(GetPlayerTeam(playerid) != GetPlayerTeam(id)) return SendClientMessage(playerid,red,"ERROR: You can't give weapons to the enemy !");
	if(ammo < 1 || ammo > 500) return SendClientMessage(playerid,red,"ERROR: Invalid ammo");
	new WEAPON:wep = GetPlayerWeapon(playerid);
	new am = GetPlayerAmmo(playerid);
	if(wep == WEAPON_FIST) return SendClientMessage(playerid,red,"ERROR: You are not holding a weapon");
	if(ammo > am) return SendClientMessage(playerid,red,"ERROR: You don't have enough ammo");
	if(wep == WEAPON_ROCKETLAUNCHER) return SendClientMessage(playerid,red,"ERROR: You cannot share your RPGs.");
	new w[50];
	GetWeaponName(wep,w,sizeof(w));
	GivePlayerWeapon(id,wep,ammo);
	GivePlayerWeapon(playerid,wep,-ammo);
	if(IsPlayerInAnyVehicle(id)) SetPlayerArmedWeapon(id, WEAPON_FIST);
	SendClientMessage(playerid,green,"You gave %s with %d ammo to %s(%d)",w,ammo,PlayerInfo[id][Nick],id);
	SendClientMessage(id,green,"You have recieved %s and %d ammo from %s(%d)",w,ammo,PlayerInfo[playerid][Nick],playerid);
	return 1;
}

CMD:eject(playerid, params[])
{
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, red, "You have to be the driver to eject passengers.");
	new ejected;
	if (sscanf(params, "d", ejected)) return SendClientMessage(playerid, 0xFF0000AA, "Usage: /eject [playerid]");
	if (!IsPlayerConnected(ejected)) return SendClientMessage(playerid, 0xFF0000AA, "Player not found");
	if(ejected == playerid) return SendClientMessage(playerid, red, "You cannot eject yourself");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, red, "You have to be in a vehicle.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInVehicle(ejected, vehicleid)) return SendClientMessage(playerid, red, "Player is not in your vehicle.");
	RemovePlayerFromVehicle(ejected);
	SendClientMessage(ejected, red, "%s has ejected you from their vehicle", PlayerInfo[playerid][Nick]);
	SendClientMessage(playerid, green, "You have ejected %s from your vehicle", PlayerInfo[ejected][Nick]);
	return 1;
}

CMD:gm(playerid, params[])
{
	new giveplayerid, amount;
	if (sscanf(params, "dd", giveplayerid, amount)) return SendClientMessage(playerid, 0xFF0000AA, "Usage: /gm [playerid/partname] [amount]");
	else if (giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xFF0000AA, "Player not found");
	new Float:gX, Float:gY, Float:gZ;
	GetPlayerPos(playerid, gX, gY, gZ);
	if( !IsPlayerInRangeOfPoint(giveplayerid, 5.0, gX, gY, gZ) ) return SendClientMessage(playerid, red, "Player has to be near you!");
	if(amount > GetCash(playerid)) return SendClientMessage(playerid, red, "You don't have this amount");
	if(amount < 0) return ERR(playerid,"Invalid amount");
	if(giveplayerid == playerid) return SendClientMessage(playerid, red, "Invalid ID");
	GiveCash(giveplayerid, amount);
	PlayerInfo[playerid][Cash] -=amount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid,PlayerInfo[playerid][Cash]);
	SendClientMessage(giveplayerid, green, "%s has sent you '$%d'", PlayerInfo[playerid][Nick], amount);
	SendClientMessage(playerid, green, "You have sent %s $%d", PlayerInfo[giveplayerid][Nick], amount);
	return 1;
}
CMD:givemoney(playerid,params[]) {
	return cmd_gm(playerid, params);
}

CMD:spree(playerid,params[]) {
	new player1;
	if(isnull(params)) player1 = playerid;
	else player1 = strval(params);
	if(IsPlayerConnected(player1)) {
		SendClientMessage(playerid, green, "Killing Spree: %d\nHeadshot Spree: %d\nCapture Spree: %d\nCapture Assist Spree: %d", Streak[player1], SSLOG[player1][s_headshot], ZonesSpree[player1], ZonesASpree[player1]);
	} else return SendClientMessage(playerid, red, "Player Not Connected!");
	return 1;
}
CMD:giveweapon(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new id,gun[30],ammo,WEAPON:guns,WEAPON:ix,wep[50];
	if(sscanf(params,"ds[30]d",id,gun,ammo)) return USG(playerid,"/Giveweapon [ID/Name] [Weapon Name / ID] [Ammo]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player Not Connected");
	if(IsNumeric(gun))
	{

		if(IsValidWeapon(strval(gun)) == 0) return ERR(playerid,"Invalid Weapon ID");
		if(strval(gun) > 35) return ERR(playerid,"Invalid Weapon ID");
		guns = WEAPON:strval(gun);
	}else{
		ix = GetWeaponIDFromName(gun);
		if(ix == UNKNOWN_WEAPON || ix > WEAPON_ROCKETLAUNCHER) return ERR(playerid,"Invalid Weapon ID / Name - Un Authorized Weapon");
		guns = ix;
	}
	CMDMessageToAdmins(playerid,"GIVEWEAPON");
	GetWeaponName(guns,wep,sizeof(wep));
	SendClientMessage(playerid,Lg,"You have given %s(%d) a %s with %d ammo",PlayerInfo[id][Nick],id,wep,ammo);
	SendClientMessage(id,Lg,"You have Recieved %s with %d ammo from Administrator \"%s\"",wep,ammo,PlayerInfo[playerid][Nick]);
	GivePlayerWeapon(id,guns,ammo);
	if(IsPlayerInAnyVehicle(id)) SetPlayerArmedWeapon(id, WEAPON_FIST);
	return 1;

}
CMD:sethp(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new id,HP;
	if(sscanf(params,"dd",id,HP)) return USG(playerid,"/Sethp [ID/Name] [HPP]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player Not Connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher admins");
	if(HP > 100) return ERR(playerid,"Invalid Health");
	SetPlayerHealth(id,HP);
	CMDMessageToAdmins(playerid,"SETHP");
	SendClientMessage(playerid,Lb,"* You have set %s(%d) Health to %d",PlayerInfo[id][Nick],id,HP);
	return 1;
}
CMD:pl(playerid,params[])
{
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/pl [ID]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player Not Connected");
	SendClientMessage(playerid, -1, "Packets lost of player ID %d: %.2f percent.", id, NetStats_PacketLossPercent(id));
	return 1;
}
CMD:setarmour(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new id,HP;
	if(sscanf(params,"dd",id,HP)) return USG(playerid,"/SetArmour [ID/Name] [Armour]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player Not Connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher admins");
	if(HP > 100) return ERR(playerid,"Invalid Armour");
	SetPlayerArmour(id, HP);
	CMDMessageToAdmins(playerid,"SETARMOUR");
	SendClientMessage(playerid,Lb,"* You have set %s(%d) armour to %d",PlayerInfo[id][Nick],id,HP);
	return 1;
}

CMD:setcash(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 4)
	{

		new id,cas;
		if(sscanf(params,"dd",id,cas)) return USG(playerid,"/setcash [ID / Name] [Cash]");
		if(IsPlayerConnected(id))
		{

			CMDMessageToAdmins(playerid,"SETCASH");
			SendClientMessage(playerid,blue, "You have set \"%s's\" cash to '$%d", PlayerInfo[id][Nick], cas);
			SendClientMessage(id,blue,"Administrator \"%s\" has set your cash to '$%d'",  PlayerInfo[playerid][Nick], cas);
			ResetPlayerMoney(id);
			PlayerInfo[id][Cash] = 0;
			return GiveCash(id, cas);
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,5);
}

CMD:setscore(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
		new id,cas;
		if(sscanf(params,"dd",id,cas)) return USG(playerid,"/setscore [ID / Name] [score]");
		if(IsPlayerConnected(id))
		{

			CMDMessageToAdmins(playerid,"SETSCORE");
			SendClientMessage(playerid,blue, "You have set \"%s's\" score to '%d' ", PlayerInfo[id][Nick], cas);
			SendClientMessage(id,blue,"Administrator \"%s\" has set your score to '%d'", PlayerInfo[playerid][Nick], cas);
			SetPlayerScore(id, cas);
		} else return ERR(playerid," Player is not connected");
	} else return ERR(playerid," You are not a high enough level to use this command");
	return 1;
}
CMD:setxp(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
		new id,cas;
		if(sscanf(params,"dd",id,cas)) return USG(playerid,"/setxp [ID / Name] [score]");
		if(IsPlayerConnected(id))
		{

			CMDMessageToAdmins(playerid,"SETXP");
			SendClientMessage(playerid,blue, "You have set \"%s's\" XP to '%d' ", PlayerInfo[id][Nick], cas);
			SendClientMessage(id,blue,"Administrator \"%s\" has set your XP to '%d'", PlayerInfo[playerid][Nick], cas);
			PlayerInfo[id][XP] = cas;
		} else return ERR(playerid," Player is not connected");
	} else return ERR(playerid," You are not a high enough level to use this command");
	return 1;
}

CMD:setskin(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new id,skin;
	if(sscanf(params,"dd",id,skin)) return USG(playerid,"/Setskin [ID / Name] [ Skin ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on this admin");
	if(!IsValidSkin(skin)) return ERR(playerid," Invaild Skin ID");
	CMDMessageToAdmins(playerid,"SETSKIN");
	SetPlayerSkin(id,skin);
	SendClientMessage(playerid,blue, "You have set \"%s's\" skin to '%d",PlayerInfo[id][Nick],skin);
	SendClientMessage(id,Lg,"Administrator \"%s\" has set your skin to '%d'",PlayerInfo[playerid][Nick],skin);
	Play(id);
	return 1;
}


CMD:setmod(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 4 || IsPlayerAdmin(playerid))
	{

		new player1;
		if(sscanf(params,"d",player1)) return USG(playerid,"/Setmod [ ID / Name]");
		if(IsPlayerConnected(player1))
		{
			new year,month,day;   getdate(year, month, day); new hour,minute,second; gettime(hour,minute,second);
			PlayerInfo[player1][Helper] = 1;
			SendClientMessage(player1, yellow, "Adminsitator %s Has Set You As Help moderator", PlayerInfo[playerid][Nick]);
			new Query[100];
			mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `helper`=1 WHERE `id` =%d LIMIT 1",PlayerInfo[player1][AID]);
			mysql_tquery(mysql, Query);

			SendClientMessage(playerid, yellow, "You Have Set %s As Help moderator", PlayerInfo[player1][Nick]);
			CMDMessageToAdmins(playerid,"SETMOD");
			if(PlayerInfo[player1][Helper] == 0)
			{

				GameTextForPlayer(player1,"~y~Promoted To Help moderator", 2000, 3);
				PlayerInfo[player1][Helper] = 1;
			}
			else if(PlayerInfo[player1][Level] == 0) GameTextForPlayer(player1,"~g~Promoted", 2000, 3);
		 	PlayerPlaySound(player1,1057,0.0,0.0,0.0);
		} else  ERR(playerid, "Player not connected.");
	} else  ERRR(playerid,5);
	return 1;
}
CMD:setmap(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 4 || IsPlayerAdmin(playerid))
	{
		new player1;
		if(sscanf(params,"d",player1)) return USG(playerid,"/Setmap [ ID / Name]");
		//
		if(IsPlayerConnected(player1))
		{
			new year,month,day;   getdate(year, month, day); new hour,minute,second; gettime(hour,minute,second);
			PlayerInfo[player1][Helper] = 2;
			SendClientMessage(player1, yellow, "Adminsitator %s Has Set You As a Mapper", PlayerInfo[playerid][Nick]);
			new Query[100];
			mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `helper`=2 WHERE `id` =%d LIMIT 1",PlayerInfo[player1][AID]);
			mysql_tquery(mysql, Query);

			SendClientMessage(playerid, yellow, "You Have Set %s As a Mapper", PlayerInfo[player1][Nick]);
			CMDMessageToAdmins(playerid,"SETMAPPER");
			if(PlayerInfo[player1][Helper] == 0)
			{

				GameTextForPlayer(player1,"~y~Promoted To Mapper", 2000, 3);
				PlayerInfo[player1][Helper] = 2;
			}
			else if(PlayerInfo[player1][Level] == 0) GameTextForPlayer(player1,"~g~Promoted", 2000, 3);
			return PlayerPlaySound(player1,1057,0.0,0.0,0.0);
		} else return ERRR(playerid,5);
	}
	return 1;
}

CMD:setstreamer(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 4 || IsPlayerAdmin(playerid))
	{
		new player1;
		if(sscanf(params,"d",player1)) return USG(playerid,"/setstreamer [ ID ]");
		//
		if(IsPlayerConnected(player1))
		{
			new year,month,day;   getdate(year, month, day); new hour,minute,second; gettime(hour,minute,second);
			PlayerInfo[player1][Streamer] = 1;
			SendClientMessage(player1, yellow, "Adminsitator %s Has Set You As a Streamer", PlayerInfo[playerid][Nick]);
			new Query[100];
			mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `stm`=1 WHERE `id` =%d LIMIT 1",PlayerInfo[player1][AID]);
			mysql_tquery(mysql, Query);

			SendClientMessage(playerid, yellow, "You Have Set %s As a Streamer", PlayerInfo[player1][Nick]);
			CMDMessageToAdmins(playerid,"SETSTREAMER");
			GameTextForPlayer(player1,"~g~Promoted to Streamer", 2000, 3);
			return PlayerPlaySound(player1,1057,0.0,0.0,0.0);
		} else return ERRR(playerid,5);
	}
	return 1;
}

CMD:firestreamer(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 4 || IsPlayerAdmin(playerid))
	{
		new player1;
		if(sscanf(params,"d",player1)) return USG(playerid,"/firestreamer [ ID ]");
		//
		if(IsPlayerConnected(player1))
		{
			new year,month,day;   getdate(year, month, day); new hour,minute,second; gettime(hour,minute,second);
			PlayerInfo[player1][Streamer] = 0;
			SendClientMessage(player1, yellow, "Adminsitator %s has removed your Streamer position", PlayerInfo[playerid][Nick]);
			new Query[100];
			mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `stm`=0 WHERE `id` =%d LIMIT 1",PlayerInfo[player1][AID]);
			mysql_tquery(mysql, Query);

			SendClientMessage(playerid, yellow, "You Have removed %s Streamer position.", PlayerInfo[player1][Nick]);
			CMDMessageToAdmins(playerid,"UNSETSTREAMER");
		 	GameTextForPlayer(player1,"~g~Demoted from Streamer position", 2000, 3);
			return PlayerPlaySound(player1,1057,0.0,0.0,0.0);
		} else return ERRR(playerid,5);
	}
	return 1;
}

CMD:firemod(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 4 || IsPlayerAdmin(playerid))
	{

		new player1;
		if(sscanf(params,"d",player1)) return USG(playerid,"/Firemod [ ID / Name ]");
		if(IsPlayerConnected(player1))
		{
			new year,month,day;   getdate(year, month, day); new hour,minute,second; gettime(hour,minute,second);
			if(PlayerInfo[player1][Helper] == 0) return SendClientMessage(playerid,red,"Player is Not Help moderator");
			PlayerInfo[player1][Helper] = 0;
			SendClientMessage(player1, blue, "Adminsitator %s has fired You from your Help moderator stats", PlayerInfo[playerid][Nick]);
			SendClientMessage(playerid, blue, "You Have Fired %s from Help moderator stats", PlayerInfo[player1][Nick]);
			CMDMessageToAdmins(playerid,"FIREMOD");
			new Query[100];
			mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `helper`=0 WHERE `id` =%d LIMIT 1",PlayerInfo[player1][AID]);
			mysql_tquery(mysql, Query);
			if(PlayerInfo[playerid][Helper] == 1)
			{

				GameTextForPlayer(player1,"~r~Fired from Help moderator position", 2000, 3);
				PlayerInfo[playerid][Helper] = 0;
			}
			return PlayerPlaySound(player1,1057,0.0,0.0,0.0);
		} else return ERR(playerid," You are not a high enough level to use this command");
	}
	return 1;
}

CMD:setweather(playerid,params[]) {
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new id,wet;
	if(sscanf(params,"dd",id,wet)) return USG(playerid,"/Setweather [ID / Name] [ Weather ID]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player Not Connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on this admin");
	SetPlayerWeather(id,wet);
	CMDMessageToAdmins(playerid,"SETWEATHER");
	SendClientMessage(playerid,Lb,"You have changed %s(%d) Weather to %d",PlayerInfo[id][Nick],id,wet);
	SendClientMessage(id,Lg,"* Administrator \"%s\" Has changed your weather to %d",PlayerInfo[playerid][Nick],wet);
	return 1;

}

CMD:changemotd(playerid,params[])
{
	if(!IsPlayerAdmin(playerid)) return 0;
	if(isnull(params)) return SendClientMessage(playerid,red,"USAGE: /changemotd (Text)");
	strcopy(ServerInfo[MOTD], params);
	SendClientMessage(playerid,blue,"Server Motd changed ");
	SendClientMessage(playerid,blue,"New MOTD: %s",params);
	return 1;
}
CMD:setkills(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4)
	{

		new player1,weather;
		if(sscanf(params,"dd",player1,weather)) return USG(playerid,"/Setkills [ ID / Name] [ kills ]");
		if(IsPlayerConnected(player1))
		{

			CMDMessageToAdmins(playerid,"SETKILLS");
			SendClientMessage(playerid,Lb, "You have set \"%s's\" Kills to '%d", PlayerInfo[player1][Nick], weather);
			SendClientMessage(player1,Lg,"Administrator \"%s\" has set your Kills to '%d'", PlayerInfo[playerid][Nick], weather);
			PlayerInfo[player1][Kills] = weather;
			return PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,5);
}

CMD:setdeaths(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 4)
	{

		new player1,weather;
		if(sscanf(params,"dd",player1,weather)) return USG(playerid,"/Setdeaths [ ID / Name] [ deaths ]");
		if(IsPlayerConnected(player1))
		{

			CMDMessageToAdmins(playerid,"SETDEATHS");
			SendClientMessage(playerid,Lb, "You have set \"%s's\" Deaths to '%d", PlayerInfo[player1][Nick], weather);
			SendClientMessage(player1,Lg,"Administrator \"%s\" has set your deaths to '%d'", PlayerInfo[playerid][Nick], weather);
			PlayerInfo[player1][Deaths] = weather;
			return PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,5);
}

CMD:async(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 1)
	{

		new player1;
		if(sscanf(params,"d",player1)) return USG(playerid,"/async [ ID / Name]");
		if(IsPlayerConnected(player1))
		{

			new Float:XR,Float:YR,Float:ZR;
			GetPlayerPos(player1,XR,YR,ZR);
			SpawnPlayer(player1);
			SetPlayerPos(player1,XR,YR,ZR);
			CMDMessageToAdmins(playerid,"ASYNC");
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,2);
	return 1;
}

CMD:afix(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 1)  return ERRR(playerid,1);
	if(PlayerInfo[playerid][OnDuty] == 0) return ERR(playerid,"Only onduty admins can use this command");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	new id;
	if(sscanf(params,"d",id)) id = playerid;
	if(!IsPlayerConnected(id)) return USG(playerid,"/Afix [ID] (Player not connected)");
	RepairVehicle(GetPlayerVehicleID(id));
	SetVehicleHealth(GetPlayerVehicleID(id), 997);
	CMDMessageToAdmins(playerid,"AFIX");
	if(id == playerid) SendClientMessage(playerid,Lg,"You have fixed your own Vehicle");
	else SendClientMessage(id,Lg,"* Administrator \"%s\" Has fixed your vehicle",PlayerInfo[playerid][Nick],playerid);
	return 1;
}
CMD:aslap(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >=1){
		new id;
		if(sscanf(params,"d",id)) return USG(playerid," /aslap [playerid] ");
		if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID || PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid," Player is not connected or is the highest level admin");
		CMDMessageToAdmins(playerid,"ASLAP");
		new nam[24]; strcat(nam, PlayerInfo[id][Nick]);
		SendClientMessageToAll(0xFFFF00FF, "* %s(%d) has been slapped by God.", nam, id);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(id,x,y,z); SetPlayerPos(id,x,y,z+30);
		PlayerPlaySound(id,1190,0.0,0.0,0.0);
		PlayerPlaySound(playerid,1190,0.0,0.0,0.0);
		SendClientMessage(playerid, blue, "You have slapped %s", nam);
	}else return ERRR(playerid,1);
	return 1;
}
CMD:afk(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 0)
	{
		new player1;
		if(sscanf(params,"d",player1)) return USG(playerid,"/Afk [ ID / Name ]");
		if(player1 == playerid) return ERR(playerid," You Can't use it on Your Self");
		if(IsPlayerConnected(player1))
		{
			SendClientMessageToAll(red, "%s has Been disconnected for being away from the keyboard [AFK]", PlayerInfo[player1][Nick]);
			Kick(player1);
			CMDMessageToAdmins(playerid,"AFK");
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,1);
	return 1;
}

CMD:settime(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 2)
	{

		new player1,tim;
		if(sscanf(params,"dd",player1,tim)) return USG(playerid,"/ Settime [ ID / Name] [ Time ]");
		if(IsPlayerConnected(player1))
		{

			CMDMessageToAdmins(playerid,"SETTIME");
			SendClientMessage(playerid,Lb,"You have set \"%s's\" time to %d:00", PlayerInfo[player1][Nick], tim);
			SendClientMessage(player1,Lg,"Administrator \"%s\" has set your time to %d:00", PlayerInfo[playerid][Nick], tim);
			PlayerPlaySound(player1,1057,0.0,0.0,0.0);
			return SetPlayerTime(player1, tim, 0);
		} else return ERR(playerid," Player is not connected");
	} else return ERR(playerid," You are not a high enough level to use this command");
}

CMD:setworld(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 2)
	{

		new player1,wod;
		if(sscanf(params,"dd",player1,wod)) return USG(playerid,"/Setworld [ID / Name] [ World]");
		if(IsPlayerConnected(player1))
		{

			CMDMessageToAdmins(playerid,"SETWORLD");
			SendClientMessage(playerid,Lb, "You have set \"%s's\" virtual world to '%d'", PlayerInfo[player1][Nick], wod);
			SendClientMessage(player1,Lg,"Administrator \"%s\" has set your virtual world to '%d' ", PlayerInfo[playerid][Nick], wod);
			PlayerPlaySound(player1,1057,0.0,0.0,0.0);
			return SetPlayerVirtualWorld(player1,wod);
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,3);
}

CMD:setinterior(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new id,int;
	if(sscanf(params,"dd",id,int)) return USG(playerid,"/Setinterior [Name/ID] [Interior ID]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher admins");
	SetPlayerInterior(id,int);
	CMDMessageToAdmins(playerid,"SETINTERIOR");
	SendClientMessage(playerid,Lb,"* You have changed %s(%d) Interior To %d",PlayerInfo[id][Nick],id,int);
	SendClientMessage(id,Lg,"* Administrator \"%s\" Has changed your interior to %d",PlayerInfo[playerid][Nick],int);
	return 1;
}

CMD:givecar(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 2 || IsPlayerAdmin(playerid))
	{
		new carid, player1;
		if(sscanf(params,"dd", player1, carid)) return USG(playerid," /givecar [playerid] [car id]");
		if(IsPlayerConnected(player1))
		{

			if(player1 != playerid)
			{

				if(IsPlayerInAnyVehicle(player1)) return ERR(playerid," Player already has a vehicle");
				CMDMessageToAdmins(playerid,"GIVECAR");
				new Float:x, Float:y, Float:z;	GetPlayerPos(player1,x,y,z);
				CarSpawner(player1,carid);
				SendClientMessage(player1, blue, "Administrator %s has given you a car", PlayerInfo[playerid][Nick]);
				SendClientMessage(playerid, blue, "You have given %s a car", PlayerInfo[player1][Nick]);
			}
		} else return SendClientMessage(playerid, red, "Player is not connected or is yourself");
	} else return ERRR(playerid,3);
	return 1;
}

CMD:setmytime(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 0) {
		if(isnull(params)) return USG(playerid," /setmytime [hour]");
		new time = strval(params);
		CMDMessageToAdmins(playerid,"SETMYTIME");
		SendClientMessage(playerid, blue, "You have set your time to %d:00", time);
		return SetPlayerTime(playerid, time, 0);
	} else return ERRR(playerid,1);
}

CMD:force(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 2)
	{

		if(isnull(params)) return USG(playerid," /force [playerid]");
		new player1 = strval(params);
		if(IsPlayerConnected(player1))
		{

			CMDMessageToAdmins(playerid,"FORCE");
			if(player1 != playerid) { SendClientMessage(player1, blue, "Administrator \"%s\" has forced you into class selection", PlayerInfo[playerid][Nick]); }
			SendClientMessage(playerid, blue, "You have forced \"%s\" into class selection", PlayerInfo[player1][Nick]);
			ForceClassSelection(player1);
			return SetPlayerHealth(player1,0.0);
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,3);
}

CMD:aeject(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 2)
	{

		if(isnull(params)) return USG(playerid," /Eject [playerid]");
		new player1 = strval(params), Float:x, Float:y, Float:z;
		//
		if(IsPlayerConnected(player1))
		{

			if(IsPlayerInAnyVehicle(player1))
			{

				CMDMessageToAdmins(playerid,"EJECT");
				if(player1 != playerid) { SendClientMessage(player1, blue, "Administrator \"%s\" has ejected you from your vehicle", PlayerInfo[playerid][Nick]); }
				SendClientMessage(playerid, blue, "You have ejected \"%s\" from their vehicle", PlayerInfo[player1][Nick]);
				GetPlayerPos(player1,x,y,z);
				return SetPlayerPos(player1,x,y,z+3);
			} else return ERR(playerid," Player is not in a vehicle");
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,3);
}

CMD:lock(playerid,params[])
{
	if(PlayerInfo[playerid][dRank] > 2) {
		if(IsPlayerInVehicle(playerid, PlayerInfo[playerid][pCar])) {
			if(!PlayerInfo[playerid][DoorsLocked])
			{
				foreach(new i : Player) SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i,false,true);
				PlayerInfo[playerid][DoorsLocked] = 1;
				SendClientMessage(playerid,Lb,"* You have locked your car");
			}
			else
			{
				foreach(new i : Player) SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i,false,false);
				PlayerInfo[playerid][DoorsLocked] = 0;
				SendClientMessage(playerid,Lb,"* You have unlocked your car");
			}
		} else return ERR(playerid," You need to be in your donor vehicle to lock the doors");
	} else return ERR(playerid,"Only donor rank 3+ can use this CMD.");
	return 1;
}

CMD:lockcar(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 1) {
		if(IsPlayerInAnyVehicle(playerid)) {
			foreach(new i : Player) SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i,false,true);
			CMDMessageToAdmins(playerid,"LOCKCAR");
			PlayerInfo[playerid][DoorsLocked] = 1;
			SendClientMessage(playerid,Lb,"* You have locked your car");
		} else return ERR(playerid," You need to be in a vehicle to lock the doors");
	} else return ERRR(playerid,2);
	return 1;
}

CMD:unlockcar(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 1) {
		if(IsPlayerInAnyVehicle(playerid)) {
			foreach(new i : Player) SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i,false,false);
			CMDMessageToAdmins(playerid,"UNLOCKCAR");
			PlayerInfo[playerid][DoorsLocked] = 0;
			SendClientMessage(playerid,Lb,"* You have unlocked your car");
		} else return ERR(playerid," You need to be in a vehicle to lock the doors");
	} else return ERRR(playerid,2);
	return 1;
}

CMD:burn(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 1) {
		if(isnull(params)) return USG(playerid," /burn [playerid]");
		new player1 = strval(params), Float:x, Float:y, Float:z;
		if(IsPlayerConnected(player1))
		{

			CMDMessageToAdmins(playerid,"BURN");
			SendClientMessage(playerid, blue, "You have burnt \"%s\"", PlayerInfo[player1][Nick]);
			GetPlayerPos(player1, x, y, z);
			return CreateExplosion(x, y , z + 3, 1, 10);
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,2);
}

CMD:spawn(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 1) {
		if(isnull(params)) return USG(playerid," /spawn [playerid]");
		new player1 = strval(params);
		if(IsPlayerConnected(player1)) {
			CMDMessageToAdmins(playerid,"SPAWN");
			SendClientMessage(playerid, blue, "You have spawned \"%s\"", PlayerInfo[player1][Nick]);
			if(player1 != playerid) { SendClientMessage(player1, blue, "Administrator \"%s\" has spawned you", PlayerInfo[playerid][Nick]); }
			SetPlayerPos(player1, 0.0, 0.0, 0.0);
			return SpawnPlayer(player1);
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,2);
}

CMD:disarm(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 1) {
		if(isnull(params)) return USG(playerid," /disarm [playerid]");
		new player1 = strval(params);
		if(IsPlayerConnected(player1)) {
			CMDMessageToAdmins(playerid,"DISARM");  PlayerPlaySound(player1,1057,0.0,0.0,0.0);
			SendClientMessage(playerid, blue, "You have disarmed \"%s\"", PlayerInfo[player1][Nick]);
			if(player1 != playerid) { SendClientMessage(player1, blue, "Administrator \"%s\" has disarmed you", PlayerInfo[playerid][Nick]); }
			ResetPlayerWeapons(player1);
			return PlayerPlaySound(player1,1057,0.0,0.0,0.0);
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,2);
}

CMD:d(playerid,params[]) {
	return cmd_disarm(playerid, params);
}
//-----------------------------------------Commands-----------------------------
CMD:crash(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
		if(isnull(params)) return USG(playerid," /crash [playerid]");
		new player1 = strval(params);
		//
		if(IsPlayerConnected(player1)) {
			CMDMessageToAdmins(playerid,"CRASH");
			SetPlayerVirtualWorld(player1,player1);
			ApplyAnimation(player1, "wwwwzzaa----(Ã¨'", "DIqsdksqldkckkkkkjksqd3", 4.0, false, false, false, true, 0, SYNC_NONE);
			return SendClientMessage(playerid, blue, "You have crashed \"%s's\" game", PlayerInfo[player1][Nick]);
		} else return ERR(playerid," Player is not connected");
	} else return ERR(playerid," You are not a high enough level to use this command");
}

CMD:ip(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 0 || PlayerInfo[playerid][Helper] == 1) {
		if(isnull(params)) return USG(playerid," /ip [playerid]");
		new player1 = strval(params);
		//
		if(IsPlayerConnected(player1)) {
			CMDMessageToAdmins(playerid,"IP");
			new tmp3[50]; GetPlayerIp(player1,tmp3,50);
			return SendClientMessage(playerid, blue, "\"%s's\" ip is '%s'", PlayerInfo[player1][Nick], PlayerInfo[player1][lastip]);
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,1);
}
CMD:ipcheck(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 1) {
		new found, ip[16];
		if(sscanf(params,"s[16]",ip)) return USG(playerid,"/Ipcheck [ip]");
		CMDMessageToAdmins(playerid,"IPCHECK");
		SendClientMessage(playerid, blue, "Ip checked for: \"%s\"", params);
		foreach( new i : Player)
		{
			strcopy(ip, PlayerInfo[i][lastip]);
			new namelen = strlen(ip);
			new bool:searched=false;
			for(new pos=0; pos <= namelen; pos++)
			{
				if(searched != true)
				{
					if(strfind(ip,params,true) == pos)
					{
						found++;
						SendClientMessage(playerid, lightblue, "%d. %s - %s(ID %d)",found,ip, PlayerInfo[i][Nick], i);
						searched = true;
					}
				}
			}
		}
		if(found == 0) SendClientMessage(playerid, blue, "No players have this ip");
	}
	else return ERRR(playerid,2);
	return 1;
}
CMD:unban(playerid, params[])
{
	if(PlayerInfo[playerid][Level] > 1 || IsPlayerAdmin(playerid))
	{

		new target[50];
		if(sscanf(params,"s[50]", target)) return SendClientMessage(playerid, red,"[USAGE]: /unban [player name / IP]");
		new Query[200];
		mysql_format(mysql, Query, sizeof(Query),"SELECT * FROM `bans` WHERE `b_name` ='%e' OR `b_ip` ='%s' LIMIT 1",target,target);
		mysql_pquery(mysql, Query,"OnAccountUnban","ds",playerid,target);
		//S_LOG("~g~UNBAN:~w~%s Has UnBanned %s",GetName(playerid),target);
	}else ERRR(playerid,2);
	return 1;
}
forward OnAccountUnban(playerid,tar[]);
public OnAccountUnban(playerid,tar[])
{
	if(cache_num_rows()>0)
	{

		new Query[200];
		mysql_format(mysql, Query, sizeof(Query),"DELETE FROM `bans` WHERE `b_name` = '%s' or `b_ip` ='%s' LIMIT 1",tar,tar);
		mysql_tquery(mysql, Query);
		SendClientMessage(playerid,Lb,"Account / IP : %s Has been unbanned",tar);
	}else ERR(playerid,"Banned Account / IP not found");
	return 1;
}
CMD:unbanip(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >=2)
	{

		new ipp[16];
		if(sscanf(params,"s[16]",ipp)) return SendClientMessage(playerid,red,"USAGE: /unbanip (Ip)");
		CMDMessageToAdmins(playerid,"UNBANIP");
		SendClientMessage(playerid,lightblue,"IP : '%s' Unbanned",ipp);
		SendRconCommand("unbanip %s", ipp);
		SendRconCommand("reloadbans");
	} else  SendClientMessage(playerid, RED,"ERROR: You need to be level 2 to use this command!");

	return 1;
}
CMD:clanlog(playerid,params[])
{
	new x = PlayerInfo[playerid][InClan];
	if(x == -1) return ERR(playerid, "You are not in any clan.");
	if(PlayerInfo[playerid][ClanCoOwn] != x) if(PlayerInfo[playerid][ClanOwn] != x) return ERR(playerid, "CMD restricted to owners/co-owners.");
	new query[180];
	mysql_format(mysql,query,sizeof(query),"SELECT `cid` FROM `clanhistory` WHERE `cid` = '%d'", x);
	PlayerInfo[playerid][CCurrentPage] = 1;
	mysql_pquery(mysql,query,"logsearch", "d", playerid);
	return 1;
}

forward logsearch(playerid);
public logsearch(playerid)
{
    new numrows = cache_num_rows(), query[180];
    PlayerInfo[playerid][CTotalPages] = floatround(float(numrows) / 10.0, floatround_ceil);
	mysql_format(mysql,query,sizeof(query),"SELECT `msg` FROM `clanhistory` WHERE `cid` = '%d' ORDER BY `time` DESC LIMIT 10 OFFSET 0", PlayerInfo[playerid][InClan]);
    mysql_pquery(mysql,query,"logsearchtwo", "d", playerid);
	return 1;
}

logsearchdialog(playerid)
{
    new query[180], count;
    count = (PlayerInfo[playerid][CCurrentPage] - 1) * 10;
	mysql_format(mysql,query,sizeof(query),"SELECT `msg` FROM `clanhistory` WHERE `cid` = '%d' ORDER BY `time` DESC LIMIT 10 OFFSET %d", PlayerInfo[playerid][InClan], count);
    mysql_pquery(mysql,query,"logsearchtwo", "d", playerid);
	return 1;
}

forward logsearchtwo(playerid);
public logsearchtwo(playerid)
{
	new r, string[1500], msg[144];
	cache_get_row_count(r);
	for(new x=0; x < r; x ++)
	{
		cache_get_value_name(x, "msg", msg, 144);
		format(string, _, "%s%s\n", string, msg);
	}
	if(PlayerInfo[playerid][CCurrentPage] != PlayerInfo[playerid][CTotalPages]) strcat(string, "\n> Next\n");
	if(PlayerInfo[playerid][CCurrentPage] != 1) strcat(string, "\n< Previous\n");
	format(msg, _, "Clan History - Page: %d/%d", PlayerInfo[playerid][CCurrentPage], PlayerInfo[playerid][CTotalPages]);
	ShowPlayerDialog(playerid, DIALOG_CLANLOG, DIALOG_STYLE_LIST, msg, string, "Okay", "");
	return 1;
}

CMD:aka(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 2) return ERRR(playerid,2);
	new id,searchtype;
	if(sscanf(params,"dd",id,searchtype)) return USG(playerid,"/Aka [ ID / Name] [Search Type] - Types: 0 - IP | 1 - GPCI | 2 - Password");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	new query[256];

	if(searchtype == 0)
	{
	    strcat(query, PlayerInfo[id][lastip]);
		mysql_format(mysql,query,sizeof(query),"SELECT `id` FROM `playerbase` WHERE `ip` = '%e' OR `lastip` = '%e' AND `lastip` != 'Not available'", query, query);
	}
	else if(searchtype == 1)
	{
	    mysql_format(mysql,query,sizeof(query),"SELECT `id` FROM `playerbase` WHERE `GPCI` = '%e' AND `GPCI` != 'Not available'", PlayerInfo[id][p_GPCI]);
	}
	else if(searchtype == 2)
	{
	    mysql_format(mysql,query,sizeof(query),"SELECT `id` FROM `playerbase` WHERE `pass` = '%e'", PlayerInfo[id][Pass]);
	}
	else
	{
	    ERR(playerid,"Invalid search type.");
 		return 1;
	}

    PlayerInfo[playerid][CurrentPage] = 1;
	PlayerInfo[playerid][aka_targetid] = id;
	PlayerInfo[playerid][AkaType] = searchtype;

	mysql_pquery(mysql,query,"akasearch", "dd", playerid, searchtype);
	return 1;
}

forward akasearch(playerid, searchtype);
public akasearch(playerid, searchtype)
{
    new numrows = cache_num_rows(), query[400];

    PlayerInfo[playerid][TotalPages] = floatround(float(numrows) / 10.0, floatround_ceil);

    if(searchtype == 0)
    {
        new id = PlayerInfo[playerid][aka_targetid];
        strcat(query, PlayerInfo[id][lastip]);
        mysql_format(mysql,query,sizeof(query),"SELECT * FROM `playerbase` WHERE `ip` = '%e' OR `lastip` = '%e' AND `lastip` != 'Not available' LIMIT 10 OFFSET 0", query, query);
    }
    else if(searchtype == 1)
    {
        mysql_format(mysql,query,sizeof(query),"SELECT * FROM `playerbase` WHERE `GPCI` = '%e' AND `GPCI` != 'Not available' LIMIT 10 OFFSET 0", PlayerInfo[PlayerInfo[playerid][aka_targetid]][p_GPCI]);
    }
    else if(searchtype == 2)
	{
	    mysql_format(mysql,query,sizeof(query),"SELECT * FROM `playerbase` WHERE `pass` = '%e' LIMIT 10 OFFSET 0", PlayerInfo[PlayerInfo[playerid][aka_targetid]][Pass]);
	}

    mysql_pquery(mysql,query,"akasearchtwo", "dd", playerid, searchtype);
	return 1;
}

akasearchdialog(playerid)
{
    new query[400], count;

    count = (PlayerInfo[playerid][CurrentPage] - 1) * 10;

    if(PlayerInfo[playerid][AkaType] == 0)
    {
         new id = PlayerInfo[playerid][aka_targetid];
         strcat(query, PlayerInfo[id][lastip]);
		 mysql_format(mysql,query,sizeof(query),"SELECT * FROM `playerbase` WHERE `ip` = '%e' OR `lastip` = '%e' AND `lastip` != 'Not available' LIMIT 10 OFFSET %d", query, query, count);
    }
    else if(PlayerInfo[playerid][AkaType] == 1)
    {
        mysql_format(mysql,query,sizeof(query),"SELECT * FROM `playerbase` WHERE `GPCI` = '%e' AND `GPCI` != 'Not available' LIMIT 10 OFFSET %d", PlayerInfo[PlayerInfo[playerid][aka_targetid]][p_GPCI], count);
    }
    else if(PlayerInfo[playerid][AkaType] == 2)
	{
	    mysql_format(mysql,query,sizeof(query),"SELECT * FROM `playerbase` WHERE `pass` = '%e' LIMIT 10 OFFSET %d", PlayerInfo[PlayerInfo[playerid][aka_targetid]][Pass], count);
	}

    mysql_pquery(mysql,query,"akasearchtwo", "dd", playerid, PlayerInfo[playerid][AkaType]);
	return 1;
}

forward akasearchtwo(playerid, searchtype);
public akasearchtwo(playerid, searchtype)
{
	new r, string[1200], ipss[16], thelastip[16], name[25], theGPCI[128];

	cache_get_row_count(r);

	if(searchtype == 0)
	{
		for(new x=0; x < r; x ++)
		{
			cache_get_value_name(x, "name", name, 25);
			cache_get_value_name(x, "ip", ipss, 16);
			cache_get_value_name(x, "lastip", thelastip, 16);
			format(string, _, "%s{8C1AFF}%s{FFFFFF} | IP: {8C1AFF}%s{FFFFFF} | Last IP: {8C1AFF}%s\n", string, name, ipss, thelastip);
		}
		if(PlayerInfo[playerid][CurrentPage] != PlayerInfo[playerid][TotalPages]) strcat(string, "\n> Next\n");
		if(PlayerInfo[playerid][CurrentPage] != 1) strcat(string, "\n< Previous\n");
		format(theGPCI, _, "IP - Page: %d/%d", PlayerInfo[playerid][CurrentPage], PlayerInfo[playerid][TotalPages]);

		ShowPlayerDialog(playerid, DIALOG_AKA, DIALOG_STYLE_LIST, theGPCI, string, "Okay", "");
	}
	else if(searchtype == 1)
	{
	    for(new x=0; x < r; x ++)
		{
			cache_get_value_name(x, "name", name, 25);
			cache_get_value_name(x, "GPCI", theGPCI, 128);
			format(string, _, "%s{8C1AFF}%s{FFFFFF} | GPCI: {8C1AFF}%s\n", string, name, theGPCI);
		}
		if(PlayerInfo[playerid][CurrentPage] != PlayerInfo[playerid][TotalPages]) strcat(string, "\n> Next\n");
		if(PlayerInfo[playerid][CurrentPage] != 1) strcat(string, "\n< Previous\n");

		format(theGPCI, _, "GPCI - Page: %d/%d", PlayerInfo[playerid][CurrentPage], PlayerInfo[playerid][TotalPages]);

		ShowPlayerDialog(playerid, DIALOG_AKA, DIALOG_STYLE_LIST, theGPCI, string, "Okay", "");
	}
	else if(searchtype == 2)
	{
        for(new x=0; x < r; x ++)
		{
			cache_get_value_name(x, "name", name, 25);
			format(string, _, "%s{8C1AFF}%s{FFFFFF} | {8C1AFF}Password matches\n", string, name);
		}
		if(PlayerInfo[playerid][CurrentPage] != PlayerInfo[playerid][TotalPages]) strcat(string, "\n> Next\n");
		if(PlayerInfo[playerid][CurrentPage] != 1) strcat(string, "\n< Previous\n");
		format(theGPCI, _, "Password - Page: %d/%d", PlayerInfo[playerid][CurrentPage], PlayerInfo[playerid][TotalPages]);

		ShowPlayerDialog(playerid, DIALOG_AKA, DIALOG_STYLE_LIST, theGPCI, string, "Okay", "");
	}
	return 1;
}


CMD:sban(playerid,params[]) return cmd_searchban(playerid,params);
CMD:searchban(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 1 || IsPlayerAdmin(playerid))
	{

		new name[24],Query[256];
		if(sscanf(params,"s[24]",name)) return SendClientMessage(playerid,red,"USAGE: /Searchban [Username/ip]");
		mysql_format(mysql, Query, sizeof(Query),"SELECT * FROM `bans` WHERE `b_name` ='%e' OR `b_ip` ='%s' LIMIT 1",name,name);
		mysql_pquery(mysql, Query,"OnSearchban","ds",playerid,name);
	}else SendClientMessage(playerid, RED,"ERROR: You need to be level 2 to use this command!");
	return 1;
}
forward OnSearchban(playerid,fid[]);
public OnSearchban(playerid,fid[])
{
	new adm[24],res[50],time[50],origin[24],aip[16];
	if(cache_num_rows()>0)
	{

		cache_get_value_name(0, "b_admin", adm, 24);
		cache_get_value_name(0, "b_reason", res,50);
		cache_get_value_name(0, "b_time", time, 50);
		cache_get_value_name(0, "b_name", origin, 24);
		cache_get_value_name(0, "b_ip", aip, 24);
		SendClientMessage(playerid,Dred,"Account Name: %s",origin);
		SendClientMessage(playerid,Dred,"Account IP: %s",aip);
		SendClientMessage(playerid,Dred,"Banned By: %s",adm);
		SendClientMessage(playerid,Dred,"Ban Reason: %s",res);
		SendClientMessage(playerid,Dred,"Banned On: %s",time);

	}else ERR(playerid,"Account not Banned / not Found.");
}
CMD:mcmds(playerid, params[])
{
	if(!PlayerInfo[playerid][Helper]) return 1;
	SendClientMessage(playerid, -1,"Moderator Commands list: ");
	SendClientMessage(playerid, -1,"*************************");
	SendClientMessage(playerid, -1,"/kick /warn /unwarn /mcmds /ip");
	SendClientMessage(playerid, -1,"/m [text] for moderator chat!");
	SendClientMessage(playerid, -1,"/spec /specoff , /msay , /getinfo");
	SendClientMessage(playerid, -1,"/weaps , /apm , /requestban (/rb)");
	SendClientMessage(playerid, -1,"******************************");
	return 1;
}
CMD:rb(playerid,params[]) return cmd_requestban(playerid,params);
CMD:requestban(playerid,params[])
{
	if(PlayerInfo[playerid][Helper] == 0) { if(PlayerInfo[playerid][Level] != 1) return SendClientMessage(playerid,Dred,"ERROR: You Are not high level enough to use this command"); }
	new id,res[50];
	if(sscanf(params,"ds[50]",id,res)) {
		SendClientMessage(playerid,red,"USAGE: /Requestban [ID] [Reason]");
		SendClientMessage(playerid,red,"* Will send a message to all on-line admins level 2 + To ban the user");
		return 0;
	}
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid,red,"* Player Not Connected");
	if(playerid == id) return SendClientMessage(playerid,red,"* Player is you !!");
	if(PlayerInfo[id][Level] > 0) return SendClientMessage(playerid,red,"* Player is Admin");
	if(PlayerInfo[id][Helper] == 1) return SendClientMessage(playerid,red,"* Player is Moderator");
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	foreach(new i : Player)
	{
		if(PlayerInfo[i][Level] >1)
		{
			SendClientMessage(i,0x00FF00FF,"[BAN REQUEST] %s Requesting To Ban The Player \"%s\"(%d) | Reason : %s",nam,PlayerInfo[id][Nick],id,res);
			GameTextForPlayer(i,"~g~~h~Moderator~n~~r~~h~Ban~w~ Request",6000,3);
		}
	}
	SendClientMessage(playerid,Lg,"Request Sent");
	return 1;
}
CMD:rban(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 4) return ERRR(playerid,3);
	new id,sres[50],stt[50];
	if(sscanf(params,"ds[50]",id,sres)) return USG(playerid,"/Rban [ID / Name] [ Reason ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on this admin ");
	CMDMessageToAdmins(playerid,"RBAN");
	PlayerInfo[playerid][Rage] ++;
	if(PlayerInfo[playerid][Rage] == 5)
	{

		PlayerInfo[playerid][Level] = 0;
		PlayerInfo[playerid][Helper] = 0;
		COD_BAN(playerid,"Server","/rban abuse");
		return 0;
	}
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level])
	{
		SendClientMessage(id,red,"WARNING: %s(%d) has tryed to ban you ",PlayerInfo[playerid][Nick],playerid);
		COD_BAN(playerid,PlayerInfo[id][Nick],"Trying to ban higher admin");
		return 0;
	}
	SendClientMessageToAll(red," RBAN | %s has been range banned by an Admin | Reason: %s",PlayerInfo[id][Nick],sres);
	new ip[128];
	strcat(ip, PlayerInfo[id][lastip]);
	strdel(ip, strlen(ip) - 2, strlen(ip));
	SendRconCommand("banip %s**", ip);
	format(stt, _, "%s - Rangeban", sres);
	COD_BAN(id,PlayerInfo[playerid][Nick],stt);
	KickX(id);
	return 1;
}
CMD:b(playerid,params[]) return cmd_ban(playerid,params);
CMD:ban(playerid,params[])
{
	new lvl = PlayerInfo[playerid][Level];
	if(lvl < 2) return ERRR(playerid,2);
	if(PlayerInfo[playerid][is_undercover]) return ERR(playerid, "Cannot ban while on undercover mode.");
	new id,res[50];
	if(sscanf(params,"ds[50]",id,res)) return USG(playerid,"/Ban [ID / Name ] [ Reason ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(id==playerid) return ERR(playerid, "Cannot ban yourself.");
	if(strlen(res) < 2) res = "No Reason";
	new sz = sizeof(badchars);
	for(new Bad=0; Bad < sz; Bad ++){ if(strfind(res,badchars[Bad],true) != -1) return ERR(playerid,"characters like (Â²,~,@,?,!...) Are NOT allowed");}
	CMDMessageToAdmins(playerid,"BAN");
	PlayerInfo[playerid][Rage] ++;
	if(PlayerInfo[playerid][Rage] == 5)
	{

		PlayerInfo[playerid][Level] = 0;
		COD_BAN(playerid,"Server","/Ban abuse");
		return 0;
	}
	new nam[24]; strcat(nam, PlayerInfo[id][Nick]);
	if(PlayerInfo[id][Level] >= lvl)
	{
		COD_BAN(playerid,nam,"Trying to ban admin");
		SendClientMessageToAll(red,"BAN | %s has been permanently banned by an Admin ( Reason : Trying to ban higher level admin )",nam);
		SendClientMessage(playerid,red,"[BAN] You have been banned from the server if you think this is a mistake make a ban appeal at our forum "cblue" www.mw3-samp.org");
	}else
	{

		undo[playerid][0] = undo[playerid][1];
		undo[playerid][1] = undo[playerid][2];
		undo[playerid][2] = undo[playerid][3];
		undo[playerid][3] = undo[playerid][4];
		undo[playerid][4] = nam;
		COD_BAN(id,PlayerInfo[playerid][Nick],res);
		SendClientMessageToAll(red,"BAN | %s has been permanently banned by an Admin [ Reason : %s ]",nam,res);
		SendClientMessage(id,red,"[BAN] You have been banned from the server if you think this is a mistake make a ban appeal at our forum "cblue" www.mw3-samp.org");
	}
	return 1;
}
CMD:tban(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 2) return ERRR(playerid,2);
	if(PlayerInfo[playerid][is_undercover]) return ERR(playerid, "Cannot ban while on undercover mode.");
	new id,res[50],um,uh;
	if(sscanf(params,"diis[50]",id,uh,um,res)) return USG(playerid,"/Ban [ID / Name ] [ Hours ] [ Minutes ] [ Reason ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(id==playerid) return ERR(playerid, "Cannot tban yourself.");
	if(strlen(res) < 2) res = "No Reason";
	new sz = sizeof(badchars);
	for(new Bad=0; Bad < sz; Bad ++){ if(strfind(res,badchars[Bad],true) != -1) return ERR(playerid,"characters like (Â²,~,@,?,!...) Are NOT allowed");}
	CMDMessageToAdmins(playerid,"BAN");
	PlayerInfo[playerid][Rage] ++;
	if(PlayerInfo[playerid][Rage] == 5)
	{
		PlayerInfo[playerid][Level] = 0;
		COD_BAN(playerid,"Server","/Ban abuse");
		return 0;
	}
	if(PlayerInfo[id][Level] >= PlayerInfo[playerid][Level])
	{
		new nam[24]; strcat(nam, PlayerInfo[id][Nick]);
		COD_BAN(playerid,nam,"Trying to ban admin");
		SendClientMessageToAll(red,"BAN | %s has been permanently banned by an Admin ( Reason : Trying to ban higher level admin )",nam);
		SendClientMessage(playerid,red,"[BAN] You have been banned from the server if you think this is a mistake make a ban appeal at our forum "cblue" www.mw3-samp.org");
	}else
	{

		new Hour, Minute, Second, Timestamp;
		Timestamp = gettime(Hour, Minute, Second);
		COD_TBAN(id,PlayerInfo[playerid][Nick],res,uh*3600+um*60+Timestamp);
		SendClientMessageToAll(red,"TBAN | %s has been banned by an Admin for %d hours and %d minutes [ Reason : %s ]",PlayerInfo[id][Nick],uh,um,res);
		SendClientMessage(id,red,"[BAN] You have been temporarily banned from the server if you think this is a mistake make a ban appeal at our forum "cblue" www.mw3-samp.org");
	}
	return 1;
}
CMD:offjail(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new name[24],time;
	if(sscanf(params,"d[24]d",name,time)) return USG(playerid,"/offjail [Name ] [ Minutes ]");
	if(strlen(name) < 3) return ERR(playerid, "Invalid player name");
	CMDMessageToAdmins(playerid,"OFFJAIL");
	new Query[600];
	mysql_format(mysql, Query, sizeof(Query), "SELECT `id` FROM `playerbase` WHERE `name`='%e' LIMIT 1", name);
	mysql_pquery(mysql, Query,"offjailcheck","dd", playerid, time);
	return 1;
}

forward offjailcheck(playerid, time);
public offjailcheck(playerid, time)
{
	if(cache_num_rows()>0)
	{

		new Query[120],uid;
		cache_get_value_index_int(0, 0, uid);
		mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `jailtime` = `jailtime`+'%d' WHERE `id` ='%d' LIMIT 1",time*60,uid);
		mysql_tquery(mysql, Query);
	}else ERR(playerid,"Account Not Found in Database");
	return 1;
}

CMD:offlineban(playerid,params[]) return cmd_offban(playerid,params);
CMD:offban(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 2){
		new nickname[24],reason[50];
		if(sscanf(params, "s[24]s[50]", nickname,reason)) return SendClientMessage(playerid, red, "USAGE: /Offban (Nickname) (Reason)");
		new sz = sizeof(badchars);
		for(new Bad=0; Bad < sz; Bad ++){ if(strfind(reason,badchars[Bad],true) != -1) return ERR(playerid,"characters like (Â²,~,@,?,!...) Are NOT allowed");}
		CMDMessageToAdmins(playerid,"Offlineban");
		new Year, Month, Day;
		getdate(Year, Month, Day);
		new Hour, Minute, Second;
		gettime(Hour, Minute, Second);
		new tima[80];
		format(tima, _, "%d/%d/%d | %d:%d", Day, Month, Year, Hour, Minute);
		new Query[600];
		mysql_format(mysql, Query, sizeof(Query), "INSERT INTO `bans` (`b_name`,`b_ip`,`b_admin`,`b_reason`,`b_time`) VALUES ('%s','0','%s','%s','%s')",nickname,PlayerInfo[playerid][Nick],reason,tima);
		mysql_tquery(mysql, Query);
		SendClientMessage(playerid, 0x0080FFFF, " Banned User %s | Reason : %s ", nickname, reason);
		//S_LOG("~p~OFFLINE BN:~w~%s Has Offline Banned %s (Reason : %s)",GetName(playerid),nickname,reason);
	} else return ERRR(playerid,3);
	return 1;
}
CMD:setofflevel(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 5)	{
		new Name[29],levels;
		if(sscanf(params,"s[29]i",Name,levels)) return SendClientMessage(playerid,red,"USAGE: /Setofflevel (Account name) (Level) ");
		if(levels < 0 || levels > 8) return ERR(playerid,"Invalid Admin Level[ 0 - 8]");
		new Query[500];
		mysql_format(mysql, Query, sizeof(Query), "SELECT * FROM `playerbase` WHERE `name` ='%e' LIMIT 1",Name);
		mysql_pquery(mysql, Query,"OnOfflineLevel","dsd",playerid,Name,levels);

	}else ERRR(playerid,5);
	return 1;
}
forward OnOfflineLevel(playerid,name[],lvl);
public OnOfflineLevel(playerid,name[],lvl)
{
	if(cache_num_rows()>0)
	{

		new Query[120];
		mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `adminlvl` = '%d' WHERE `name` ='%e' LIMIT 1",lvl,name);
		mysql_tquery(mysql, Query);
		CMDMessageToAdmins(playerid,"SetOffLevel");
		SendClientMessage(playerid,Lb,"* %s Administrator Level Changed to %d",name,lvl);
	}else
	{

		ERR(playerid,"Account Not Found in Database");
	}
	return 1;
}

CMD:time(playerid,params[]) {
	new hour,minuite; gettime(hour,minuite);
	return GameTextForPlayer(playerid, "~g~|~w~%d:%d~g~|", 5000, 1, hour, minuite);
}

CMD:acmds(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 1) return ERRR(playerid,1);
	new id,Cat[1400];
	if(sscanf(params,"d",id)) id = PlayerInfo[playerid][Level];
	if(id < 1 || id > 5) return USG(playerid,"/Acmds [1-5]");
	if(id == PlayerInfo[playerid][Level]) SendClientMessage(playerid,0xFF379BFF,"-- Your Administrator Level commands --");
	else SendClientMessage(playerid,0xFF379BFF,"-- Administrator Level : %d Commands",id);
	if(id > PlayerInfo[playerid][Level]) return ERRR(playerid,id);
	new sz = sizeof(AdminCMD);
	for(new ax; ax < sz; ax++)
	{
		if(AdminCMD[ax][alevel] == id)
		{
			format(Cat, _, "%s{80FF00}- %s - {FF8000}%s\n", Cat, AdminCMD[ax][alevel], AdminCMD[ax][cmdhelp]);
		}
	}
	ShowPlayerDialog(playerid, 12516, DIALOG_STYLE_MSGBOX,"Admin Commands",Cat,"Ok","");
	return 1;
}

CMD:disable(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3 || IsPlayerAdmin(playerid)) {
		if(isnull(params)) {
			USG(playerid," /disable [ mml  ,antiswear / namekick / antispam / readcmds / readpms /caps");
			return SendClientMessage(playerid,-1,"       /connectmsgs");
		}
		new string[128], file[256]; strcat(file, "ladmin/config/Config.ini");
		if(strcmp(params,"antiswear",true) == 0) {
			ServerInfo[AntiSwear] = 0;
			SendClientMessageToAll(blue, "Administrator %s has disabled antiswear", PlayerInfo[playerid][Nick]);
		} else if(strcmp(params,"antispam",true) == 0)	{
			ServerInfo[AntiSpam] = 0;
			SendClientMessageToAll(blue, "Administrator %s has disabled antispam", PlayerInfo[playerid][Nick]);
		} else if(strcmp(params,"readcmds",true) == 0) {
			ServerInfo[ReadCmds] = 0;
			format(string, _, "Administrator %s has disabled reading commands", PlayerInfo[playerid][Nick]);
			MessageToAdmins(blue,string);
		} else if(strcmp(params,"readpms",true) == 0) {
			ServerInfo[ReadPMs] = 0;
			format(string, _, "Administrator %s has disabled reading pms", PlayerInfo[playerid][Nick]);
			MessageToAdmins(blue,string);
		} else if(strcmp(params,"caps",true) == 0)	{
			ServerInfo[NoCaps] = 1;
			SendClientMessageToAll(blue, "Administrator %s has prevented captial letters in chat", PlayerInfo[playerid][Nick]);
		} else if(strcmp(params,"spreetext",true) == 0)	{
			ServerInfo[Spreetext] = false;
			format(string, _, "Administrator %s has disabled Spree Textdraw", PlayerInfo[playerid][Nick]);
			MessageToAdmins(green,string);
		} else if(strcmp(params,"mml",true) == 0)	{
			ServerInfo[MML] = false;
			format(string, _, "Administrator %s has disabled MML (Millitary Missile Launcher) System", PlayerInfo[playerid][Nick]);
			MessageToAdmins(green,string);
		} else if(strcmp(params,"anticheat",true) == 0)	{
			ServerInfo[AntiCh] = false;
			format(string, _, "Administrator %s has disabled Anticheat", PlayerInfo[playerid][Nick]);
			MessageToAdmins(green,string);
		} else if(strcmp(params,"flood",true) == 0)	{
			ServerInfo[FloodIP] = false;
			format(string, _, "Administrator %s has disabled Anti Flood System", PlayerInfo[playerid][Nick]);
			MessageToAdmins(green,string);
		} else if(strcmp(params,"sawn",true) == 0)	{
			ServerInfo[Sawn] = false;
			format(string, _, "Administrator %s has disabled Sawn-Off in shop", PlayerInfo[playerid][Nick]);
			MessageToAdmins(green,string);
		} else {
			USG(playerid," /disable [ mml / antiswear / namekick / antispam / readcmds / readpms /caps /cmdmsg /sawn ]");
		} return 1;
	} else return ERRR(playerid,4);
}


CMD:enable(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3 || IsPlayerAdmin(playerid)) {
		if(isnull(params)) {
			USG(playerid," /enable [ mml , flood, baserape / Spreetext /antiswear / namekick / antispam / readcmds / readpms /caps /sawn");
			return SendClientMessage(playerid,-1,"       /connectmsgs");
		}
		new string[128], file[256]; strcat(file, "ladmin/config/Config.ini");
		if(strcmp(params,"antiswear",true) == 0) {
			ServerInfo[AntiSwear] = 1;
			SendClientMessageToAll(blue, "Administrator %s has enabled antiswear", PlayerInfo[playerid][Nick]);
		} else if(strcmp(params,"antispam",true) == 0)	{
			ServerInfo[AntiSpam] = 1;
			SendClientMessageToAll(blue, "Administrator %s has enabled antispam", PlayerInfo[playerid][Nick]);
		} else if(strcmp(params,"readcmds",true) == 0)	{
			ServerInfo[ReadCmds] = 1;
			format(string, _, "Administrator %s has enabled reading commands", PlayerInfo[playerid][Nick]);
			MessageToAdmins(blue,string);
		} else if(strcmp(params,"readpms",true) == 0) {
			ServerInfo[ReadPMs] = 1;
			format(string, _, "Administrator %s has enabled reading pms", PlayerInfo[playerid][Nick]);
			MessageToAdmins(blue,string);
		} else if(strcmp(params,"caps",true) == 0)	{
			ServerInfo[NoCaps] = 0;
			SendClientMessageToAll(blue, "Administrator %s has allowed captial letters in chat", PlayerInfo[playerid][Nick]);
		} else if(strcmp(params,"flood",true) == 0)	{
			ServerInfo[FloodIP] = true;
			format(string, _, "Administrator %s has enabled Anti IP FLOOD", PlayerInfo[playerid][Nick]);
			MessageToAdmins(green,string);
		} else if(strcmp(params,"anticheat",true) == 0)	{
			ServerInfo[AntiCh] = true;
			format(string, _, "Administrator %s has enabled Anti Cheat", PlayerInfo[playerid][Nick]);
			MessageToAdmins(green,string);
		} else if(strcmp(params,"spreetext",true) == 0) {
			ServerInfo[Spreetext] = true;
			format(string, _, "Administrator %s has enabled Spree Textdraw", PlayerInfo[playerid][Nick]);
			MessageToAdmins(green,string);
		} else if(strcmp(params,"sawn",true) == 0) {
			ServerInfo[Sawn] = true;
			format(string, _, "Administrator %s has enabled Sawn-Off in shop", PlayerInfo[playerid][Nick]);
			MessageToAdmins(green,string);
		}
		else if(strcmp(params,"mml",true) == 0) {
			ServerInfo[MML] = true;
			format(string, _, "Administrator %s has enabled MML (Millitary Missile Launcher) System ", PlayerInfo[playerid][Nick]);
			MessageToAdmins(green,string);
		} else {
			USG(playerid," /enable [ antiswear / namekick / antispam / readcmds / readpms /caps /cmdmsg ]");
		} return 1;
	} else return ERRR(playerid,4);
}

CMD:savestats(playerid) return cmd_update(playerid);
CMD:update(playerid) {
	new remain = GetTickCount() - PlayerInfo[playerid][SAVESTATSCMD];
	if(remain < 120000) return SendClientMessage(playerid, Dred, "Your stats have already been recently saved");
	PlayerInfo[playerid][SAVESTATSCMD] = GetTickCount();
	SavePlayer(playerid);
	SendClientMessage(playerid,green,"Stats Saved!");
	return 1;
}


CMD:tune(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 0) {
		if(IsPlayerInAnyVehicle(playerid)) {
			new LVehicleID = GetPlayerVehicleID(playerid), LModel = GetVehicleModel(LVehicleID);
			switch(LModel)
			{

				case 448,461,462,463,468,471,509,510,521,522,523,581,586,449:
				return ERR(playerid," You can not tune this vehicle");
			}
			CMDMessageToAdmins(playerid,"TUNE");
			SetVehicleHealth(LVehicleID,2000.0);
			ChangeVehicleColours(LVehicleID,0,7);
			AddVehicleComponent(LVehicleID, 1010);  AddVehicleComponent(LVehicleID, 1087);
			return PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
		} else return ERR(playerid," You are not in a vehicle");
	} else return ERRR(playerid,1);
}



CMD:acar(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 2) {
		if (!IsPlayerInAnyVehicle(playerid)) {
			CarSpawner(playerid,541);
			new v = GetPlayerVehicleID(playerid);
			ChangeVehicleColours(v,1,1);
			AddVehicleComponent(v,1079);
			CMDMessageToAdmins(playerid,"ACAR");
		} else return ERR(playerid," You already have a vehicle");
	} else return ERRR(playerid,2);
	return 1;
}

CMD:gas(playerid,params[]) return cmd_giveallscore(playerid,params);

CMD:givescore(playerid, params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{

		new giveplayerid,
		amount;
		if(sscanf(params, "dd", giveplayerid, amount)) return USG(playerid," /givescore [playerid/partname] [amount]");
		if(!IsPlayerConnected(giveplayerid)) return ERR(playerid," Player Not Connected");
		SetPlayerScore(giveplayerid,GetPlayerScore(giveplayerid) + amount);
		CMDMessageToAdmins(playerid,"GIVESCORE");
		SendClientMessage(giveplayerid, 0x00FF00AA, "Admin %s has given you '%d' Score.", PlayerInfo[playerid][Nick], amount);
		PlayerPlaySound(giveplayerid, 1057,0.0,0.0,0.0);
		SendClientMessage(playerid, 0x00FF00AA, "You have given %s '%d' Score.", PlayerInfo[giveplayerid][Nick], amount);
		//SendLogG("Givescore","%s gave %s  %d score",GetName(playerid),GetName(giveplayerid), amount);
	}else ERRR(playerid,4);
	return 1;
}
CMD:givexp(playerid, params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{

		new giveplayerid,
		amount;
		if(sscanf(params, "dd", giveplayerid, amount)) return USG(playerid," /givexp [playerid] [amount]");
		if(!IsPlayerConnected(giveplayerid)) return ERR(playerid," Player Not Connected");
		PlayerInfo[giveplayerid][XP] += amount;
		CMDMessageToAdmins(playerid,"GIVEXP");
		SendClientMessage(giveplayerid, 0x00FF00AA, "Admin %s has given you '%d' XP.", PlayerInfo[playerid][Nick], amount);
		PlayerPlaySound(giveplayerid, 1057,0.0,0.0,0.0);
		SendClientMessage(playerid, 0x00FF00AA, "You have given %s '%d' XP.", PlayerInfo[giveplayerid][Nick], amount);
		//SendLogG("Givescore","%s gave %s  %d score",GetName(playerid),GetName(giveplayerid), amount);
	}else ERRR(playerid,4);
	return 1;
}

CMD:giveallscore(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3) {
		new score;
		if(sscanf(params,"d",score)) return USG(playerid,"/giveallscore [score]");
		if(score > 40) return ERR(playerid,"Invalid Score");
		CMDMessageToAdmins(playerid,"GIVEALLSCORE");
		foreach(new i : Player)
		{

			SetPlayerScore(i,GetPlayerScore(i)+score);
			PlayerPlaySound(i, 1057,0.0,0.0,0.0);
		}
		SendClientMessageToAll(blue, "Administrator \"%s\" has given all players '%d' Score!", PlayerInfo[playerid][Nick], score);
		//SendLogG("Giveallscore","%s gave all players %d score",GetName(playerid),score);
	} else return ERRR(playerid,4);
	return 1;
}

CMD:giveallhonor(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 7) {
		new score;
		if(sscanf(params,"d",score)) return USG(playerid,"/giveallhonor [score]");
		if(score > 1000 || score < 1) return ERR(playerid,"Invalid HP (1-1000)");
		new string[128];
		SendClientMessageToAll(blue, "Administrator \"%s\" has given all clans '%d' Honor Points!", PlayerInfo[playerid][Nick], score);
		mysql_format(mysql, string, 96, "UPDATE `clans` SET `chpoints`= `chpoints` + %d",score);
		mysql_tquery(mysql, string, "", "");
	} else return ERRR(playerid,7);
	return 1;
}
CMD:bike(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 2) {
		if (!IsPlayerInAnyVehicle(playerid)) {
			CarSpawner(playerid,522);
			CMDMessageToAdmins(playerid,"BIKE");
		} else return ERR(playerid," You already have a vehicle");
	} else return ERRR(playerid,2);
	return 1;
}

CMD:heli(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 2) {
		if (!IsPlayerInAnyVehicle(playerid)) {
			CarSpawner(playerid,487);
			CMDMessageToAdmins(playerid,"HELI");
		} else return ERR(playerid," You already have a vehicle");
	} else return ERRR(playerid,2);
	return 1;
}

CMD:boat(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 2) {
		if (!IsPlayerInAnyVehicle(playerid)) {
			CarSpawner(playerid,493);
			CMDMessageToAdmins(playerid,"BOAT");
		} else return ERR(playerid," You already have a vehicle");
	} else return ERRR(playerid,2);
	return 1;
}

CMD:plane(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 2) {
		if (!IsPlayerInAnyVehicle(playerid)) {
			CarSpawner(playerid,513);
			CMDMessageToAdmins(playerid,"PLANE");
		} else return ERR(playerid," You already have a vehicle");
	} else return ERRR(playerid,2);
	return 1;
}
CMD:nos(playerid,params[]) return cmd_nitro(playerid,params);
CMD:nitro(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 1) {
		if(IsPlayerInAnyVehicle(playerid)) {
			switch(GetVehicleModel( GetPlayerVehicleID(playerid) )) {
				case 448,461,462,463,468,471,509,510,521,522,523,581,586,449:
				return ERR(playerid,"You can not tune this vehicle!");
			}
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
			return PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
		} else return ERR(playerid," You must be in a vehicle.");
	} else return ERRR(playerid,1);
}

CMD:car(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3 ) return ERRR(playerid,3);
	if(IsPlayerInAnyVehicle(playerid)) return ERR(playerid,"You already have a vehicle");
	new veh[50],cars;
	if(sscanf(params,"s[50]",veh)) return USG(playerid,"/Car [ Veh Name / Modeid]");
	if(!IsNumeric(veh)) cars = GetVehicleModelIDFromName(veh);
	else
	cars = strval(veh);
	if(cars < 400 || cars > 611) return  ERR(playerid,"Invalid Vehicle Model");
	if(PlayerInfo[playerid][pCar] != -1) CarDeleter(PlayerInfo[playerid][pCar]);
	new LVehicleID,Float:X,Float:Y,Float:Z, Float:Angle,int1;	GetPlayerPos(playerid, X,Y,Z);	GetPlayerFacingAngle(playerid,Angle);   int1 = GetPlayerInterior(playerid);
	LVehicleID = CreateVehicle(cars, X+3,Y,Z, Angle, 1,1, -1); LinkVehicleToInterior(LVehicleID,int1);
	PutPlayerInVehicle(playerid, LVehicleID, 0);
	PlayerInfo[playerid][pCar] = LVehicleID;
	SetVehicleVirtualWorld(LVehicleID, GetPlayerVirtualWorld(playerid));
	CanAInvis[LVehicleID] = true;
	IsAInvis[LVehicleID] = false;
	CMDMessageToAdmins(playerid,"CAR");
	SendClientMessage(playerid,Lb, "You have spawned a \"%s\" (Model:%d)",VehicleNames[cars-400],cars);
	return 1;
}
CMD:svipga(playerid,params[])
{
	if(PlayerInfo[playerid][dRank] != 6) return ERR(playerid, "You need to be a Sponsor to use this cmd.");
	if(SponsorGAOn > 0) return ERR(playerid, "There already is a Sponsor GA running.");
	new query[107];
	mysql_format(mysql, query, sizeof(query),"SELECT `spvip` FROM `playerbase` WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][AID]);
	mysql_pquery(mysql, query, "OnSponsorVIPGACheck", "i", playerid);
	return 1;
}

forward OnSponsorVIPGACheck(playerid);
public OnSponsorVIPGACheck(playerid)
{
	if(cache_num_rows()>0)
	{
	    new kk;
		cache_get_value_index_int(0,0, kk);
		if(!kk)
		{
		    SendClientMessageToAll(COLOR_YELLOW,"* Sponsor Giveaway: %s has started a temp Level 1 VIP giveaway, /gaticket to join! (results announced in 30 mins)",PlayerInfo[playerid][Nick]);
			TextDrawSetString(sponsorgatd, "On-Going Sponsor ~b~~h~1-DAY Level 1 VIP~w~ Giveaway~n~Use ~g~~h~/gaticket ~w~for a chance to ~r~~h~win!");
			TextDrawShowForAll(sponsorgatd);
			new query[208];
			new dbid = PlayerInfo[playerid][AID];
			mysql_format(mysql, query, 100,"UPDATE `playerbase` SET `spvip`= 1 WHERE `id`='%d' LIMIT 1", dbid);
			mysql_tquery(mysql, query);
			mysql_format(mysql, query, sizeof(query), "CREATE EVENT `%d_vipga` ON SCHEDULE AT CURRENT_TIMESTAMP() + INTERVAL 7 DAY DO UPDATE `playerbase` SET `spvip`=0 WHERE `id`='%d'",dbid,dbid);
			mysql_tquery(mysql, query);
   			SponsorGAOn = 1;
			SetTimer("LotteryPick", 30*60*1000, false);
			return 1;
		}
		else
		{
		    ERR(playerid,"You have already made a GA in the last 7 days.");
		    return 1;
		}
	}
	else return SendClientMessage(playerid, RED, "Database Problem.");
}

CMD:scorega(playerid,params[])
{
	if(PlayerInfo[playerid][dRank] != 6) return ERR(playerid, "You need to be a Sponsor to use this cmd.");
	if(SponsorGAOn > 0) return ERR(playerid, "There already is a Sponsor GA running.");
	new query[107];
	mysql_format(mysql, query, sizeof(query),"SELECT `spscr` FROM `playerbase` WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][AID]);
	mysql_pquery(mysql, query, "OnSponsorScoreGACheck", "i", playerid);
	return 1;
}

forward OnSponsorScoreGACheck(playerid);
public OnSponsorScoreGACheck(playerid)
{
	if(cache_num_rows()>0)
	{
	    new kk;
		cache_get_value_index_int(0,0, kk);
		if(!kk)
		{
		    SendClientMessageToAll(COLOR_YELLOW,"* Sponsor Giveaway: %s has started a 500 Score Giveaway, /gaticket to join! (results announced in 30 mins)",PlayerInfo[playerid][Nick]);
			TextDrawSetString(sponsorgatd, "On-Going Sponsor ~b~~h~500 Score~w~ Giveaway~n~Use ~g~~h~/gaticket ~w~for a chance to ~r~~h~win!");
			TextDrawShowForAll(sponsorgatd);
			new query[208];
			new dbid = PlayerInfo[playerid][AID];
			mysql_format(mysql, query, 100,"UPDATE `playerbase` SET `spscr`= 1 WHERE `id`='%d' LIMIT 1", dbid);
			mysql_tquery(mysql, query);
			mysql_format(mysql, query, sizeof(query), "CREATE EVENT `%d_scrga` ON SCHEDULE AT CURRENT_TIMESTAMP() + INTERVAL 7 DAY DO UPDATE `playerbase` SET `spscr`=0 WHERE `id`='%d'",dbid,dbid);
			mysql_tquery(mysql, query);
   			SponsorGAOn = 2;
			SetTimer("LotteryPick", 30*60*1000, false);
		}
		return 1;
	}
	else return SendClientMessage(playerid, RED, "Database Problem.");
}


forward LotteryPick();
public LotteryPick()
{
	if(Iter_Count(Lottery) == 0)
	{
	    SetTimer("LotteryPick", 10*60*1000, false);
	    SendClientMessageToAll(COLOR_YELLOW, "Nobody has joined the Giveaway, extending the GA for 10 more minutes.");
	    return 1;
	}
    TextDrawHideForAll(sponsorgatd);
	new name[24];
	new id = Iter_Random(Lottery);
	new dbid = PlayerInfo[id][AID];
	strcat(name, PlayerInfo[id][Nick]);
	switch(SponsorGAOn)
	{
		case 1:
		{
			SendClientMessageToAll(COLOR_YELLOW,"* Sponsor Giveaway: %s has won the Level 1 VIP giveaway, congratulations!",name);
			new query[208];
			mysql_format(mysql, query, 100,"UPDATE `playerbase` SET `vip`= 1 WHERE `id`='%d' LIMIT 1", dbid);
			mysql_tquery(mysql, query);
			mysql_format(mysql, query, sizeof(query), "CREATE EVENT `%d_vipwin` ON SCHEDULE AT CURRENT_TIMESTAMP() + INTERVAL 1 DAY DO UPDATE `playerbase` SET `vip`=0 WHERE `id`='%d'",dbid,dbid);
			mysql_tquery(mysql, query);
			PlayerInfo[id][dRank] = 1;
			SendClientMessage(id, COLOR_GREEN, "Congratulations, you are now VIP Level 1 for 1 day, use /vip to check your cmds.");
		}
		case 2:
		{
			SendClientMessageToAll(COLOR_YELLOW,"* Sponsor Giveaway: %s has won the 500 Score giveaway, congratulations!",name);
			SetPlayerScore(id, GetPlayerScore(id)+500);
			SendClientMessage(id, COLOR_GREEN, "Congratulations, you have won 500 Score from the Sponsor Giveaway.");
		}
	}
    SponsorGAOn = 0;
    Iter_Clear(Lottery);
	return 1;
}

CMD:gaticket(playerid)
{
	if(SponsorGAOn == 1) if(PlayerInfo[playerid][dRank] > 0) return ERR(playerid, "Only non VIPs can join this GA.");
	if(SponsorGAOn == 0) if(PlayerInfo[playerid][dRank] > 0) return ERR(playerid, "There currently is no running GA.");
	if(PlayerInfo[playerid][dRank] == 6) return ERR(playerid, "You are forbidden from joining Sponsor GAs.");
	if(Iter_Contains(Lottery, playerid)) return ERR(playerid, "You have already joined the GA.");
	SendClientMessage(playerid, COLOR_GREEN, "You have used a free ticket for the giveaway.");
	Iter_Add(Lottery, playerid);
	return 1;
}

CMD:sveh(playerid,params[])
{
	if(PlayerInfo[playerid][dRank] != 6) return ERR(playerid, "You need to be a Sponsor to use this cmd.");
	if(IsPlayerInAnyVehicle(playerid)) return ERR(playerid,"You already have a vehicle");
	new veh[50],cars;
	if(sscanf(params,"s[50]",veh)) return USG(playerid,"/Car [ Veh Name / Modeid]");
	if(!IsNumeric(veh)) cars = GetVehicleModelIDFromName(veh);
	else
	cars = strval(veh);
	if(cars < 400 || cars > 611) return  ERR(playerid,"Invalid Vehicle Model");
	switch(cars)
	{
		case 447,520,432,425,512,543,554,476: { ERR(playerid,"Cannot spawn heavy vehicles."); return 1;}
	}
	if(PlayerInfo[playerid][pCar] != -1) CarDeleter(PlayerInfo[playerid][pCar]);
	new LVehicleID,Float:X,Float:Y,Float:Z, Float:Angle,int1;	GetPlayerPos(playerid, X,Y,Z);	GetPlayerFacingAngle(playerid,Angle);   int1 = GetPlayerInterior(playerid);
	LVehicleID = CreateVehicle(cars, X+3,Y,Z, Angle, 1,1, -1); LinkVehicleToInterior(LVehicleID,int1);
	PutPlayerInVehicle(playerid, LVehicleID, 0);
	PlayerInfo[playerid][pCar] = LVehicleID;
	SendClientMessage(playerid,Lb, "You have spawned a \"%s\" (Model:%d)",VehicleNames[cars-400],cars);
	return 1;
}

CMD:carhealth(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new veh,Float:hp;
	if(sscanf(params,"df",veh,hp)) return USG(playerid,"/Carhealth [ ID ] [ HP ]");
	if(!IsPlayerConnected(veh)) return ERR(playerid,"Player Not Connected");
	if(!IsPlayerInAnyVehicle(veh)) return ERR(playerid,"Player not in vehicle");
	CMDMessageToAdmins(playerid,"CARHEALTH");
	SetVehicleHealth(GetPlayerVehicleID(veh), hp);
	SendClientMessage(playerid,Lb,"You have set \"%s's\" vehicle health to '%0.2f",PlayerInfo[veh][Nick],hp);
	return 1;
}

CMD:carcolour(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new id,c,cc;
	if(sscanf(params,"ddd",id,c,cc)) return USG(playerid,"/Carcolour [ ID / Name ] [ Colour 1 ] [ Colour 2 ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(!IsPlayerInAnyVehicle(id)) return ERR(playerid,"Player not in vehicle");
	CMDMessageToAdmins(playerid,"CARCOLOUR");
	ChangeVehicleColours(GetPlayerVehicleID(id),c,cc);
	SendClientMessage(playerid,Lb, "You have changed the colour of \"%s's\" %s to '%d,%d'", PlayerInfo[id][Nick], VehicleNames[GetVehicleModel(GetPlayerVehicleID(id))-400], c, cc );
	return 1;
}

CMD:god(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 1 || IsPlayerAdmin(playerid)) {
		if(PlayerInfo[playerid][God] == 0)	{
			PlayerInfo[playerid][God] = 1;
			SetPlayerHealth(playerid,1000000);
			GivePlayerWeapon(playerid, WEAPON_GRENADE, 50000); GivePlayerWeapon(playerid, WEAPON_SAWEDOFF, 50000);
			SendClientMessage(playerid,green,"GODMODE ON");
			return CMDMessageToAdmins(playerid,"GOD");
		} else {
			PlayerInfo[playerid][God] = 0;
			SendClientMessage(playerid,red,"GODMODE OFF");
			SetPlayerHealth(playerid, 100);
		} return GivePlayerWeapon(playerid, WEAPON_ROCKETLAUNCHER, 0);
	} else return ERRR(playerid,1);
}

CMD:godcar(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 1 || IsPlayerAdmin(playerid)) {
		if(IsPlayerInAnyVehicle(playerid)) {
			if(PlayerInfo[playerid][GodCar] == 0) {
				PlayerInfo[playerid][GodCar] = 1;
				CMDMessageToAdmins(playerid,"GODCAR");
				RepairVehicle(GetPlayerVehicleID(playerid));
				SetVehicleHealth(GetPlayerVehicleID(playerid), 99999999.0);
				return SendClientMessage(playerid,green,"GODCARMODE ON");
			} else {
				PlayerInfo[playerid][GodCar] = 0;
				return SendClientMessage(playerid,Dred,"GODCARMODE OFF"); }
		} else return ERR(playerid," You need to be in a car to use this command");
	} else return ERRR(playerid,4);
}

CMD:die(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 4 || IsPlayerAdmin(playerid)) {
		new Float:x, Float:y, Float:z ;
		GetPlayerPos( playerid, Float:x, Float:y, Float:z );
		CreateExplosion(Float:x+10, Float:y, Float:z, 8,10.0);
		CreateExplosion(Float:x-10, Float:y, Float:z, 8,10.0);
		CreateExplosion(Float:x, Float:y+10, Float:z, 8,10.0);
		CreateExplosion(Float:x, Float:y-10, Float:z, 8,10.0);
		CreateExplosion(Float:x+10, Float:y+10, Float:z, 8,10.0);
		CreateExplosion(Float:x-10, Float:y+10, Float:z, 8,10.0);
		return CreateExplosion(Float:x-10, Float:y-10, Float:z, 8,10.0);
	} else return ERRR(playerid,4);
}

CMD:getid(playerid,params[]) {
	if(isnull(params)) return USG(playerid,"/getid [part of nick]");
	new found, string[128], playername[MAX_PLAYER_NAME];
	format(string, _, "Searched for: \"%s\"", params);
	SendClientMessage(playerid,blue,string);
	foreach(new i : Player)
	{
		strcopy(playername, PlayerInfo[i][Nick]);
		new namelen = strlen(playername);
		new bool:searched=false;
		for(new pos=0; pos <= namelen; pos++)
		{

			if(!searched)
			{

				if(strfind(playername,params,true) == pos)
				{

					found++;
					SendClientMessage(playerid, green, "%d. %s (ID %d)", found, playername, i);
					searched = true;
				}
			}
		}
	}
	if(found == 0) SendClientMessage(playerid, lightblue, "No players have this in their nick");
	return 1;
}

CMD:asay(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 1) {
		if(isnull(params)) return USG(playerid," /asay [text]");
		CMDMessageToAdmins(playerid,"ASAY");
		return SendClientMessageToAll(COLOR_PINK, "***Admin: %s", params[0]);
	} else return ERRR(playerid,1);
}
CMD:msay(playerid,params[]) {
	if(PlayerInfo[playerid][Helper] == 1)
	{

		if(isnull(params)) return USG(playerid," /hsay [text]");
		return SendClientMessageToAll(red, "<!> Moderator %s: %s", PlayerInfo[playerid][Nick], params[0]);
	} else return ERR(playerid," You need to be Help moderator to use this command");
}
CMD:serverinfo(playerid,params[]) {
	new TotalVehicles = CreateVehicle(411, 0, 0, 0, 0, 0, 0, 1000);    DestroyVehicle(TotalVehicles);
	new numo = CreateDynamicObject(1245,0,0,1000,0,0,0);	DestroyDynamicObject(numo);
	new nump = CreatePickup(371,2,0,0,1000);	DestroyPickup(nump);
	new gz = GangZoneCreate(3,3,5,5);	GangZoneDestroy(gz);

	new model[250], nummodel;
	for(new i=1;i<TotalVehicles;i++)  model[GetVehicleModel(i)-400]++;
	for(new i=0;i<250;i++)	if(model[i]!=0)	nummodel++;

	SendClientMessage(playerid, green, "Server Info: [ Players Connected: %d || Maximum Players: %d ] [Ratio %0.2f ]", GetMaxPl(), MAX_PLAYERS, floatdiv(GetMaxPl(), MAX_PLAYERS));
	SendClientMessage(playerid, green, "Server Info: [ Vehicles: %d || Models %d || Players In Vehicle: %d || InCar %d / OnBike %d ]", TotalVehicles - 1, nummodel, InVehCount(), InCarCount(), OnBikeCount());
	SendClientMessage(playerid, green, "Server Info: [ Objects: %d || Pickups %d || Gangzones %d ]", numo - 1, nump, gz);
	return SendClientMessage(playerid, green, "Server Info: [ Players In Jail %d || Players Frozen %d || Muted %d ]",JailedPlayers(),FrozenPlayers(), MutedPlayers());
}

CMD:announce(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4 || IsPlayerAdmin(playerid)) {
		if(isnull(params)) return USG(playerid," /announce <text>");
		CMDMessageToAdmins(playerid,"ANNOUNCE");
		return GameTextForAll("~n~~n~~n~~n~~w~%s", 7000, 3, params);
	} else return ERRR(playerid,4);
}

CMD:announce2(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4 || IsPlayerAdmin(playerid)) {
		new st,ti,txx[70];
		if(sscanf(params,"dds[70]",st,ti,txx)) return USG(playerid,"/Announce2 [ Style 0 - 6 ] [ Time ] [ Text ]");
		if(st < 0 ||st > 6 || st == 2) return ERR(playerid,"Invalid Game Text");
		CMDMessageToAdmins(playerid,"ANNOUNCE2");
		return GameTextForAll(txx,ti,st);
	} else return ERRR(playerid,4);
}

CMD:ann(playerid,params[]) {
	return cmd_announce(playerid, params);
}

CMD:ann2(playerid,params[]) {
	return cmd_announce2(playerid, params);
}


CMD:jetpack(playerid,params[]) {
	if(isnull(params))	{
		if(PlayerInfo[playerid][Level] >= 1 || IsPlayerAdmin(playerid)) {
			SendClientMessage(playerid,Lb,"Jetpack Spawned.");
			CMDMessageToAdmins(playerid,"JETPACK");
			return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
		} else return ERRR(playerid,1);
	} else {
		new player1;
		player1 = strval(params);
		if(PlayerInfo[playerid][Level] > 3)
		{

			if(IsPlayerConnected(player1))
			{

				if(player1 != playerid)
				{

					CMDMessageToAdmins(playerid,"JETPACK");		SetPlayerSpecialAction(player1, SPECIAL_ACTION_USEJETPACK);
					SendClientMessage(player1, Lb, "Administrator \"%s\" has given you a jetpack", PlayerInfo[playerid][Nick]);
					SendClientMessage(playerid, Lb, "You have given %s a jetpack", PlayerInfo[player1][Nick]);
				}
			} else return ERR(playerid,"Player is not connected or is yourself");
		} else return ERRR(playerid,4);
	}
	return 1;
}

CMD:flip(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 1 || IsPlayerAdmin(playerid))
	{

		if(isnull(params))
		{

			if(IsPlayerInAnyVehicle(playerid))
			{

				new VehicleID, Float:X, Float:Y, Float:Z, Float:Angle; GetPlayerPos(playerid, X, Y, Z); VehicleID = GetPlayerVehicleID(playerid);
				GetVehicleZAngle(VehicleID, Angle);	SetVehiclePos(VehicleID, X, Y, Z); SetVehicleZAngle(VehicleID, Angle); SetVehicleHealth(VehicleID,1000.0);
				CMDMessageToAdmins(playerid,"FLIP");
				SendClientMessage(playerid,Lb,"Vehicle Flipped. You can also do /flip [playerid]");
			} else return ERR(playerid," You are not in a vehicle. You can also do /flip [playerid]");
		}
		new player1;
		player1 = strval(params);
		if(IsPlayerConnected(player1))
		{

			if(player1 != playerid)
			{

				CMDMessageToAdmins(playerid,"FLIP");
				if (IsPlayerInAnyVehicle(player1))
				{

					new VehicleID, Float:X, Float:Y, Float:Z, Float:Angle; GetPlayerPos(player1, X, Y, Z); VehicleID = GetPlayerVehicleID(player1);
					GetVehicleZAngle(VehicleID, Angle);	SetVehiclePos(VehicleID, X, Y, Z); SetVehicleZAngle(VehicleID, Angle); SetVehicleHealth(VehicleID,1000.0);
					CMDMessageToAdmins(playerid,"FLIP");
					SendClientMessage(player1, Lb, "Administrator %s flipped your vehicle",PlayerInfo[playerid][Nick]);
					SendClientMessage(playerid, Lb, "You have flipped %s's vehicle", PlayerInfo[player1][Nick]);
				} else return ERR(playerid," This player isn't in a vehicle");
			}
		} else return ERR(playerid,"Player is not connected or is yourself");
	} else return ERRR(playerid,2);
	return 1;
}

CMD:destroycar(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 2) return EraseVehicle(GetPlayerVehicleID(playerid));
	else return ERRR(playerid,3);
}
CMD:sv(playerid,params[]) return cmd_vspawn(playerid,params);
CMD:vspawn(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 1) return ERRR(playerid,1);
	new id = -1,Float:xx,Float:yy,Float:zz;
	if(sscanf(params,"d",id))
	{

		GetPlayerPos(playerid,xx,yy,zz);
		CMDMessageToAdmins(playerid,"VSPAWN");
		new TotalVehicles = CreateVehicle(411, 0, 0, 0, 0, 0, 0, 1000);    DestroyVehicle(TotalVehicles);
		for(new v=1; v < TotalVehicles; v ++)
		{

			if(GetVehicleDistanceFromPoint(v,xx,yy,zz) < 150)
			{

				if(!IsVehicleHasDriver(v))
				{

					SetVehicleToRespawn(v);
				}
			}
		}
		SendClientMessage(playerid,Lg,"* spawned vehicles in range");
	}
	if(id != -1)
	{
		if(!IsVehicleHasDriver(id))
		{
			CMDMessageToAdmins(playerid,"VSPAWN");
			SendClientMessage(playerid,Lg,"Respawned Vehicle ID: %d",id);
			SetVehicleToRespawn(id);
		}
	}
	return 1;
}

CMD:rac(playerid,params[]) return cmd_respawncars(playerid,params);
CMD:respawncars(playerid,params[])
{

	if(PlayerInfo[playerid][Level] > 1 || IsPlayerAdmin(playerid))
	{

		SendClientMessage(playerid, green, "|- Your have Successfully Respawned all Vehicles! -|");
		CMDMessageToAdmins(playerid,"Respawncars");
		new TotalVehicles = CreateVehicle(411, 0, 0, 0, 0, 0, 0, 1000);    DestroyVehicle(TotalVehicles);
		for(new cars=1; cars<TotalVehicles; cars++)
		{
			if(!IsVehicleHasDriver(cars))
			{
				SetVehicleToRespawn(cars);
				LinkVehicleToInterior(cars,0);
			}
		}
		return 1;
	}
	else return ERRR(playerid,4);
}

CMD:tc(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 1) {
		if(PlayerInfo[playerid][OnDuty] == 0) return ERR(playerid,"Only Onduty admins can use this command");
		if(!IsPlayerInAnyVehicle(playerid)) {
			if(PlayerInfo[playerid][pCar] != -1) CarDeleter(PlayerInfo[playerid][pCar]);
			new Float:X,Float:Y,Float:Z,Float:Angle,LVehicleIDt;	GetPlayerPos(playerid,X,Y,Z); GetPlayerFacingAngle(playerid,Angle);
			LVehicleIDt = CreateVehicle(560,X,Y,Z,Angle,1,-1,-1);
			PutPlayerInVehicle(playerid,LVehicleIDt,0);
			CMDMessageToAdmins(playerid,"LTunedCar");
			AddVehicleComponent(LVehicleIDt, 1028);	AddVehicleComponent(LVehicleIDt, 1030);
			AddVehicleComponent(LVehicleIDt, 1031);	AddVehicleComponent(LVehicleIDt, 1138);
			AddVehicleComponent(LVehicleIDt, 1140);  AddVehicleComponent(LVehicleIDt, 1170);
			AddVehicleComponent(LVehicleIDt, 1028);	AddVehicleComponent(LVehicleIDt, 1030);	AddVehicleComponent(LVehicleIDt, 1031);	AddVehicleComponent(LVehicleIDt, 1138);	AddVehicleComponent(LVehicleIDt, 1140);  AddVehicleComponent(LVehicleIDt, 1170);
			AddVehicleComponent(LVehicleIDt, 1080);	AddVehicleComponent(LVehicleIDt, 1086); AddVehicleComponent(LVehicleIDt, 1087); AddVehicleComponent(LVehicleIDt, 1010);	PlayerPlaySound(playerid,1133,0.0,0.0,0.0);	ChangeVehiclePaintjob(LVehicleIDt,0);
			SetVehicleVirtualWorld(LVehicleIDt, GetPlayerVirtualWorld(playerid)); LinkVehicleToInterior(LVehicleIDt, GetPlayerInterior(playerid));
			return PlayerInfo[playerid][pCar] = LVehicleIDt;
		} else return ERR(playerid, "You already have a vehicle");
	} else return ERRR(playerid,1);
}

CMD:move(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 1 || IsPlayerAdmin(playerid))
	{
		if(PlayerInfo[playerid][OnDuty] == 0) if(PlayerInfo[playerid][Level] < 4) return ERR(playerid,"Only Onduty admins can use this command");
		new moved, target;
		if(sscanf(params,"dd",moved,target)) return USG(playerid,"/move (playerid) (target playerid)");
		if(!IsPlayerConnected(moved)) return ERR(playerid, "Player to move is not connected");
		if(!IsPlayerConnected(target)) return ERR(playerid, "Target player is not connected");
		if(moved == target) return ERR(playerid, "Cannot move the player to themselves");
		CMDMessageToAdmins(playerid,"MOVE");
		new Float:x, Float:y, Float:z;	GetPlayerPos(target,x,y,z); SetPlayerInterior(moved,GetPlayerInterior(target));
		SetPlayerVirtualWorld(moved,GetPlayerVirtualWorld(target));
		if(GetPlayerState(moved) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(GetPlayerVehicleID(moved),x+3,y,z);	LinkVehicleToInterior(GetPlayerVehicleID(moved),GetPlayerInterior(target));
			SetVehicleVirtualWorld(GetPlayerVehicleID(moved),GetPlayerVirtualWorld(target));
		} else SetPlayerPos(moved,x+2,y,z);
		new nam[3][24];
		strcat(nam[0], PlayerInfo[playerid][Nick]); strcat(nam[1], PlayerInfo[target][Nick]); strcat(nam[2], PlayerInfo[moved][Nick]);
		SendClientMessage(playerid, Lb, "You have moved %s(%d) to %s(%d)", nam[2], moved, nam[1], target);
		SendClientMessage(moved, Lb, "Admin %s moved you to %s", nam[0], nam[1]);
		SendClientMessage(target, Lb, "Admin %s moved %s to you", nam[0], nam[2]);
	} else return ERRR(playerid,2);
	return 1;
}

CMD:goto(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 1 || IsPlayerAdmin(playerid))
	{

		if(PlayerInfo[playerid][OnDuty] == 0)
		{

			if(PlayerInfo[playerid][Level] < 4) return ERR(playerid,"Only Onduty admins can use this command");
		}
		if(isnull(params)) return USG(playerid,"/goto [ID]");
		new player1;
		if(!IsNumeric(params)) player1 = ReturnPlayerID(params);
		else player1 = strval(params);
		if(IsPlayerConnected(player1))
		{

			if(player1 != playerid)
			{

				CMDMessageToAdmins(playerid,"GOTO");
				new Float:x, Float:y, Float:z;	GetPlayerPos(player1,x,y,z); SetPlayerInterior(playerid,GetPlayerInterior(player1));
				SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(player1));
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{

					SetVehiclePos(GetPlayerVehicleID(playerid),x+3,y,z);	LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(player1));
					SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(player1));
				} else SetPlayerPos(playerid,x+2,y,z);
				SendClientMessage(playerid, Lb, "You have teleported to \"%s\"", PlayerInfo[player1][Nick]);
			}
		} else return ERR(playerid, "Player is not connected or is yourself");
	} else return ERRR(playerid,2);
	return 1;
}

CMD:get(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 1|| IsPlayerAdmin(playerid)) {
		if(PlayerInfo[playerid][OnDuty] == 0)
		{

			if(PlayerInfo[playerid][Level] < 4) return ERR(playerid,"Only Onduty admins can use this command");
		}
		if(isnull(params)) return USG(playerid,"/Get [ ID ]");
		new player1;
		if(!IsNumeric(params)) player1 = ReturnPlayerID(params);
		else player1 = strval(params);
		if(IsPlayerConnected(player1))
		{

			if(player1 != playerid) {
				CMDMessageToAdmins(playerid,"GET");
				new Float:x, Float:y, Float:z;	GetPlayerPos(playerid,x,y,z); SetPlayerInterior(player1,GetPlayerInterior(playerid));
				SetPlayerVirtualWorld(player1,GetPlayerVirtualWorld(playerid));
				if(GetPlayerState(player1) == PLAYER_STATE_DRIVER)	{
					new VehicleID = GetPlayerVehicleID(player1);
					SetVehiclePos(VehicleID,x+3,y,z);   LinkVehicleToInterior(VehicleID,GetPlayerInterior(playerid));
					SetVehicleVirtualWorld(GetPlayerVehicleID(player1),GetPlayerVirtualWorld(playerid));
				} else SetPlayerPos(player1,x+2,y,z);
				SendClientMessage(player1, blue, "You have been teleported to Administrator \"%s's\" location", PlayerInfo[playerid][Nick]);
				SendClientMessage(playerid, blue, "You have teleported \"%s\" to your location", PlayerInfo[player1][Nick]);
			}
		} else return ERR(playerid,"Player is not connected or is yourself");
	} else return ERRR(playerid,2);
	return 1;
}


WarnPlaya(playerid, const admi[], const ress[])
{
	PlayerTextDrawSetString(playerid, WARN[playerid][2], "Admin: ~r~~h~%s~n~~w~~h~Reason: ~r~~h~%s~n~~w~~h~WARNINGS: ~r~~h~%d/%d", admi, ress, PlayerInfo[playerid][Warnings], MAX_WARNINGS);
	PlayerTextDrawShow(playerid,WARN[playerid][0]);
	PlayerTextDrawShow(playerid,WARN[playerid][1]);
	PlayerTextDrawShow(playerid,WARN[playerid][2]);
	SetTimerEx("WarnPlayer", 8000, false, "d", playerid);
	TogglePlayerControllable(playerid,false);
}

forward WarnPlayer(playerid);
public WarnPlayer(playerid)
{
	PlayerTextDrawHide(playerid,WARN[playerid][0]);
	PlayerTextDrawHide(playerid,WARN[playerid][1]);
	PlayerTextDrawHide(playerid,WARN[playerid][2]);
	TogglePlayerControllable(playerid,true);
	return 1;
}

CMD:namerequests(playerid)
{
    if(PlayerInfo[playerid][Level] > 1)
	{
	    new dialog_str[6000], count;

		foreach(new i: Player)
		{
		    if(PlayerInfo[i][nameapp])
		    {
		        NAMEREQ[playerid][count] = i;
		        format(dialog_str, _, "%s{FFFFFF}Player: {00FF00}%s(%i) {FFFFFF}| To: {00FF00}%s\n", dialog_str, PlayerInfo[i][Nick], i, PlayerInfo[i][n_newname]);
		        count++;
		    }
		}
	    if(count) ShowPlayerDialog(playerid, DIALOG_NAMEREQUESTS, DIALOG_STYLE_LIST, "{03FCFC}Name Change Requests", dialog_str, "Select", "Cancel");
	    else ShowPlayerDialog(playerid, DIALOG_NAMEREQUESTS, DIALOG_STYLE_LIST, "{03FCFC}Name Change Requests", "{FFFFFF}No name change requests available.", "Select", "Cancel");
	}
	else ERRR(playerid,3);
	return 1;
}

CMD:asettings(playerid)
{
	if(PlayerInfo[playerid][Level] > 0 || PlayerInfo[playerid][Helper] == 1)
	{
	    new dialog_str[600];

	    if(Bit_Get(ToggleState[playerid], TOGGLE_CMDTDS))
	    {
	        dialog_str = "{00FF00}Command Logs (Enabled)\n";
	    }
	    else dialog_str = "{FF0000}Command Logs (Disabled)\n";

	    if(Bit_Get(ToggleState[playerid], TOGGLE_SPECTDS))
	    {
	        strcat(dialog_str, "{00FF00}Spectator Panel (Enabled)\n");
	    }
	    else strcat(dialog_str, "{FF0000}Spectator Panel (Disabled)\n");

	    if(Bit_Get(ToggleState[playerid], TOGGLE_ACNOT))
	    {
	        strcat(dialog_str, "{00FF00}Anti-Cheat Notifications (Enabled)\n");
	    }
	    else strcat(dialog_str, "{FF0000}Anti-Cheat Notifications (Disabled)\n");

	    if(PlayerInfo[playerid][namekey])
	    {
	        strcat(dialog_str, "{00FF00}'N' key to instantly open name change requests (Level 3+) (Enabled)\n");
	    }
	    else strcat(dialog_str, "{FF0000}'N' key to instantly open name change requests (Level 3+) (Disabled)\n");

	    ShowPlayerDialog(playerid, DIALOG_ASETTINGS, DIALOG_STYLE_LIST, "{03FCFC}Admin Settings", dialog_str, "Select", "Cancel");
	}
	else ERRR(playerid,1);
	return 1;
}

CMD:warn(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 0 || PlayerInfo[playerid][Helper] == 1) {
		new id,wy[50];
		if(sscanf(params,"ds[50]",id,wy)) return USG(playerid,"/Warn [ ID / Name ] [ Reason ]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
		if((GetTickCount() - Anti_Warn[0][id]) < 15000) return ERR(playerid,"Player Already Warned recently");
		PlayerInfo[id][Warnings]++;
		CMDMessageToAdmins(playerid,"WARN");
		new warnn = PlayerInfo[id][Warnings];
		if(warnn >= MAX_WARNINGS)
		{
			SendClientMessageToAll(red,"[TBAN] %s Has been banned for 12 hours for exceeding max warnings (%d/%d)",PlayerInfo[id][Nick],warnn,MAX_WARNINGS);
			PlayerInfo[id][Warnings] = 0;
			new Hour, Minute, Second, Timestamp;
			Timestamp = gettime(Hour, Minute, Second);
			COD_TBAN(id,PlayerInfo[playerid][Nick],"Exceeding max warnings",12*3600+0*60+Timestamp);
		}else
		{
		    new nam[2][24]; strcat(nam[0], PlayerInfo[playerid][Nick]);
		    strcat(nam[1], PlayerInfo[id][Nick]);
			if(PlayerInfo[playerid][Helper] > 0 ) SendClientMessageToAll(-1, "{E70E4F}[WARN] Moderator \"%s\" Has warned %s(%d)| Reason: (%s) (%d/%d) ", nam[0], nam[1], id, wy, warnn, MAX_WARNINGS);
			if(PlayerInfo[playerid][Level] > 0)
			{
				SendClientMessageToAll(-1, "{E70E4F}[WARN] Administrator{E70E4F} \"%s\" Has warned %s(%d)| Reason: (%s) (%d/%d)", nam[0], nam[1], id, wy, warnn, MAX_WARNINGS);
				WarnPlaya(id, nam[0], wy);
			}
			else
			{
				if(PlayerInfo[playerid][Level] > 0) SendClientMessageToAll(-1, "{E70E4F}[WARN] An Administrator{E70E4F} Has warned %s(%d)| Reason: (%s) (%d/%d)", nam[1], id, wy, warnn, MAX_WARNINGS);
				WarnPlaya(id, "An Admin", wy);
			}
			Anti_Warn[0][id] = GetTickCount();
		}
	}else ERRR(playerid,1);
	return 1;
}

CMD:unwarn(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 0 || PlayerInfo[playerid][Helper] == 1) {
		new id,wy[50];
		if(sscanf(params,"ds[50]",id,wy)) return USG(playerid,"/unwarn [ ID / Name ] [ Reason ]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
		if((GetTickCount() - Anti_Warn[1][id]) < 15000) return ERR(playerid,"Player Already unwarned recently");
		if(PlayerInfo[id][Warnings] == 0) return ERR(playerid, "Player has no warnings.");
		PlayerInfo[id][Warnings]--;
		CMDMessageToAdmins(playerid,"UNWARN");
		if(PlayerInfo[playerid][Level] > 0) SendClientMessageToAll(COLOR_YELLOW,"[UNWARN] Administrator{E70E4F} \"%s\" Has unwarned %s(%d)| Reason: (%s) (%d/%d)",PlayerInfo[playerid][Nick],PlayerInfo[id][Nick],id,wy);
		else SendClientMessageToAll(COLOR_YELLOW,"[UNWARN] Moderator \"%s\" Has warned %s(%d)| Reason: (%s)",PlayerInfo[playerid][Nick],PlayerInfo[id][Nick],id,wy);
		Anti_Warn[1][id] = GetTickCount();
	}else ERRR(playerid,1);
	return 1;
}
CMD:kick(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 0 || PlayerInfo[playerid][Helper] == 1) {
		new id,res[50];
		if(sscanf(params,"ds[50]",id,res)) return USG(playerid,"/Kick [ ID] [ Reason ]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
		if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on this admin");
		if(id==playerid) return ERR(playerid, "Cannot kick yourself.");
		CMDMessageToAdmins(playerid,"KICK");
		PlayerInfo[playerid][Rage] ++;
		if(PlayerInfo[playerid][Rage] == 5)
		{
			PlayerInfo[playerid][Level] = 0;
			PlayerInfo[playerid][Helper] = 0;
			COD_BAN(playerid,"Server","/kick abuse");
			return 0;
		}
		//SendLogG("kick","%s has kicked %s for %s",GetName(playerid),GetName(id),res);
		new lvl = PlayerInfo[playerid][Level];
		if(lvl > 0)
		{
			new nam[24]; strcat(nam, PlayerInfo[id][Nick]);
			if(PlayerInfo[id][Level] >= lvl)
			{
				COD_BAN(playerid,nam,"Trying to ban admin");
				SendClientMessage(playerid,red,"BAN | %s has been permanently banned by an Admin ( Reason : Trying to ban higher level admin )",nam);
				SendClientMessage(playerid,red,"[BAN] You have been banned from the server if you think this is a mistake make a ban appeal at our foum "cblue" www.mw3-samp.org");
				return 0;
			}
			SendClientMessageToAll(red,"KICK | %s Has been kicked by an Admin | Reason : %s",nam,res);
			KickX(id);
		}
		else
		{
			SendClientMessageToAll(red,"KICK | %s Has been kicked by Moderator | Reason : %s",PlayerInfo[id][Nick],res);
			KickX(id);
		}

	}else return ERRR(playerid,1);
	return 1;
}

CMD:dmk(playerid,params[]) return cmd_dmusickit(playerid,params);
CMD:dmusickit(playerid,params[])
{
	if(PlayerInfo[playerid][dRank] > 2)
	{
		new str[350];
		strcat(str, "None\nI Am\nDisgusting\nJava Havana\nMoments",sizeof str);
		strcat(str, "\nDiamonds\nInvasion!\nII-Headshot\nThe 8-Bit Kit\nBattlepack\nMOLOTOV",sizeof str);
		strcat(str, "\nUber Blasto\nHotline Miami\nTotal Domination\nAll I Want for Christmas",sizeof str);
		strcat(str, "\nIsoRhythm\nFor No Mankind\nMetal\nSharpened\nHigh Noon\nDesert Fire",sizeof str);
		ShowPlayerDialog(playerid, DMUSICD, DIALOG_STYLE_LIST, "Donor Killing Music Kits", str, "Preview", "Set");
		SendClientMessage(playerid, -1, "NOTE: PLEASE use the left dialog button to set your music, previewing it only will not set it.");
	}else return SendClientMessage(playerid,red,"ERROR: You Need Atleast Donor Rank 3 To Use This Command");
	return 1;
}

CMD:dbike(playerid,params[]) {
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You cannot use this command while in a duel!");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use that feature in DM stadiums!");
	if(PlayerInfo[playerid][dRank] < 2) return ERR(playerid," You Need Atleast Donor Rank 2 To Use This Command");
	new remain = GetTickCount() - PlayerInfo[playerid][VIPCMD];
	if( remain < 50000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use a vip command again", (50000 - remain) / 1000);
		return 1;
	}
	PlayerInfo[playerid][VIPCMD] = GetTickCount();
	CarSpawner(playerid,522);
	return 1;
}

CMD:inv(playerid) {
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You cannot use this command while in a duel!");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use that feature in DM stadiums!");
	if(PlayerInfo[playerid][dRank] < 4) return ERR(playerid," You Need Atleast Donor Rank 4 To Use This Command");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!CanInvis[vehicleid]) return ERR(playerid, "Only /dbike and /dcar can be turned invisible");
	new kk = IsInvis[vehicleid];
	if(!kk)
	{

		GameTextForPlayer(playerid, "~g~Invisible!", 2000, 3);
		LinkVehicleToInterior(vehicleid, 55);
		SetPlayerChatBubble(playerid,"[VIP] I turned my vehicle invisible",Lg,50,6000);
	}
	else
	{

		GameTextForPlayer(playerid, "~r~Visible!", 2000, 3);
		LinkVehicleToInterior(vehicleid, 0);
		SetPlayerChatBubble(playerid,"[VIP] I turned my vehicle visible",Lg,50,6000);
	}
	IsInvis[vehicleid] = !kk;
	return 1;
}

CMD:ainv(playerid) {
	if(PlayerInfo[playerid][Level] < 8 ) return 0;
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!CanAInvis[vehicleid]) return ERR(playerid, "Only admin vehicles (/car) can be turned invisible");
	new kk = IsAInvis[vehicleid];
	if(!kk)
	{

		GameTextForPlayer(playerid, "~g~Fully Invisible!", 2000, 3);
		LinkVehicleToInterior(vehicleid, 55);
		DestroyDynamic3DTextLabel(RankLabel[playerid]);
		foreach(new i : Player) ShowPlayerNameTagForPlayer(i, playerid, false);
	}
	else
	{

		GameTextForPlayer(playerid, "~r~Fully Visible!", 2000, 3);
		LinkVehicleToInterior(vehicleid, 0);
		RankLabel[playerid] = CreateDynamic3DTextLabel("....", 0x008080FF, 0.0, 0.0, 0.5, 50.0, playerid);
		UpdateLabelText(playerid);
		foreach(new i : Player) ShowPlayerNameTagForPlayer(i, playerid, true);
	}
	IsAInvis[vehicleid] = !kk;
	return 1;
}

CMD:dcar(playerid,params[]) {
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You cannot use this command while in a duel!");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid,Dred,"Nice try!");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	if(PlayerInfo[playerid][dRank] < 1) return ERR(playerid," You Need Atleast Donor Rank 1 To Use This Command");
	new remain = GetTickCount() - PlayerInfo[playerid][VIPCMD];
	if( remain < 50000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use a vip command again", (50000 - remain) / 1000);
		return 1;
	}
	PlayerInfo[playerid][VIPCMD] = GetTickCount();
	CarSpawner(playerid,411);
	return 1;
}
CMD:dvehicle(playerid,params[]) {
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You cannot use this command while in a duel!");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid,Dred,"Nice try!");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	if(PlayerInfo[playerid][dRank] < 2) return ERR(playerid," You Need Atleast Donor Rank 2 To Use This Command");
	new remain = GetTickCount() - PlayerInfo[playerid][VIPCMD];
	if( remain < 50000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use a vip command again", (50000 - remain) / 1000);
		return 1;
	}
	PlayerInfo[playerid][VIPCMD] = GetTickCount();
	ShowModelSelectionMenu(playerid, vehiclelist, "Select Vehicle");
	return 1;
}

CMD:dcolor(playerid, params[]) return cmd_dcc(playerid, params);

CMD:dcc(playerid, params[])
{
	if(PlayerInfo[playerid][InDuel] == 1) return SendClientMessage(playerid,Dred,"* You cannot use this command while in a duel!");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid,Dred,"Nice try!");
	if(PlayerInfo[playerid][dRank] < 1) return ERR(playerid,"ERROR: You Need Atleast Donor Rank 1 To Use This Command");
	new col[2];
	if(sscanf(params, "ii",col[0],col[1])) return ERR(playerid,"USAGE: /dcc (Col-1) (Col-2)");
	ChangeVehicleColours(GetPlayerVehicleID(playerid), col[0],col[1]);
	SendClientMessage(playerid,blue ,"Vehicle Color changed.");
	return 1;
}

CMD:dfix(playerid,params[])
{
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid,red,"ERROR: Cannot use this cmd right now");
	if(PlayerInfo[playerid][dRank] < 1)  return ERRR(playerid,1);
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use that feature in DM stadiums!");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	new remain = GetTickCount() - PlayerInfo[playerid][VIPCMD];
	if( remain < 50000 )
	{

		SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use a vip command again", (50000 - remain)/1000);
		return 1;
	}
	RepairVehicle(GetPlayerVehicleID(playerid));
	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
	PlayerInfo[playerid][VIPCMD] = GetTickCount();
	SendClientMessage(playerid,Lg,"You have fixed your own Vehicle");
	return 1;
}
CMD:dskin(playerid,params[]) {
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][dRank] < 3) return ERR(playerid," You Need Atleast Donor Rank 3 To Use This Command");
	if(isnull(params)) return USG(playerid," /dskin [skinid]");
	new var = strval(params);
	if(!IsValidSkin(var)) return ERR(playerid," Invaild Skin ID");
	if(var == 217) return ERR(playerid," You Can't Use Admin Skin!");
	SetPlayerSkin(playerid,var);
	return 1;
}
CMD:dtext(playerid,params[]) {
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][dRank] < 3) return ERR(playerid," You Need Atleast Donor Rank 4 To Use This Command");
	if(strlen(params) > 10) return ERR(playerid, "VIP text should contain 10 characters at max");
	new remain = GetTickCount() - PlayerInfo[playerid][VIPCMD2];
	if( remain < 50000 )
	{
		SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use a vip command again", (50000 - remain)/1000);
		return 1;
	}
	if(isnull(params))
	{
		SendClientMessage(playerid,-1," /dtext disabled.");
		VIPLabel[playerid][0] = '\0';
	}
	else
	{
		format(VIPLabel[playerid], _, "VIP: %s", params);
		SendClientMessage(playerid, Lg, "[VIP]: You have successfully set your VIP Text on your character.");
	}
	UpdateLabelText(playerid);
	PlayerInfo[playerid][VIPCMD2] = GetTickCount();
	new query[120];
	mysql_format(mysql, query, sizeof(query),"UPDATE `playerbase` SET `dtxt` ='%e' WHERE `id` ='%d' LIMIT 1", VIPLabel[playerid], PlayerInfo[playerid][AID]);
	mysql_tquery(mysql, query);
	return 1;
}
CMD:dh(playerid) return cmd_dheal(playerid);
CMD:dheal(playerid)
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid,red,"ERROR: Cannot use this cmd right now");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use that feature in DM stadiums!");
	if(PlayerInfo[playerid][dRank] < 1) return ERR(playerid," You Need Atleast Donor Rank 1 To Use This Command");
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid,"This command cannot be used in PUBG event.");
	new remain = GetTickCount() - PlayerInfo[playerid][VIPCMD];
	if( remain < 50000 )
	{

		SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use a vip command again", (50000 - remain)/1000);
		return 1;
	}
	PlayerInfo[playerid][VIPCMD] = GetTickCount();
	SetPlayerHealth(playerid,100);
	SendClientMessage(playerid,yellow,"Health Restored!");
	return 1;
}
CMD:da(playerid) return cmd_darmour(playerid);
CMD:darmour(playerid) {
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid,red,"ERROR: Cannot use this cmd right now");
	if(PlayerInfo[playerid][dRank] < 1) return ERR(playerid," You Need Atleast Donor Rank 1 To Use This Command");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use that feature in DM stadiums!");
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid,"This command cannot be used in PUBG event.");
	new remain = GetTickCount() - PlayerInfo[playerid][VIPCMD];
	if( remain < 50000 )
	{

		SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use a vip command again", (50000 - remain)/1000);
		return 1;
	}
	PlayerInfo[playerid][VIPCMD] = GetTickCount();
	SetPlayerArmour(playerid, 97.0);
	SendClientMessage(playerid,yellow,"Armour Restored!");
	return 1;
}
CMD:dweap(playerid,params[]) {
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid,red,"ERROR: Cannot use this cmd right now");
	if(PlayerInfo[playerid][dRank] < 2) return ERR(playerid," You Need Atleast Donor Rank 2 To Use This Command");
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid,"This command cannot be used in PUBG event.");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use that feature in DM stadiums!");
	if(AntiSK[playerid]) return ERR(playerid, "You cannot use this cmd under spawn kill protection.");
	new remain = GetTickCount() - PlayerInfo[playerid][VIPCMD];
	if( remain < 50000 )
	{

		SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use a vip command again", (50000 - remain)/1000);
		return 1;
	}
	PlayerInfo[playerid][VIPCMD] = GetTickCount();
	GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 500);
	GivePlayerWeapon(playerid, WEAPON_DEAGLE, 500);
	GivePlayerWeapon(playerid, WEAPON_TEC9, 500);
	GivePlayerWeapon(playerid, WEAPON_ROCKETLAUNCHER, 1);
	GivePlayerWeapon(playerid, WEAPON_GRENADE, 2);
	if(IsPlayerInAnyVehicle(playerid)) SetPlayerArmedWeapon(playerid, WEAPON_FIST);
	return 1;
}

CMD:dw(playerid, params[]) return cmd_dweather(playerid, params);
CMD:dweather(playerid,params[])
{
	if(PlayerInfo[playerid][dRank] < 2) return ERR(playerid," You Need Atleast Donor Rank 2 To Use This Command");
	SetPlayerWeather(playerid, strval(params));
	return 1;
}


CMD:dnos(playerid,params[])
{
	if(PlayerInfo[playerid][dRank] < 1) return ERR(playerid," You Need Atleast Donor Rank 1 To Use This Command");
	if(!IsPlayerInAnyVehicle(playerid)) return ERR(playerid," You Need be In Vehicle!");
	if(GetPlayerMoney(playerid) < 9000) return ERR(playerid," You Need $9000!");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	new remain = GetTickCount() - PlayerInfo[playerid][VIPCMD];
	if( remain < 50000 )
	{

		SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use a vip commands again", (50000 - remain)/1000);
		return 1;
	}
	PlayerInfo[playerid][VIPCMD] = GetTickCount();
	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010); // Nitro
	GiveCash(playerid,-9000);
	return 1;
}
CMD:dboost(playerid)
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][InDuel]) return SendClientMessage(playerid,red,"ERROR: Cannot use this cmd right now");
	if(!InArena(playerid, NON)) return SendClientMessage(playerid, RED,"You can't use that feature in DM stadiums!");
	if(PlayerInfo[playerid][dRank] < 2) return ERR(playerid," You Need Atleast Donor Rank 2 To Use This Command");
	if(inevent[playerid] > 0) return ERR(playerid," You cannot use this cmd in events.");
	if(!CheckNearBy(playerid)) return SendClientMessage(playerid,Dred,"* Enemey Nearby You cant use this command now");
	new remain = GetTickCount() - PlayerInfo[playerid][VIPCMD];
	if( remain < 50000 )
	{

		SendClientMessage(playerid,Lg,"Please wait (%d) second(s) to use a vip command again", (50000 - remain)/1000);
		return 1;
	}
	PlayerInfo[playerid][VIPCMD] = GetTickCount();
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	SendClientMessage(playerid,Lg,"* 1 RPG, 2 Grenades and 20HP & 20 Armor to teammates in range");
	new kk = GetPlayerTeam(playerid);
	foreach(new i : Player)
	{
		if(GetPlayerTeam(i) == kk)
		{
			if(i != playerid)
			{
				if(IsPlayerInRangeOfPoint(i,10.0,x,y,z))
				{
                    DBoosts[playerid] ++;
                    if(QuestContent[3] == CONTENT_DBOOST)
					{
						QuestProgress[playerid][3] ++;
					    if(DBoosts[playerid] == 50)
					    {
					    	if(!Bit_Get(QuestDone[playerid], 3))
					    	{
					    	    Bit_Let(QuestDone[playerid], 3);
					    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 4 and got $50k & 100XP.");
					    	    TextDrawHideForPlayer(playerid,Quest[3]);
					    	    PlayerInfo[playerid][XP] += 100;
					    	    GiveCash(playerid, 50000);
					    	}
						}
					}
					dBoostRequest[i] = true;
					SendClientMessage(i, COLOR_YELLOW, "You have been offered a donor boost, please use /accept to accept it.");
					SetTimerEx("RejectBoost", 10000, false, "d",i);
				}
			}
		}
	}
	return 1;
}

forward RejectBoost(playerid);
public RejectBoost(playerid)
{
	if(dBoostRequest[playerid])
	{
		dBoostRequest[playerid] = false;
		SendClientMessage(playerid, COLOR_YELLOW, "The dboost request has expired and automatically been rejected.");
	}
	return 1;
}

CMD:accept(playerid)
{
	if(!dBoostRequest[playerid]) return ERR(playerid, "You don't have any donor boost request.");
	GivePlayerWeapon(playerid, WEAPON_GRENADE, 2);
	GivePlayerWeapon(playerid, WEAPON_ROCKETLAUNCHER, 1);
	new Float:HP;
	dBoostRequest[playerid] = false;
	GetPlayerHealth(playerid,HP);
	if(HP < 80) SetPlayerHealth(playerid, HP + 20.0);
	GetPlayerArmour(playerid,HP);
	if(HP < 80) SetPlayerArmour(playerid, HP + 20.0);
	return 1;
}

CMD:setvip(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 5) return ERRR(playerid,5);
	new id,vi;
	if(sscanf(params,"dd",id,vi)) return USG(playerid,"/Setvip [ ID / Name ] [ VIP ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][dRank] == vi) return ERR(playerid,"Player already have this vip level ");
	if(vi > 6 || vi < 0) return ERR(playerid,"Invalid Vip Level");
	CMDMessageToAdmins(playerid,"SETVIP");
	if(vi > PlayerInfo[id][dRank]) { if(vi == 6) GameTextForPlayer(id,"~g~Promoted to Sponsor",5000,3); else GameTextForPlayer(id,"~g~Promoted to VIP",5000,3); }
	SendClientMessage(playerid,Lb,"You have set \"%s's\" VIP Level to '%d", PlayerInfo[id][Nick], vi);
	SendClientMessage(id,Lg,"Administrator \"%s\" has set your VIP Level to '%d'",PlayerInfo[playerid][Nick],vi);
	new Query[148];
	mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `vip`=%d WHERE `id` =%d LIMIT 1",vi, PlayerInfo[id][AID]);
	mysql_tquery(mysql, Query);
	new dbid = PlayerInfo[id][AID];
	if(vi == 5 || vi == 4)
	{
	    mysql_format(mysql, Query, sizeof(Query), "CREATE EVENT `'%d'_viptemp` ON SCHEDULE AT CURRENT_TIMESTAMP() + INTERVAL 30 DAY DO UPDATE `playerbase` SET `vip`=3 WHERE `id`='%d'",dbid,dbid);
		mysql_tquery(mysql, Query);
	}
	PlayerInfo[id][dRank] = vi;
	return 1;
}


CMD:givepackage(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 5) return ERRR(playerid,5);
	new id,vi;
	if(sscanf(params,"dd",id,vi)) return USG(playerid,"/givepackage [ ID / Name ] [ Package Level ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][dRank] == vi) return ERR(playerid,"Player already has the vip level of this package. (maybe he already received package?)");
	if(vi > 5 || vi < 1) return ERR(playerid,"Invalid Vip Package");
	CMDMessageToAdmins(playerid,"GIVEPACKAGE");
	SendClientMessage(playerid,Lb,"You have given %s VIP Package '%d", PlayerInfo[id][Nick], vi);
	SendClientMessage(id,Lg,"Administrator %s has given you VIP Package '%d'",PlayerInfo[playerid][Nick],vi);
	new Query[148];
	mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `vip`=%d WHERE `id` =%d LIMIT 1",vi, PlayerInfo[id][AID]);
	mysql_tquery(mysql, Query);
	new dbid = PlayerInfo[id][AID];
	if(vi == 5 || vi == 4)
	{
	    mysql_format(mysql, Query, sizeof(Query), "CREATE EVENT `'%d'_viptemp` ON SCHEDULE AT CURRENT_TIMESTAMP() + INTERVAL 30 DAY DO UPDATE `playerbase` SET `vip`=3 WHERE `id`='%d'",dbid,dbid);
		mysql_tquery(mysql, Query);
	}
	PlayerInfo[id][dRank] = vi;
	switch(vi)
	{
	    case 1:
	    {
	        GiveCash(id, 500000);
	        SetPlayerScore(id, GetPlayerScore(id) + 250);
	        PlayerInfo[id][Deaths] -= 250;
	    }
	    case 2:
	    {
	        GiveCash(id, 2500000);
	        SetPlayerScore(id, GetPlayerScore(id) + 500);
	        PlayerInfo[id][Deaths] -= 500;
	    }
	    case 3:
	    {
	        GiveCash(id, 5000000);
	        SetPlayerScore(id, GetPlayerScore(id) + 1000);
	        PlayerInfo[id][Deaths] -= 1000;
	    }
	    case 4:
	    {
	        GiveCash(id, 15000000);
	        SetPlayerScore(id, GetPlayerScore(id) + 2500);
	        PlayerInfo[id][Deaths] -= 2500;
	    }
	    case 5:
	    {
	        GiveCash(id, 2500000);
	        SetPlayerScore(id, GetPlayerScore(id) + 500);
	        PlayerInfo[id][Deaths] -= 500;
	    }
	}
	return 1;
}

CMD:undercover(playerid, params[])
{
	if(PlayerInfo[playerid][Level] < 4) return ERRR(playerid, 4);
	new fake_name[24];
	if(!PlayerInfo[playerid][is_undercover])
	{
	    if(sscanf(params,"s[24]",fake_name)) return USG(playerid, "/undercover [ Fake Name ]");
	    new str[128], name[24];
		strcat(name, PlayerInfo[playerid][Nick]);
		new reason = random(3);
		if(reason == 0) str = "Timeout/Crash";
		else if(reason == 1) str = "Quit";
		else if(reason == 2) str = "Kick/Ban";
		format(str, _, "~w~~h~%s ~w~has ~r~left ~w~the server (%s)", name, str);
		BoxMSG(str);
		PlayerInfo[playerid][is_undercover] = true;
		PlayerInfo[playerid][undercover_score] = GetPlayerScore(playerid);
		GetPlayerName(playerid, PlayerInfo[playerid][undercover_realname], MAX_PLAYER_NAME);
		SetPlayerScore(playerid, random(100));
		SetPlayerName(playerid, fake_name);
		strcopy(PlayerInfo[playerid][Nick], fake_name);
		PlayerInfo[playerid][dORank] = PlayerInfo[playerid][dRank];
		PlayerInfo[playerid][dRank] = 0;
		SendClientMessage(playerid,Lb,"You are currently undercover as \"%s\".", fake_name);
		switch(gTeam[playerid])
		{
			case TEAM_EURASIA: SetPlayerColor(playerid,0x6AFF6A00);
			case TEAM_ARAB: SetPlayerColor(playerid,0xFF800000);
			case TEAM_SOVIET: SetPlayerColor(playerid,0xF9393900);
			case TEAM_USA: SetPlayerColor(playerid,0x0080FF00);
			case TEAM_AUS: SetPlayerColor(playerid,0x9B37FF00);
			case TEAM_CH: SetPlayerColor(playerid,0x03FCFC00);
			case TEAM_ID: SetPlayerColor(playerid,0x00804000);
			case TEAM_FRANCE: SetPlayerColor(playerid,0x923E3400);
		}
	}
	else
	{
	    PlayerInfo[playerid][is_undercover] = false;
	    new nam[24];
		strcat(nam, PlayerInfo[playerid][undercover_realname]);
	    SetPlayerName(playerid, nam);
		PlayerInfo[playerid][dRank] = PlayerInfo[playerid][dORank];
		strcopy(PlayerInfo[playerid][Nick], nam);
	    SetPlayerScore(playerid, PlayerInfo[playerid][undercover_score]);
	    SendClientMessage(playerid,Lb,"You are out of undercover mode.");
	}
	return 1;
}

CMD:undercovered(playerid, params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{
		new count = 0;
		SendClientMessage(playerid, blue,"Current undercover admins:");
		foreach(new i : Player)
		{
			if(PlayerInfo[i][Level] <= PlayerInfo[playerid][Level] && PlayerInfo[i][is_undercover])
			{
				SendClientMessage(playerid, blue, "Undercover name: [%d]%s | Real Name: %s| Level: %d", i, PlayerInfo[i][Nick], PlayerInfo[i][undercover_realname], PlayerInfo[i][Level]);
				count++;
			}
		}
		if(!count) SendClientMessage(playerid, blue,"No undercover admins right now!");
	}
	else ERRR(playerid, 4);
	return 1;
}

CMD:slap(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 1) return ERRR(playerid,1);
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/Slap [ ID / PlayerName]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	new Float:xPos[3]; GetPlayerPos(id,xPos[0],xPos[1],xPos[2]);
	SetPlayerPos(id,xPos[0],xPos[1],xPos[2]+11);
	PlayerPlaySound(playerid,1190,0.0,0.0,0.0); PlayerPlaySound(id,1190,0.0,0.0,0.0);
	CMDMessageToAdmins(playerid,"SLAP");
	SendClientMessage(playerid,Lb,"You have slapped %s(%d)",PlayerInfo[id][Nick],id);
	return 1;
}

CMD:cursor(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 1) return ERRR(playerid,1);
	if(Spectating[playerid] != 1) return ERR(playerid,"You must spec someone to use this command.");
	SelectTextDraw(playerid,0xEA1540FF);
	SendClientMessage(playerid, Lb, "Cursor in spec mode enabled");
	return 1;
}

CMD:rlicense(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 4) return ERRR(playerid,4);
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/rlicense [ ID ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	CMDMessageToAdmins(playerid,"RLICENSE");
	if(PlayerInfo[id][License])
	{
        PlayerInfo[id][License] = false;
        SendClientMessage(playerid, Lb, "You have revoked %s(%d)'s pilot license.", PlayerInfo[id][Nick], id);
        SendClientMessage(id, Lb, "Administrator %s(%d) has revoked your pilot license.", PlayerInfo[playerid][Nick], playerid);
        if(IsPlayerInAnyVehicle(id))
        {
			switch(GetVehicleModel(GetPlayerVehicleID(id)))
			{
			    case 425, 447, 520, 476, 512:
			    {
  				 	LicenseRevoked(id);
        			RemovePlayerFromVehicle(id);
			    }
			}
        }
	}
	else
	{
	    PlayerInfo[id][License] = true;
	    SendClientMessage(playerid, Lb, "You have given back %s(%d)'s pilot license.", PlayerInfo[id][Nick], id);
	    SendClientMessage(id, Lb, "Administrator %s(%d) has given back your pilot license.", PlayerInfo[playerid][Nick], playerid);
	}
	return 1;
}

CMD:mynamehistory(playerid)
{
	new Query[800];

	mysql_format(mysql, Query, sizeof(Query), "SELECT u.name as admin, pl.new_name, pl.old_name, pl.time FROM playerbase u JOIN name_logs pl ON pl.approvedby = u.id AND pl.accountid = %i", PlayerInfo[playerid][AID]);

	mysql_pquery(mysql, Query, "OnNameLogs","ds", playerid, PlayerInfo[playerid][Nick]);
	return 1;
}

CMD:onamehistory(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
		new userss[24], Query[800];

		if(sscanf(params,"s[24]", userss)) return USG(playerid,"/onamehistory [ name ]");

		mysql_format(mysql, Query, sizeof(Query), "SELECT * FROM `playerbase` WHERE `name` ='%e' LIMIT 1",userss);
		mysql_pquery(mysql, Query, "OnOfflineNameLogs","ds", playerid, userss);

	}
	else ERRR(playerid,1);
	return 1;
}

forward OnOfflineNameLogs(playerid, name[]);
public OnOfflineNameLogs(playerid, name[])
{
	if(cache_num_rows())
	{
	    new cacheid_, Query[800];

     	cache_get_value_name_int(0, "id", cacheid_);

     	mysql_format(mysql, Query, sizeof(Query), "SELECT u.name as admin, pl.new_name, pl.old_name, pl.time FROM playerbase u JOIN name_logs pl ON pl.approvedby = u.id AND pl.accountid = %i", cacheid_);
		mysql_pquery(mysql, Query, "OnNameLogs","ds", playerid, name);

	}
	else
	{
		ERR(playerid, "Account not found in the database.");
	}
	return 1;
}

CMD:namehistory(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 1)
	{
		new id, Query[800];

		if(sscanf(params,"d", id)) return USG(playerid,"/namehistory [ ID ]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");

		mysql_format(mysql, Query, sizeof(Query), "SELECT u.name as admin, pl.new_name, pl.old_name, pl.time FROM playerbase u JOIN name_logs pl ON pl.approvedby = u.id AND pl.accountid = %i", PlayerInfo[id][AID]);

		mysql_pquery(mysql, Query, "OnNameLogs","ds", playerid, PlayerInfo[id][Nick]);

	}
	else ERRR(playerid,1);
	return 1;
}

forward OnNameLogs(playerid, name[]);
public OnNameLogs(playerid, name[])
{
    new admin_str[MAX_PLAYER_NAME], oldname_str[MAX_PLAYER_NAME], newname_str[MAX_PLAYER_NAME], title[50], time_stamp[45], logstring[1000], r, count;

	if(PlayerInfo[playerid][Level] >= 1)
	{
		format(title, _, "{03FCFC}Name History - %s", name);

		cache_get_row_count(r);

		strcat(logstring, "Old Name\tNew Name\tApproved By\tDate & Time\n");

		for(new x; x < r; x ++)
		{
		    count++;

		    cache_get_value_name(x, "admin", admin_str);
		    cache_get_value_name(x, "old_name", oldname_str);
		    cache_get_value_name(x, "new_name", newname_str);
			cache_get_value_name(x, "time", time_stamp);

			format(logstring, _, "%s%s\t%s\t%s\t%s\n", logstring, oldname_str, newname_str, admin_str, time_stamp);
		}

		if(count) ShowPlayerDialog(playerid, 800, DIALOG_STYLE_TABLIST_HEADERS, title, logstring, "Close", "");
		else ShowPlayerDialog(playerid, 800, DIALOG_STYLE_MSGBOX, title, "This player has no name change history.", "Close", "");
	}
	else
	{
		cache_get_row_count(r);

		strcat(logstring, "Old Name\tNew Name\tDate & Time\n");

		for(new x; x < r; x ++)
		{
		    count++;

		    cache_get_value_name(x, "old_name", oldname_str);
		    cache_get_value_name(x, "new_name", newname_str);
			cache_get_value_name(x, "time", time_stamp);

			format(logstring, _, "%s%s\t%s\t%s\n", logstring, oldname_str, newname_str, time_stamp);
		}

		if(count) ShowPlayerDialog(playerid, 800, DIALOG_STYLE_TABLIST_HEADERS, "{03FCFC}My name change history", logstring, "Close", "");
		else ShowPlayerDialog(playerid, 800, DIALOG_STYLE_MSGBOX, "{03FCFC}My name change history", "You have no name change history.", "Close", "");
	}
	return 1;
}

CMD:ostats(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 0)
	{
		new Name[24], Query[250];

		if(sscanf(params,"s[24]", Name)) return USG(playerid,"/ostats [ Account Name ]");

		mysql_format(mysql, Query, sizeof(Query), "SELECT * FROM `playerbase` WHERE `name` ='%e' LIMIT 1",Name);
		mysql_pquery(mysql, Query, "OnOfflineStats","ds", playerid, Name);

	}
	else ERRR(playerid,1);
	return 1;
}

forward OnOfflineStats(playerid, name[]);
public OnOfflineStats(playerid, name[])
{
	if(cache_num_rows())
	{
	    new title[50], string[1060], l_ip[16], la_ip[16], w_GPCI[60], w_laston[15], w_hours, w_mins, w_secs, w_admin, w_help, w_vip, w_license,
	    w_score, w_money, w_kills, w_deaths, w_medkit, w_armourp, w_ddm, w_dcbdm, w_dsdm;

	    format(title, _, "{03FCFC}Stats - %s", name);

     	cache_get_value_name(0, "ip", l_ip);
     	cache_get_value_name(0, "lastip", la_ip);
     	cache_get_value_name(0, "GPCI", w_GPCI);
     	cache_get_value_name(0, "laston", w_laston);
     	cache_get_value_name_int(0, "hours", w_hours);
     	cache_get_value_name_int(0, "minutes", w_mins);
     	cache_get_value_name_int(0, "seconds", w_secs);
     	cache_get_value_name_int(0, "adminlvl", w_admin);
     	cache_get_value_name_int(0, "helper", w_help);
     	cache_get_value_name_int(0, "vip", w_vip);
     	cache_get_value_name_int(0, "license", w_license);
     	cache_get_value_name_int(0, "score", w_score);
     	cache_get_value_name_int(0, "money", w_money);
     	cache_get_value_name_int(0, "kills", w_kills);
     	cache_get_value_name_int(0, "deaths", w_deaths);
     	cache_get_value_name_int(0, "medkit", w_medkit);
     	cache_get_value_name_int(0, "armourpack", w_armourp);
     	cache_get_value_name_int(0, "ddm", w_ddm);
     	cache_get_value_name_int(0, "dcbdm", w_dcbdm);
     	cache_get_value_name_int(0, "dsdm", w_dsdm);

		format(string, _, "{FFFFFF}Name: {03FCFC}%s\n{FFFFFF}Registered IP: {03FCFC}%s\n{FFFFFF}Last IP: {03FCFC}%s\n{FFFFFF}GPCI: {03FCFC}%s\n\n", name, l_ip, la_ip, w_GPCI);
		format(string, _, "%s{FFFFFF}Last time on: {03FCFC}%s\n{FFFFFF}Hours: {03FCFC}%i\n{FFFFFF}Minutes: {03FCFC}%i\n{FFFFFF}Seconds: {03FCFC}%i\n\n", string, w_laston, w_hours, w_mins, w_secs);
        format(string, _, "%s{FFFFFF}Admin Level: {03FCFC}%i\n{FFFFFF}Helper: {03FCFC}%i\n{FFFFFF}VIP: {03FCFC}%i\n{FFFFFF}Pilot License: {03FCFC}%i\n\n", string, w_admin, w_help, w_vip, w_license);
        format(string, _, "%s{FFFFFF}Score: {03FCFC}%i\n{FFFFFF}Money: {03FCFC}$%i\n{FFFFFF}Kills: {03FCFC}%i\n{FFFFFF}Deaths: {03FCFC}%i\n{FFFFFF}Medic Kits: {03FCFC}%i\n{FFFFFF}Armour Packs: {03FCFC}%i\n{FFFFFF}DDM Kills: {03FCFC}%i\n{FFFFFF}DCBDM Kills: {03FCFC}%i\n{FFFFFF}DSDM Kills: {03FCFC}%i",
		string, w_score, w_money, w_kills, w_deaths, w_medkit, w_armourp, w_ddm, w_dcbdm, w_dsdm);

		ShowPlayerDialog(playerid, 800, DIALOG_STYLE_MSGBOX, title, string, "Close", "");
	}
	else
	{
		ERR(playerid, "Account not found in the database.");
	}
	return 1;
}

CMD:orlicense(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
		new Name[24], Query[250], license_status;

		if(sscanf(params,"s[24]d", Name, license_status)) return USG(playerid,"/orlicense [ Account Name ] [ Give/Take ] - Use 1 to give and 0 to take.");

		mysql_format(mysql, Query, sizeof(Query), "SELECT * FROM `playerbase` WHERE `name` ='%e' LIMIT 1",Name);
		mysql_pquery(mysql, Query, "OnOfflineLicense","dsd", playerid, Name, license_status);

	}
	else ERRR(playerid,4);
	return 1;
}

CMD:cutscore(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 5) return ERRR(playerid,5);
	new id, percentage, Float:perc, place_holder;
	if(sscanf(params,"dd",id,percentage)) return USG(playerid,"/cutscore [ ID ] [ Percentage ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(percentage > 100 || percentage < 1) return ERR(playerid,"Percentage must be between 1 and 100");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");

	place_holder = percentage;

	CMDMessageToAdmins(playerid,"CUTSCORE");

	perc = floatdiv(float(percentage), 100.0);

	percentage = floatround(perc * float(GetPlayerScore(id)), floatround_ceil);

	percentage = GetPlayerScore(id) - percentage;

	SetPlayerScore(id, percentage);

	SendClientMessage(playerid, Lb, "You have cut %%%d of %s(%d)'s score.", place_holder, PlayerInfo[id][Nick], id);
 	SendClientMessage(id, Lb, "Administrator %s(%d) has cut %%%d of your score.", PlayerInfo[playerid][Nick], playerid, place_holder);
	return 1;
}

CMD:ocutscore(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 5)
	{
		new Name[MAX_PLAYER_NAME], Query[250], percentage;

		if(sscanf(params,"s[24]d", Name, percentage)) return USG(playerid,"/ocutscore [ Account Name ] [ Percentage ]");
		if(percentage > 100 || percentage < 1) return ERR(playerid,"Percentage must be between 1 and 100");

		mysql_format(mysql, Query, sizeof(Query), "SELECT * FROM `playerbase` WHERE `name` ='%e' LIMIT 1",Name);
		mysql_pquery(mysql, Query, "OnOfflineCutScore","dsd", playerid, Name, percentage);

	}
	else ERRR(playerid,5);
	return 1;
}

forward OnOfflineCutScore(playerid, name[], percentage);
public OnOfflineCutScore(playerid, name[], percentage)
{
	if(cache_num_rows())
	{
	    new temp__var, Float:perc, holder = percentage;

	    cache_get_value_name_int(0, "adminlvl", temp__var);

		if(temp__var > PlayerInfo[playerid][Level]) return ERR(playerid, "You cant use this command on higher level admins");

		cache_get_value_name_int(0, "score", temp__var);

		perc = floatdiv(float(percentage), 100.0);

		percentage = floatround(perc * float(temp__var), floatround_ceil);

		percentage = temp__var - percentage;

        new Query[120];
		mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `score` = '%d' WHERE `name` ='%e' LIMIT 1", percentage, name);
		mysql_tquery(mysql, Query);

		CMDMessageToAdmins(playerid,"OCUTSCORE");

		SendClientMessage(playerid, Lb, "* You have cut %%%d of %s's score.", holder, name);
	}
	else
	{
		ERR(playerid, "Account not found in the database.");
	}
	return 1;
}

forward OnOfflineLicense(playerid, name[], license_status);
public OnOfflineLicense(playerid, name[], license_status)
{
	if(cache_num_rows())
	{
	    new temp_level_var;

	    cache_get_value_name_int(0, "adminlvl", temp_level_var);

		if(temp_level_var > PlayerInfo[playerid][Level]) return ERR(playerid, "You cant use this command on higher level admins");

        new Query[120];
		mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `license` = '%d' WHERE `name` ='%e' LIMIT 1", license_status, name);
		mysql_tquery(mysql, Query);

		CMDMessageToAdmins(playerid,"ORLICENSE");

		if(license_status)
		{
			SendClientMessage(playerid, Lb, "* You have given back %s's pilot license.", name);
		}
		else
		{
		    SendClientMessage(playerid, Lb, "* You have taken %s's pilot license.", name);
		}
	}
	else
	{
		ERR(playerid, "Account not found in the database.");
	}
	return 1;
}

CMD:explode(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 2) return ERRR(playerid,2);
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/Explode [ ID / PlayerName]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	new Float:xPos[3]; GetPlayerPos(id,xPos[0],xPos[1],xPos[2]);
	CreateExplosion(xPos[0],xPos[1],xPos[2], 7,10.0);
	CMDMessageToAdmins(playerid,"EXPLODE");
	SendClientMessage(playerid,Lb,"You have Exploded %s(%d)",PlayerInfo[id][Nick],id);
	return 1;
}
CMD:jail(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 1) return ERRR(playerid,1);
	new id,mint,res[50];
	if(sscanf(params,"dds[50]",id,mint,res)) return USG(playerid,"/Jail [ ID / PlayerName] [ Minutes ] [ Reason ]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	PlayerInfo[id][JailTime] = mint*60;
	Jail1(id);
	CMDMessageToAdmins(playerid,"JAIL");
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	SendClientMessageToAll(blue,"[JAIL] Administrator \"%s\" has jailed %s(%d) for %d minutes | Reason : %s",nam,PlayerInfo[id][Nick],id,mint,res);
	SendClientMessage(id,blue,"* You have been jailed By Administrator %s",nam);
	return 1;
}
CMD:jailtime(playerid)
{
	if(PlayerInfo[playerid][JailTime] < 1) return ERR(playerid, "You are not in jail.");
	new rem = PlayerInfo[playerid][JailTime];
	new seconds = rem % 60;
	new  minutes = (rem-seconds) /60;
	SendClientMessage(playerid, blue, "Remaining jail time: %d minutes %d seconds.", minutes, seconds);
	return 1;
}
CMD:unjail(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 1) return ERRR(playerid,1);
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/Unjail [ID] ");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	if(PlayerInfo[id][JailTime] == 0) return ERR(playerid,"Player not jailed");
	JailRelease(id);
	CMDMessageToAdmins(playerid,"UNJAIL");
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	SendClientMessageToAll(blue, "[JAIL] Administrator \"%s\" Has unjailed %s(%d)",nam,PlayerInfo[id][Nick],id);
	SendClientMessage(id,blue,"* You have been unjailed by Administrator %s",nam);
	return 1;
}

JailRelease(player1)
{
	PlayerInfo[player1][JailTime] = 0;
	SetPlayerVirtualWorld(player1, 0);
	SetPlayerInterior(player1,0); SetPlayerPos(player1, 0.0, 0.0, 0.0); SpawnPlayer(player1);
	PlayerPlaySound(player1,1057,0.0,0.0,0.0);
	GameTextForPlayer(player1,"~g~Released ~n~From Jail",3000,3);
}

CMD:jailed(playerid)
{
	if(PlayerInfo[playerid][Level] < 1) return ERRR(playerid,1);
	SendClientMessage(playerid,Lb,"Jailed Players");
	new c;
	foreach(new i : Player)
	{
		if(PlayerInfo[i][JailTime] > 0)
		{
			SendClientMessage(playerid,-1,"%s(%d)",PlayerInfo[i][Nick],i);
			c ++;
		}
	}
	if(c == 0) ERR(playerid,"No Player in jail");
	return 1;
}
CMD:freeze(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new id,ress[50];
	if(sscanf(params,"ds[50]",id,ress)) return USG(playerid,"/Freeze [ ID / PlayerName] [Reason]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	if(PlayerInfo[id][Frozen] == 1) return ERR(playerid,"Player already Frozen");
	PlayerInfo[id][Frozen] = 1;
	TogglePlayerControllable(id,false);
	CMDMessageToAdmins(playerid,"FREEZE");
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	SendClientMessageToAll(blue,"[FREEZE] Administrator \"%s\" Has frozen %s(%d) | Reason: %s",nam,PlayerInfo[id][Nick],id,ress);
	SendClientMessage(id,blue,"* You have been frozen By Administrator %s",nam);
	Play(id);
	return 1;
}
CMD:unfreeze(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/Unfreeze [ ID / PlayerName]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	if(PlayerInfo[id][Frozen] == 0) return ERR(playerid,"Player not frozen");
	TogglePlayerControllable(id,true);
	PlayerInfo[id][Frozen] = 0;
	SendClientMessage(id,blue,"* You have been unfrozen By Administrator %s",PlayerInfo[playerid][Nick]);
	Play(id);
	return 1;
}



CMD:frozen(playerid)
{
	if(PlayerInfo[playerid][Level] < 1) return ERRR(playerid,1);
	SendClientMessage(playerid,Lb,"Frozen Players");
	new c;
	foreach(new i : Player)
	{
		if(PlayerInfo[i][Frozen])
		{
			SendClientMessage(playerid,-1,"%s(%d)",PlayerInfo[i][Nick],i);
			c ++;
		}
	}
	if(c == 0) ERR(playerid,"No Frozen players");
	return 1;
}

CMD:mute(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 2) return ERRR(playerid,2);
	new id,mint,ress[50];
	if(sscanf(params,"dds[50]",id,mint,ress)) return USG(playerid,"/Mute [ ID / PlayerName] [Minutes] [Reason]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	if(PlayerInfo[id][Muted] == true) return ERR(playerid,"Player already Muted");
	PlayerInfo[id][Muted] = true;
	PlayerInfo[id][MuteTime] = mint*60;
	CMDMessageToAdmins(playerid,"MUTE");
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	SendClientMessageToAll(blue, "[MUTE] Administrator \"%s\" Has muted %s(%d) For %d minutes | Reason: %s", nam, PlayerInfo[id][Nick], id, mint, ress);
	SendClientMessage(id,blue,"* You have been Muted By Administrator %s For %d minutes (reason: %s)",nam,mint,ress);
	Play(id);
	return 1;
}
CMD:unmute(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 2) return ERRR(playerid,2);
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/Unmute [ ID / PlayerName]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	if(PlayerInfo[id][Muted] == false) return ERR(playerid,"Player is not  Muted");
	PlayerInfo[id][Muted] = false;
	PlayerInfo[id][MuteTime] = 0;
	CMDMessageToAdmins(playerid,"UNMUTE");
	SendClientMessage(id,blue,"* You have been Unmuted By Administrator %s" ,PlayerInfo[playerid][Nick]);
	Play(id);
	return 1;
}


CMD:muted(playerid)
{
	if(PlayerInfo[playerid][Level] < 2) return ERRR(playerid,2);
	SendClientMessage(playerid,Lb,"Muted Players");
	new c;
	foreach(new i : Player)
	{

		if(PlayerInfo[i][Muted] == true)
		{

			SendClientMessage(playerid,-1,"%s(%d)",PlayerInfo[i][Nick],i);
			c ++;
		}
	}
	if(c == 0) ERR(playerid,"No Muted players");
	return 1;
}



CMD:apm(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 0 || PlayerInfo[playerid][Helper] == 1)
	{
		new id,tex[128];
		if(sscanf(params,"ds[128]",id,tex)) return SendClientMessage(playerid,red,"USAGE: /Apm [ID] [Text]");
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid,red,"* Player Not Connected");
		CMDMessageToAdmins(playerid,"APM");
		SendClientMessage(id,Lg,"Admin PM: %s",tex);
		PlayerPlaySound(id,1057,0.0,0.0,0.0);
		GameTextForPlayer(id,"~g~~h~Admin PM Recieved",6000,5);
		SendClientMessage(playerid,Lg,"Admin PM Sent.");

		for (new a = 0; a < MAX_ASAY-1; a++)
	    {
			strcopy(ASAY_Info[a][a_admin], ASAY_Info[a + 1][a_admin]);
			strcopy(ASAY_Info[a][a_receiver], ASAY_Info[a + 1][a_receiver]);
			strcopy(ASAY_Info[a][a_message], ASAY_Info[a + 1][a_message]);
	    }
	    if(PlayerInfo[playerid][is_undercover])
	    {
	    	strcopy(ASAY_Info[29][a_admin], PlayerInfo[playerid][undercover_realname]);
	    }
	    else
	    {
	        strcopy(ASAY_Info[29][a_admin], PlayerInfo[playerid][Nick]);
	    }
	    strcopy(ASAY_Info[29][a_receiver], PlayerInfo[id][Nick]);
	    strcopy(ASAY_Info[29][a_message], tex);
	}
	else return ERR(playerid," You are not a high enough level to use this command");
	return 1;
}

CMD:apms(playerid)
{
    if(PlayerInfo[playerid][Level] < 5) return ERRR(playerid, 5);

    new string[6000], count;

    for (new a = 0; a < MAX_ASAY; a++)
    {
        if(!isnull(ASAY_Info[a][a_admin]))
        {
            count++;
        	format(string, _,"%s%%{FFFFFF}%s to %s: {00FF00}%s\n", string, ASAY_Info[a][a_admin], ASAY_Info[a][a_receiver], ASAY_Info[a][a_message]);
		}
	}
	if(!count) ShowPlayerDialog(playerid, 800, DIALOG_STYLE_MSGBOX, "Admin PMs", "{FFFFFF}No admin pms sent.", "Close", "");
	else ShowPlayerDialog(playerid, 800, DIALOG_STYLE_MSGBOX, "Admin PMs", string, "Close", "");
	return 1;
}


CMD:abuse(playerid,params[])
{

	if(PlayerInfo[playerid][Level] < 3) return ERRR(playerid,3);
	new id;
	if(sscanf(params,"d",id)) return USG(playerid,"/abuse [ ID / PlayerName]");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	SetPlayerHealth(id,0);
	new Float:dPos[3]; GetPlayerPos(id,dPos[0],dPos[1],dPos[2]);
	CreateExplosion(dPos[0],dPos[1],dPos[2],13,10);
	CMDMessageToAdmins(playerid,"ABUSE");
	new nam[24]; strcat(nam, PlayerInfo[id][Nick]);
	SendClientMessageToAll(Dred,"* %s Has died for for excessive Abuse",nam);
	SendClientMessage(playerid,blue,"* You have killed %s(%d) for abusing",nam,id);
	return 1;
}

CMD:weaps(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 0 || PlayerInfo[playerid][Helper] == 1 || IsPlayerAdmin(playerid)) {
		if(isnull(params)) return USG(playerid," /weaps [playerid]");
		new player1,  WeapName[24], WEAPON_SLOT:slot, WEAPON:weap, ammo, wh;
		player1 = strval(params);
		if(IsPlayerConnected(player1)) {
			SendClientMessage(playerid,0x0080FFFF,"%s(%d) Weapons",PlayerInfo[player1][Nick],player1);
			for (; slot < MAX_WEAPON_SLOTS; slot++) {	GetPlayerWeaponData(player1, slot, weap, ammo); if( ammo != 0) { if(weap != WEAPON_FIST) wh++;} }
			if(wh < 1) return SendClientMessage(playerid,blue,"Player has no weapons");

			if(wh >= 1)
			{

				for (slot = WEAPON_SLOT_UNARMED; slot < MAX_WEAPON_SLOTS; slot++)
				{

					GetPlayerWeaponData(player1, slot, weap, ammo);
					if( ammo != 0)
					{

						if(weap != WEAPON_FIST)
						{

							GetWeaponName(weap, WeapName, sizeof(WeapName) );
							if(weap == WEAPON_MOLTOV) WeapName = "Molotove";
							if(slot == WEAPON_SLOT_UNARMED) ammo = 1;
							SendClientMessage(playerid,0x00D200FF,"Slot: %d |Weapon : %s | Ammo : %d |  ",slot,WeapName,ammo);
						}
					}
				}
			}
		}
	} else ERR(playerid," You are not a high enough level to use this command");
	return 1;
}

CMD:screen(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 2) return ERRR(playerid,2);
	new id,txt[50];
	if(sscanf(params,"ds[50]",id,txt)) return USG(playerid,"/Screen [Text]");
	if(id == playerid) return ERR(playerid,"You cannot screen yourself.");
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player is not connected");
	if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher level admins");
	GameTextForPlayer(id,txt,4000,3);
	CMDMessageToAdmins(playerid,"SCREEN");
	SendClientMessage(playerid,Lb,"* You have sent a screen message to %s(%d)",PlayerInfo[id][Nick],id);
	SendClientMessage(id,blue,"* Administrator %s Has sent you screen message",PlayerInfo[playerid][Nick]);
	return 1;
}

CMD:aduty(playerid) return cmd_adminduty(playerid);
CMD:aoffduty(playerid) return cmd_adminduty(playerid);
CMD:ahide(playerid, params[])
{
	if(PlayerInfo[playerid][Level] < 5) return 1;
	new kk = hidden[playerid];
	if(!kk) SendClientMessage(playerid, Dred, "You are now hidden.");
	else SendClientMessage(playerid, Dred, "You are not hidden anymore.");
	hidden[playerid] = !kk;
	return 1;
}
CMD:adminduty(playerid)
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid,"You cannot use this cmd in a PUBG event.");
	if(PlayerInfo[playerid][Level] > 0)
	{

		if(PlayerInfo[playerid][OnDuty] == 0)
		{

			PlayerInfo[playerid][OnDuty] = 1;
			LastSkin[playerid] = GetPlayerSkin(playerid);
			LastTeam[playerid] = GetPlayerTeam(playerid);
			SetPlayerSkin(playerid,294);
			SetPlayerTeam(playerid, 6);
			SetPlayerColor(playerid, 0xF600F6FF);
			SetPlayerHealth(playerid, 100000.0, 100000.0);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, WEAPON_MINIGUN, 999999999);
			UpdateDynamic3DTextLabelText(RankLabel[playerid],red,"On Duty Admin\n!!Do Not Attack!!");
			LastTeamD[playerid] = gTeam[playerid];
			gTeam[playerid] = TEAM_NONE;
			LasInterior[playerid] = GetPlayerInterior(playerid);
			LastWorld[playerid] = GetPlayerVirtualWorld(playerid);
			LastSpree[playerid] = Streak[playerid];
			GetPlayerPos(playerid,LastPos[0][playerid],LastPos[1][playerid],LastPos[2][playerid]);
			for(new WEAPON_SLOT:slot; slot < MAX_WEAPON_SLOTS; slot++) GetPlayerWeaponData(playerid,slot,sWeap[playerid][slot],sAmmo[playerid][slot]);
		}
		else
		{

			PlayerInfo[playerid][OnDuty] = 0;
			gTeam[playerid] = LastTeamD[playerid];
			SetPlayerHealth(playerid,100);
			GetTeamColor(playerid);
			SetPlayerTeam(playerid,LastTeam[playerid]);
			SetPlayerSkin(playerid,LastSkin[playerid]);
			GiveWeapons(playerid);
			UpdateLabelText(playerid);
		}
	}
	else return ERRR(playerid,3);
	return 1;
}

CMD:admins(playerid, params[])
{
	if(PlayerInfo[playerid][Level] > 0)
	{

		new count = 0;
		SendClientMessage(playerid, blue,"Current online admins:");
		foreach(new i : Player)
		{

			if(PlayerInfo[i][Level] > 0 && !PlayerInfo[i][is_undercover] && !hidden[playerid])
			{
				SendClientMessage(playerid, blue, "Admin [%d]%s Level: %d", i, PlayerInfo[i][Nick], PlayerInfo[i][Level]);
				count++;
			}
		}
		if(!count) SendClientMessage(playerid, blue,"No admins are online right now!");
	}
	else
	{

		new count = 0, AdmRank[500];
		SendClientMessage(playerid, blue,"Current on-duty admins:");
		foreach(new i : Player)
		{
			if(PlayerInfo[i][Level] > 0)
			{
				if(PlayerInfo[i][OnDuty] && !PlayerInfo[i][is_undercover] && !hidden[playerid])
				{

					if(hidden[i]) continue;
					SendClientMessage(playerid, blue, "Admin [%d]%s Level: %d %s", i, PlayerInfo[i][Nick], PlayerInfo[i][Level], AdmRank);
					count++;
				}
			}
		}
		if(!count) SendClientMessage(playerid, blue,"No admins are on-duty right now!");
	}
	return 1;
}
CMD:donors(playerid) return cmd_vips(playerid);
CMD:vips(playerid)
{
	new
	count = 0,
	string[800];
	foreach(new i : Player)
	{
		if(PlayerInfo[i][dRank] > 0)
		{
			format(string, _, "%s %s [ID:%i] | DonorLevel: %d\n", string, PlayerInfo[i][Nick], i, PlayerInfo[i][dRank]);
			count++;
		}
	}
	if (count == 0) ShowPlayerDialog(playerid, 800, DIALOG_STYLE_MSGBOX, "{F81414}=Online Donors=", "{00FFEE}No Donators Online\n{00FF00}_____", "Close", "");
	else ShowPlayerDialog(playerid, 800, DIALOG_STYLE_MSGBOX, "{F81414}=Online Donors=", string, "Close", "");
	return 1;
}
CMD:mods(playerid) return cmd_moderators(playerid);
CMD:moderators(playerid)
{
	new count = 0;
	SendClientMessage(playerid, Lg,"Current online moderators:");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][Helper] == 1)
		{
			SendClientMessage(playerid, Lg, "Moderator: [%d]%s", i, PlayerInfo[i][Nick]);
			count++;
		}
	}
	if(count == 0) SendClientMessage(playerid, grey,"No moderators are online right now!");
	return 1;
}

CMD:mappers(playerid)
{
	new count = 0;
	SendClientMessage(playerid, Lg,"Current online mappers:");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][Helper] == 2)
		{
			SendClientMessage(playerid, Lg, "Mapper: [%d]%s", i, PlayerInfo[i][Nick]);
			count++;
		}
	}
	if(count == 0) SendClientMessage(playerid, grey,"No mappers are online right now!");
	return 1;
}
CMD:morning(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 1) {
		CMDMessageToAdmins(playerid,"MORNING");
		return SetPlayerTime(playerid,7,0);
	} else return ERRR(playerid,1);
}

CMD:aa(playerid) return cmd_adminarea(playerid);

CMD:adminarea(playerid) {
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(PlayerInfo[playerid][Level] > 0) {
		CMDMessageToAdmins(playerid,"ADMINAREA");
		SetPlayerPos(playerid, AdminArea[0], AdminArea[1], AdminArea[2]);
		SetPlayerFacingAngle(playerid, AdminArea[3]);
		SetPlayerInterior(playerid, AdminArea[4]);
		SetPlayerVirtualWorld(playerid, AdminArea[5]);
		GameTextForPlayer(playerid,"Welcome Admin",1000,3);
	}else return ERRR(playerid,1);
	return 1;
}
CMD:setlevel(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 4 || IsPlayerAdmin(playerid)) {
		new id,lvl;
		if(sscanf(params,"dd",id,lvl)) return USG(playerid,"/Setlevel [Name/ID] [Level]");
		if(!IsPlayerConnected(id)) return ERR(playerid,"Player Not Connected");
		if(!IsPlayerAdmin(playerid))
		{
			if(lvl > PlayerInfo[playerid][Level])
			{
				if(id == playerid) return SendClientMessage(playerid, Dred, "You cannot set yourself to a higher level");
			}
		}
		if(PlayerInfo[id][Level] > PlayerInfo[playerid][Level]) return ERR(playerid,"You cant use this command on higher admin");
		if(lvl > 8 ) return ERR(playerid," Incorrect Level");
		if(lvl == PlayerInfo[id][Level]) return ERR(playerid," Player is already this level");
		new year,month,day;   getdate(year, month, day); new hour,minute,second; gettime(hour,minute,second);
		if(lvl > 0) SendClientMessage(id,Lg,"Administrator %s has set you to Administrator Status [level %d]",PlayerInfo[playerid][Nick], lvl);
		else SendClientMessage(playerid,Dred,"Administrator %s has set you to Player Status [level %d]",PlayerInfo[playerid][Nick], lvl);
		if(lvl > PlayerInfo[id][Level]) GameTextForPlayer(id,"~g~Promoted", 2000, 6);
		else GameTextForPlayer(id,"~r~Demoted", 2000, 6);
		new Query[100];
		mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `adminlvl`=%d WHERE `id` =%d LIMIT 1",lvl, PlayerInfo[id][AID]);
		mysql_tquery(mysql, Query);
		if(lvl == 0) { if(PlayerInfo[id][OnDuty] == 1) cmd_aduty(id); }
		//SendLogG("Setlevel","%s has set %s level to  %d",GetName(playerid),GetName(id),lvl);
		SendClientMessage(playerid,Lg,"You have made %s Level %d on %d/%d/%d at %d:%d:%d", PlayerInfo[id][Nick], lvl, day, month, year, hour, minute, second);
		PlayerInfo[id][Level] = lvl;
	}else return ERRR(playerid,5);
	return 1;
}






GetReportSlot()
{
	for(new r=0; r < 10; r++) if(REPORTS[r][R_active] == false) return r;
	for(new r=0; r < 10; r++) if(REPORTS[r][R_check] == true) return r;
	return -1;
}
CMD:report(playerid,params[])
{
	new remain = GetTickCount() - PlayerInfo[playerid][SpamReport];
	if(remain < 5000)
	{

		SendClientMessage(playerid,Dred,"Please Dont Spam The command");
		return 1;
	}
	new reported,res[50];
	if(sscanf(params,"ds[50]",reported,res)) return USG(playerid,"/report [ ID / Name ] [ Reason ]");

	if(IsPlayerConnected(reported)) {
		if(playerid == reported) return ERR(playerid," You Cannot report yourself");
		if(strlen(res) > 3) {
		    if( (GetTickCount() - ReportTick[reported]) < 30000 ) return ERR(playerid, "Player was already reported.");
		    new r = 111;
			for(new rs=0; rs < 10; rs++) { if(REPORTS[rs][R_target] == reported) r = rs; }
			if(r == 111)
			{
				r = GetReportSlot();
				if(r == -1) r = 0;
			}
			ReportTick[reported] = GetTickCount();
			REPORTS[r][R_active] = true;
			REPORTS[r][R_target] = reported;
			REPORTS[r][R_check] = false;
			strcopy(REPORTS[r][R_reason], res);
			REPORTS[r][R_sender] = playerid;
			new nam[2][24];
			strcat(nam[0], PlayerInfo[playerid][Nick]); strcat(nam[1], PlayerInfo[reported][Nick]);
			strcopy(REPORTS[r][R_senderN], nam[0]);
			strcopy(REPORTS[r][R_targetN], nam[1]);
			PlayerInfo[playerid][SpamReport] = GetTickCount();
			foreach(new i : Player)
			{

				if(PlayerInfo[i][Level] > 0 || PlayerInfo[i][Helper] == 1)
				{

					GameTextForPlayer(i,"~r~~h~New Report",5000,3);
					SendClientMessage(i,0xFF0080FF,"|| NEW REPORT || %s(%d) has reported %s(%d) for reason : %s", nam[0], playerid, nam[1], reported,res);
				}
			}
			return SendClientMessage(playerid,yellow, "Your report has been sent to online administrators. Be patient.");
		} else return ERR(playerid," Must be a valid reason");
	} else return SendClientMessage(playerid, red, "Player is not connected");
}

CMD:reports(playerid) {
	if(PlayerInfo[playerid][Level] >= 1 || PlayerInfo[playerid][Helper] == 1) {
		new ReportCount;
		for(new i = 0; i < 10; i++)
		{
			if(REPORTS[i][R_active])
			{
				if(!REPORTS[i][R_check]) SendClientMessage(playerid,Lg,"* %s(%d) has Reported %s(%d) for reason %s {FF0080}(NOT CHECKED)",REPORTS[i][R_senderN],REPORTS[i][R_sender],REPORTS[i][R_targetN],REPORTS[i][R_target],REPORTS[i][R_reason]);
				else SendClientMessage(playerid,Lg,"* %s(%d) has Reported %s(%d) for reason %s | Checked By %s",REPORTS[i][R_senderN],REPORTS[i][R_sender],REPORTS[i][R_targetN],REPORTS[i][R_target],REPORTS[i][R_reason],REPORTS[i][R_checker]);
				ReportCount ++;
			}
		}
		if(ReportCount == 0) SendClientMessage(playerid,COLOR_WHITE,"There have been no reports");
	} else ERRR(playerid,1);
	return 1;
}

CMD:richlist(playerid,params[])
{
	new Slot1 = -1, Slot2 = -1, Slot3 = -1, Slot4 = -1, HighestCash = -9999;
	SendClientMessage(playerid,COLOR_WHITE,"Rich List:");
	foreach(new x : Player)
	{

		if (GetPlayerMoney(x) >= HighestCash)
		{

			HighestCash = GetPlayerMoney(x);
			Slot1 = x;
		}
	}
	HighestCash = -9999;
	foreach(new x : Player)
	{

		if(x != Slot1) if (GetPlayerMoney(x) >= HighestCash)
		{

			HighestCash = GetPlayerMoney(x);
			Slot2 = x;
		}
	}
	HighestCash = -9999;
	foreach(new x : Player)
	{

		if(x != Slot1)
		{

			if(x != Slot2)
			{

				if (GetPlayerMoney(x) >= HighestCash)
				{

					HighestCash = GetPlayerMoney(x);
					Slot3 = x;
				}
			}
		}
	}
	HighestCash = -9999;
	foreach(new x : Player)
	{

		if(x != Slot1)
		{

			if(x != Slot2) if(x != Slot3)
			{

				if (GetPlayerMoney(x) >= HighestCash)
				{

					HighestCash = GetPlayerMoney(x);
					Slot4 = x;
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "(%d) %s - $%d", Slot1,PlayerInfo[Slot1][Nick],GetPlayerMoney(Slot1));
	if(Slot2 != -1)	{
		SendClientMessage(playerid, COLOR_WHITE, "(%d) %s - $%d", Slot2,PlayerInfo[Slot2][Nick],GetPlayerMoney(Slot2));
	}
	if(Slot3 != -1)	{
		SendClientMessage(playerid, COLOR_WHITE, "(%d) %s - $%d", Slot3,PlayerInfo[Slot3][Nick],GetPlayerMoney(Slot3));
	}
	if(Slot4 != -1)	{
		SendClientMessage(playerid, COLOR_WHITE, "(%d) %s - $%d", Slot4,PlayerInfo[Slot4][Nick],GetPlayerMoney(Slot4));
	}
	return 1;
}
CMD:topscores(playerid)
{
	new Slot1 = -1, Slot2 = -1, Slot3 = -1, Slot4 = -1, HighestCash = -9999;
	SendClientMessage(playerid,COLOR_WHITE,"Top Scorers:");
	foreach(new x : Player) if (GetPlayerScore(x) >= HighestCash)
	{

		HighestCash = GetPlayerScore(x);
		Slot1 = x;
	}
	HighestCash = -9999;
	foreach(new x : Player) if(x != Slot1) if (GetPlayerScore(x) >= HighestCash)
	{

		HighestCash = GetPlayerScore(x);
		Slot2 = x;
	}
	HighestCash = -9999;
	foreach(new x : Player)
	{

		if(x != Slot1)
		{

			if(x != Slot2)
			{

				if (GetPlayerScore(x) >= HighestCash) {
					HighestCash = GetPlayerScore(x);
					Slot3 = x;
				}
			}
		}
	}
	HighestCash = -9999;
	foreach(new x : Player)
	{

		if(x != Slot1)
		{

			if(x != Slot2)
			{

				if(x != Slot3)
				{

					if (GetPlayerScore(x) >= HighestCash) {
						HighestCash = GetPlayerScore(x);
						Slot4 = x;
					}

				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "(%d) %s - %d - Rank: %s", Slot1,PlayerInfo[Slot1][Nick],GetPlayerScore(Slot1), GetRankName(Slot1));
	if(Slot2 != -1)	{
		SendClientMessage(playerid, COLOR_WHITE, "(%d) %s - %d - Rank: %s", Slot2,PlayerInfo[Slot2][Nick],GetPlayerScore(Slot2), GetRankName(Slot2));
	}
	if(Slot3 != -1)	{
		SendClientMessage(playerid, COLOR_WHITE, "(%d) %s - %d - Rank: %s", Slot3,PlayerInfo[Slot3][Nick],GetPlayerScore(Slot3), GetRankName(Slot3));
	}
	if(Slot4 != -1)	{
		SendClientMessage(playerid, COLOR_WHITE, "(%d) %s - %d - Rank: %s", Slot4,PlayerInfo[Slot4][Nick],GetPlayerScore(Slot4), GetRankName(Slot4));
	}
	return 1;
}

CMD:miniguns(playerid) {
	if(PlayerInfo[playerid][Level] > 0) {
		new bool:First2 = false, carty, string[128], WEAPON_SLOT:slot, WEAPON:weap, ammo;
		foreach(new i : Player)
		{

			for(slot = WEAPON_SLOT_UNARMED; slot < MAX_WEAPON_SLOTS; slot++) {
				GetPlayerWeaponData(i, slot, weap, ammo);
				if(ammo != 0)
				{

					if(weap == WEAPON_MINIGUN) {
						carty++;
						if(!First2) { format(string, _, "Minigun: (%d)%s(ammo%d)", i, PlayerInfo[i][Nick], ammo); First2 = true; }
						else format(string, _, "%s, (%d)%s(ammo%d) ",string, i, PlayerInfo[i][Nick], ammo);
					}
				}
			}
		}
		if(carty == 0) return SendClientMessage(playerid,COLOR_WHITE,"No players have a minigun"); else return SendClientMessage(playerid,COLOR_WHITE,string);
	} else return ERR(playerid," You are not a high enough level to use this command");
}
CMD:hseeks(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 0) {
		new bool:First2 = false, carty, string[128], i, WEAPON_SLOT:slot, WEAPON:weap, ammo;
		foreach(new x : Player)
		{

			for(slot = WEAPON_SLOT_UNARMED; slot < MAX_WEAPON_SLOTS; slot++) {
				GetPlayerWeaponData(i, slot, weap, ammo);
				if(ammo != 0)
				{

					if(weap == WEAPON_HEATSEEKER)
					{

						carty++;
						if(!First2) { format(string, _, "Heat Seeker: (%d)%s(ammo%d)", i, PlayerInfo[i][Nick], ammo); First2 = true; }
					}
					else format(string, _, "%s, (%d)%s(ammo%d) ",string, i, PlayerInfo[i][Nick], ammo);
				}
			}
		}
		if(carty == 0) return SendClientMessage(playerid,COLOR_WHITE,"No players have a heat seeker"); else return SendClientMessage(playerid,COLOR_WHITE,string);
	} else return ERR(playerid," You are not a high enough level to use this command");
}



//------------------------------------------------------------------------------

//==========================[ Spectate Commands ]===============================
#if defined ENABLE_SPEC



CMD:spec(playerid,params[]) {

	if(PlayerInfo[playerid][Helper] == 1 || PlayerInfo[playerid][Level] > 0 || IsPlayerAdmin(playerid)) {
		if(isnull(params) || !IsNumeric(params)) return USG(playerid," /lspec [playerid]");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, red, "You cannot spectate while in a vehicle");
		new specplayerid = strval(params);
		if(specplayerid == playerid) return SendClientMessage(playerid, red, "You cannot spectate yourself");
		if(IsPlayerConnected(specplayerid))
		{
		    new PLAYER_STATE:statee = GetPlayerState(specplayerid);
			if(statee == PLAYER_STATE_SPECTATING && PlayerInfo[specplayerid][SpecID] != INVALID_PLAYER_ID) return SendClientMessage(playerid, red, "Spectate: Player spectating someone else");
			if(statee != PLAYER_STATE_ONFOOT && statee != PLAYER_STATE_DRIVER && statee != PLAYER_STATE_PASSENGER) return SendClientMessage(playerid, red, "Spectate: Player not spawned");
			if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
			{

				GetPlayerHealth(playerid,LastHP[playerid]);
				GetPlayerArmour(playerid,LastAR[playerid]);
				LasInterior[playerid] = GetPlayerInterior(playerid);
				LastWorld[playerid] = GetPlayerVirtualWorld(playerid);
				LastSpree[playerid] = Streak[playerid];
				GetPlayerPos(playerid,LastPos[0][playerid],LastPos[1][playerid],LastPos[2][playerid]);
			}
			SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
			SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(specplayerid));
			for(new WEAPON_SLOT:slot; slot < MAX_WEAPON_SLOTS; slot++) GetPlayerWeaponData(playerid,slot,sWeap[playerid][slot],sAmmo[playerid][slot]);
			for(new rs=0; rs < 10; rs++)
			{
				if(REPORTS[rs][R_target] == specplayerid && REPORTS[rs][R_check] == false)
				{
					REPORTS[rs][R_check] = true;
					new nam[24];
					strcat(nam, PlayerInfo[playerid][Nick]);
					REPORTS[rs][R_checker] = nam;
					SendClientMessage(REPORTS[rs][R_sender],Lg,"Administrator %s is Checking your Report",nam);
				}
			}
			StartSpectate(playerid, specplayerid);
			if(Bit_Get(ToggleState[playerid], TOGGLE_SPECTDS))
			{
				PlayerTextDrawSetString(playerid, SpecPanel_PTD[playerid][0], "waiting...");
				PD_CONSOLE_SHOW(playerid);
				SelectTextDraw(playerid,0xEA1540FF);
			}
			Spectating[playerid] = 1;
			CMDMessageToAdmins(playerid,"SPEC");
			GetPlayerPos(playerid,Pos[playerid][0],Pos[playerid][1],Pos[playerid][2]);
			GetPlayerFacingAngle(playerid,Pos[playerid][3]);
			SendClientMessage(playerid, Lb, "You may press ESC to disable the cursor in the panel, and /cursor to enable it");
			if(SPTimer[playerid] == 0) SetTimerEx("SpecRefresh", 1000, false, "d", playerid);
			SPTimer[playerid] = 1;
			return SendClientMessage(playerid,Lb,"Now Spectating");
		} else return ERR(playerid," Player is not connected");
	} else return ERRR(playerid,1);
}

forward SpecRefresh(playerid);
public SpecRefresh(playerid)
{
	if(Spectating[playerid])
	{
		SetTimerEx("SpecRefresh", 1000, false, "d", playerid);
		if(Bit_Get(ToggleState[playerid], TOGGLE_SPECTDS)) if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) if(IsPlayerConnected(PlayerInfo[playerid][SpecID])) RefrechCON(playerid, PlayerInfo[playerid][SpecID]);
	}
	return 1;
}

PD_CONSOLE_SHOW(playerid)
{
	TextDrawShowForPlayer(playerid, SpecPanel_TD[0]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[1]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[2]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[3]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[4]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[5]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[6]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[7]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[8]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[9]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[10]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[11]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[12]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[13]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[14]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[15]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[16]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[17]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[18]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[19]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[20]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[21]);
	TextDrawShowForPlayer(playerid, SpecPanel_TD[22]);

	PlayerTextDrawShow(playerid, SpecPanel_PTD[playerid][0]);
	PlayerTextDrawShow(playerid, SpecPanel_PTD[playerid][1]);
	PlayerTextDrawShow(playerid, SpecPanel_PTD[playerid][2]);
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(strikingplayer == playerid)
	{
		ShowPlayerDialog(playerid, STRIKE_DIALOG, DIALOG_STYLE_MSGBOX, "Confirmation", "Are you sure you want to strike the selected area?", "Yes", "No");
		strikex = fX; strikey = fY;
    }
    else if(PlayerInfo[playerid][OnDuty] == 1 || PlayerInfo[playerid][is_undercover])
	{
		SetPlayerPosFindZ(playerid, fX, fY, fZ);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(!playercheckin[playerid])
	{
	    if(playertextid == PVipShop[playerid][VS_PROMOCODE])
		{
		    ShowPlayerDialog(playerid, VIPSHOP_DIALOG, DIALOG_STYLE_MSGBOX, "{FF00E7}MW3 VIP SHOP: {009F00}Promo Code", "We are sorry, but this feature is not yet ready.", "ok", "");
		    playercheckin[playerid] = 1;
		}
	}
	return 1;
}

CMD:ls(playerid,params[]) {
	return cmd_spec(playerid, params);
}
CMD:lsp(playerid,params[]) {
	return cmd_spec(playerid, params);
}


CMD:specoff(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Helper] == 1 || PlayerInfo[playerid][Level] >= 1 || IsPlayerAdmin(playerid)) {
		if(PlayerInfo[playerid][SpecType] != ADMIN_SPEC_TYPE_NONE) {
			StopSpectate(playerid);
			return SendClientMessage(playerid,blue,"No Longer Spectating");
		} else return ERR(playerid," You are not spectating");
	} else return ERRR(playerid,1);
}

#endif

//==========================[ CHAT COMMANDS ]===================================

CMD:disablechat(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 6) {
		CMDMessageToAdmins(playerid,"DISABLECHAT");
		new string[128];
		if(ServerInfo[DisableChat] == 0) {
			ServerInfo[DisableChat] = 1;
			format(string, _, "Administrator \"%s\" has disabled chat", PlayerInfo[playerid][Nick]);
		} else {
			ServerInfo[DisableChat] = 0;
			format(string, _, "Administrator \"%s\" has enabled chat", PlayerInfo[playerid][Nick]);
		} return SendClientMessageToAll(blue,string);
	} else return ERRR(playerid,3);
}

CMD:clearchat(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] >= 2) {
		CMDMessageToAdmins(playerid,"CLEARCHAT");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,"");
		SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); SendClientMessageToAll(green,""); return 1;
	} else return ERRR(playerid,2);
}
CMD:cmc(playerid,params[])
{
	SendClientMessage(playerid, -1,"");
	SendClientMessage(playerid, -1,"");
	SendClientMessage(playerid, -1,"");
	SendClientMessage(playerid, -1,"");
	SendClientMessage(playerid, -1,"");
	SendClientMessage(playerid, -1,"");
	SendClientMessage(playerid, -1,"");
	SendClientMessage(playerid, -1,"");
	SendClientMessage(playerid, -1,"");
	SendClientMessage(playerid, -1,"");
	SendClientMessage(playerid, -1,"");
	return 1;
}

CMD:cc(playerid,params[]) {
	return cmd_clearchat(playerid, params);
}


CMD:fakedeath(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 4) return ERRR(playerid,4);
	new id,killer,playa;
	if(sscanf(params,"ddd",killer,playa,id)) return USG(playerid,"/Fakedeath [ killer ] [ player ] [ Weapon ]");
	if(!IsValidWeapon(id)) return ERR(playerid," Invalid Weapon ID");
	if(!IsPlayerConnected(playa)) return ERR(playerid,"Player not connected");
	if(!IsPlayerConnected(killer)) return ERR(playerid,"killer not connected");
	CMDMessageToAdmins(playerid,"FAKEDEATH");
	SendDeathMessage(killer,playa,id);
	SendClientMessage(playerid,Lg,"Fake Death sent.");
	return 1;
}

CMD:clearbox(playerid,params[])
{
	if(PlayerInfo[playerid][Level] < 4) return ERRR(playerid,4);
	for(new p = 0; p < 6; p ++) BoxMSG("");
	SendClientMessage(playerid,Lg,"Box Cleared");
	return 1;
}

CMD:desynced(playerid)
{
    new Cat[1200];
	new count;
	if(PlayerInfo[playerid][Level] > 0)
	{
		foreach(new i : Player)
		{
			if(!IsPlayerSynced(i))
			{
			    if(!IsPlayerAFK(i))
			    {
					format(Cat, _, "%s%s\n", Cat, PlayerInfo[i][Nick]);
					count ++;
				}
			}
		}
	}
	if(!count) return SendClientMessage(playerid, -1, "No desynced players");
	ShowPlayerDialog(playerid,DESYNCED_DIALOG,DIALOG_STYLE_LIST,"Desynced Players",Cat,"ok","refresh");
    return 1;
}

CMD:paused(playerid)
{
	new Cat[1200];
	new count;
	if(PlayerInfo[playerid][Level] > 0)
	{
		foreach(new i : Player)
		{
			if(IsPlayerAFK(i))
			{
				format(Cat, _, "%s%s\n", Cat, PlayerInfo[i][Nick]);
				count ++;
			}
		}
	}
	if(!count) return SendClientMessage(playerid, -1, "No paused players");
	ShowPlayerDialog(playerid,PAUSED_DIALOG,DIALOG_STYLE_LIST,"Paused Players",Cat,"ok","refresh");
	return 1;
}

RecordClanCMD(const content[], clanid)
{
	new query[256];
    mysql_format(mysql, query, sizeof(query), "INSERT INTO `clanhistory` (`msg`,`cid`) VALUES ('%e',%d)", content, clanid);
	mysql_tquery(mysql, query);
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if (isnull(cmdtext)) return 0;
	if(strlen(cmdtext)>143) return SendClientMessage(playerid, RED, "Input too long");
	/*new File:fhandle;
	if(!fexist("cmds.ini"))
	{
		fhandle = fopen("cmds.ini",io_append);
		if(fhandle)
		{
			fwrite(fhandle,stringg);
			fclose(fhandle);
		}
	}
	fhandle = fopen("cmds.ini",io_append);
	if(fhandle)
	{
		fwrite(fhandle,stringg);
		fclose(fhandle);
	}*/
	if(!success) SendClientMessage(playerid,grey,"{C0C0C0}[INVALID] "COL_RED" %s{C0C0C0} does not exist. Know more about the server by using /cmds & /help. ",cmdtext);
	PlayerInfo[playerid][CMDSPAM] ++;
	if(PlayerInfo[playerid][CMDSPAM] > 4)
	{
		SendClientMessage(playerid, red, "Please don't spam the commands");
		PlayerInfo[playerid][MAXSPAM] ++;
		if(PlayerInfo[playerid][MAXSPAM] >4)
		{
			SendClientMessageToAll(red,"[KICK] %s has been kicked for spamming commands.",PlayerInfo[playerid][Nick]);
			KickX(playerid);
			PlayerInfo[playerid][MAXSPAM] = 0;
			PlayerInfo[playerid][CMDSPAM] = 0;
			return 0;
		}
	}
	return 1;
}
forward StealthOff(playerid);
public StealthOff(playerid)
{
	SetPlayerColor(playerid,-1);
	SendClientMessage(playerid,Dred,"* Stealth Mode off!");
}
CMD:stealth(playerid)
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(gTeam[playerid] != TEAM_MERC) return SendClientMessage(playerid,Dred,"|ERROR:| You must be a mercenary to use that command");
	new remain = GetTickCount() - PlayerInfo[playerid][STEALTHCMD];
	if(remain < 50000) return SendClientMessage(playerid,Dred,"|ERROR:| You must wait to use that command again!");
	PlayerInfo[playerid][STEALTHCMD] = GetTickCount();
	SetTimerEx("StealthOff",50000, false, "i", playerid);
	SetPlayerColor(playerid,0xFFFFFF00);
	SendClientMessage(playerid,Dred,"[STEALTH] Stealth mode enabled for 50 seconds.");
	return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(IsAMine[objectid])
	{
		foreach(new i: PlacedMines)
		{
			new pid = Mine[i][m_player];
			if(objectid == Mine[i][m_object] && Mine[i][m_used] == true)
			{
			    new xxx = PlayerInfo[pid][InClan];
				new Float:xx, Float:yy, Float:zz;
				GetPlayerPos(playerid, xx,yy,zz);
				foreach(new l: Player)
				{
				    if(xxx != -1) if(PlayerInfo[l][InClan] == xxx) continue;
					if(IsPlayerInRangeOfPoint(l,14.0,xx,yy,zz) && l != pid && GetPlayerTeam(l) != GetPlayerTeam(pid))
					{
						if(suiciderprotect[l])
						{
							suiciderprotect[l] = false;
							SendClientMessage(l, COLOR_YELLOW, "Your vest saved you from a mine");
							continue;
						}
						new Float:HP;
						GetPlayerHealth(l,HP);
						if(HP < 40)
						{
							SetPlayerHealth(l,0);
							GameTextForPlayer(l,"~r~killed by explosive mine",6000,6);
							SendDeathMessage(pid,l,39);
							SendClientMessage(pid,-1,"{80FF00}[EXP-Mine] {FFFFFF}You killed {80FF00}%s(%d){FFFFFF} with an explosive mine, You get 1 score & $1500.",PlayerInfo[l][Nick]);
							if(xxx != -1)
							{
								new str[128],rnn;
								rnn = random(1500);
								format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, PlayerInfo[pid][Nick]);
								ConnectKills[pid] ++;
								ClanMSG(PlayerInfo[pid][InClan],str);
								foreach(new j : Player) if(PlayerInfo[pid][InClan] == PlayerInfo[j][InClan]) GiveCash(j,rnn);
							}
							if(cPerk[pid][P_MONEY] > 0)
							{

								SendClientMessage(pid, COLOR_YELLOW, "[Clan Perk]: You got double the kill money.");
								GiveCash(pid,1500);
							}
							GiveCash(Mine[i][m_player],1500);
							SetPlayerScore(pid,GetPlayerScore(pid)+1);
						}else
						{

							ApplyAnimation(l, "DILDO", "DILDO_HIT_3", 4.0, false, false, false, true, 0, SYNC_ALL);
							IsPlayerUsingAnims[l] = true;
							GameTextForPlayer(l,"~r~injured by explosive mine",6000,6);
							SetPlayerHealth(l,HP-random(39));
						}
						PlayerPlaySound(l,1159,xx,yy,zz);
					}

				}
				CreateExplosion(xx,yy,zz,6,0.5);
				CreateExplosion(Mine[i][m_x],Mine[i][m_y],Mine[i][m_z], 6, 0.5);
				Mine[i][m_used] = false;
				Mine[i][m_player] = INVALID_PLAYER_ID;
				IsAMine[Mine[i][m_object2]] = false;
				DestroyDynamicObject(Mine[i][m_object2]);
				IsAMine[Mine[i][m_object]] = false;
				DestroyDynamicObject(Mine[i][m_object]);
				DestroyDynamic3DTextLabel(Mine[i][m_label]);
				GameTextForPlayer(playerid,"~g~Mine exploded",6000,5);
				Iter_Remove(PlacedMines, i);
				Mine[i][m_object2] = Mine[i][m_object] = -1;
				break;
			}
		}
	}
	return 1;
}

forward Explosions(i);
public Explosions(i)
{
    if(BehemethDead[i])
	{
		new Float:xx,Float:yy,Float:zz;
		GetObjectPos(BehemethObject[i], xx, yy, zz);
		CreateExplosion(xx,yy-2,zz, 6, 300);
		SetTimerEx("Explosions", 400, false, "i", i);
	}
	return 1;
}

public OnPlayerWeaponShot(playerid, WEAPON:weaponid, BULLET_HIT_TYPE:hittype, hitid, Float:fX, Float:fY, Float:fZ )
{
	if(hittype == BULLET_HIT_TYPE_PLAYER) if(hitid == INVALID_PLAYER_ID) return 0;
	if(!GetPlayerWeapon(playerid)) return 0;
	if(hitid == playerid) return 0;
	if(weaponid == WEAPON_MINIGUN)
	{
		if(!InArena(playerid, MDM)) if(PlayerInfo[playerid][Level] < 1) CheatKick(playerid,"weapon hacks (Minigun)");
	}
	if(hittype == BULLET_HIT_TYPE_OBJECT)
	{
		new tt = gTeam[playerid];
		for(new i = 1; i < MAX_TEAMS-1; i++)
		{
			if(tt != i)
			{
				if(hitid == BehemethObject[i])
				{
					if(!IsPlayerInArea(playerid, BASERAPE[i][MinXX], BASERAPE[i][MinYY], BASERAPE[i][MaxXX], BASERAPE[i][MaxYY]))
					{
						if(ZeppelinDriver[i] != -1)
						{
							if(PlayerInfo[ZeppelinDriver[i]][InClan] == PlayerInfo[playerid][InClan]) if(PlayerInfo[playerid][InClan] != -1) continue;
							if(BehemethHp[i] > 0)
							{
								BehemethHp[i] -= 1;
								SetPlayerProgressBarValue(playerid, ZP_HPBar[playerid], BehemethHp[i]);
								ShowPlayerProgressBar(playerid, ZP_HPBar[playerid]);
								LastZPShown[playerid] = GetTickCount();
								ZPShown[playerid] = i;
							}
							else
							{
								if(BehemethDead[i] == 0)
								{
									BehemethDead[i] = 1;
									KillTimer(ZPTimer[ZeppelinDriver[i]]);
									OnZP_HeatTimer[i] = 0;
									new tm = gTeam[playerid];
									new Float:xx,Float:yy,Float:zz;
									GetObjectPos(BehemethObject[i], xx, yy, zz);
									MapAndreas_FindZ_For2DCoord(xx,yy,zz);
									MoveObject(BehemethObject[i], xx,yy,zz, 5, 0, 60, 60);
									SetTimerEx("Explosions", 400, false, "i", i);
									InZeppelin[ZeppelinDriver[i]] = 0;
									new const DRIVER = ZeppelinDriver[i];
									HidePlayerProgressBar(DRIVER, ZP_HPBar[DRIVER]);
									HidePlayerProgressBar(DRIVER, ZP_CooldownBar[DRIVER]);
									SetPlayerHealth(ZeppelinDriver[i], 0);
									new xh = PlayerInfo[playerid][InClan];
									if(xh != -1) AddClanPoints(playerid, 12);
									new str[90];
									format(str, _, "~r~%s's ~w~Zeppelin was taken down by ~g~%s", GetTeamName2(i), GetTeamName2(tm));
									BoxMSG(str);
									PlayerInfo[playerid][XP] += 50;
									GiveCash(playerid, 25000);
									SendClientMessage(playerid,Lg,"You got 50 XP and $25000 for taking down the Zeppelin.");
									foreach(new j : Player)
									{
										if(IsPlayerInRangeOfPoint(j, 150, xx,yy,zz)) PlayerPlaySound(j, 14403, 0,0,0);
										if(gTeam[j] == tm)
										{
											SetPlayerScore(j, GetPlayerScore(j)+5);
											SendClientMessage(j, -1, "{FFFFFF}<!> Your {AD1640}team {FFFFFF}got {AD1640}5 score {FFFFFF}for taking down a {AD1640}Zeppelin.");
										}
									}
									ZeppelinDriver[i] = -1;
								}
							}
						}
					}
					break;
				}
			}
		}
	}
	if(hittype == BULLET_HIT_TYPE_VEHICLE)
	{
		foreach(new i : Player)
		{
			if(gTeam[i] == gTeam[playerid])
			{
				if(IsPlayerInVehicle(i, hitid))
				{
					if(GetPlayerState(i) == PLAYER_STATE_DRIVER) return 0;
				}
			}
		}
	}
	else if(hittype == BULLET_HIT_TYPE_PLAYER)
	{
		if(gTeam[playerid] != TEAM_MERC && !Iter_Contains(PUBGEvent, playerid))
		{
			if(GetPlayerTeam(playerid) == GetPlayerTeam(hitid))
			{
				if(inevent[hitid] == 0)
				{
					if(InArena(hitid, NON))
					{
						if(!HasJoined(hitid))
						{
							GameTextForPlayer(playerid,"~r~do not team attack!", 3000, 3);
						}
					}
				}
			}
		}
	}
	return 1;
}
//----------------------------------------------------------------------------//
// 		             	/all Commands                                         //
//----------------------------------------------------------------------------//

CMD:spawnall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 5) {
		CMDMessageToAdmins(playerid,"SPAWNAll");
		foreach(new i : Player) {
			if((i != playerid)) {
				PlayerPlaySound(i,1057,0.0,0.0,0.0); SetPlayerPos(i, 0.0, 0.0, 0.0); SpawnPlayer(i);
			}
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has spawned all players", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,4);
}

CMD:muteall(playerid,params[]) {
	#pragma unused params
	if(PlayerInfo[playerid][Level] > 5) {
		CMDMessageToAdmins(playerid,"MUTEALL");
		foreach(new i : Player) {
			if((i != playerid)) {
				PlayerPlaySound(i,1057,0.0,0.0,0.0); PlayerInfo[i][Muted] = true; PlayerInfo[i][MuteWarnings] = 0;
			}
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has muted all players", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,4);
}

CMD:unmuteall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 5) {
		CMDMessageToAdmins(playerid,"UNMUTEAll");
		foreach(new i : Player) {
			if((i != playerid)) {
				PlayerPlaySound(i,1057,0.0,0.0,0.0); PlayerInfo[i][Muted] = false; PlayerInfo[i][MuteWarnings] = 0;
				PlayerInfo[i][MuteTime] = 0;
			}
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has unmuted all players.", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,4);
}

CMD:getall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 5) {
		CMDMessageToAdmins(playerid,"GETAll");
		new Float:x,Float:y,Float:z, interior = GetPlayerInterior(playerid);
		GetPlayerPos(playerid,x,y,z);
		foreach(new i : Player) {
			if((i != playerid)) {
				PlayerPlaySound(i,1057,0.0,0.0,0.0); SetPlayerPos(i,x+(playerid/4)+1,y+(playerid/4),z+2); SetPlayerInterior(i,interior);
				SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(playerid));
			}
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has teleported all players.", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,4);
}
CMD:healall(playerid) {
	if(PlayerInfo[playerid][Level] > 2) {
		CMDMessageToAdmins(playerid,"HEALALL");
		foreach(new i : Player) {
			if(InArena(i, NON)){
				if(PlayerInfo[i][OnDuty] == 0)  {
					PlayerPlaySound(i,1057,0.0,0.0,0.0); SetPlayerHealth(i,100.0);
				}
			}
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has healed all players.", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,3);
}

CMD:armourall(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 2) {
		CMDMessageToAdmins(playerid,"ARMOURALL");
		foreach(new i : Player) {
			if(PlayerInfo[i][OnDuty] == 0)
			{
				if(InArena(i, NON))  { PlayerPlaySound(i,1057,0.0,0.0,0.0); SetPlayerArmour(i, 100.0); }
			}
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has restored all players armour.", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,3);
}

CMD:giveallhelmet(playerid)
{
	if(PlayerInfo[playerid][Level] > 2) {
		CMDMessageToAdmins(playerid,"GiveAllHelmet");
		SendClientMessageToAll(blue,"Administrator \"%s\" has given all players a helmet.",PlayerInfo[playerid][Nick]);
		foreach(new i : Player)
		{
			if(!PlayerInfo[i][HELMET])
			{
				PlayerInfo[i][HELMET] = PlayerInfo[i][WEAR] = true;
				switch(gTeam[i])
				{
					case TEAM_AUS: SetPlayerAttachedObject(i,0,19104,2,0.152999,0.015000,-0.002000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
					case TEAM_EURASIA: SetPlayerAttachedObject(i,0,19104,2,0.142000,0.020000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
					case TEAM_ARAB: SetPlayerAttachedObject(i,0,19104,2,0.147999,0.000000,0.000000,0.000000,0.000000,0.000000,1.090000,1.000000,1.114000);
					case TEAM_USA: SetPlayerAttachedObject(i,0,19104,2,0.139999,0.018000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
					case TEAM_ID: SetPlayerAttachedObject(i,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
					case TEAM_CH: SetPlayerAttachedObject(i,0,19104,2,0.177999,0.000000,0.000000,0.000000,0.000000,0.000000,1.184999,1.000000,1.105999);
					case TEAM_FRANCE: SetPlayerAttachedObject(i,0,19104,2,0.151000,0.004000,0.000000,-0.399999,-0.200000,-7.599999,1.123999,1.000000,1.058000);
					case TEAM_MERC: SetPlayerAttachedObject(i,0,19104,2,0.151000,0.004000,0.000000,-0.399999,-0.200000,-7.599999,1.123999,1.000000,1.058000);
				}
				SendClientMessage(i,green,"Helmet is toggled ON ! use /togglehelmet to remove it");
			}
		}
	}
	return 1;
}

CMD:giveallmask(playerid)
{
	if(PlayerInfo[playerid][Level] > 2) {
		CMDMessageToAdmins(playerid,"GiveAllMask");
		SendClientMessageToAll(blue,"Administrator \"%s\" has given all players a gas mask.",PlayerInfo[playerid][Nick]);
		foreach(new i : Player)
		{

			if(PlayerInfo[i][Mask] == false)
			{

				PlayerInfo[i][Mask] = true;
				SetPlayerAttachedObject(i,1,19472,2,0.027000,0.138999,0.010000,95.200027,74.399917,2.100000,1.000000,1.000000,1.000000);
				PlayerPlaySound(i,1057,0.0,0.0,0.0);
				GameTextForPlayer(i,"~g~~h~Gas mask recieved",5000,3);
				SendClientMessage(i,Lg,"* Recieved Gas Mask. You can remove it with /togglemask");
			}
		}
	}else return ERRR(playerid,3);
	return 1;
}
CMD:giveallmedkit(playerid)
{
	if(PlayerInfo[playerid][Level] > 2) {
		CMDMessageToAdmins(playerid,"GiveAllMedkit");
		SendClientMessageToAll(blue,"Administrator \"%s\" has given all players a Medic kit.",PlayerInfo[playerid][Nick]);
		foreach(new i : Player)
		{

			if(PlayerInfo[i][MedKit] < 3)
			{

				PlayerInfo[i][MedKit] ++;
				PlayerPlaySound(i,1057,0.0,0.0,0.0);
				GameTextForPlayer(i,"~g~~h~Medic Kit recieved",5000,3);
				SendClientMessage(i,Lg,"You have recieved a free medic kit. Do /Medickit (/mk) to use it.");
			}
		}
	} else return ERRR(playerid,3);
	return 1;
}
CMD:giveallap(playerid)
{
	if(PlayerInfo[playerid][Level] > 2) {
		CMDMessageToAdmins(playerid,"GiveAllap");
		SendClientMessageToAll(blue,"Administrator \"%s\" has given all players Armour pack",PlayerInfo[playerid][Nick]);
		foreach(new i : Player)
		{

			if(PlayerInfo[i][ArmourP] < 3)
			{

				PlayerInfo[i][ArmourP] ++;
				PlayerPlaySound(i,1057,0.0,0.0,0.0);
				GameTextForPlayer(i,"~g~~h~Armour Pack recieved",5000,3);
				SendClientMessage(i,Lg,"You have recieved a free Armour Pack. Do /armourpack (/ap) to use it.");
			}
		}
	} else return ERRR(playerid,3);
	return 1;

}

CMD:saveallstats(playerid)
{
	if(PlayerInfo[playerid][Level] > 3)
	{

		CMDMessageToAdmins(playerid,"Saveallstats");
		foreach(new i : Player)
		{

			SavePlayer(i);
			SendClientMessage(i,Lg,"[STATS] Your stats has been saved.");
		}
	} else return ERR(playerid," You need to be level 4 to use this command");
	return 1;
}
CMD:freezeall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
		CMDMessageToAdmins(playerid,"FREEZEALL");
		foreach(new i : Player)
		{
			if((i != playerid)) PlayerPlaySound(i,1057,0.0,0.0,0.0); TogglePlayerControllable(i,false); PlayerInfo[i][Frozen] = 1;
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has frozen all players", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,4);
}

CMD:unfreezeall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
		CMDMessageToAdmins(playerid,"UNFREEZEALL");
		foreach(new i : Player) {PlayerPlaySound(i,1057,0.0,0.0,0.0); TogglePlayerControllable(i,true); PlayerInfo[i][Frozen] = 0;}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has unfrozen all players", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,4);
}
GiveAmmo(playerid)
{
	new WEAPON_SLOT:slot, ammo;
	new WEAPON:weaponid = GetPlayerWeapon(playerid);
	for (; slot < MAX_WEAPON_SLOTS; slot ++)
	{

		GetPlayerWeaponData(playerid, slot, weaponid, ammo);
		if(IsValidWeapon(weaponid)) //
		{
			if(weaponid == WEAPON_ROCKETLAUNCHER) return 1;
			if(weaponid == WEAPON_GRENADE || weaponid == WEAPON_MOLTOV || weaponid == WEAPON_COLT45 || weaponid == WEAPON_GOLFCLUB || weaponid == WEAPON_PARACHUTE || weaponid == WEAPON_SATCHEL || weaponid == WEAPON_TEARGAS)
			{
				GivePlayerWeapon(playerid, weaponid, 1);
			}
			else GivePlayerWeapon(playerid, weaponid, random(100));
		}
	}
	return 1;
}
GiveAmmo2(playerid)
{
	new WEAPON:weaponid = GetPlayerWeapon(playerid);
	if(weaponid == WEAPON_ROCKETLAUNCHER) return 1;
	if(weaponid == WEAPON_GRENADE || weaponid == WEAPON_MOLTOV || weaponid == WEAPON_COLT45 || weaponid == WEAPON_GOLFCLUB || weaponid == WEAPON_PARACHUTE || weaponid == WEAPON_SATCHEL || weaponid == WEAPON_TEARGAS)
	{
		GivePlayerWeapon(playerid, weaponid, 1);
	}
	else GivePlayerWeapon(playerid, weaponid, random(100));
	return 1;
}


CMD:explodeall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 7) {
		CMDMessageToAdmins(playerid,"EXPLODEALL");
		new Float:x, Float:y, Float:z;
		foreach(new i : Player) {
			if((i != playerid)) {
				PlayerPlaySound(i,1190,0.0,0.0,0.0); GetPlayerPos(i,x,y,z);	CreateExplosion(x, y , z, 7, 10.0);
			}
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has exploded all players", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,4);
}
CMD:disarmall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 7) {
		CMDMessageToAdmins(playerid,"DISARMALL");
		foreach(new i : Player) {
			if((i != playerid)) {
				PlayerPlaySound(i,1057,0.0,0.0,0.0); ResetPlayerWeapons(i);
			}
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has disarmed all players", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,4);
}

CMD:ejectall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 5) {
		CMDMessageToAdmins(playerid,"EJECTALL");
		new Float:x, Float:y, Float:z;
		foreach(new i : Player) {
			if((i != playerid)) {
				if(IsPlayerInAnyVehicle(i)) {
					PlayerPlaySound(i,1057,0.0,0.0,0.0); GetPlayerPos(i,x,y,z); SetPlayerPos(i,x,y,z+3);
				}
			}
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has ejected all players", PlayerInfo[playerid][Nick]);
	} else return ERRR(playerid,4);
}
//-------------==== Set All Commands ====-------------//



CMD:setallweather(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
		if(isnull(params)) return USG(playerid," /setallweather [weather ID]");
		new var = strval(params);
		CMDMessageToAdmins(playerid,"SETALLWEATHER");
		foreach(new i : Player) {
			PlayerPlaySound(i,1057,0.0,0.0,0.0);
			SetPlayerWeather(i, var);
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has set all players weather to '%d'", PlayerInfo[playerid][Nick], var);
	} else return ERRR(playerid,3);
}

CMD:setalltime(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 2) {
		if(isnull(params)) return USG(playerid," /setalltime [hour]");
		new var = strval(params);
		if(var > 24) return ERR(playerid," Invalid hour");
		CMDMessageToAdmins(playerid,"SETALLTIME");
		foreach(new i : Player)
		{

			PlayerPlaySound(i,1057,0.0,0.0,0.0);
			SetPlayerTime(i, var, 0);
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has set all players time to '%d:00'", PlayerInfo[playerid][Nick], var);
	} else return ERRR(playerid,3);
}

CMD:setallworld(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 8) {
		if(isnull(params)) return USG(playerid," /setallworld [virtual world]");
		new var = strval(params);
		CMDMessageToAdmins(playerid,"SETALLWORLD");
		foreach(new i : Player)
		{

			PlayerPlaySound(i,1057,0.0,0.0,0.0);
			SetPlayerVirtualWorld(i,var);
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has set all players virtual worlds to '%d'", PlayerInfo[playerid][Nick], var);
	} else return ERRR(playerid,3);
}
CMD:day(playerid)
{
	SetPlayerTime(playerid,12,0);
	SendClientMessage(playerid,Lg,"* Your time has been changed do /night to change to night.");
	return 1;
}
CMD:night(playerid)
{
	SetPlayerTime(playerid,00,00);
	SendClientMessage(playerid,Lg," Your time has been changed do /day to change to day.");
	return 1;
}


CMD:giveallcash(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
		if(isnull(params)) return USG(playerid," /giveallcash [Amount]");
		new var = strval(params);
		CMDMessageToAdmins(playerid,"GIVEALLCASH");
		foreach(new i : Player)
		{

			PlayerPlaySound(i,1057,0.0,0.0,0.0);
			GiveCash(i,var);
		}
		return SendClientMessageToAll(blue, "Administrator \"%s\" has given all players '$%d'", PlayerInfo[playerid][Nick], var);
	} else return ERRR(playerid,4);
}

CMD:givecash(playerid, params[])
{
	new
	giveplayerid,
	amount;
	if (sscanf(params, "dd", giveplayerid, amount)) return SendClientMessage(playerid, 0xFF0000AA, "Usage: /givecash [playerid/partname] [amount]");
	if(giveplayerid == INVALID_PLAYER_ID) return ERR(playerid, "Player is not connected.");
	if (!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, 0xFF0000AA, "Player not found");
	if(amount < 1000) return SendClientMessage(playerid,Dred,"* You can send lower then 1000$");
	if(amount > GetCash(playerid)) return SendClientMessage(playerid,red,"*You Dont have enough Money");
	if(amount > 20000) return SendClientMessage(playerid,Dred,"*You cant give more then 20000$");
	if(Tryg3D::ItemGetDistance(playerid, item_player, giveplayerid, item_player) > 5.0) return SendClientMessage(playerid,Dred,"* Player not in range");
	GiveCash(giveplayerid, amount);
	GiveCash(playerid,- amount);
	SendClientMessage(giveplayerid, green, "\"%s\" has given you '$%d'", PlayerInfo[playerid][Nick], amount);
	GameTextForPlayer(giveplayerid, "~g~Recieved %d$", 3, 5000, amount);
	GameTextForPlayer(playerid, "~g~Sent %d$", 5000, 3, amount);
	SendClientMessage(playerid, green, "You have given \"%s\" $%d", PlayerInfo[giveplayerid][Nick], amount);
	return 1;
}

CMD:gaw(playerid,params[]) return cmd_giveallweapon(playerid,params);
CMD:giveallweapon(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
		new WEAPON:Weap , Wn[50], ammo;
		if(sscanf(params,"ii",Weap, ammo)) return USG(playerid," /giveallweapon [weapon name] [ammo]");
		if(Weap == WEAPON_MINIGUN || Weap == WEAPON_HEATSEEKER) return SendClientMessage(playerid,red,"You Can't Give Those Weapons!");
		GetWeaponName(Weap, Wn, 50);
		if(Weap == WEAPON_MOLTOV) Wn = "Molotove";
		CMDMessageToAdmins(playerid,"GIVEALLWEAPON");
		foreach(new i : ARENA[NON])
		{

			GivePlayerWeapon(i,Weap,ammo);
			PlayerPlaySound(i,1057,0.0,0.0,0.0);
		}
		SendClientMessageToAll(blue, "[WEAPON-BONUS] Administrator %s has given all players weapon %s(%d) with %d Round of Ammo",PlayerInfo[playerid][Nick],Wn,Weap,ammo);
	}
	else return ERRR(playerid,4);
	return 1;
}
//================================[ Menu Commands ]=============================

ERRR(playerid,lvl)
{
	if(PlayerInfo[playerid][Level] > 0)
	{

		SendClientMessage(playerid,0xFD4448FF,"|ERROR|: You Are Not Authorized To Use This Command | Required Level (%d) ",lvl);
	}else return 0;
	return 1;
}
ERR(playerid, const msgs[])
{
	SendClientMessage(playerid,0xFD4448FF,"|ERROR|: %s",msgs);
	return 1;
}
USG(playerid, const mss[])
{
	SendClientMessage(playerid,-1,"{8080FF}Usage: "cwhite"%s",mss);
	return 1;
}

CMD:saveskin(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 1)
	{

		if(isnull(params)) return USG(playerid,"/SaveSkin [Skin ID]");
		new SkinID = strval(params);
		if((SkinID == 0)||(SkinID == 7)||(SkinID >= 9 && SkinID <= 41)||(SkinID >= 43 && SkinID <= 64)||(SkinID >= 66 && SkinID <= 73)||(SkinID >= 75 && SkinID <= 85)||(SkinID >= 87 && SkinID <= 118)||(SkinID >= 120 && SkinID <= 148)||(SkinID >= 150 && SkinID <= 207)||(SkinID >= 209 && SkinID <= 264)||(SkinID >= 274 && SkinID <= 288)||(SkinID >= 290 && SkinID <= 299))
		{

			SendClientMessage(playerid,Lr,"|Skin|  You Have Saved Skin (ID: %d)",SkinID);
			SendClientMessage(playerid,Lr,"|Skin|  /useskin to use this skin when you spawn or /dontuseskin to stop using skin");
			PlayerInfo[playerid][UseSkin] = true;
			PlayerInfo[playerid][Skin] = SkinID;
			return CMDMessageToAdmins(playerid,"SAVESKIN");
		} else return ERR(playerid,"Invalid Skin ID");
	} else return ERRR(playerid,2);
}

CMD:useskin(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 1) {
		if(PlayerInfo[playerid][OnDuty] == 0) return ERR(playerid,"You need to be onduty to use this command");
		if(IsPlayerInAnyVehicle(playerid)) return ERR(playerid,"You Cannot Use This Command In Vehicle");
		PlayerInfo[playerid][UseSkin] = true;
		SetPlayerSkin(playerid,PlayerInfo[playerid][Skin]);
		return SendClientMessage(playerid,Lg,"Saved Skin in use ");
	} else return ERRR(playerid,2);
}

CMD:dontuseskin(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 1) {
		PlayerInfo[playerid][UseSkin] = false;
		return SendClientMessage(playerid,Lg,"Skin will no longer be used");
	} else return ERRR(playerid,2);
}


public OnPlayerClickPlayer(playerid, clickedplayerid, CLICK_SOURCE:source)
{
	new str[4];
	valstr(str, clickedplayerid);
    cmd_stats(playerid, str);
    return 1;
}


CMD:stats(playerid,params[])
{
	new id;
	if(sscanf(params,"d",id)) id = playerid;
	if(!IsPlayerConnected(id)) return ERR(playerid,"Player not connected");
	if(PlayerInfo[id][is_undercover]) { id = playerid; }
	new h,m,s,pDeaths;
	if(PlayerInfo[id][Deaths] == 0) pDeaths = 1; else pDeaths = PlayerInfo[id][Deaths];
	TotalGameTime(id, h, m, s);

	StatsPage[playerid] = 0;
	StatsTarget[playerid] = id;
 	PlayerTextDrawSetString(playerid, StatsPart1[playerid], "%s~n~%s~n~%s~n~%d~n~%d~n~%d~n~%d~n~%d~n~%0.2f~n~", GetRankName(id), GetClass(id), GetTeamName(id), GetPlayerScore(id), PlayerInfo[id][Headshots], GetPlayerMoney(id), PlayerInfo[id][Kills], PlayerInfo[id][Deaths], floatdiv(PlayerInfo[id][Kills], pDeaths));
	PlayerTextDrawSetString(playerid, StatsPart1Titles[playerid], "Rank~n~Class~n~Team~n~Score~n~Headshots~n~Money~n~Kills~n~Deaths~n~K/D Ratio~n~");
 	PlayerTextDrawSetString(playerid, StatsPart2[playerid], "%d:%d:%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~%d~n~", h,m,s, PlayerInfo[id][MedKit], PlayerInfo[id][dRank], PlayerInfo[id][ArmourP], PlayerInfo[id][Rank], PlayerInfo[id][ZCaptures], PlayerInfo[id][ZHelps], PlayerInfo[id][License], PlayerInfo[id][MKSpree]);
	PlayerTextDrawSetString(playerid, StatsPart2Titles[playerid], "Time Played~n~MedKits~n~Donor Rank~n~Armour Packs~n~Rank~n~Zones Captured~n~Zones Assists~n~Pilot License~n~Max Kill Spree~n~");
	PlayerTextDrawShow(playerid, StatsPart1[playerid]);
	PlayerTextDrawShow(playerid, StatsPart2[playerid]);
	PlayerTextDrawShow(playerid, StatsPart1Titles[playerid]);
	PlayerTextDrawShow(playerid, StatsPart2Titles[playerid]);

    SelectTextDraw(playerid, 0xEA1540FF);
	new warn = PlayerInfo[id][Warnings];
	if(warn == 0) { PlayerTextDrawSetString(playerid, StatsName[playerid], "No warnings"); }
	else
	{
		PlayerTextDrawSetString(playerid, StatsWarning[playerid], "%d/3 warnings", warn);
	}
	AtStats[playerid] = 1;
	PlayerTextDrawSetString(playerid, StatsName[playerid], "%s's stats", PlayerInfo[id][Nick]);
	PlayerTextDrawShow(playerid, StatsName[playerid]);
	TextDrawShowForPlayer(playerid, StatsBox);
	TextDrawShowForPlayer(playerid, StatsBoxLine);
	TextDrawShowForPlayer(playerid, StatsBoxL2);
	TextDrawShowForPlayer(playerid, StatsExitButton);
	TextDrawShowForPlayer(playerid, StatsArrowRight);
	PlayerTextDrawShow(playerid, StatsWarning[playerid]);

	return 1;
}

CMD:changepass(playerid,params[]) {
	new const PLAYER_STATE:PLAYER_STATE = GetPlayerState(playerid);
	if (PLAYER_STATE != PLAYER_STATE_ONFOOT && PLAYER_STATE != PLAYER_STATE_NONE && PLAYER_STATE != PLAYER_STATE_PASSENGER)
	{
		return 0;
	}
	if(isnull(params)) return USG(playerid,"/ChangePass [ New Password ]");
	if(strlen(params) < 4) return ERR(playerid,"Incorrect Password length");
	new NewPass[129],Query[300];
	WP_Hash(NewPass, 129, params);
	mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `pass` = '%e' WHERE `id` =%d LIMIT 1",NewPass, PlayerInfo[playerid][AID]);
	mysql_tquery(mysql, Query);
	SendClientMessage(playerid,Lg,"[PASSWORD-CHANGE] Your password has been successfully changed to (%s)",params);
	return 1;
}
InvalidNickCharacters(const string[])
{
	for (new a = 0, b = strlen(string); a < b; a++)
	{

		switch(string[a])
		{

			case '=': return 0;
			case '!': return 0;
			case '@': return 0;
			case '#': return 0;
			case '$': return 0;
			case '%': return 0;
			case '^': return 0;
			case '&': return 0;
			case '*': return 0;
			case '(': return 0;
			case ')': return 0;
			case '/': return 0;
			case ':': return 0;
			case '-': return 0;
			case ';': return 0;
			case '+': return 0;
			case '<': return 0;
			case '>': return 0;
			case '?': return 0;
			case ',': return 0;
			case '`': return 0;
			case '~': return 0;
			case '}': return 0;
			case '{': return 0;
		}
	}
	return 1;
}

CMD:changename(playerid, params[])
{
	new Nam[24];
	if(sscanf(params,"s[24]",Nam)) return USG(playerid,"/ChangeName [ New Name ]");
	if(strlen(Nam) > 20) return ERR(playerid,"Invalid Name length ( Too Long ).");
	if(strlen(Nam) < 3) return ERR(playerid,"Invalid Name length ( Too Short ).");
	if(PlayerInfo[playerid][nameapp]) return ERR(playerid,"You have a name change request awaiting response.");
	if(PlayerInfo[playerid][is_undercover]) return ERR(playerid,"You can't change your name if you are undercover.");
	if(GetCash(playerid) < 100000) return ERR(playerid,"You must have 100k (100.000$) in order to change your name.");
	if(strfind(Nam," ",true) != -1) return ERR(playerid,"Please use underscore instead of blank spaces.");
	if(!InvalidNickCharacters(Nam)) return ERR(playerid,"You can't use invalid characters in your name.");
	new str[9]; format(str, _, "[%s]", cTag[playerid]);
	if(strfind(Nam, str, true) != -1) return ERR(playerid, "Your clan tag is already assigned to you in main chat, you cannot add it to your name.");
	new Query[200];

	mysql_format(mysql, Query, sizeof(Query), "SELECT `pass` FROM `playerbase` WHERE `name` ='%e' LIMIT 1", Nam);
	mysql_pquery(mysql, Query,"CheckName","isd",playerid,Nam, PlayerInfo[playerid][AID]);
	return 1;
}
forward CheckName(playerid,name[], id);
public CheckName(playerid,name[], id)
{
	if(cache_num_rows()>0)
	{

		ERR(playerid,"This username already exists on the server, please pick a different one.");
	}else
	{

		new str[256];
		if(FreeRemoval[playerid])
		{

			format(str, _, "[%s]", cTag[playerid]);
			if(strfind(name, str, true) != -1)
			{
				ShowPlayerDialog(playerid, 2333, DIALOG_STYLE_MSGBOX, "Notice", "{FFFFFF}Our systems detected that you have {F3FF02}%s tag {FFFFFF}in your new name, please don't use the tag.", "ok", "", str);
				return 1;
			}
			else FreeRemoval[playerid] = false;
		}
		else
		{
            PlayerInfo[playerid][nameapp] = true;
			strcopy(PlayerInfo[playerid][n_newname], name);

			foreach(new i : Player)
			{
				if(PlayerInfo[i][Level] >= 4)
				{
					SendClientMessage(i, 0xFF0080FF, "|| NAME CHANGE REQUEST || %s(%d) has has requested to change their name to: %s", PlayerInfo[playerid][Nick], playerid, name);
				}
			}

			SendClientMessage(playerid,cb,"[NAME-CHANGE] Your name change request has been sent, wait for an administrator to handle it.");
			Play(playerid);
		}
	}
	return 1;
}

/*CMD:setpass(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
		new Acc[24],Pas[25];
		if(sscanf(params,"s[24]s[25]",Acc,Pas)) return USG(playerid,"/setpass [ Account ] [ Password ]");
		if(strlen(Pas) < 4 || strlen(Pas) > MAX_PLAYER_NAME) return ERR(playerid," Incorrect password length");
		new Query[256];

		mysql_format(mysql, Query, sizeof(Query), "SELECT `pass` FROM `playerbase` WHERE `name` ='%e' LIMIT 1", Acc);
		mysql_pquery(mysql, Query,"ChangePassSet","dss",playerid, Acc, Pas);
	} else ERRR(playerid,5);
	return 1;
}
*/
forward ChangePassSet(playerid,acct[],passw[]);
public ChangePassSet(playerid,acct[],passw[])
{
	if(cache_num_rows())
	{
		new str[60], NewPass[129], Query[256];
		format(str, _, "[ACCOUNT] \"%s's\" password changed to \"%s\"", acct, passw);
		MessageTo5(green,str);

		WP_Hash(NewPass, 129, passw);

		mysql_format(mysql, Query, sizeof(Query), "UPDATE `playerbase` SET `pass` = '%e' WHERE `name` ='%e' LIMIT 1", NewPass, acct);
		mysql_tquery(mysql, Query);
	}
	else
	{

		SendClientMessage(playerid,Lr,"|Account| \"%s\" Not Found In Database",acct);
	}
}



//==========================f====================================================
public OnRconLoginAttempt(ip[], password[], success)
{
	new playersIP[16], playerid;
	foreach(new i : Player)
	{
		GetPlayerIp(i, playersIP, 16);
		if(!strcmp(ip, playersIP))
		{
			playerid = i;
			break;
		}
	}
	if(!success)
	{
		rconAttempts[playerid]++;
		if(rconAttempts[playerid] > 1)
		{
			//SendLog("~r~BAD RCON:: %s(%d) has been banned for failed RCON attempt.",GetName(playerid),playerid);
			Ban(playerid);
		}
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(!PlayerInfo[playerid][LoggedIn])
	{
		ERR(playerid,"[LOGIN/REGISTER] You need to be logged in to use any commands.");
		return 0;
	}
	if(InZeppelin[playerid] > 0) {
		ERR(playerid, "Cannot use any cmd in Zeppelin.");
		return 0;
	}
	if(PlayerInfo[playerid][JailTime] > 0) { if(PlayerInfo[playerid][Level] < 1) return ERR(playerid,"Commands are disabled in jail."); }
	new string[256];
	new hour,minute,second; gettime(hour,minute,second);
	new nam[24]; strcat(nam, PlayerInfo[playerid][Nick]);
	format(string, _, "[%d:%d:%d] %s CMD: %s\r\n", hour,minute,second, nam, cmdtext);
    //ThreadW("scriptfiles/cmds.ini", string);
	if(ServerInfo[ReadCmds])
	{
		format(string, _, "** %s (%d) typed: %s", nam, playerid, cmdtext);
		foreach(new i : Player) if(PlayerInfo[i][Level] > 6) if(i != playerid) SendClientMessage(i, grey, string);
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	new sp1 = SpectatedPlayer[playerid], sp2 = SpectatedPlayer2[playerid];
	foreach (new x: Player)
	{
		if(GetPlayerState(x) == PLAYER_STATE_SPECTATING)
		{
			if(PlayerInfo[x][SpecID] == playerid) if(PlayerInfo[x][SpecType] == ADMIN_SPEC_TYPE_PLAYER ) SetPlayerInterior(x,newinteriorid);
			else if(sp1 == x || sp2 == x) SetPlayerInterior(x,newinteriorid);
		}
	}
	if(newinteriorid == 255) { SetPlayerGravity(playerid, 0.002);}
	else if(oldinteriorid == 255) { SetPlayerGravity(playerid, 0.008);}
	return 1;
}

public OnPlayerUpdate(playerid)
{
    new drunknew, WEAPON:pweap;
	drunknew = GetPlayerDrunkLevel(playerid);
	if (drunknew < 100) SetPlayerDrunkLevel(playerid, 2000);
	else
	{
		if (pDrunkLevelLast[playerid] != drunknew)
		{
			new wfps = pDrunkLevelLast[playerid] - drunknew;

			if (0 < wfps < 200) pFPS[playerid] = wfps;
			pDrunkLevelLast[playerid] = drunknew;
		}
	}
	CBplayer[playerid]++;
	pweap = GetPlayerWeapon(playerid);
	if(CBplayer[playerid] > 30)
	{
	    if(pweap == WEAPON_DEAGLE)
	    {
	        if(GetPlayerAnimationIndex(playerid) == 1179)
	        {
	            new animlib[32], animname[32];
	            GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	            if(!strcmp(animlib,"PED"))
	            {
	                if(!strcmp(animname,"HIT_WALK"))
	                {
	                    COD_BAN(playerid,"Anti Cheat","Auto C-BUG");
	                    return 1;
	                }
	            }
	        }
	    }
	    CBplayer[playerid] = 0;
	}
	if(gClass[playerid] == RECON)
	{
	    if(pweap == WEAPON_DEAGLE) RemovePlayerAttachedObject(playerid, 3);
	    else SetPlayerAttachedObject(playerid, 3, 358, 1, -0.109999, -0.169998, 0.010000, -1.900000, 32.400024, 6.500004);
	}
	pLastUpdate[playerid] = GetTickCount();
	new KEY:Keys, ud, lr;
	GetPlayerKeys(playerid, Keys, ud, lr);
	switch(pweap)
	{
		case WEAPON_DEAGLE:
		{
			if(CheckCrouch[playerid] == 1)
			{
				if((Keys & KEY_CROUCH) && !((Keys & KEY_FIRE) || (Keys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) {
					if(Ammo[playerid] > GetPlayerAmmo(playerid)) OnPlayerCBug(playerid);
				}
			}
		}
	}
	if(!ud && !lr) { NotMoving[playerid] = 1;}
	else { NotMoving[playerid] = 0; }
	return 1;
}

forward CrouchCheck(playerid);
public CrouchCheck(playerid) {
	CheckCrouch[playerid] = 0;
	return 1;
}

forward OnPlayerCBug(playerid);
public OnPlayerCBug(playerid)
{
	if(PlayerInfo[playerid][InDuel]) return 1;
	if(InArena(playerid, NON))
	{
		GameTextForPlayer(playerid,"~r~do not cbug outside dm!", 3000, 3);
		TogglePlayerControllable(playerid, false);
		SetTimerEx("UnfreezeCB", 1000, false, "d", playerid);
		CheckCrouch[playerid] = 0;
	}
	else if(InArena(playerid, HSDM))
	{
		GameTextForPlayer(playerid,"~r~C-Bug is not allowed here!", 3000, 3);
		TogglePlayerControllable(playerid, false);
		SetTimerEx("UnfreezeCB", 1000, false, "d", playerid);
		CheckCrouch[playerid] = 0;
	}
	return 1;
}

forward UnfreezeCB(playerid);
public UnfreezeCB(playerid)
{
	TogglePlayerControllable(playerid, true);
	return 1;
}

IsPlayerAFK(playerid)
{
	new last = pLastUpdate[playerid]+1000;
	if(last < GetTickCount()) return 1;
	else return 0;
}

//==============================================================================

//==============================================================================
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	foreach(new x : Player) {
		if(GetPlayerState(x) == PLAYER_STATE_SPECTATING)
		{
			if(PlayerInfo[x][SpecID] == playerid)
			{
				TogglePlayerSpectating(x, true);
				PlayerSpectateVehicle(x, vehicleid);
				PlayerInfo[x][SpecType] = ADMIN_SPEC_TYPE_VEHICLE;
			}
		}
	}
	if(!ispassenger)
	{
		new kk = GetPlayerTeam(playerid);
		foreach(new i: Player)
		{

			if( i != playerid)
			{

				if(GetPlayerVehicleID(i) == vehicleid)
				{

					if(GetPlayerVehicleSeat(i) == 0)
					{

						if(kk == GetPlayerTeam(i))
						{

							ClearAnimations(playerid);
							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							SetPlayerPos(playerid, x, y, z+5);
							GameTextForPlayer(playerid, "~r~Don't jack your Team vehicle", 3000, 3);
							return 0;
						}
					}
				}
			}
		}
	}
	else
	{
	    new vmod = GetVehicleModel(vehicleid);
		if(vmod == chopperid || vmod == chopperid2)
		{
			SetPVarInt(playerid,"chop_id",GetPlayerVehicleID(playerid));
			SetPVarInt(playerid,"roped",0);
			SendClientMessage(playerid, -1, "<!> Press Left ALT / Left Mouse button to eject yourself using helicopter rope.");
		}
		else SetPVarInt(playerid,"chop_id",0);
	}
	return 1;
}
iswheelmodel(modelid) {
	new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
	new sz = sizeof(wheelmodels);
	for(new wm; wm < sz; wm++) {
		if (modelid == wheelmodels[wm])
		return true;
	}
	return false;
}

IllegalCarNitroIde(carmodel) {
	new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
	new sz = sizeof(illegalvehs);
	for(new iv; iv < sz; iv++) {
		if (carmodel == illegalvehs[iv])
		return true;
	}
	return false;
}
islegalcarmod(vehicleide, componentid) {
	if(vehicleide == INVALID_VEHICLE_ID) return true;
	vehicleide = GetVehicleModel(vehicleide);
	new modok = false;
	if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {
		if (!IllegalCarNitroIde(vehicleide))
		modok = true;
	} else {
		new sz = sizeof(legalmods);
		for(new lm; lm < sz; lm++) {
			if (legalmods[lm][0] == vehicleide) {
				for(new J = 1; J < 22; J++) {
					if (legalmods[lm][J] == componentid)
					{
						if(legalmods[lm][J] != 0000) modok = true;
					}
				}
			}
		}
	}
	return modok;
}

public OnVehicleMod(playerid,vehicleid,componentid)
{
	if (!islegalcarmod(vehicleid, componentid))
	{
	    RemoveVehicleComponent(vehicleid, componentid);
		return 0;
	}
	if(GetPlayerInterior(playerid) == 0)
	{
		if(componentid != 1084)
		{
			if(PlayerInfo[playerid][Level] < 1)
			{
				RemoveVehicleComponent(vehicleid, componentid);
				new string[128];
				format(string, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) has been banned for vehicle modding hacks.", PlayerInfo[playerid][Nick], playerid);
				AntiCheatNotification(-1, string);
				COD_BAN(playerid,"Anticheat", "Vehicle Mod Hack");
				Kick(playerid);
			}
		}
	}
	return 1;
}
//==============================================================================
IsVehicleHasDriver(vehicleid)
{
	foreach(new i : Player) if(GetPlayerState(i) == PLAYER_STATE_DRIVER) if(GetPlayerVehicleID(i) == vehicleid) return 1;
	return 0;
}

RankRequired(playerid, const veh[], const clas[], scoree, model)
{
	PlayerTextDrawSetString(playerid, pHYD[playerid][0], "Vehicle: ~r~~h~%s~n~~w~Class: ~r~~h~%s~n~~w~Score To Unlock Class: ~r~~h~%d", veh, clas, scoree);
	PlayerTextDrawSetPreviewModel(playerid, pHYD[playerid][1], model);
	TextDrawShowForPlayer(playerid,HYD[0]);
	TextDrawHideForPlayer(playerid,HYD[1]);
	PlayerTextDrawShow(playerid,pHYD[playerid][0]);
	PlayerTextDrawShow(playerid,pHYD[playerid][1]);
	SetTimerEx("HideRankRequired", 8000, false, "d", playerid);
}

LicenseRevoked(playerid)
{
    TextDrawShowForPlayer(playerid, Revoked_License[0]);
    TextDrawShowForPlayer(playerid, Revoked_License[1]);
    SetTimerEx("HideLicenseRevoked", 3000, false, "d", playerid);
}

forward HideRankRequired(playerid);
public HideRankRequired(playerid)
{
	TextDrawHideForPlayer(playerid,HYD[0]);
	TextDrawHideForPlayer(playerid,HYD[1]);
	PlayerTextDrawHide(playerid,pHYD[playerid][0]);
	PlayerTextDrawHide(playerid,pHYD[playerid][1]);
	return 1;
}

forward HideLicenseRevoked(playerid);
public HideLicenseRevoked(playerid)
{
	TextDrawHideForPlayer(playerid, Revoked_License[0]);
    TextDrawHideForPlayer(playerid, Revoked_License[1]);
	return 1;
}

GivePilotVehHP(vehicleid)
{
	new Float:vhp; GetVehicleHealth(vehicleid, vhp);
	SetVehicleHealth(vehicleid, vhp+150.00);
}
ReducePilotVehHP(vehicleid)
{
	new Float:vhp; GetVehicleHealth(vehicleid, vhp);
	SetVehicleHealth(vehicleid, vhp-150.00);
}

public OnPlayerStateChange(playerid, PLAYER_STATE:newstate, PLAYER_STATE:oldstate)
{
    if(newstate == PLAYER_STATE_PASSENGER)
	{
		for(new i = 0; i < MAX_ZONES; ++i)
		{
			if(IsPlayerCapturing[playerid]{ i }) {	LeavingZONE(playerid, i); HidePlayerProgressBar(playerid, ZBar[playerid]); TextDrawHideForPlayer(playerid, Capture_PTD[i]); break;}
			if(IsPlayerHelping[playerid]{ i })
			{
				SendClientMessage(playerid, Dred,"[ZONE-EXIT] You are no longer helping to capture this zone.");
				IsPlayerHelping[playerid]{ i } = false;
				HidePlayerProgressBar(playerid, ZBar[playerid]);
				TextDrawHideForPlayer(playerid, Capture_PTD[i]);
    			break;
			}
		}
		new vehid = GetPlayerVehicleID(playerid);
		new bool:notempty;
		foreach(new i : Player)
		{
			if(GetPlayerVehicleID(i) == vehid)
			{
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
				{
					notempty = true;
					break;
				}
			}
		}
		if(!notempty) RemovePlayerFromVehicle(playerid);
		for (new i = 0; i < 20; i++)
		{
			if(vehid == ClanVeh[i])
			{
				if(!CBaseOwnershipCheck(playerid))
				{
					ERR(playerid,"Vehicle dedicated for clan base members only.");
					RemovePlayerFromVehicle(playerid);
					RemovePlayerMapIcon(playerid, 40);
					break;
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(InDrone[playerid]) InDrone[playerid] = false;
	}
	if(oldstate == PLAYER_STATE_DRIVER)
	{
	    if(pLastVeh[playerid] != -1)
	    {
			new vehicleid = pLastVeh[playerid];
			new MOD = GetVehicleModel(vehicleid);
			switch(gClass[playerid])
			{
				case PILOT:
				{
					if(Bit_Get(ClassUpgrade[playerid], A_PILOT))
					{
						switch(MOD)
						{
							case 460,476,511,512,513,519,520,553,577,592,593,417,425,469,487,488,497,548,563: ReducePilotVehHP(vehicleid);
						}
					}
				}
				case SCOUT:
				{
					if(Bit_Get(ClassUpgrade[playerid], A_SCOUT))
					{
						if(MOD == 447)
						{
							new Float:vhp; GetVehicleHealth(vehicleid, vhp);
							SetVehicleHealth(vehicleid, vhp-100.00);
						}
					}
				}
				case A_ENGINEER:
				{
					if(Bit_Get(ClassUpgrade[playerid], A_ENGINEER))
					{
						if(MOD == 432)
						{
							new Float:vhp; GetVehicleHealth(vehicleid, vhp);
							SetVehicleHealth(vehicleid, vhp-100.00);
					    }
					}
				}
			}
		}
	}
	else if(newstate == PLAYER_STATE_DRIVER)
	{
		for(new i = 0; i < MAX_ZONES; ++i)
		{
			if(IsPlayerCapturing[playerid]{ i })
			{
				LeavingZONE(playerid, i);
			    HidePlayerProgressBar(playerid, ZBar[playerid]);
				TextDrawHideForPlayer(playerid, Capture_PTD[i]);
    			break;
			}
			if(IsPlayerHelping[playerid]{ i })
			{
				SendClientMessage(playerid, Dred,"[ZONE-EXIT] You are no longer helping to capture this zone.");
				IsPlayerHelping[playerid]{ i } = false;
			    HidePlayerProgressBar(playerid, ZBar[playerid]);
				TextDrawHideForPlayer(playerid, Capture_PTD[i]);
				break;
			}
		}
		new tick= GetTickCount();
	    if((tick-GetPVarInt(playerid, "cartime")) < 1000)
	    {
            SetPVarInt(playerid, "carspam", GetPVarInt(playerid, "carspam")+1);
            if(GetPVarInt(playerid, "carspam") >= 5)
	        {
                if(!InDrone[playerid]) if(PlayerInfo[playerid][Level] == 0) CheatKick(playerid,"vehicle enter/exit spam (troll)");
	        }
	   	}
	   	SetPVarInt(playerid, "cartime", tick);
	    SetPlayerArmedWeapon(playerid, WEAPON_FIST);
		new vehicleid = GetPlayerVehicleID(playerid);
		new MOD = GetVehicleModel(vehicleid);
		pLastVeh[playerid] = vehicleid;
		for (new i = 0; i < 20; i++)
		{
			if(vehicleid == ClanVeh[i])
			{
				if(!CBaseOwnershipCheck(playerid))
				{
					ERR(playerid,"Vehicle dedicated for clan base members only.");
					RemovePlayerFromVehicle(playerid);
					RemovePlayerMapIcon(playerid, 40);
					break;
				}
			}
		}
		switch(MOD)
		{
			case 432:
			{
				if (gClass[playerid] != ENGINEER)
				{
					if(PlayerInfo[playerid][dRank] < 2)
					{
						ERR(playerid," You need to be an Engineer or a VIP 2 to drive tanks.");
						RankRequired(playerid,"Rhino","Engineer",1000, 432);
						RemovePlayerFromVehicle(playerid);
					}
				}
				else
				{
					if(Bit_Get(ClassUpgrade[playerid], A_ENGINEER))
					{
						new Float:vhp; GetVehicleHealth(vehicleid, vhp);
						SetVehicleHealth(vehicleid, vhp+150.00);
					}
				}
			}
			case 447:
			{

				if (gClass[playerid] != PILOT)
				{
					if(gClass[playerid] != SCOUT)
					{
						if(PlayerInfo[playerid][dRank] < 2 && PlayerInfo[playerid][License])
						{
							ERR(playerid," You need to be a Pilot or a VIP 2 to drive sea-sparrow.");
							RankRequired(playerid,"Sparrows","Pilot / Scout",1000, 447);
							RemovePlayerFromVehicle(playerid);
						}

						else if(!PlayerInfo[playerid][License])
		    			{
		    			    ERR(playerid," Your pilot license is revoked, you can't use sea-sparrows.");
		    			    LicenseRevoked(playerid);
		    			    RemovePlayerFromVehicle(playerid);
		    			}
					}
					else
					{
						if(Bit_Get(ClassUpgrade[playerid], A_SCOUT))
						{
                            if(!PlayerInfo[playerid][License])
		    				{
		    			    	ERR(playerid," Your pilot license is revoked, you can't use sea-sparrows.");
		    			    	LicenseRevoked(playerid);
		    			    	RemovePlayerFromVehicle(playerid);
		    				}
		    				else
		    				{
								new Float:vhp; GetVehicleHealth(vehicleid, vhp);
								SetVehicleHealth(vehicleid, vhp+100.00);
							}
						}
					}
				}
			}
			case 520:
			{
			    SendClientMessage(playerid,Lg,"You can eject from your hydra by pressing 'Y' key.");
				if(gClass[playerid] != PILOT || (gClass[playerid] == PILOT && GetPlayerScore(playerid) < 7500))
				{
					if(PlayerInfo[playerid][dRank] < 2 && PlayerInfo[playerid][License])
					{
						ERR(playerid," You need to be a Pilot or a VIP 2 to pilot Hydras.");
						RankRequired(playerid,"Hydra","Pilot",7500, 520);
						RemovePlayerFromVehicle(playerid);
					}
					else if(!PlayerInfo[playerid][License])
					{
					    ERR(playerid," Your pilot license is revoked, you can't use hydras.");
    			    	LicenseRevoked(playerid);
    			    	RemovePlayerFromVehicle(playerid);
					}
				}
			}
			case 425:
			{
				if(gClass[playerid] != PILOT || (gClass[playerid] == PILOT && GetPlayerScore(playerid) < 7500))
				{
					if(PlayerInfo[playerid][dRank] < 2 && PlayerInfo[playerid][License])
					{
						ERR(playerid," You need to be a Pilot to use Hunters, or VIP Level 2.");
						RankRequired(playerid,"Hunter","Pilot",7500,425);
						RemovePlayerFromVehicle(playerid);
					}
					else if(!PlayerInfo[playerid][License])
    				{
    			    	ERR(playerid," Your pilot license is revoked, you can't use hunters.");
    			    	LicenseRevoked(playerid);
    			    	RemovePlayerFromVehicle(playerid);
    				}
				}
			}
			case 476:
			{

				SendClientMessage(playerid,Lg,"You can drop bombs by pressing 'Y' button.");
				if(GetPlayerScore(playerid) < 500 && PlayerInfo[playerid][License])
				{
					ERR(playerid," You need 500 scores to drive a rustler.");
					RankRequired(playerid,"Rustler","Any",500,476);
					RemovePlayerFromVehicle(playerid);
				}
				else if(!PlayerInfo[playerid][License])
				{
				    ERR(playerid," Your pilot license is revoked, you can't use rustlers.");
    			    LicenseRevoked(playerid);
    			    RemovePlayerFromVehicle(playerid);
				}
			}
			case 512:
			{
				SendClientMessage(playerid,Lg,"You can drop toxic bombs by pressing 'Y' button.");

				if(GetPlayerScore(playerid) < 30000 && PlayerInfo[playerid][License])
				{
					ERR(playerid," You need 30000 Score to pilot a CropDust.");
					RankRequired(playerid,"CropDust","Any",30000,512);
					RemovePlayerFromVehicle(playerid);
				}
				else if(!PlayerInfo[playerid][License])
    			{
    			    ERR(playerid," Your pilot license is revoked, you can't use cropdusters.");
    			    LicenseRevoked(playerid);
    			    RemovePlayerFromVehicle(playerid);
    			}
			}
			case 543:
			{

				if (GetPlayerScore(playerid) >4999 || PlayerInfo[playerid][dRank] > 1) SendClientMessage(playerid,Lg,"MML: Use /Fire or press 2 to launch a missile");
				else
				{

					SendClientMessage(playerid,Dred,"* You need to be rank 9 (General) [5000 score] or VIP Level 2.");
					RemovePlayerFromVehicle(playerid);
				}
			}
			case 554:
			{
				if(GetPlayerScore(playerid) >4999 || PlayerInfo[playerid][dRank] > 1) SendClientMessage(playerid,Lg,"MML: Use /Fire or press 2 to launch a missile");
				else
				{

					SendClientMessage(playerid,Dred,"* You need to be rank 9 (General) [5000 score] or VIP Level 2.");
					RemovePlayerFromVehicle(playerid);
				}
			}
		}
		if(gClass[playerid] == PILOT) if(Bit_Get(ClassUpgrade[playerid], A_PILOT))
		{
			switch(MOD)
			{
				case 460,476,511,512,513,519,520,553,577,592,593,417,425,469,487,488,497,548,563: GivePilotVehHP(vehicleid);
			}
		}
	}
	return 1;
}

//==============================================================================
public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(PlayerInfo[playerid][DoorsLocked] == 1) SetVehicleParamsForPlayer(vehicleid,playerid,false,false);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		foreach(new i : Player)
		{
			if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
			{
				if(GetPlayerVehicleID(i) == vehicleid){
					SendClientMessage(i,Dred,"[LEAVING] The driver is leaving the vehicle.");
					RemovePlayerFromVehicle(i);
				}
			}
		}
	}
	#if defined ENABLE_SPEC
	foreach(new x : Player)
	{
		if(GetPlayerState(x) == PLAYER_STATE_SPECTATING)
		{
			if(PlayerInfo[x][SpecID] == playerid)
			{
				if(PlayerInfo[x][SpecType] == ADMIN_SPEC_TYPE_VEHICLE)
				{
					TogglePlayerSpectating(x, true);
					PlayerSpectatePlayer(x, playerid);
					PlayerInfo[x][SpecType] = ADMIN_SPEC_TYPE_PLAYER;
				}
			}
		}
	}
	#endif
	return 1;
}

//==============================================================================
#if defined ENABLE_SPEC

StartSpectate(playerid, specplayerid)
{
	if(Bit_Get(ToggleState[playerid], TOGGLE_SPECTDS)) RefrechCON(playerid,specplayerid);
	SendClientMessage(playerid,-1, "Spectating: %s", PlayerInfo[specplayerid][Nick]);
	foreach(new x : Player) if(GetPlayerState(x) == PLAYER_STATE_SPECTATING) if(PlayerInfo[x][SpecID] == playerid) AdvanceSpectate(x);
	SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
	TogglePlayerSpectating(playerid, true);
	new vid = GetPlayerVehicleID(specplayerid);
	if(vid != 0) {
		PlayerSpectateVehicle(playerid, vid);
		PlayerInfo[playerid][SpecID] = specplayerid;
		PlayerInfo[playerid][SpecType] = ADMIN_SPEC_TYPE_VEHICLE;
	}
	else {
		PlayerSpectatePlayer(playerid, specplayerid);
		PlayerInfo[playerid][SpecID] = specplayerid;
		PlayerInfo[playerid][SpecType] = ADMIN_SPEC_TYPE_PLAYER;
	}

	return 1;
}

RefrechCON(playerid,id)
{
	new st[200],Float:HP,Float:AR;
	GetPlayerHealth(id,HP);
	GetPlayerArmour(id,AR);
	PlayerTextDrawSetString(playerid, SpecPanel_PTD[playerid][1], "~w~Health: ~r~%0.2f~n~~w~ARMOUR: ~r~%0.2f~n~~w~Ping: ~r~%d~n~~w~FPS: ~r~%d~n~~w~Packet loss: ~r~%.2f~n~~w~Score: ~r~%i~n~~w~Team: ~r~%s~n~~w~class: ~r~%s",HP, AR, GetPlayerPing(id), pFPS[id], NetStats_PacketLossPercent(id), GetPlayerScore(id), GetTeamName(id), GetClass(id));

	st[0] = EOS; //Let's assign the index 0 to EOS - End of String, which will clear all it's characters.

	new WeapName[17], WEAPON_SLOT:slot, WEAPON:weap, ammo, wh;

	for (; slot < MAX_WEAPON_SLOTS; slot++)
	{
		GetPlayerWeaponData(id, slot, weap, ammo);
		if(ammo != 0)
		{
			if(weap != WEAPON_FIST)
			{
			    if(slot == WEAPON_SLOT_UNARMED) ammo = 1;
				GetWeaponName(weap, WeapName, sizeof(WeapName) );
				if(weap == WEAPON_MOLTOV) WeapName = "Molotov";
				format(st, _, "%s~g~Slot %d: %s (%d)~n~", st, slot, WeapName, ammo);
				wh++;
			}
		}
		if(wh) PlayerTextDrawSetString(playerid, SpecPanel_PTD[playerid][2], st);
		else PlayerTextDrawSetString(playerid, SpecPanel_PTD[playerid][2], "No weapons");
	}
	return 1;
}

PD_CONSOLE_HIDE(playerid)
{
	CancelSelectTextDraw(playerid);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[0]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[1]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[2]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[3]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[4]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[5]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[6]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[7]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[8]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[9]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[10]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[11]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[12]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[13]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[14]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[15]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[16]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[17]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[18]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[19]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[20]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[21]);
	TextDrawHideForPlayer(playerid, SpecPanel_TD[22]);

	PlayerTextDrawHide(playerid, SpecPanel_PTD[playerid][0]);
	PlayerTextDrawHide(playerid, SpecPanel_PTD[playerid][1]);
	PlayerTextDrawHide(playerid, SpecPanel_PTD[playerid][2]);
}

StopSpectate(playerid)
{
	if(Bit_Get(ToggleState[playerid], TOGGLE_SPECTDS)) PD_CONSOLE_HIDE(playerid);
	TogglePlayerSpectating(playerid, false);
	SPTimer[playerid] = 0;
	PlayerInfo[playerid][SpecID] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][SpecType] = ADMIN_SPEC_TYPE_NONE;
	Spectating[playerid] = 0;
	SetPlayerHealth(playerid,LastHP[playerid], LastAR[playerid]);
	SetPlayerInterior(playerid,LasInterior[playerid]);
	SetPlayerVirtualWorld(playerid,LastWorld[playerid]);
	Streak[playerid] = LastSpree[playerid];
	SetPlayerPos(playerid,LastPos[0][playerid],LastPos[1][playerid],LastPos[2][playerid]);
	SetPVarInt(playerid,"SPEC",1);
	CancelSelectTextDraw(playerid);
	GameTextForPlayer(playerid,"~n~~n~~n~~w~Spectate mode ended",1000,3);
	return 1;
}

AdvanceSpectate(playerid)
{
	if(GetMaxPl() == 2) { StopSpectate(playerid); return 1; }
	new sp = PlayerInfo[playerid][SpecID];
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		if(sp != INVALID_PLAYER_ID)
		{
			for(new x=sp+1; x<=MAX_PLAYERS; x++)
			{
				if(x == MAX_PLAYERS) x = 0;
				if(IsPlayerConnected(x) && x != playerid)
				{
					if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][SpecID] != INVALID_PLAYER_ID || (GetPlayerState(x) != PLAYER_STATE_ONFOOT && GetPlayerState(x) != PLAYER_STATE_DRIVER && GetPlayerState(x) != PLAYER_STATE_PASSENGER))
					{
						if(Bit_Get(ToggleState[playerid], TOGGLE_SPECTDS))
						{
							RefrechCON(playerid,sp);
							PlayerTextDrawSetString(playerid, SpecPanel_PTD[playerid][0], "waiting...");
						}
						SendClientMessage(playerid, -1, "Spectating: %s", PlayerInfo[sp][Nick]);
						continue;
					}
					else
					{
						StartSpectate(playerid, x);
						break;
					}
				}
			}
		}
	}
	return 1;
}

ReverseSpectate(playerid)
{
	if(GetMaxPl() == 2) { StopSpectate(playerid); return 1; }
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{

		if(PlayerInfo[playerid][SpecID] != INVALID_PLAYER_ID)
		{

            if(Bit_Get(ToggleState[playerid], TOGGLE_SPECTDS))
            {
				RefrechCON(playerid,PlayerInfo[playerid][SpecID]);
				PlayerTextDrawSetString(playerid, SpecPanel_PTD[playerid][0], "waiting...");
			}
			for(new x=PlayerInfo[playerid][SpecID]-1; x>-1; x--)
			{
				if(x == 0) x = MAX_PLAYERS;
				if(IsPlayerConnected(x) && x != playerid)
				{
					if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][SpecID] != INVALID_PLAYER_ID || (GetPlayerState(x) != PLAYER_STATE_ONFOOT && GetPlayerState(x) != PLAYER_STATE_DRIVER && GetPlayerState(x) != PLAYER_STATE_PASSENGER))
					{
						continue;
					}
					else
					{
						StartSpectate(playerid, x);
						break;
					}
				}
			}
		}
	}
	return 1;
}

//-------------------------------------------
#endif

//==============================================================================
EraseVehicle(vehicleid)
{
	foreach(new i : Player)
	{
		new Float:X,Float:Y,Float:Z;
		if (GetPlayerVehicleID(i) == vehicleid)
		{
			GetPlayerPos(i,X,Y,Z);
			SetPlayerPos(i,X,Y,Z+2);
			SetVehicleToRespawn(vehicleid);
		}
		SetVehicleParamsForPlayer(vehicleid, i, false, true);
	}
	SetTimerEx("VehRes",3000,false,"d",vehicleid);
	return 1;
}

CarSpawner(playerid,model)
{
	if(IsPlayerInAnyVehicle(playerid)) return ERR(playerid,"You already own a vehicle.");
	new Float:x, Float:y, Float:z, Float:angle;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);
	if(PlayerInfo[playerid][pCar] != -1) CarDeleter(PlayerInfo[playerid][pCar]);
	new vehicleid=CreateVehicle(model, x, y, z, angle, -1, -1, -1);
	PutPlayerInVehicle(playerid, vehicleid, 0);
	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
	ChangeVehicleColours(vehicleid,0,7);
	PlayerInfo[playerid][pCar] = vehicleid;
	if(model == 501)
	{
		if(Bit_Get(ClassUpgrade[playerid], A_RECON))
		{
			new Float:vehhp; GetVehicleHealth(vehicleid, vehhp);
			SetVehicleHealth(vehicleid, vehhp+50.00);
		}
	}
	if(model == 522 || model == 411)
	{
		CanInvis[vehicleid] = true;
		IsInvis[vehicleid] = false;
	}
	return 1;
}

CarDeleter(vehicleid)
{
	foreach(new i : Player) {
		new Float:X,Float:Y,Float:Z;
		if(IsPlayerInVehicle(i, vehicleid)) {
			RemovePlayerFromVehicle(i);
			GetPlayerPos(i,X,Y,Z);
			SetPlayerPos(i,X,Y+3,Z);
		}
		SetVehicleParamsForPlayer(vehicleid, i, false, true);
	}
	SetTimerEx("VehRes",1500,false,"i",vehicleid);
}

forward VehRes(vehicleid);
public VehRes(vehicleid)
{
	DestroyVehicle(vehicleid);
}
public OnVehicleDeath(vehicleid, killerid)
{
	new model = GetVehicleModel(vehicleid);
    if(model == chopperid || model == chopperid2)
	{
	    foreach(new shg : Player)
	    {
	        if(GetPVarInt(shg,"chop_id") == vehicleid && GetPVarInt(shg,"roped") == 1)
	        {
	            DestroyDynamicCP(RopeCP[shg]);
	            SetPVarInt(shg,"roped",0);
	            ClearAnimations(shg);
	            SetPlayerHealth(shg, LastHP[shg], LastAR[shg]);
	            TogglePlayerControllable(shg, true);
	            for(new destr3=0;destr3<ropelength;destr3++) { DestroyDynamicObject(r0pes[shg][destr3]); r0pes[shg][destr3] = -1;}
			}
		}
	}
	VehiclesDestroyed[killerid] ++;
	if(QuestContent[3] == CONTENT_KVEHICLES)
	{
	    QuestProgress[killerid][3] ++;
        if(VehiclesDestroyed[killerid] == 10)
	    {
	    	if(!Bit_Get(QuestDone[killerid], 3))
	    	{
	    	    Bit_Let(QuestDone[killerid], 3);
	    	    SendClientMessage(killerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 4 and got $50k & 100XP.");
	    	    TextDrawHideForPlayer(killerid,Quest[3]);
	    	    PlayerInfo[killerid][XP] += 100;
	    	    GiveCash(killerid, 50000);
	    	}
		}
	}
	if(CanInvis[vehicleid])
	{
		LinkVehicleToInterior(vehicleid, 0);
		CanInvis[vehicleid] = false;
	}
	if(VehicleBomber[vehicleid] != -1)
	{
		new playerid = VehicleBomber[vehicleid];
		C4Planted[playerid] = 0;
		VehicleBomber[vehicleid] = -1;
		KillTimer(VehicleBombTimer[playerid]);
	}
	switch(model)
	{
		case 543:
		{
			DestroyDynamicObject(WMML[vehicleid][V_O_SAM]);
			WMML[vehicleid][V_O_SAM] = -1;
		}
		case 554:
		{
			DestroyDynamicObject(WMML[vehicleid][V_O_SAM]);
			WMML[vehicleid][V_O_SAM] = -1;
		}
	}
	new Float:P[3]; GetVehiclePos(vehicleid, P[0], P[1], P[2]);
	if(P[2] <= 0.4) return true;

	switch(model)
	{
		case PLANES: return true;
		case HELIS: return true;
		default:
		{

			new ht = random(EFFECT_RANDOM), xang = random(EFFECT_RANDOM)-EFFECT_FIX_DEFAULT, yang = random(EFFECT_RANDOM)-EFFECT_FIX_DEFAULT, zang = random(EFFECT_RANDOM);
			GetVehiclePos(vehicleid, P[0], P[1], P[2]);
			//CreateExplosion(P[0], P[1], P[2]+EFFECT_EXPLOSIONOFFSET, EFFECT_EXPLOSIONTYPE, EFFECT_EXPLOSIONRADIUS);
			SetVehicleAngularVelocity(vehicleid, xang*EFFECT_MULTIPLIER, yang*EFFECT_MULTIPLIER, zang*EFFECT_FIX_Z);
			GetVehicleVelocity(vehicleid, P[0], P[1], P[2]);
			SetVehicleVelocity(vehicleid, P[0], P[1], P[2] + (ht*EFFECT_FIX_Z) );
		}
	}
	return 1;
}

SetDynamicObjectFaceToPlayer(objectid,playerid)
{
	new Float:X[2], Float:Y[2], Float:Z;
	new Float:Angle;

	GetDynamicObjectPos(objectid, X[0], Y[0], Z);
	GetPlayerPos(playerid, X[1], Y[1], Z);

	if(X[0] > X[1]) { if(Y[0] > Y[1]) Angle = floatabs(atan2(floatsub(X[1], X[0]), floatsub(Y[1], Y[0]))); }
	if(X[0] > X[1]) { if(Y[0] <= Y[1]) Angle = floatabs(atan2(floatsub(Y[0], Y[1]), floatsub(X[1], X[0]))) + 270.0; }
	if(X[0] <= X[1]) { if(Y[0] > Y[1]) Angle = floatabs(atan2(floatsub(Y[1], Y[0]), floatsub(X[0], X[1]))) + 90.0; }
	if(X[0] <= X[1]) { if(Y[0] <= Y[1]) Angle = floatabs(atan2(floatsub(X[0], X[1]), floatsub(Y[0], Y[1]))) + 180.0; }
	SetDynamicObjectRot(objectid,0,0,Angle);
	return 1;
}

CMD:fire(playerid)
{
	new vid = GetPlayerVehicleID(playerid);
	if(vid == 0) return ERR(playerid,"You are not in vehicle");
	new v = GetVehicleModel(vid);
	if(v == 543 || v == 554)
	{
		if(WMML[vid][V_AMMO] < 1) return ERR(playerid,"MML out of ammo");
		if(ServerInfo[MML] == false) return ERR(playerid,"The MML is currently disabled.");
		new remain = GetTickCount() - PlayerInfo[playerid][mmlt];
		if(PlayerInfo[playerid][dRank] < 5)
		{
			if(remain < 5000)
			{
				SendClientMessage(playerid,Dred,"* Please wait %d seconds to use this command again", (5000-remain)/1000);
				return 1;
			}
		}
		else
		{
			if(remain < 15000)
			{
				SendClientMessage(playerid,Dred,"* Please wait %d seconds to use this command again", (15000-remain)/1000);
				return 1;
			}
		}
		if(IsValidDynamicObject(WMML[vid][V_MISSILE])) return ERR(playerid,"Please Wait before launching another missile");
		new Float:x,Float:y,Float:z,Float:zAng,target = INVALID_PLAYER_ID;
		GetPlayerPos(playerid,x,y,z);
		new kk = GetPlayerTeam(playerid);
		foreach(new i : Player)
		{

			if(IsPlayerAFK(i)) continue;
			if(GetPlayerTeam(i) != kk)
			{
				if(PlayerInfo[i][GPS] == false)
				{
					if(PlayerInfo[i][dRank] < 4)
					{
						if(IsPlayerInRangeOfPoint(i,180.0,x,y,z))
						{
							new sz = sizeof(BASERAPE);
							for(new zo = 0; zo< sz; zo++) { if(IsPlayerInArea(i, BASERAPE[zo][MinXX], BASERAPE[zo][MinYY], BASERAPE[zo][MaxXX], BASERAPE[zo][MaxYY])) return ERR(playerid, "AAML Base Raid is not allowed.");}
							new mod = GetVehicleModel(GetPlayerVehicleID(i));
							if(mod == 520 || mod == 425 || mod == 476 || mod == 487 || mod == 447 || mod == 469 || mod == 417 || mod == 548 || mod == 497 || mod == 553 || mod == 563 || mod == 592 || mod == 593 || InZeppelin[i] > 0)
							{
								target = i;
								break;
							}
						}
					}
				}
			}
		}
		if(target == INVALID_PLAYER_ID) return ERR(playerid,"No enemy airplanes in range (Or enemy airplanes are GPS protected)");
		SendClientMessage(playerid,Lg,"Targeting %s(%d) ...",PlayerInfo[target][Nick],target);
		GetVehiclePos(vid,x,y,z);
		GetVehicleZAngle(vid,zAng);
		PlayerInfo[playerid][mmlt] = GetTickCount();
		PlayerInfo[playerid][MMLOBJECT] = CreateDynamicObject(345, x,y, z+1.10,   0.0, 0.0, zAng);
		PlayerPlaySound(playerid,1159,x,y,z);
		PlayerPlaySound(target,1159,x,y,z);
		GetVehiclePos(vid,x,y,z);
		GetVehicleZAngle(vid,zAng);
		x += (80 * floatsin(-zAng, degrees));
		y += (80 * floatcos(-zAng, degrees));
		SetDynamicObjectFaceToPlayer(WMML[vid][V_MISSILE],target);
		MoveDynamicObject(PlayerInfo[playerid][MMLOBJECT],x,y,z+68,70);
		if(InZeppelin[target] < 1) SendClientMessage(target,Dred,"WARNING: %s(%d) is Targeting your vehicle",PlayerInfo[playerid][Nick],playerid);
		GameTextForPlayer(target,"~r~Anti aircraft Targeting",5000,3);
		WMML[vid][V_AMMO] --;
		WMML[vid][V_SPEED] = 50;
		new string[256];
		if(v == 543) format(string, _, "[ Anti Aircraft ]\nMissiles [ %d / 5 ]", WMML[vid][V_AMMO]);
		if(v == 554) format(string, _, "[ Anti Aircraft Truck ]\nMissiles [ %d / 10 ]", WMML[vid][V_AMMO]);
		Update3DTextLabelText(WMML[vid][V_TEXT],0x3E9EFFFF,string);
		PlayerInfo[playerid][MMLTARGET] = target;
	}
	else return ERR(playerid,"You are not driving a AMML ( Anti aircraft missile launcher )");
	return 1;
}



public OnVehicleSpawn(vehicleid)
{
	new mod = GetVehicleModel(vehicleid);
	switch(mod)
	{
		case 543:
		{
			DestroyDynamicObject(WMML[vehicleid][V_O_SAM]);
			WMML[vehicleid][V_O_SAM] = -1;
			WMML[vehicleid][V_O_SAM] = CreateDynamicObjectEx(3267,0,0,-1000,0,0,0,100,100);
			AttachDynamicObjectToVehicle(WMML[vehicleid][V_O_SAM], vehicleid, 0.000000,-1.275000,-0.599999,0.000000,0.000000,0.000000);
			WMML[vehicleid][V_AMMO] = 5;
			//ChangeVehicleColours(vehicleid,0,0);
			AddVehicleComponent(vehicleid, 1084);
			Update3DTextLabelText(WMML[vehicleid][V_TEXT], 0x3E9EFFFF, "[ Anti Aircraft ]\nMissiles [ %d / 5 ]", WMML[vehicleid][V_AMMO]);
			foreach(new b : Player) Streamer_Update(b);
		}
		case 432:
		{
			SetVehicleHealth(vehicleid, 2000.00);
		}
		case 554:
		{
			DestroyDynamicObject(WMML[vehicleid][V_O_SAM]);
			WMML[vehicleid][V_O_SAM] = -1;
			WMML[vehicleid][V_O_SAM] = CreateDynamicObjectEx(3267,0,0,-1000,0,0,0,100,100);
			AttachDynamicObjectToVehicle(WMML[vehicleid][V_O_SAM], vehicleid, 0.000000, -1.600000, -0.399999, 0.000000, 0.000000, 0.000000);
			WMML[vehicleid][V_AMMO] = 10;
			//ChangeVehicleColours(vehicleid,1,1);
			AddVehicleComponent(vehicleid, 1084);
			Update3DTextLabelText(WMML[vehicleid][V_TEXT], 0x3E9EFFFF, "[ Anti Aircraft Truck ]\nMissiles [ %d / 10 ]", WMML[vehicleid][V_AMMO]);
			foreach(new b : Player) Streamer_Update(b);
		}
		case 476:
		{
			RUSTL[vehicleid][R_BOMB] = 5;
			Update3DTextLabelText(RUSTL[vehicleid][R_TEXT],0x3E9EFFFF, "[ Bomber Plane ]\nBombs [ %d / 5 ]", RUSTL[vehicleid][R_BOMB]);
		}
		case 512:
		{
			CROPDUSTER[vehicleid][C_BOMB] = 5;
			Update3DTextLabelText(CROPDUSTER[vehicleid][C_TEXT], 0x3E9EFFFF, "[ Toxic Bomber Plane ]\nBombs [ %d / 5 ]", CROPDUSTER[vehicleid][C_BOMB]);
		}
	}
	for(new i =0; i < MAX_PLAYERS; i++)
	{
		if(vehicleid==PlayerInfo[i][pCar])
		{
			CarDeleter(vehicleid);
			PlayerInfo[i][pCar]=-1;
			CanInvis[vehicleid] = false;
			IsInvis[vehicleid] = false;
		}
	}
	return 1;
}

ReturnTeamColor(teamid)
{
	new color;
	switch(teamid)
	{
	    case -1: color = -1;
		case TEAM_ARAB: color = TEAM_ARAB_COLOR;
		case TEAM_USA: color = TEAM_USA_COLOR;
		case TEAM_FRANCE: color = TEAM_FR_COLOR;
		case TEAM_AUS: color = TEAM_AUS_COLOR;
		case TEAM_SOVIET: color = TEAM_SOVIET_COLOR;
		case TEAM_ID: color = TEAM_ID_COLOR;
		case TEAM_CH: color = TEAM_CH_COLOR;
		case TEAM_EURASIA: color = TEAM_EURASIA_COLOR;
		case TEAM_MERC: color = -1;
	}
	return color;
}

GetTeamColor(playerid)
{
	switch(gTeam[playerid])
	{
		case TEAM_ARAB: SetPlayerColor(playerid,TEAM_ARAB_COLOR);
		case TEAM_USA: SetPlayerColor(playerid,TEAM_USA_COLOR);
		case TEAM_FRANCE: SetPlayerColor(playerid,TEAM_FR_COLOR);
		case TEAM_AUS: SetPlayerColor(playerid,TEAM_AUS_COLOR);
		case TEAM_SOVIET: SetPlayerColor(playerid, TEAM_SOVIET_COLOR);
		case TEAM_ID: SetPlayerColor(playerid,TEAM_ID_COLOR);
		case TEAM_CH: SetPlayerColor(playerid,TEAM_CH_COLOR);
		case TEAM_EURASIA: SetPlayerColor(playerid,TEAM_EURASIA_COLOR);
		case TEAM_MERC: SetPlayerColor(playerid,-1);
	}
}
public OnPlayerRequestSpawn(playerid)
{
	if(PlayerInfo[playerid][LoggedIn] == false)
	{
		SendClientMessage(playerid,Dred,"Please login or register.");
		return 0;
	}
	new diff, kk;
	for(new i = 1; i < MAX_TEAMS; i++)
	{
	    if(i == TEAM_NONE) continue;
		kk = GetTeamCount(gTeam[playerid]) - GetTeamCount(i);
		if(kk > diff) diff = kk;
	}
	if(PlayerInfo[playerid][dRank] < 3)
	{
		if(diff > 20)
		{
			SendClientMessage(playerid,red,"ERROR: This team is full. Try a different team!");
			return 0;
		}
	}
	return 1;
}
//==============================================================================



//==============================================================================


public OnPlayerEnterRaceCheckpoint(playerid)
{
	DisablePlayerRaceCheckpoint(playerid);
	return 1;
}

//==================== [ Jail & Freeze ]========================================

Jail1(player1)
{

	TogglePlayerControllable(player1,false);
	new Float:x, Float:y, Float:z;	GetPlayerPos(player1,x,y,z);
	SetPlayerCameraPos(player1,x+10,y,z+10);SetPlayerCameraLookAt(player1,x,y,z);
	SetTimerEx("Jail2",2000,false,"d",player1);
}

forward Jail2(player1);
public Jail2(player1)
{
	new Float:x, Float:y, Float:z; GetPlayerPos(player1,x,y,z);
	SetPlayerCameraPos(player1,x+7,y,z+5); SetPlayerCameraLookAt(player1,x,y,z);
	if(GetPlayerState(player1) == PLAYER_STATE_ONFOOT) SetPlayerSpecialAction(player1,SPECIAL_ACTION_HANDSUP);
	GameTextForPlayer(player1,"~r~Busted By Admins",7000,3);
	SetTimerEx("Jail3",2000,false,"d",player1);
}


forward Jail3(player1);
public Jail3(player1)
{
	new Float:x, Float:y, Float:z; GetPlayerPos(player1,x,y,z);
	SetPlayerCameraPos(player1,x+3,y,z); SetPlayerCameraLookAt(player1,x,y,z);
	SetTimerEx("JailPlayer",2000,false,"d",player1);
}

forward JailPlayer(player1);
public JailPlayer(player1)
{
	TogglePlayerControllable(player1,true);
	SetPlayerPos(player1,197.6661,173.8179,1003.0234);
	SetPlayerInterior(player1,3);
	SetPlayerVirtualWorld(player1,player1+100);
	ResetPlayerWeapons(player1);
	SetCameraBehindPlayer(player1);
}

CheckDMPlayer(playerid)
{
	new str[50];
	PlayerInfo[playerid][HELMET] = false;
	RemovePlayerAttachedObject(playerid,0);
	if(InArena(playerid, SDM))
	{

		SetPlayerSkin(playerid, 299);
		new rand = random(sizeof(SDMS));
		SetPlayerPos(playerid, SDMS[rand][0], SDMS[rand][1], SDMS[rand][2]);
		SetPlayerInterior(playerid, 3);
		format(str, _, "%s\nSniper Death-Match", GetRankName(playerid));
	}
	else if(InArena(playerid, CHDM))
	{
		SetPlayerSkin(playerid, 230);
		new rand = random(sizeof(CHDMS));
		SetPlayerPos(playerid, CHDMS[rand][0], CHDMS[rand][1], CHDMS[rand][2]);
		SetPlayerInterior(playerid, 15);
		format(str, _, "%s\nChainsaw Death-Match", GetRankName(playerid));
	}
	else if(InArena(playerid, EDM))
	{

		SetPlayerSkin(playerid, 299);
		new rand = random(sizeof(DMS));
		SetPlayerPos(playerid, DMS[rand][0], DMS[rand][1], DMS[rand][2]);
		SetPlayerInterior(playerid, 15);
		format(str, _, "%s\nDeath-Match", GetRankName(playerid));
	}
	else if(InArena(playerid, MDM))
	{

		new rand = random(sizeof(DMS));
		SetPlayerPos(playerid, MGDMS[rand][0], MGDMS[rand][1], MGDMS[rand][2]);
		format(str, _, "%s\nMinigun Death-Match", GetRankName(playerid));
		SetPlayerInterior(playerid, 2);
		SetPlayerVirtualWorld(playerid,88);
		SetPlayerSkin(playerid, 171);
	}
	else if(InArena(playerid, CBDM))
	{

		SetPlayerSkin(playerid, 230);
		new rand = random(sizeof(CBDMS));
		SetPlayerPos(playerid, CBDMS[rand][0], CBDMS[rand][1], CBDMS[rand][2]);
		SetPlayerInterior(playerid, 18);
		format(str, _, "%s\nCB Death-Match", GetRankName(playerid));
	}
	else if(InArena(playerid, HSDM))
	{
		SetPlayerSkin(playerid, 230);
		new rand = random(sizeof(HSDMS));
		SetPlayerPos(playerid, HSDMS[rand][0], HSDMS[rand][1], HSDMS[rand][2]);
		SetPlayerInterior(playerid, 1);
		format(str, _, "%s\nHeadshot Death-Match", GetRankName(playerid));
	}
	UpdateDynamic3DTextLabelText(RankLabel[playerid],-1,str);
	GameTextForPlayer(playerid, "~w~Type ~r~/Qdm ~w~To Exit ~n~DM ARENA", 3000, 3);
	SetPlayerColor(playerid, 0xFFFFFFFF);
	SetPlayerTeam(playerid, playerid);
	SendClientMessage(playerid, cb, "*Anti-Spawn kill protection for 5 seconds!");
	ResetPlayerWeapons(playerid);
	SpawnPR(playerid,5000);
	if(PlayerInfo[playerid][InClan] != -1) { if(PlayerInfo[playerid][cSkin] != -1) SetPlayerSkin(playerid,PlayerInfo[playerid][cSkin]); }
	return 0;
}


CMD:prestige(playerid)
{
	ShowPlayerDialog(playerid, 231, DIALOG_STYLE_LIST,"{1B879E}Prestige - Weapons","{B0B0B0}Prestige 1\n{B0B0B0}Prestige 2\n{B0B0B0}Prestige 3","Select","Cancel");
	return 1;
}

ShowTournamentTeamDialog(playerid)
{
    new currentteams = Iter_Count(CT_TEAMS);
	if(currentteams == 0) ShowPlayerDialog(playerid, MAKECT3_DIALOG, DIALOG_STYLE_LIST, "Clan Tournament Creator: Clan Adder", ">> Add a Clan", "Next", "Cancel");
	else
	{
	    new cat[500];
	    if(currentteams == CLAN_TOURNAMENT[CT_INITIAL_TEAMS]) strcat(cat, ">> Done\n");
		else strcat(cat, ">> Add a Clan\n");
	    foreach(new i : CT_TEAMS)
	    {
	        format(cat, _, "%sClan %d: %d\n", cat, i, CT_TEAM[i]);
	    }
     	ShowPlayerDialog(playerid, MAKECT3_DIALOG, DIALOG_STYLE_LIST, "Clan Tournament Creator: Clan Adder", cat, "Next", "Cancel");
	}
	return 1;
}

ShowDialog(playerid)
{
	new str[528];
	strcat(str,"{B0B0B0}Health - {80FF00}5000$\n{B0B0B0}Armour - {80FF00}5500$\n");
	strcat(str,"{B0B0B0}Weapons\n{B0B0B0}Deathmatch stadium\n");
	strcat(str,"{B0B0B0}Medic kit - {80FF00}3000$\n{B0B0B0}Armour pack - {80FF00}3000$\n{B0B0B0}Gas Mask - {80FF00}4000$\n{B0B0B0}Helmet - {80FF00}2500$\n{B0B0B0}GPS Scrambler - {80FF00}30000$\n{B0B0B0}Camouflage - {80FF00}55000$\n{B0B0B0}Drone - {80FF00}15000$\n{B0B0B0}Sniper DM\n{B0B0B0}C-BUG DM\n{B0B0B0}Minigun DM\n{B0B0B0}Headshot DM\n{B0B0B0}Chainsaw DM"); //\n{80FF00}More >>
	ShowPlayerDialog(playerid, 2, DIALOG_STYLE_LIST, "Briefcase", str, "Select", "Cancel");
	return 1;
}
WeaponShop(playerid)
{
	new str[505];
	if(gClass[playerid] == SCOUT) strcat(str,"{B0B0B0}Chainsaw - {80FF00}15000$\n{B0B0B0}FlashBang(5) - {80FF00}6000$\n{B0B0B0}Desert eagle - {80FF00}10000$\n{B0B0B0}Shotugun - {80FF00}9000$\n");
	else strcat(str,"{B0B0B0}Chainsaw - {80FF00}5000$\n{B0B0B0}Tear Gas(5) - {80FF00}6000$\n{B0B0B0}Desert eagle - {80FF00}10000$\n{B0B0B0}Shotugun - {80FF00}9000$\n");
	strcat(str,"{B0B0B0}Combat Shotgun - {80FF00}13000$\n{B0B0B0}Sawn-Off - {80FF00}40000$\n{B0B0B0}Uzi - {80FF00}16000$\n{B0B0B0}Tec9 - {80FF00}16000$\n{B0B0B0}MP5 - {80FF00}11000$\n");
	strcat(str,"{B0B0B0}AK-47 - {80FF00}12000$\n{B0B0B0}M4 - {80FF00}14000$\n{B0B0B0}Country Rifle - {80FF00}13000$\n{B0B0B0}Sniper Rifle - {80FF00}18000$\n{B0B0B0}RPG - {80FF00}20000$");
	ShowPlayerDialog(playerid, 30, DIALOG_STYLE_LIST, "Briefcase - Weapons", str, "Buy", "Back");
}

JailedPlayers()
{
	new JailedCount;
	foreach(new i : Player) if(PlayerInfo[i][JailTime] > 0) JailedCount++;
	return JailedCount;
}

FrozenPlayers()
{
	new FrozenCount; foreach(new i : Player) if(PlayerInfo[i][Frozen] == 1) FrozenCount++;
	return FrozenCount;
}

MutedPlayers()
{
	new coun; foreach(new i : Player) if(PlayerInfo[i][Muted] == true) coun++;
	return coun;
}

InVehCount()
{
	new InVeh; foreach(new i : Player) if(IsPlayerInAnyVehicle(i)) InVeh++;
	return InVeh;
}

OnBikeCount()
{
	new BikeCount;
	foreach(new i : Player) if(IsPlayerInAnyVehicle(i)) {
		new LModel = GetVehicleModel(GetPlayerVehicleID(i));
		switch(LModel)
		{

			case 448,461,462,463,468,471,509,510,521,522,523,581,586:  BikeCount++;
		}
	}
	return BikeCount;
}

InCarCount()
{
	new PInCarCount;
	foreach(new i : Player) {
		if(IsPlayerInAnyVehicle(i)) {
			new LModel = GetVehicleModel(GetPlayerVehicleID(i));
			switch(LModel)
			{

				case 448,461,462,463,468,471,509,510,521,522,523,581,586: {}
				default: PInCarCount++;
			}
		}
	}
	return PInCarCount;
}

//==========================[ Remote Console ]==================================

TotalGameTime(playerid, &h=0, &m=0, &s=0)
{
	PlayerInfo[playerid][TotalTime] = ( (gettime() - PlayerInfo[playerid][ConnectTime]) + (PlayerInfo[playerid][hours]*60*60) + (PlayerInfo[playerid][mins]*60) + (PlayerInfo[playerid][secs]) );

	h = floatround(PlayerInfo[playerid][TotalTime] / 3600, floatround_floor);
	m = floatround(PlayerInfo[playerid][TotalTime] / 60,   floatround_floor) % 60;
	s = floatround(PlayerInfo[playerid][TotalTime] % 60,   floatround_floor);

	return PlayerInfo[playerid][TotalTime];
}

//==============================================================================

TimeStamp()
{
	new time = GetTickCount() / 1000;
	return time;
}

IsValidWeapon(weaponid)
{
	if (weaponid > 0 && weaponid < 19 || weaponid > 21 && weaponid < 47) return 1;
	return 0;
}

IsValidSkin(SkinID)
{
	switch(SkinID)
	{
	    case 0,7: { }
	    case 9..41: { }
	    case 43..64: { }
	    case 66..73: { }
	    case 75..85: { }
	    case 87..118: { }
	    case 120..148: { }
	    case 150..207: { }
	    case 209..264: { }
	    case 274..288: { }
	    case 290..299: { }
	    default: { return 0; }
	}
	return 1;
}

ReturnPlayerID(const PlayerName[])
{
	foreach(new i : Player)
	{
		if(strfind(PlayerInfo[i][Nick],PlayerName,true)!=-1) return i;
	}
	return INVALID_PLAYER_ID;
}

GetVehicleModelIDFromName(const vname[])
{
	for(new i = 0; i < 211; i++)
	{
		if ( strfind(VehicleNames[i], vname, true) != -1 )
		return i + 400;
	}
	return -1;
}

WEAPON:GetWeaponIDFromName(const WeaponName[])
{
	if(strfind("molotov",WeaponName,true)!=-1) return WEAPON_MOLTOV;
	for(new WEAPON:i; i <= WEAPON_PARACHUTE; i++)
	{
		switch(i)
		{
			case WEAPON_FIST, (WEAPON:19)..(WEAPON:21), WEAPON_NIGHT_VISION_GOGGLES, WEAPON_THERMAL_GOGGLES: continue;
			default:
			{
				new name[32]; GetWeaponName(i, name);
				if(strfind(name,WeaponName,true) != -1) return i;
			}
		}
	}
	return UNKNOWN_WEAPON;
}



//==============================================================================
MessageToAdmins(color,const string[])
{
	foreach(new i : Player) if (PlayerInfo[i][Level] > 0) SendClientMessage(i, color, string);
	return 1;
}

MessageTo4(color,const string[])
{
	foreach(new i : Player) if (PlayerInfo[i][Level] > 3) SendClientMessage(i, color, string);
	return 1;
}

MessageToTwice(color,const string[])
{
	foreach(new i : Player) if (PlayerInfo[i][Level] > 0 || PlayerInfo[i][Helper] == 1) SendClientMessage(i, color, string);
	return 1;
}
MessageTo5(color,const string[])
{
	foreach(new i : Player) if (PlayerInfo[i][Level] > 4) SendClientMessage(i, color, string);
	return 1;
}
MessageTo6(color,const string[])
{
	foreach(new i : Player) if (PlayerInfo[i][Level] > 5) SendClientMessage(i, color, string);
	return 1;
}

CMDMessageToAdmins(playerid, const command[])
{
    if(hidden[playerid]) return 1;

	new string[128];
	if(PlayerInfo[playerid][Helper] == 1) format(string, _, "(MOD) %s - /%s",PlayerInfo[playerid][Nick],command);
	else if(PlayerInfo[playerid][Level] > 0) format(string, _, "(ADM) %s - /%s",PlayerInfo[playerid][Nick],command);

	strreplace(string, "[", "(");
	strreplace(string, "]", ")");

	ACMD_MSG(string);
	return 1;
}

//==============================================================================

SavePlayer(playerid)
{
	if(IsABOT[playerid]) return 1;
	if(PlayerInfo[playerid][LoggedIn] && !PlayerInfo[playerid][is_undercover])
	{
	    new aid = PlayerInfo[playerid][AID];
		new strr[21], strr2[6], strr3[10], strr4[4], pq[11];
		for(new i = 0 ; i < 5; i++)
		{
		    format(pq, _, "%s%02d", pq, QuestProgress[playerid][i]);
		}
		for(new i = 0 ; i < 20; i++) format(strr, _, "%s%d", strr, !!Bit_Get(ClassUpgrade[playerid], i));
		ClassUpgradeDB[playerid] = strr;
		for(new i = 0 ; i < 5; i++) format(strr2, _, "%s%d", strr2, !!Bit_Get(QuestDone[playerid], i));
		QuestDoneDB[playerid] = strr2;
		for(new i = 0 ; i < 9; i++) format(strr3, _, "%s%d", strr3, !!Bit_Get(ToggleState[playerid], i));
		ToggleStateDB[playerid] = strr3;
		for(new i = 0 ; i < 3; i++) format(strr4, _, "%s%d", strr4, Prest[playerid][i]);
		PrestDB[playerid] = strr4;
		new h, m, s;
		TotalGameTime(playerid, h, m, s);
		new year,month,day;	getdate(year, month, day);
		new qa[680]; format(qa, _, "%d.%d.%d",day,month,year);
		mysql_format(mysql, qa, sizeof(qa),
		"UPDATE `playerbase` SET `jailtime`='%d',`score`='%d',`money`='%d',`kills`='%d',`deaths`='%d',`medkit`='%d',\
		`armourpack`='%d',\
		`laston`='%s',`hours`='%d',`minutes`='%d',`seconds`='%d',`skin`='%d',\
		`useskin`='%d',`ddm`='%d',`dcbdm`='%d',\
		`dsdm`='%d',`head`='%d',`dmusickit`='%d',`inclan` ='%d',\
		`clanlead`='%d',`clanown`='%d',`clancoown`='%d',`crank` ='%d',`classes`='%s',`XP`='%d',`VPB`='%d',`license`='%d'\
		WHERE `id`=%d LIMIT 1",\
		PlayerInfo[playerid][JailTime],
		GetPlayerScore(playerid),
		PlayerInfo[playerid][Cash],
		PlayerInfo[playerid][Kills],
		PlayerInfo[playerid][Deaths],
		PlayerInfo[playerid][MedKit],
		PlayerInfo[playerid][ArmourP],
		qa,
		h,
		m,
		s,
		PlayerInfo[playerid][Skin],
		PlayerInfo[playerid][UseSkin],
		PlayerInfo[playerid][ddm],
		PlayerInfo[playerid][dcbdm],
		PlayerInfo[playerid][dsdm],
		PlayerInfo[playerid][Headshots],
		dmusickit[playerid],
		PlayerInfo[playerid][InClan],PlayerInfo[playerid][ClanLead],PlayerInfo[playerid][ClanOwn],PlayerInfo[playerid][ClanCoOwn], \
		PlayerInfo[playerid][cRank],
		ClassUpgradeDB[playerid],
		PlayerInfo[playerid][XP],
		PlayerInfo[playerid][VPB],
		PlayerInfo[playerid][License],
		aid);
		mysql_tquery(mysql, qa, "", "");

        mysql_format(mysql, qa, sizeof(qa),
		"UPDATE `playerbase` SET `quests`='%s',`lastip`='%e',`GPCI`='%e',`mute`='%i',`namekey`='%i',`toggles`='%s',`qp`='%s',`pst`='%s' WHERE `id`=%d LIMIT 1",\
		QuestDoneDB[playerid],
		PlayerInfo[playerid][lastip],
		PlayerInfo[playerid][p_GPCI],
		PlayerInfo[playerid][MuteTime],
		PlayerInfo[playerid][namekey],
		ToggleStateDB[playerid],
		pq,
		PrestDB[playerid],
		aid);
		mysql_tquery(mysql, qa, "", "");

		new INI:File = INI_Open(UserPath(playerid));
		INI_SetTag(File,"data");
		INI_WriteInt(File,"fist", PlayerKills[playerid][fist]);
		INI_WriteInt(File,"ak47", PlayerKills[playerid][ak47]);
		INI_WriteInt(File,"m4", PlayerKills[playerid][m4]);
		INI_WriteInt(File,"rpg", PlayerKills[playerid][rpg]);
		INI_WriteInt(File,"chainsaw", PlayerKills[playerid][chainsaw]);
		INI_WriteInt(File,"grenade", PlayerKills[playerid][grenade]);
		INI_WriteInt(File,"satchel", PlayerKills[playerid][satchel]);
		INI_WriteInt(File,"knife", PlayerKills[playerid][knife]);
		INI_WriteInt(File,"molotov", PlayerKills[playerid][molotov]);
		INI_WriteInt(File,"deagle", PlayerKills[playerid][deagle]);
		INI_WriteInt(File,"shotgun", PlayerKills[playerid][shotgun]);
		INI_WriteInt(File,"sawnoff", PlayerKills[playerid][sawnoff]);
		INI_WriteInt(File,"combat", PlayerKills[playerid][combat]);
		INI_WriteInt(File,"smg", PlayerKills[playerid][smg]);
		INI_WriteInt(File,"tec9", PlayerKills[playerid][tec9]);
		INI_WriteInt(File,"mp5", PlayerKills[playerid][mp5]);
		INI_WriteInt(File,"rifle", PlayerKills[playerid][rifle]);
		INI_WriteInt(File,"sniper", PlayerKills[playerid][sniper]);
		INI_WriteInt(File,"ZHelps", PlayerInfo[playerid][ZHelps]);
		INI_WriteInt(File,"MKSpree", PlayerInfo[playerid][MKSpree]);
		INI_WriteInt(File,"MDSpree", PlayerInfo[playerid][MDSpree]);
		INI_WriteInt(File,"MCSpree", PlayerInfo[playerid][MCSpree]);
		INI_WriteInt(File,"ZCaptures", PlayerInfo[playerid][ZCaptures]);
		INI_WriteInt(File,"m9", PlayerKills[playerid][m9]);
		INI_WriteInt(File,"sm9", PlayerKills[playerid][sm9]);
		INI_Close(File);
	}
	return 1;
}

//==============================================================================

//=====================[ SAVING DATA ] =========================================


//==============================================================================
GiveCash(playerid,cash)
{
	PlayerInfo[playerid][Cash] +=cash;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid,PlayerInfo[playerid][Cash]);
	return cash;
}

SyncCash(playerid)
{
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid,PlayerInfo[playerid][Cash]);
}

GetCash(playerid)
{
	return PlayerInfo[playerid][Cash];
}

COD_BAN(id, const admin[], const resa[])
{
	new Year, Month, Day;
	getdate(Year, Month, Day);
	new Hour, Minute;
	gettime(Hour, Minute);
	new tima[80];
	format(tima, _, "%d/%d/%d | %02d:%02d", Day, Month, Year, Hour, Minute);
	new Query[300];
	mysql_format(mysql, Query, sizeof(Query), "INSERT INTO `bans` (`b_name`,`b_ip`,`b_admin`,`b_reason`,`b_time`,`expire`) VALUES ('%s','%s','%s','%s','%s','-1')",PlayerInfo[id][Nick],PlayerInfo[id][lastip],admin,resa,tima);
	mysql_tquery(mysql, Query);
	KickX(id);
	return 1;
}

COD_TBAN(id, const admin[], const resa[], unbantime)
{
	new Year, Month, Day;
	getdate(Year, Month, Day);
	new Hour, Minute;
	gettime(Hour, Minute);
	new tima[80];
	format(tima, _, "%d/%d/%d | %02d:%02d", Day, Month, Year, Hour, Minute);
	new Query[300];
	mysql_format(mysql, Query, sizeof(Query), "INSERT INTO `bans` (`b_name`,`b_ip`,`b_admin`,`b_reason`,`b_time`,`expire`) VALUES ('%s','%s','%s','%s','%s','%d')",PlayerInfo[id][Nick],PlayerInfo[id][lastip],admin,resa,tima,unbantime);
	mysql_tquery(mysql, Query);
	KickX(id);
	return 1;
}

KickX(playerid)
{
	SetTimerEx("KickDelay",400,false,"d",playerid);
	return 1;
}
forward KickDelay(playerid);
public KickDelay(playerid) Kick(playerid),AlreadyKicked[playerid] = false;

PrestigeDialog(playerid)
{
	new str[260];
	strcat(str,"\n{1B879E}Deagle\n");
	strcat(str,"{1B879E}Combat Shotgun\n{1B879E}Uzi\n");
	strcat(str,"{1B879E}Tec-9\n{1B879E}AK-47\n");
	strcat(str,"{1B879E}M4\n{1B879E}Coutnry Rifle\n");
	strcat(str,"{1B879E}Sniper Rifle\n{1B879E}Grenades\n");
	ShowPlayerDialog(playerid, 233, DIALOG_STYLE_LIST,"Choose a Prestige Weapons",str,"Choose","Back");
}

PrestigeWeapons(playerid)
{
	switch(Prest[playerid][0])
	{
		case P_DEAG: GivePlayerWeapon(playerid, WEAPON_DEAGLE, 200);
		case P_SPAZ: GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 200);
		case P_UZI: GivePlayerWeapon(playerid, WEAPON_UZI, 200);
		case P_TEC: GivePlayerWeapon(playerid, WEAPON_TEC9, 200);
		case P_AK: GivePlayerWeapon(playerid, WEAPON_AK47, 200);
		case P_M4: GivePlayerWeapon(playerid, WEAPON_M4, 200);
		case P_RIFLE: GivePlayerWeapon(playerid, WEAPON_RIFLE, 200);
		case P_SNIPER: GivePlayerWeapon(playerid, WEAPON_SNIPER, 200);
		case P_GRENADE: GivePlayerWeapon(playerid, WEAPON_GRENADE, 2);
	}
	switch(Prest[playerid][1])
	{
		case P_DEAG: GivePlayerWeapon(playerid, WEAPON_DEAGLE, 200);
		case P_SPAZ: GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 200);
		case P_UZI: GivePlayerWeapon(playerid, WEAPON_UZI, 200);
		case P_TEC: GivePlayerWeapon(playerid, WEAPON_TEC9, 200);
		case P_AK: GivePlayerWeapon(playerid, WEAPON_AK47, 200);
		case P_M4: GivePlayerWeapon(playerid, WEAPON_M4, 200);
		case P_RIFLE: GivePlayerWeapon(playerid, WEAPON_RIFLE, 200);
		case P_SNIPER: GivePlayerWeapon(playerid, WEAPON_SNIPER, 200);
		case P_GRENADE: GivePlayerWeapon(playerid, WEAPON_GRENADE, 2);
	}
	switch(Prest[playerid][2])
	{
		case P_DEAG: GivePlayerWeapon(playerid, WEAPON_DEAGLE, 200);
		case P_SPAZ: GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 200);
		case P_UZI: GivePlayerWeapon(playerid, WEAPON_UZI, 200);
		case P_TEC: GivePlayerWeapon(playerid, WEAPON_TEC9, 200);
		case P_AK: GivePlayerWeapon(playerid, WEAPON_AK47, 200);
		case P_M4: GivePlayerWeapon(playerid, WEAPON_M4, 200);
		case P_RIFLE: GivePlayerWeapon(playerid, WEAPON_RIFLE, 200);
		case P_SNIPER: GivePlayerWeapon(playerid, WEAPON_SNIPER, 200);
		case P_GRENADE: GivePlayerWeapon(playerid, WEAPON_GRENADE, 2);
	}

}
Play(playerid)
{
	PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
}

Float:GetDistanceFromPointToPoint(Float:X,Float:Y,Float:Z,Float:tX,Float:tY,Float:tZ){
	return Float:floatsqroot((tX-X)*(tX-X)+(tY-Y)*(tY-Y)+(tZ-Z)*(tZ-Z));
}
CMD:fix(playerid)
{
	if(gClass[playerid] != ENGINEER) return ERR(playerid,"Only engineer can use this command");
	if(GetPVarInt(playerid,"VEHFIX") > 3) return ERR(playerid,"You can't use this command again");
	new remain = GetTickCount() - PlayerInfo[playerid][FIX_CMD];
	if( remain < 120000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use this command again", (120000 - remain) / 1000);
		return 1;
	}
	new Float:x,Float:y,Float:z, kk = GetPlayerTeam(playerid), d;
	GetPlayerPos(playerid,x,y,z);
	new Float:VehHP;
	foreach(new i : Player)
	{
	    new vid = GetPlayerVehicleID(i);
		if(vid != 0)
		{
			if(GetPlayerTeam(i) == kk)
			{
				if(IsPlayerInRangeOfPoint(i,12,x,y,z))
				{
					GetVehicleHealth(vid, VehHP);
					RepairVehicle(vid);
					SetVehicleHealth(vid,VehHP+500);
					SendClientMessage(i,Lg,"* Engineer: %s(%d) has fixed your vehicle (+500HP).",PlayerInfo[playerid][Nick],playerid);
					d ++;
					PlayerPlaySound(i,1133,0.0,0.0,0.0);
				}
			}
		}
	}
	if(d != 0)
	{
		SetPVarInt(playerid,"VEHFIX",GetPVarInt(playerid,"VEHFIX")+1);
		PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
		SendClientMessage(playerid,Lg,"* Fixed %d friendly vehicles in range.",d);
		PlayerInfo[playerid][FIX_CMD] = GetTickCount();
	}else ERR(playerid,"No nearby friends in range.");
	return 1;
}

CMD:fb(playerid)
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(!InArena(playerid, NON)) return ERR(playerid,"You cant use this command in death match arena");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in events");
	if(Tryg3D::GetPlayerSpeed(playerid) > 15.0) return 1;
	if(gClass[playerid] != JET || !Bit_Get(ClassUpgrade[playerid], A_JET)) return ERR(playerid,"You need to be an Elite JetTrooper to use this cmd.");
	new remain = GetTickCount() - PlayerInfo[playerid][FBCMD];
	if( remain < 60000 )
	{
		SendClientMessage(playerid, RED, "Please wait (%d) second(s) to use flash again", (60000 - remain) / 1000);
		return 1;
	}
	PlayerInfo[playerid][FBCMD] = GetTickCount();
	new Float:Mz[3];
	GetPlayerPos(playerid,Mz[0],Mz[1],Mz[2]);
	new kk = GetPlayerTeam(playerid);
	foreach(new i : Player)
	{
		if(kk != GetPlayerTeam(i))
		{
			if(IsPlayerInRangeOfPoint(i,30.0,Mz[0],Mz[1],Mz[2]))
			{
				Flashes[playerid] ++;
				if(QuestContent[2] == CONTENT_FBANG)
				{
				    QuestProgress[playerid][2] ++;
				    if(Flashes[playerid] == 25)
				    {
				    	if(!Bit_Get(QuestDone[playerid], 2))
				    	{
				    	    Bit_Let(QuestDone[playerid], 2);
				    	    SendClientMessage(playerid, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 3 and got $50k & 100XP.");
				    	    TextDrawHideForPlayer(playerid,Quest[2]);
				    	    PlayerInfo[playerid][XP] += 100;
				    	    GiveCash(playerid, 50000);
				    	}
					}
				}
				PlayerTextDrawShow(i, FlashTD[i]);
				WhiteLevel[i] = 10;
				UpdateLabelText(i);
				SetPlayerDrunkLevel(i, 2500);
				SetTimerEx("DecreaseFlash", 600, false, "d", i);
			}
		}
	}
	return 1;
}
CMD:placemine(playerid)
{
	if(HasJoined(playerid)) return ERR(playerid,"You cannot use this cmd while in a clan war");
	if(!InArena(playerid, NON)) return ERR(playerid,"You cant use this command in death match arena");
	if(PlayerInfo[playerid][Dead]) return ERR(playerid,"You cannot place mines while dead.");
	if(inevent[playerid] > 0) return ERR(playerid,"You can't use this command in events");
	if(gClass[playerid] == ENGINEER || gClass[playerid] == RIFLEMAN)
	{

		if(IsPlayerInAnyVehicle(playerid)) return ERR(playerid,"You need to be onfoot");
		if(AvailableMines[playerid] < 1) return ERR(playerid,"You have already placed all of your available mines.");
		new Float:x,Float:y,Float:z,Float:a,id = -1,msg[256];
		GetPlayerPos(playerid,x,y,z);
		GetPlayerFacingAngle(playerid,a);
		for(new xx=0; xx < (MAX_MINES); xx ++){
			if(Mine[xx][m_used] == false) {id = xx; break;} }
		if(id == -1) return ERR(playerid,"Max mines reached try again later");
		foreach(new t: PlacedMines) if(GetDistanceFromPointToPoint(x,y,z,Mine[t][m_x],Mine[t][m_y],Mine[t][m_z]) < 200) return ERR(playerid,"There is a mine placed somewhere around, find a different location.");
		new sz = sizeof(BASERAPE);
		for(new zo = 0; zo< sz; zo++) if(IsPlayerInArea(playerid, BASERAPE[zo][MinXX], BASERAPE[zo][MinYY], BASERAPE[zo][MaxXX], BASERAPE[zo][MaxYY])) return ERR(playerid,"You can't place mine in bases");
		format(msg, _, "Mine\nPlaced by %s", PlayerInfo[playerid][Nick]);
		Iter_Add(PlacedMines,id);
		Mine[id][m_used] = true;
		AvailableMines[playerid]--;
		Mine[id][m_player] = playerid;
		x += (1 * floatsin(-a, degrees));
		y += (1 * floatcos(-a, degrees));
		Mine[id][m_x] = x;
		Mine[id][m_y] = y;
		Mine[id][m_z] = z;
		Mine[id][m_object] = CreateDynamicObject(1213,x,y,z-1.0,0,0,0);
		IsAMine[Mine[id][m_object]] = true;
		Mine[id][m_object2] =  CreateDynamicObject(19290,x,y,z-0.9,0,0,0,-1,-1,-1,200.0,200.0);
		IsAMine[Mine[id][m_object2]] = true;
		Mine[id][m_label] = CreateDynamic3DTextLabel(msg, red, x,y,z, 20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0,-1,-1,-1,100.0);
		cmd_bomb(playerid);
	}
	else return ERR(playerid,"Only engineers/rifleman can use this command");
	return 1;
}
CMD:removemine(playerid)
{
	foreach(new o: PlacedMines)
	{
		if(GetPlayerDistanceFromPoint(playerid,Mine[o][m_x],Mine[o][m_y],Mine[o][m_z]) < 4)
		{
			if(Mine[o][m_player] == playerid)
			{
				Mine[o][m_used] = IsAMine[Mine[o][m_object2]] = IsAMine[Mine[o][m_object]] = false;
				DestroyDynamicObject(Mine[o][m_object2]);
				DestroyDynamicObject(Mine[o][m_object]);
				Mine[o][m_object2] = Mine[o][m_object] = -1;
				DestroyDynamic3DTextLabel(Mine[o][m_label]);
				Mine[o][m_player] = INVALID_PLAYER_ID;
				Iter_Remove(PlacedMines, o);
				GameTextForPlayer(playerid,"~g~Explosive Mine Removed",5000,5);
				AvailableMines[playerid]++;
			}
			else SendClientMessage(playerid,Dred,"|ERROR:| That mine doesn't belong to you!");
		}
		else SendClientMessage(playerid,Dred,"|ERROR:| You are not next to your mine or you didn't plant one");
	}
	return 1;
}
CheatKick(playerid, const reason[])
{
	new msg[200];
	format(msg, _, "{00FF00}<Anti-Cheat>: {FFFFFF}%s(%d) has been kicked for %s.", PlayerInfo[playerid][Nick], playerid, reason);
	AntiCheatNotification(-1, msg);
	Kick(playerid);
}

CMD:armypackage(playerid,params[])
{
	if(!InArena(playerid, NON)) return SendClientMessage(playerid,Dred,"* You cannot use this cmd while in a dm area!");
	if(gClass[playerid] != Assault) return ERR(playerid,"This command is only for Assault.");
	if(inevent[playerid] > 0) return ERR(playerid,"You cannot use this command in an event.");
	if(Iter_Contains(PUBGEvent, playerid)) return ERR(playerid,"This command cannot be used in PUBG event.");
	if(HasJoined(playerid)) return ERR(playerid,"This command is disabled right now.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED,"You can't call army package inside a vehicle.");
	if(armypackused[playerid]) return SendClientMessage(playerid, RED,"Only one package per spawn is allowed.");
	new id; id = -1;
	for(new i = 0; i < MAX_CRATES; i++)
	{
		if(!crateexists[i])
		{
			id = i;
			crateexists[i] = true;
			break;
		}
	}
	if(id == -1) return SendClientMessage(playerid, RED, "Please try to again later");
	armypackused[playerid] = true;
	SendClientMessage(playerid, COLOR_GREEN,"Army package used, wait 15 seconds for it to drop.");
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid ,x,y,z);
	new obj = CreateDynamicObject(18728, x, y, z, 0, 0, 0, -1, -1, -1, 200.0, 0.0);
	SetTimerEx("DropPackage", 29*1000, false, "fffii", x,y,z, obj, id);
	new angle = random(360);
	pCarePackage[id][PlaneMoveStage] = false;
	pCarePackage[id][CarePackageLand][0] = x;
	pCarePackage[id][CarePackageLand][1] = y;
	pCarePackage[id][CarePackageLand][2] = z-1.5;
	pCarePackage[id][CarePackageRotation] = angle;
	pCarePackage[id][CarePackageInterior] = GetPlayerInterior(playerid);
	pCarePackage[id][CarePackageWorld] = GetPlayerVirtualWorld(playerid);
	new Float:a; GetPlayerFacingAngle(playerid,a);
	x += (800 * floatsin(-a, degrees));
	y += (800 * floatcos(-a, degrees));
	pCarePackage[id][CarePackagePlane] = CreateObject(14553,x,y,z +75,11.9,0,a);
	MoveObject(pCarePackage[id][CarePackagePlane], pCarePackage[id][CarePackageLand][0],pCarePackage[id][CarePackageLand][1],pCarePackage[id][CarePackageLand][2]+75, 35, 11.9, 0, a);
	return 1;
}

public OnObjectMoved(objectid)
{
    for(new i = 0; i < MAX_CRATES; i++)
	{
		if(objectid == pCarePackage[i][CarePackagePlane]) {
			if(pCarePackage[i][PlaneMoveStage] == false) {
				pCarePackage[i][PlaneMoveStage] = true;
				new Float:X,Float:Y,Float:Z,Float:PlaneFlyPos[2],Float:rx,Float:ry,Float:rz;
				GetObjectPos(objectid, X, Y, Z);
				GetObjectRot(objectid, rx,ry,rz);

				PlaneFlyPos[0] = pCarePackage[i][CarePackageLand][0];
				PlaneFlyPos[1] = pCarePackage[i][CarePackageLand][1];
				X -= (700 * floatsin(-rz, degrees));
				Y -= (700 * floatcos(-rz, degrees));
				MoveObject(objectid, X,Y, Z+120, 30, -8.7400, 0, rz);
				GetObjectPos(objectid, X, Y, Z);
				pCarePackage[i][CarePackageParachute] = CreateObject(2903,X,Y,Z,0,0,random(660), 500.00);
				MoveObject(pCarePackage[i][CarePackageParachute], pCarePackage[i][CarePackageLand][0], pCarePackage[i][CarePackageLand][1], pCarePackage[i][CarePackageLand][2], 8, 0, 0, 1000);
				return 1;
			} else {
				DestroyObject(objectid);
				pCarePackage[i][CarePackagePlane] = -1;
				return 1;
			}
		} else if(objectid == pCarePackage[i][CarePackageParachute])
		{
			DestroyObject(objectid);
			pCarePackage[i][CarePackageParachute] = -1;
			return 1;
		}
	}
    for(new i = 0; i < MAX_GRENADES; i++)
    {
		if(objectid == GrenadeInfo[i][GrenadeID] && GrenadeInfo[i][IsValidGrenade])
	    {
			new
				Float:lz = 0,
				Float:pi = 0,
				Float:dz = 0,
				Float:ze = 0,
                Float:pw = 0,
                Float:wp = 0;

	        pi = VectorSize(GrenadeInfo[i][FinalPointX] - GrenadeInfo[i][StartPointX], GrenadeInfo[i][FinalPointY] - GrenadeInfo[i][StartPointY], 0x0);

	        dz = 0x2 * pi / (floatsqroot(0x2 - (GrenadeInfo[i][FinalPointZ] - GrenadeInfo[i][StartPointZ])) / floatsqroot(0x2) + 1.0);

            lz = atan2(GrenadeInfo[i][FinalPointY] - GrenadeInfo[i][StartPointY], GrenadeInfo[i][FinalPointX] - GrenadeInfo[i][StartPointX]);

			GrenadeInfo[i][Trajectory] *= pi;

			wp = GrenadeInfo[i][Trajectory] * floatsin(lz, degrees);

	        ze = 0x2 - floatpower(floatsqroot(0x2) * ((0x2 * GrenadeInfo[i][Trajectory] / dz) - 0x1), 0x2);

	        pw = GrenadeInfo[i][Trajectory] * floatcos(lz, degrees);

	        GrenadeInfo[i][Trajectory] /= pi;

	        if(0x1 + 0.01 >= GrenadeInfo[i][Trajectory])
			{
				MoveObject(GrenadeInfo[i][GrenadeID], pw + GrenadeInfo[i][StartPointX], wp + GrenadeInfo[i][StartPointY], ze + GrenadeInfo[i][StartPointZ], 0x11);
			}
			else
	        {
	            UsingLauncher[i] = false;

				GrenadeInfo[i][IsValidGrenade] = false;

				DestroyObject(GrenadeInfo[i][GrenadeID]);

				GrenadeInfo[i][GrenadeID] = -1;

				CreateExplosion(GrenadeInfo[i][FinalPointX], GrenadeInfo[i][FinalPointY], GrenadeInfo[i][FinalPointZ], 0, 4.5);
	        	return 1;
	        }
	        GrenadeInfo[i][Trajectory] += (floatpower(0x11, 0x0) / 0xA);
		}
		break;
	}
	for(new i = 1; i < MAX_TEAMS-1; i++)
	{
		if(objectid == Missile[i])
		{
	        new Float:xp, Float:y, Float:z;
	        GetObjectPos(objectid, xp,y,z);
	        new zd = ZeppelinDriver[i];
	        new tt = gTeam[zd], count;
	        new xx = PlayerInfo[zd][InClan];
	        new str[96];
	        new name[24]; strcat(name, PlayerInfo[zd][Nick]);
	        foreach(new x : ARENA[NON])
			{
				if(!PlayerInfo[x][OnDuty])
				{
					if(GetPlayerTeam(x) != tt)
					{
						if(xx != -1) if(PlayerInfo[x][InClan] == xx) { goto skipit;}
						if(!AntiSK[x])
						{
							if(IsPlayerInRangeOfPoint(x,15,xp,y,z))
							{
								switch(GetPlayerState(x))
								{
									case PLAYER_STATE_ONFOOT, PLAYER_STATE_DRIVER, PLAYER_STATE_PASSENGER, PLAYER_STATE_SPAWNED:
									{
									    new vehicleid = GetPlayerVehicleID(x);
										SetPlayerHealth(x,0);
										SetVehicleHealth(vehicleid, 100);
										SendDeathMessage(zd, x, 40);
										format(str, _, "~w~~h~%s ~w~has killed ~w~%s with ~b~Zeppelin", name, PlayerInfo[x][Nick]);
										BoxMSG(str);
										count++;
									}
								}
							}
						}
						skipit:{}
					}
				}
			}
			if(count > 0)
			{
				ConnectKills[zd]  += count;
				PlayerInfo[zd][Kills] += count;
				Streak[zd] += count;
				if(cPerk[zd][P_MONEY] > 0)
				{

					SendClientMessage(zd, COLOR_YELLOW, "[Clan Perk]: You got double the total kills money.");
					GiveCash(zd,1500*count);
				}
				SetPlayerScore(zd, GetPlayerScore(zd)+count);
				SendClientMessage(zd, -1, "{80FF00}[Zeppelin] {FFFFFF}You killed {80FF00}%d{FFFFFF} with the drop, %d score and $%d", count, count, count * 1500);
				if(xx != -1)
				{
					new rnn;
					rnn = random(1500)*count;
					new msg[96];
					format(msg, _, "* Clan has recieved %d$ from %s Zippelin kills!", rnn, name);
					ClanMSG(xx,msg);
					foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
				}
			}
	        CreateExplosion(xp, y, z, 6, 100.0);
	        DestroyObject(objectid);
	        Missile[i] = -1;
	        break;
		}
		if(objectid == BehemethObject[i])
		{
		    if(BehemethRotating[i]) BehemethRotating[i] = 0;
		    if(BehemethDead[i])
			{
				BehemethDead[i] = 0;
				DestroyObject(BehemethObject[i]);
				BehemethObject[i] = CreateObject(9958, BehemSpawn[i][0], BehemSpawn[i][1], 150.00, 0.0000, 0.0000, 0.0000, 1000.00);
				BehemethHp[i] = 2500;
				ZP_Available[i] = 1;
			}
		    else if(ZeppelinDriver[i] == -1)
		    {
		        if(!ZP_Available[i])
		        {
		            ZP_Available[i] = 1;
		        }
		    }
		    break;
		}
	}
    return 1;
}

IsPlayerAiming(playerid)
{
    new anim = GetPlayerAnimationIndex(playerid);
    switch(anim)
    {
        case 1160..1163: {}
        case 1167,1365,1643,1453,220: {}
        default: { return 0; }
    }
    return 1;
}

public OnDynamicObjectMoved(objectid)
{
	if(IsValidDynamicObject(objectid))
	{
		if(GetDynamicObjectModel(objectid) == 345)
		{
			new id = INVALID_PLAYER_ID, rightid;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(PlayerInfo[i][MMLOBJECT] == objectid)
				{
					if(IsPlayerConnected(i)) id = i;
					rightid = i;
					break;
				}
			}
			if(id == INVALID_PLAYER_ID)
			{
				DestroyDynamicObject(objectid);
				PlayerInfo[rightid][MMLOBJECT] = -1;
				return 1;
			}
			if(!IsPlayerConnected(rightid))
			{
				DestroyDynamicObject(objectid);
				PlayerInfo[rightid][MMLOBJECT] = -1;
				return 1;
			}
			new Float:x,Float:y,Float:z,
			tar = PlayerInfo[id][MMLTARGET],strz[256],
			vt = GetPlayerVehicleID(tar);
			GetDynamicObjectPos(objectid,x,y,z);
			if(!IsPlayerConnected(tar))
			{

				DestroyDynamicObject(objectid);
				PlayerInfo[id][MMLOBJECT] = -1;
				CreateExplosion(x,y,z,7,5.0);
				SendClientMessage(id,id,"* Player has left the game");
				return 1;
			}
			new xx = PlayerInfo[id][InClan];
   			if(xx != -1) if(PlayerInfo[tar][InClan] == xx)
   			{
				DestroyDynamicObject(objectid);
				PlayerInfo[id][MMLOBJECT] = -1;
				CreateExplosion(x,y,z,7,5.0);
				SendClientMessage(id,id,"* Player is in your clan, cannot hit.");
				return 1;
   			}
			if(GetVehicleDistanceFromPoint(vt,x,y,z) < 10)
			{
			    if(InZeppelin[tar] > 0)
			    {
					new i = GetPlayerTeam(tar);
			        if(BehemethHp[i] > 400)
				    {
						BehemethHp[i] -= 400;
						SetPlayerProgressBarValue(id, ZP_HPBar[id], BehemethHp[i]);
						ShowPlayerProgressBar(id, ZP_HPBar[id]);
						LastZPShown[id] = GetTickCount();
						ZPShown[id] = i;
					}
					else
					{
					    if(BehemethDead[i] == 0)
					    {
					        BehemethDead[i] = 1;
							KillTimer(ZPTimer[ZeppelinDriver[i]]);
							OnZP_HeatTimer[i] = 0;
							new tm = gTeam[id];
					        new Float:xxx,Float:yy,Float:zz;
							GetObjectPos(BehemethObject[i], xxx, yy, zz);
					        MapAndreas_FindZ_For2DCoord(xxx,yy,zz);
					        MoveObject(BehemethObject[i], xxx,yy,zz, 5, 0, 60, 60);
					        SetTimerEx("Explosions", 400, false, "i", i);
					        InZeppelin[ZeppelinDriver[i]] = 0;
							new const DRIVER = ZeppelinDriver[i];
							HidePlayerProgressBar(DRIVER, ZP_HPBar[DRIVER]);
							HidePlayerProgressBar(DRIVER, ZP_CooldownBar[DRIVER]);
							SetPlayerHealth(ZeppelinDriver[i], 0);
							new xh = PlayerInfo[id][InClan];
							if(xh != -1) AddClanPoints(id, 12);
							new str[90];
							format(str, _, "~r~%s's ~w~Zeppelin was taken down by ~g~%s", GetTeamName2(i), GetTeamName2(tm));
							BoxMSG(str);
							PlayerInfo[id][XP] += 50;
							GiveCash(id, 25000);
							SendClientMessage(id,Lg,"You got 50 XP and $25000 for taking down the Zeppelin.");
					        foreach(new j : Player)
							{
								if(IsPlayerInRangeOfPoint(j, 150, xx,yy,zz)) PlayerPlaySound(j, 14403, 0,0,0);
								if(gTeam[j] == tm)
								{
									SetPlayerScore(j, GetPlayerScore(j)+5);
									SendClientMessage(j, -1, "{FFFFFF}<!> Your {AD1640}team {FFFFFF}got {AD1640}5 score {FFFFFF}for taking down a {AD1640}Zeppelin.");
								}
					        }
							ZeppelinDriver[i] = -1;
					    }
					}
			    }
				else if(IsPlayerInAnyVehicle(tar))
				{
                    new nam[2][24]; strcat(nam[0], PlayerInfo[tar][Nick]);
                    strcat(nam[1], PlayerInfo[id][Nick]);
				 	SendClientMessage(id,Lg,"[AMML KILL] %s(%d) has been killed by your missile you got 1 score & 2000$",nam[0],tar);
					SendClientMessage(tar,Dred,"* You have been killed by AMML ( Anti aircraft missile launcher )");
					GiveCash(id,2000);
					PlayerInfo[id][Kills]++;
					Streak[id]++;
					SetPlayerHealth(tar,0.0);
					AAMLKills[id] ++;
					if(QuestContent[3] == CONTENT_AAML)
					{
					    QuestProgress[id][3] ++;
					    if(AAMLKills[id] == 17)
					    {
					    	if(!Bit_Get(QuestDone[id], 3))
					    	{
					    	    Bit_Let(QuestDone[id], 3);
					    	    SendClientMessage(id, COLOR_YELLOW, "[Daily Quest]: You have finished Quest 4 and got $50k & 100XP.");
					    	    TextDrawHideForPlayer(id,Quest[3]);
					    	    PlayerInfo[id][XP] += 100;
					    	    GiveCash(id, 50000);
					    	}
						}
					}
					MMLKILL[id] ++;
					PlayerInfo[tar][Dead] = 1;
					SetVehicleHealth(GetPlayerVehicleID(tar),200);
					if(xx != -1)
					{
						new str[256],rnn;
						rnn = random(1500);
						format(str, _, "* Clan has recieved %d$ from %s's kill !", rnn, nam[1]);
						ConnectKills[id] ++;
						ClanMSG(PlayerInfo[id][InClan],str);
						foreach(new j : Player) if(xx == PlayerInfo[j][InClan]) GiveCash(j,rnn);
						if(MMLKILL[id] == 10)
						{
							MMLKILL[id] = 0;
							AddClanPoints(id, 8);
						}
					}
					format(strz, _, "~y~%s ~w~has been killed by ~r~~h~%s's ~w~missile", nam[0], nam[1]);
					BoxMSG(strz);
					SendDeathMessage(id,tar,35);
				}else SendClientMessage(tar,Dred,"* You have managed to avoid the missile.");
				PlayerInfo[id][MMLOBJECT] = -1;
				DestroyDynamicObject(objectid);
				CreateExplosion(x,y,z,7,5.0);
			}
			else
			{
				if(GetVehicleDistanceFromPoint(vt,x,y,z) > 180)
				{
					SendClientMessage(tar,Dred,"* You have managed to avoid the missile.");
					CreateExplosion(x,y,z,1,5.0);
					DestroyDynamicObject(objectid);
					PlayerInfo[id][MMLOBJECT] = -1;
				}else
				{
					WMML[vt][V_SPEED] +=16;
					GetVehiclePos(vt,x,y,z);
					SetDynamicObjectFaceToPlayer(objectid,tar);
					MoveDynamicObject(objectid,x,y,z,WMML[vt][V_SPEED]);
				}
			}
		}
	}
	return 1;
}

CMD:apa(playerid, params[]) return cmd_armypackage(playerid, params);

forward DropPackage(Float:x,Float:y,Float:z,obj, id);
public DropPackage(Float:x,Float:y,Float:z,obj, id)
{
	DestroyDynamicObject(obj);
	ArmyCrate[id] = CreateDynamicObject(964, x, y, z-1.15, 0, 0, 0, -1, -1, -1, 200.0, 0.0);
	armylabel[id] = Create3DTextLabel("Army Crate Drop\nF to use", grey, x, y, z, 40.0, 0, false);
	CrateDespawnTimer[id] = SetTimerEx("DespawnPackage", 60*1000, false, "i", id);
	return 1;
}

forward DespawnPackage(id);
public DespawnPackage(id)
{
	DestroyDynamicObject(ArmyCrate[id]);
	ArmyCrate[id] = -1;
	crateexists[id] = false;
	Delete3DTextLabel(armylabel[id]);
	return 1;
}
